{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":0},{"_id":"source/uploads/Screenshot from 2019-03-19 21-26-16.png","path":"uploads/Screenshot from 2019-03-19 21-26-16.png","modified":0,"renderable":0},{"_id":"source/uploads/Screenshot from 2019-03-19 20-57-25.png","path":"uploads/Screenshot from 2019-03-19 20-57-25.png","modified":0,"renderable":0},{"_id":"themes/next-geek/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next-geek/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/lang-select.js","path":"js/src/lang-select.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next-geek/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556705680819},{"_id":"source/CNAME","hash":"6aa00f57d610b4557d3796a0ec787b6149b8343d","modified":1552809095674},{"_id":"themes/next-geek/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1553160728116},{"_id":"source/favicon.ico","hash":"1d3b2e8527e2e02d155b444bcfb5893f5e721e73","modified":1552809095767},{"_id":"themes/next-geek/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1553160728116},{"_id":"themes/next-geek/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1553160728116},{"_id":"themes/next-geek/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1553160728116},{"_id":"themes/next-geek/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1553160728116},{"_id":"themes/next-geek/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1553160728116},{"_id":"themes/next-geek/README.en.md","hash":"e73c7c434962584359248279fb44e7276b7929e7","modified":1553160728116},{"_id":"themes/next-geek/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1553160728116},{"_id":"themes/next-geek/README.md","hash":"c5d5e78772a0e231f8d316ca8a6c0bec35da52c0","modified":1553160728116},{"_id":"themes/next-geek/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1553160728116},{"_id":"themes/next-geek/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1553160728116},{"_id":"themes/next-geek/.travis.yml","hash":"1a69a0b3ae010b10080069332829205573c64371","modified":1553160728116},{"_id":"themes/next-geek/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1553160728116},{"_id":"themes/next-geek/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1553160728116},{"_id":"themes/next-geek/_config.yml","hash":"ebc4e412f5b671620710cc2e5bcdbb9bc83e33e4","modified":1554139453253},{"_id":"themes/next-geek/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1553160728116},{"_id":"source/_posts/ACM-2017WF-F-Posterize.md","hash":"7eeb7ea3277fc27c2e8b4e0f37ef2994929cd237","modified":1554060726240},{"_id":"source/_posts/C-优先级队列.md","hash":"f4a128dc6634b59afd36731dbf5d5b507593179d","modified":1558592726201},{"_id":"source/_posts/Canvas中像素级别ImageData缩放.md","hash":"6fa312fc9e004335037b23da6580013e48a504d4","modified":1558592804656},{"_id":"source/_posts/CentOS搭建LNMP环境.md","hash":"89610933866be9715fba9271e53d7cce821e4ef9","modified":1554062671659},{"_id":"source/_posts/Fedora搭建LNMP环境.md","hash":"c80de4a21096ce0ee3ce77a8c06927798f924ed2","modified":1554062673085},{"_id":"source/_posts/Fedora26编译内核.md","hash":"f2d75e31baa21f7f2b872776a90ec6fddb24625f","modified":1554060835064},{"_id":"source/_posts/LeetCode-001-Two-Sum.md","hash":"1531586c5bf020b1a1f4a91e684b0bab2976e148","modified":1560442181360},{"_id":"source/_posts/LeetCode-002-Add-Two-Numbers.md","hash":"2e50cdc275fe1f03021723b14a4dc51c474a9406","modified":1560442204573},{"_id":"source/_posts/LeetCode-004-Median-of-Two-Sorted-Arrays.md","hash":"75e91cea0e6aac5b6431038fb3c6a02ff10f2324","modified":1560442232553},{"_id":"source/_posts/LeetCode-003-Longest-Substring-Without-Repeating-Characters.md","hash":"0cadc6056ed2f2f95babb246b77a43dd3743ddd2","modified":1560442219340},{"_id":"source/_data/next.yml","hash":"2630e238fcb7446643d6af84e3b2339d1f35d644","modified":1556899366855},{"_id":"source/_posts/LeetCode-006-ZigZag-Conversion.md","hash":"5d25026ea56f3a84a614bd836ef5dfef54124e26","modified":1560442262050},{"_id":"source/_posts/LeetCode-007-Reverse-Integer.md","hash":"73d57a07bccb762b03cf5da7c272202b70f5e8ac","modified":1560442273686},{"_id":"source/_posts/LeetCode-008-String-to-Integer-atoi.md","hash":"8b422f3a4bc98da34d5421e4f917aec6fae2da0d","modified":1560442295036},{"_id":"source/about/index.md","hash":"98f3d3b4add040d8054fc52b03def44fe7f84e5c","modified":1552809095757},{"_id":"source/_posts/LeetCode-009-Palindrome-Number.md","hash":"1fdd788ddc7daf72d2a38f98953b1ea123f284a8","modified":1560442306696},{"_id":"source/_posts/LeetCode-010-Regular-Expression-Matching.md","hash":"4348102250b4e41adaf09c8e76d17b91c8bed920","modified":1560442321497},{"_id":"source/_posts/LeetCode-012-Integer-to-Roman.md","hash":"b9d723bb58d27707b626acc67caeb29d54f4604b","modified":1560442353110},{"_id":"source/_posts/LeetCode-013-Roman-to-Integer.md","hash":"bfdc4662922b403fa9ca1f8bf99efdc6406768c2","modified":1560442365133},{"_id":"source/_posts/LeetCode-014-Longest-Common-Prefix.md","hash":"d70d6e2b90ca464ee1c4d76beb583a9d609d7f4b","modified":1560442375247},{"_id":"source/_posts/LeetCode-015-3Sum.md","hash":"7718b67cf8b7e428d4a93ff3e5c3c40afe26fd3a","modified":1560442387697},{"_id":"source/_posts/LeetCode-016-3Sum-Closest.md","hash":"81d1e49b8ad0ad49d0813921194fbfff66a7daa2","modified":1560442398983},{"_id":"source/_posts/LeetCode-017-Letter-Combinations-of-a-Phone-Number.md","hash":"095fadd0d3b8da1673ae36a5f0bde45e9b9a6990","modified":1560442408807},{"_id":"source/_posts/LeetCode-026-Remove-Duplicates-from-Sorted-Array.md","hash":"6a426b6af273d6b973d71c675e9410d9bd5d7cb2","modified":1560442463173},{"_id":"source/_posts/LeetCode-011-Container-With-Most-Water.md","hash":"9f08135fa40be16e8fc341eb2ad5aef763a4345f","modified":1560442342673},{"_id":"source/_posts/LeetCode-021-Merge-Two-Sorted-Lists.md","hash":"d79303f158ce2f3c7b5a9c97e07ee69b0e701981","modified":1560442434120},{"_id":"source/_posts/LeetCode-124-Binary-Tree-Maximum-Path-Sum.md","hash":"2a226d16ec31ad3d0ed3ae263b0e164a9766e319","modified":1560442505800},{"_id":"source/_posts/LeetCode-023-Merge-k-Sorted-Lists.md","hash":"db79224ff54241458bd5fd3b7cf5e5e11290a688","modified":1560442446343},{"_id":"source/_posts/LeetCode-125-Valid-Palindrome.md","hash":"7a7c14677d4a16a5551c629bc56def3e3990cc94","modified":1560442518880},{"_id":"source/_posts/LeetCode-169-Majority-Element.md","hash":"95518d2aa66be75d7c8265edf2d49f16b311d6ca","modified":1560442544984},{"_id":"source/_posts/LeetCode-136-Single-Number.md","hash":"6ce0979138843353be3d8a5eb6dfe77aa6124bca","modified":1560442529770},{"_id":"source/_posts/LeetCode-088-Merge-Sorted-Array.md","hash":"ec0702a670b81f816f745cebb2baa546eb98f025","modified":1560442478937},{"_id":"source/_posts/LeetCode-020-Valid-Parentheses.md","hash":"49c0b0149deaf88bad743099f085536872cabc2b","modified":1560442418203},{"_id":"source/_posts/LeetCode-240-Search-a-2D-Matrix-II.md","hash":"d9e46626bad9ee5c1b4a2a8919594a05ffb7c0a5","modified":1560442565634},{"_id":"source/_posts/MNIST入门-手写数字识别问题集锦.md","hash":"68a16773483dd924a45209e2460a696c8ba304d1","modified":1555604797846},{"_id":"source/_posts/MNIST入门-手写数字识别.md","hash":"e4460e3b17e9cc18eda8ac1d27086f390f0ccfd5","modified":1555168228987},{"_id":"source/_posts/Markdown学习笔记.md","hash":"7e8d9ffa85f4c1f8056b1bda86039c850275a386","modified":1553106717277},{"_id":"source/_posts/Python中的异步.md","hash":"c9f5baa1836d33b290cac7b3a9fec1afb55d068f","modified":1552826361498},{"_id":"source/_posts/Tornado中的异步.md","hash":"b2a578d4bdf6abdc4465b344ad407bbc0f3f6abe","modified":1552833299281},{"_id":"source/_posts/SpaceVim中自定义Markdown相关快捷键.md","hash":"e1e236cd20496d9b11d9daaa29aca2a5a0ae47f8","modified":1554170981924},{"_id":"source/_posts/numpy-dot-函数.md","hash":"151c57c8eaf3238eb118b24ed2cbfa7d3efe2c1c","modified":1552809095731},{"_id":"source/_posts/hello-world.md","hash":"1287da342f2d1494036f56c5c8d2a4abdfaa48d4","modified":1552810689742},{"_id":"source/_posts/cannot-start-gnome-tweaks.md","hash":"f7095876682e261d3e0e481bfb969e6bbcecf8b3","modified":1553088071350},{"_id":"source/_posts/机器学习基石-Feasibility-of-Learning.md","hash":"0999eb2337140872c570ea01969242316d56fdd3","modified":1556417696459},{"_id":"source/_posts/机器学习基石-Types-of-Learning.md","hash":"5b9fdd8481132a1e14dee371a58644b2cc1e2174","modified":1554716153894},{"_id":"source/_posts/机器学习基石-PLA算法.md","hash":"0d3f769baed8f610b9e4a001be3623d8633492a1","modified":1554621713563},{"_id":"source/_posts/聚类和K-Means算法.md","hash":"e3fceaceda261bcb83f8fa9c8076e7469831aa61","modified":1554060953991},{"_id":"source/_posts/机器学习概念整理.md","hash":"1f04ebae77c3d1349f5fcfd9c3d0a2ce83c655c8","modified":1552809095744},{"_id":"source/archives/index.md","hash":"c5890c8b58f02aea692752520ae46e08fe1ec656","modified":1552809095767},{"_id":"source/categories/index.md","hash":"e9b956b8d7f514ccc3549b311eb91cab37af2079","modified":1552809095767},{"_id":"source/tags/index.md","hash":"a6a6bb91085a46a219c13e01da8af56d233bf359","modified":1552809095771},{"_id":"source/uploads/avatar.jpg","hash":"1d3b2e8527e2e02d155b444bcfb5893f5e721e73","modified":1552809095771},{"_id":"themes/next-geek/scripts/helpers.js","hash":"f5eceb27ca7e9e7416ca18ef99a3c4609f6b7cfd","modified":1553160728120},{"_id":"themes/next-geek/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1553160728120},{"_id":"themes/next-geek/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1553160728120},{"_id":"themes/next-geek/layout/_layout.swig","hash":"cd44562cc75436d8f905a6f0b85f6d4538523f3d","modified":1553160728116},{"_id":"themes/next-geek/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1553160728120},{"_id":"themes/next-geek/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1553160728120},{"_id":"themes/next-geek/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1553160728120},{"_id":"themes/next-geek/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1553160728120},{"_id":"themes/next-geek/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1553160728120},{"_id":"themes/next-geek/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1553160728120},{"_id":"themes/next-geek/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1553160728120},{"_id":"themes/next-geek/languages/de.yml","hash":"98aa551443b2a61a74b6f2a218635da6d2f6cf57","modified":1553160728116},{"_id":"themes/next-geek/languages/en.yml","hash":"c0b90d66772e79585cd26a81694ad69c16312d6b","modified":1553160728116},{"_id":"themes/next-geek/languages/default.yml","hash":"c0b90d66772e79585cd26a81694ad69c16312d6b","modified":1553160728116},{"_id":"themes/next-geek/languages/fr-FR.yml","hash":"a14d051bbec26cfcae358bdcf1acf62a35fb1a45","modified":1553160728116},{"_id":"themes/next-geek/languages/id.yml","hash":"f8b57daac2e50ace9a6d5051b17208af8139c2ae","modified":1553160728116},{"_id":"themes/next-geek/languages/ja.yml","hash":"0c99ba4ba7d36c43d002342611d2c656ef498582","modified":1553160728116},{"_id":"themes/next-geek/languages/ko.yml","hash":"043951e82997131dd8be40ff2093ef36849ba725","modified":1553160728116},{"_id":"themes/next-geek/languages/pt-BR.yml","hash":"91584764104ef29293117375fc010b1bdbe9aff6","modified":1553160728116},{"_id":"themes/next-geek/languages/pt.yml","hash":"dfd0b8574177346b78cab29db055fbc44ac309dc","modified":1553160728116},{"_id":"themes/next-geek/languages/ru.yml","hash":"98dd9b6ddd88400a7b02cd7e8adb41e7b842bf57","modified":1553160728116},{"_id":"themes/next-geek/languages/zh-Hans.yml","hash":"a539dee5d70f484bd599de804ee78063e51cb760","modified":1553160728116},{"_id":"themes/next-geek/languages/zh-hk.yml","hash":"e8072846fd43beadbae394e30a49aa5c92a0a53b","modified":1553160728116},{"_id":"themes/next-geek/languages/zh-tw.yml","hash":"562141bfe450432131af012baa262a3de79a50bc","modified":1553160728116},{"_id":"themes/next-geek/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1553160728130},{"_id":"themes/next-geek/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1553160728130},{"_id":"themes/next-geek/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1553160728130},{"_id":"source/_posts/LeetCode-005-Longest-Palindromic-Substring.md","hash":"2c9a38fae40782c3d63cc6633f7c07bd704470cb","modified":1560442248860},{"_id":"themes/next-geek/.git/ORIG_HEAD","hash":"af33454a277b3d410d5b673da3a8aa20ec181589","modified":1553160728073},{"_id":"themes/next-geek/.git/config","hash":"05158e6030db608189ab2fff2ccdc3b2e609abfd","modified":1553160728073},{"_id":"source/uploads/Screenshot from 2019-03-19 21-26-16.png","hash":"92ec8d5807175f6f3bfdef909ba07c6a0c42a7be","modified":1553001979687},{"_id":"themes/next-geek/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1553160728073},{"_id":"themes/next-geek/.git/index","hash":"d50f215ebda0d6f0db4eb878ba84eea6372bd43a","modified":1554616594226},{"_id":"themes/next-geek/.git/packed-refs","hash":"65520bd4cff1e28065cf9a55fcb7ec5f729b21dc","modified":1553160728073},{"_id":"themes/next-geek/.git/FETCH_HEAD","hash":"7ceaec9f87f964a9c5ae1c73e807bf8ced80f544","modified":1553160728073},{"_id":"themes/next-geek/.git/COMMIT_EDITMSG","hash":"76fe7d7a0450216f075296d503d7822dc7cc1aa7","modified":1553160728073},{"_id":"themes/next-geek/.git/HEAD","hash":"eb96ca3b429d2872ea0713ebdcfacd4c85cd78c6","modified":1553160728073},{"_id":"themes/next-geek/.github/ISSUE_TEMPLATE.md","hash":"f4d1e85250d3d82f3dac23b747dff132490b6e91","modified":1553160728116},{"_id":"themes/next-geek/.github/PULL_REQUEST_TEMPLATE.md","hash":"e9169b65a7e3392c27562f9e11061a3ab76bb600","modified":1553160728116},{"_id":"themes/next-geek/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1553160728116},{"_id":"source/_posts/LeetCode-011-Container-With-Most-Water/011.png","hash":"ec6e543d9e59f947068ea78c925d2212ec3bb62f","modified":1556588218355},{"_id":"themes/next-geek/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1553160728116},{"_id":"source/_posts/机器学习基石-PLA算法/pla4.png","hash":"e5608d78b5e27c51e53ba40666d7881d7c35e31d","modified":1554618945854},{"_id":"source/_posts/机器学习基石-PLA算法/pla5.png","hash":"1df535a61c883749e0527303324e82be1562546b","modified":1554619002607},{"_id":"source/_posts/机器学习基石-PLA算法/pla3.png","hash":"36c87c8685e3ed57fb4af8dc4cf7fd52b84eb674","modified":1554617597367},{"_id":"themes/next-geek/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553160728123},{"_id":"themes/next-geek/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1553160728120},{"_id":"themes/next-geek/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1553160728120},{"_id":"themes/next-geek/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1553160728120},{"_id":"themes/next-geek/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1553160728120},{"_id":"themes/next-geek/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1553160728120},{"_id":"themes/next-geek/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1553160728120},{"_id":"themes/next-geek/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1553160728120},{"_id":"themes/next-geek/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1553160728120},{"_id":"themes/next-geek/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1553160728120},{"_id":"themes/next-geek/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1553160728116},{"_id":"themes/next-geek/layout/_custom/lang-switch.swig","hash":"307ac34362ce8dd4f40dce035afa0163c5923518","modified":1553160728116},{"_id":"themes/next-geek/layout/_partials/comments.swig","hash":"010ef8c42d2e1a95abc60caf757293ca8eb4a68b","modified":1553160728116},{"_id":"themes/next-geek/layout/_partials/footer.swig","hash":"23ee18b6a85c80527b2c600fe49fe075ad511225","modified":1553160728116},{"_id":"themes/next-geek/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1553160728116},{"_id":"themes/next-geek/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1553160728120},{"_id":"themes/next-geek/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1553160728120},{"_id":"themes/next-geek/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1553160728120},{"_id":"themes/next-geek/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1553160728116},{"_id":"themes/next-geek/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1553160728116},{"_id":"themes/next-geek/layout/_partials/header.swig","hash":"bd03d6b9cbf10fb85cb1feb88081ec3ee729da18","modified":1554137816349},{"_id":"themes/next-geek/layout/_macro/sidebar.swig","hash":"67ea578bb8c2270b0e8d1776bac329e6caa5145c","modified":1553160728116},{"_id":"themes/next-geek/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1553160728116},{"_id":"themes/next-geek/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1553160728116},{"_id":"themes/next-geek/layout/_macro/post.swig","hash":"890644e5834a1e5594b3c2f9cf0a973033aa5f44","modified":1553160728116},{"_id":"themes/next-geek/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1553160728120},{"_id":"themes/next-geek/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1553160728120},{"_id":"themes/next-geek/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1553160728120},{"_id":"source/_posts/机器学习基石-Feasibility-of-Learning/fol5.png","hash":"d733e073826e6adec2d009de5564b66b97e51b35","modified":1556417336830},{"_id":"source/_posts/机器学习基石-Types-of-Learning/tol3.png","hash":"45d97a574ae611634e30166ad5681b67f5f9bb82","modified":1554715842779},{"_id":"source/_posts/机器学习基石-PLA算法/pla1.png","hash":"1426508d18ae0303f315052c2f28d421608b5b0e","modified":1554615135220},{"_id":"source/_posts/机器学习基石-PLA算法/pla6.png","hash":"408f80ee7f54152c7e40281c34cfe1e85bd8c8bc","modified":1554619090150},{"_id":"source/uploads/Screenshot from 2019-03-19 20-57-25.png","hash":"b1208ea8f5a1d3d9a9440c9d5d84e5b443b81d2b","modified":1553000250299},{"_id":"source/_posts/机器学习基石-PLA算法/pla2.png","hash":"c8ea48a64cd32418b39f042373af6e6b0f11e9ee","modified":1554617343749},{"_id":"themes/next-geek/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1553160728076},{"_id":"themes/next-geek/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1553160728076},{"_id":"themes/next-geek/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1553160728076},{"_id":"themes/next-geek/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1553160728076},{"_id":"themes/next-geek/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1553160728076},{"_id":"themes/next-geek/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1553160728076},{"_id":"themes/next-geek/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1553160728076},{"_id":"themes/next-geek/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1553160728076},{"_id":"themes/next-geek/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1553160728076},{"_id":"source/_posts/机器学习基石-PLA算法/pla7.png","hash":"d533605a8e68fc0d39894576e9386ae85f987c3a","modified":1554619248533},{"_id":"themes/next-geek/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1553160728076},{"_id":"themes/next-geek/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1553160728073},{"_id":"themes/next-geek/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1553160728073},{"_id":"themes/next-geek/.git/logs/HEAD","hash":"5c3d527e89bb81371e5aa41fdc418e4ec01ff894","modified":1553160728073},{"_id":"themes/next-geek/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1553160728123},{"_id":"themes/next-geek/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1553160728123},{"_id":"themes/next-geek/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1553160728123},{"_id":"themes/next-geek/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1553160728123},{"_id":"themes/next-geek/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1553160728123},{"_id":"themes/next-geek/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1553160728123},{"_id":"themes/next-geek/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1553160728123},{"_id":"themes/next-geek/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1553160728123},{"_id":"themes/next-geek/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1553160728123},{"_id":"themes/next-geek/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553160728123},{"_id":"themes/next-geek/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553160728123},{"_id":"themes/next-geek/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1553160728123},{"_id":"themes/next-geek/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1553160728123},{"_id":"themes/next-geek/layout/_scripts/schemes/mala.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553160728120},{"_id":"themes/next-geek/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553160728120},{"_id":"themes/next-geek/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553160728120},{"_id":"source/_posts/机器学习基石-Feasibility-of-Learning/fol4.png","hash":"118915e165cc067c5f191b2a7c6e2f49c40d9612","modified":1554719362061},{"_id":"themes/next-geek/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1553160728123},{"_id":"themes/next-geek/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1553160728123},{"_id":"source/_posts/机器学习基石-Feasibility-of-Learning/fol1.png","hash":"33d442e848eb64229ef3814eb848f9f382b9148d","modified":1554718044214},{"_id":"source/_posts/机器学习基石-Feasibility-of-Learning/fol2.png","hash":"a7603ac08c8ab02a82897fd0eb6009ef744856e7","modified":1554718053728},{"_id":"themes/next-geek/source/css/_mixins/Mala.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553160728123},{"_id":"themes/next-geek/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553160728123},{"_id":"themes/next-geek/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553160728123},{"_id":"themes/next-geek/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553160728123},{"_id":"themes/next-geek/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553160728123},{"_id":"themes/next-geek/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553160728123},{"_id":"themes/next-geek/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1553160728120},{"_id":"themes/next-geek/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1553160728116},{"_id":"themes/next-geek/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1553160728120},{"_id":"themes/next-geek/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1553160728120},{"_id":"themes/next-geek/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1553160728120},{"_id":"themes/next-geek/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1553160728120},{"_id":"themes/next-geek/layout/_partials/share/jiathis.swig","hash":"fd65b0d38d4a8b8306de815c48caad20b84ba4cb","modified":1553160728120},{"_id":"themes/next-geek/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1553160728120},{"_id":"themes/next-geek/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1553160728120},{"_id":"themes/next-geek/layout/_partials/suprise/assist.swig","hash":"6b8a25353dbfe9f92e0d48388a6f46996e03b7cb","modified":1553160728120},{"_id":"themes/next-geek/layout/_partials/suprise/donate.swig","hash":"25f196afc193a7b192a49cb7d84db7d727a9e8c2","modified":1553160728120},{"_id":"themes/next-geek/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1553160728120},{"_id":"themes/next-geek/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1553160728120},{"_id":"themes/next-geek/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/comments/index.swig","hash":"576e716893153a855eaf6d136fad7cb6d4065e09","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/comments/valine.swig","hash":"9f4ed36c73e890909b8ebbe601fb60e13d048288","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1553160728120},{"_id":"source/_posts/机器学习基石-Feasibility-of-Learning/fol3.png","hash":"33369d899a827575c512ba5adccac152e2e15677","modified":1554719341127},{"_id":"themes/next-geek/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1553160728120},{"_id":"source/_posts/MNIST入门-手写数字识别/sof1.png","hash":"d55fb0ab3d0770d04eba7dba3612e7e46267c080","modified":1554772972388},{"_id":"themes/next-geek/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1553160728120},{"_id":"themes/next-geek/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1553160728120},{"_id":"themes/next-geek/.git/objects/07/9dda31c9a2c7f807cc17c50dda59f339e99a6c","hash":"4b4c014fe08f25855239222c5584f9dfc3343ff3","modified":1553160728076},{"_id":"themes/next-geek/.git/objects/02/767c4fc993bc59a001c606990158ead5f5d3fd","hash":"c17f6c85bdc5cb5f54be5ddf992bd97226d2d836","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/02/9285afe3039e48c043a35c8ded00cef53a04eb","hash":"d7c2196e6e44d6f21acbd6acd524dbb13a4a99db","modified":1553160728116},{"_id":"themes/next-geek/.git/refs/heads/dev","hash":"af33454a277b3d410d5b673da3a8aa20ec181589","modified":1553160728076},{"_id":"themes/next-geek/.git/refs/heads/master","hash":"6487212d9177320753753e6a6e63e6d559a1520d","modified":1553160728076},{"_id":"themes/next-geek/.git/objects/12/771bd1402adba0e53312c3acbb9cd6e52fb14c","hash":"c9298403023526c01f42c095bd845b696e353583","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/12/5af88fb7eef4d8ba4365bc3fb392dd2d3f859c","hash":"2d3cc6c503dd79e57e9547154d3a01341edca831","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/00/1f158ba90ca6a0bde76a2841ea10668c461504","hash":"5d5140ae228f5be3b681203db39e38a4e4559e73","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/12/eed4cadbd08e1b45d7f898ae142bf68eb963f7","hash":"037a33a45d2fdbf8b50e61e9ef891031cba30864","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/29/f468b00663c7903d3e5ed4c15c0b9d68f60756","hash":"abcbbd938c9611569874238d18bfc769f017f195","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/24/95fe2129c39bf5c9ecf7f9cb8f5f426b7e9b44","hash":"dc8a8b965ff1ed30e9c5c8882b9cd0bfcc365d2c","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/08/dc97448c4abb710946d950b34cd025b4616a4a","hash":"b4dab79268fda9413c92f3d730d42194a3bb2dbc","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/35/c6b64ac513c492fc3449c2ee454a4a16c50228","hash":"b7cbca49ecdda0ed22b717dbcb2ae2bff92748e0","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/16/79cb36c4a3ebdd79422313a50af5639589d0e3","hash":"4e763d2601e97d3153912682e9181f35c30187f4","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/3b/8046b5a1890820161ab47ecb9bc7a056d86213","hash":"a520083c2c3fefddf679cb2d03411e84e44ed355","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/3c/813debcc25b413448bb8a53b4e6b6f84771999","hash":"0b329d8f1e05f5c086cc1bbcbe6c84fad24ead29","modified":1553160728076},{"_id":"themes/next-geek/.git/objects/43/f234f9c79a44aaac11bf97fbedb88f46c1d2d7","hash":"04b35ec2395461219a862a7d7e0d0966170a55bf","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/44/d987705c9c65b0319f215c04918484d58cee2a","hash":"0f8864f93fabb12ce5ac0c491baafa8ccb08c1f8","modified":1553160728076},{"_id":"themes/next-geek/.git/objects/42/8bbda5bd921c7a526af024a52d0190db614bfc","hash":"0de6a1be82ed476157d65c3b147bae4b6d851cfa","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/4c/af719f468ae8c22dcee92042bb01367699092e","hash":"17869eaafa83b2a0f7c73f15fa4e381926a0be2d","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/4f/7f3995f8cd9a29da2e4a03c14b1972bd3f7eaa","hash":"d851ea76acd116805d5e6689d12b9987dfce60ed","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/57/e7c9047e8cf0f6e3f79f2e7323e8c26537c9d7","hash":"3a9fff038809e0c0ec992ca7fdc4eaa30bb21059","modified":1553160728113},{"_id":"themes/next-geek/.git/objects/5a/af72f05c647af9c52dd2a69498580b6a0f8cc7","hash":"df25e072f2bd46f6c731785cb2b5b4dabbedb79f","modified":1553160728113},{"_id":"themes/next-geek/.git/objects/34/ee4611479190b14730c717b52117dc1c076d6b","hash":"dcc182d2210859159d3486b7c3c70dfc79ed9668","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/5f/307d14be2aef13239746c5ae236d53994ae7f6","hash":"3a2f68dc66dc1f1bc582743110bce8e464bd0fb0","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/5f/1028bb41dd9e1e35522ec624e1d4e1ef029295","hash":"e0578d2dcb5b63a93ea8252430dbbbee610d59af","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/5f/715670afcb314d58c9bdfd575dfc04f5070047","hash":"2e7a1abd157a0e7e28ad57bd537fd367870bd7b5","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/25/45c7afbd7bc04a39051243fba3ab6bcbfe14be","hash":"d857780e86988b00809817beecb389f36ca4345e","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/69/17d3923fdbe6bf330a0515de4740046426d7d8","hash":"d389dccb719ed32802512cd5f2a5270ef9c08cc5","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/77/c357c32b176192fc58b1842b894428187b1408","hash":"b03873d33c1432c4010e202bf3d1cee9b6bc9f2f","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/6b/2e9dcb3656e4c1fa1a7219cf408080a36fb300","hash":"0874a8c86f147db0fc85dfc2cc93ca41164ba00c","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/7f/cc59b625f43224b5126d3766e934f5073b5a30","hash":"15ab6282541f3800b7b1d825e5fef85598e5f7ca","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/80/15ff3397c2e09f49668b2c911329f9f1970463","hash":"39170428f0a12ed1128f04c294143c7aaa9100a2","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/73/5c249b485aa25f14df4ddc06033cec18b40b24","hash":"dfaaf6f00d9492b8f2b8b710531d37aa512e5111","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/82/23b619e3053f3d30685adca53bbab081798171","hash":"bce1c8124a6984053b6941fa6b9c4d8cc11f2931","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/7b/a1835cbb7802ba160dff67c67414485ff59905","hash":"fbdfa9a773b4fb14173c1cd47c2c01cd7292e330","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/82/19857818a173bf679f6355bf3ba8aef51eea5b","hash":"d060b1a9d1127ead67cbd8848484055ce2b69c69","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/81/33f1489542f269dc8d7f09d96f7d16f4cce310","hash":"ae14d893dc2fe628117ec67c64138d598e3a8418","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/89/20b1291220cda30137bca2c4349db415df5445","hash":"14a2c15da6de03dc7fd1e164a52a98d2f175b339","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/90/c70b591dd4e89a66e32b21c58ab149592a13ad","hash":"69a880aef7c88e37afa4adea8339db793c636a36","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/8b/0eef0ee0b4994675b6689af2c297c48b4ed69a","hash":"c341e24661c49989315137688d92718aae8bd355","modified":1553160728113},{"_id":"themes/next-geek/.git/objects/89/d2be28de271ed0e39f1547ae604e67b2b55543","hash":"d4f9d302aa2967aae8ac2828e93062f98b5f402d","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/99/c898dcb5d58d620dea5906f1361a055638b8e8","hash":"0132c6da6818e74901204e6f25c9e7294bebea5c","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/9a/032ec0a62aeeccf4a66a3ee41aba0235fd96d8","hash":"8b21c0b784d46623f757c5c5f34e1a697aeacf34","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/b0/d133ff7bd2151fe44d6d71a9e00acecddef146","hash":"944298b7c3f6f93bb91a492c0386db2e362550e1","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/a7/a482c8d65eb86cadd8c032f4973c0fee434408","hash":"2ea383a929ee0debed931841d35649dbf77ff50a","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/87/52fff4ec75ffd8104c52505d10338c87cc5d00","hash":"89c3ae93b62e0a438af4e1298cfc56d41cd9bb75","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/bd/5c5b9b2f1ba11c75717841ca43b63a81ef95fc","hash":"87ecea7bee126eaca8ae1b40dffd23d8a79b92cb","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/a9/c139899934cecf1967de3c632425bccd94f242","hash":"05d4fa873e32f0b3484009b1ae3568f75685a057","modified":1553160728076},{"_id":"themes/next-geek/.git/objects/bf/660ac76c68546d691b051b71f4abce1a4b6f98","hash":"acc07d30b7baaa5c04e4ff9be8e3e241fe6cc416","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/a6/e75c206b1bab1d4f7e9d539e3d9eb84926078a","hash":"21bb42e52413b47b62ccc1c2e2d80a9922f532ad","modified":1553160728076},{"_id":"themes/next-geek/.git/objects/a6/4e3dbd4b94772f0b6865cda014e12ba326455d","hash":"876ae6590257dcd1e2cb146ef854d9604313c588","modified":1553160728076},{"_id":"themes/next-geek/.git/objects/b4/e7ba3601fa13c2180b5803d416ce335d3a13c8","hash":"72da78227efbd81c1df4900ffb77f50c8314b5cd","modified":1553160728113},{"_id":"themes/next-geek/.git/objects/c4/473baa0b92427477e11640948e75552737e6b1","hash":"7e6d5139689f1d8dc7e60c089cf18472eb33eefc","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/c4/bce8f11433de42febaa1a95b49dd326ecce4ba","hash":"b4b1179a3725a17c5bd8be117e6915abc1a83d65","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/9b/71e0dddbb18802918e8a47d50300f8f88a9e78","hash":"b33b5374056e0ab216d4cd05b5141cdc518186f0","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/c1/480b548e1e8d8ada7685e8c079eb9c48e86c3b","hash":"7dcc6f9e48d16123e0e761eae9cbf1df798be897","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/8a/516d118fc22ffd3ed6a7cf0c917992f7399adf","hash":"9361f53a99fa3680334c747150cf26023592acbc","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/c7/3923b522e5d4e85a3cfc3eaaa4478ef2e6179b","hash":"79ad7af091196b501917fa4549224e3197438992","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/c7/8aa153332283e306ad1f85e52b0618dade4e6e","hash":"bcd3218848e5d137a54280b45fbc9f031050046c","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/c9/83b4024ce1915f2b763349671014f04e2b0f1c","hash":"cf946873c3230813928f3464d6ca5a34cee3a682","modified":1553160728113},{"_id":"themes/next-geek/.git/objects/d3/42fdfdf39c1c7d5821bff21fecbe35cdd3c888","hash":"15abb964bd2e6afdfd0e201d37f6d02c3c87cd24","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/d2/6b385647fe013729670cb208bb758cb5b93f55","hash":"ab5c7a2a9b700bc0e8e0b5c51aae7aa834615cb6","modified":1553160728076},{"_id":"themes/next-geek/.git/objects/d1/09b06714f220975e14e8bd539c0a62bee4cc4f","hash":"18c17630277f1efb1dac5e0583ce27e752e54308","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/e0/2ac2325de161baa7b2e61ebbb909a5fac42bdf","hash":"63b59e0738856ec00c7a2b0e45c5337fbd11a151","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/e4/be196211dc1f8b9349c0bcbd96207c7fa41feb","hash":"acbdbcd19af499cb87f78d4c0dfb783de6582699","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/d4/82023eb2d81abc77688ada80f032805ad66bf5","hash":"7e9e37b870ede3601ef31247f635b22c23ff2b00","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/f4/5296e980075ec943cca353ad77d1f3d8a9cf9a","hash":"ea766d4c54a11d83192f2f67b406a59386432e5e","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/e9/abb58c69ea79c9edd5a10d14a440f7425ab19e","hash":"e589f4ed3017a0273a32daeae2b00ca510724c1d","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/ed/cd8bb171b0928d2f22b7e7c259fef5deff0173","hash":"12ba9bc8e3a85f8586eaf7f3e8e0476613671c29","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/f4/b570a63f39619320723298ddf6d4edceb66405","hash":"fbd18ae7651137d7a420b3cc0c82ecb3d75e4121","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/f9/629f4d880fafe61afc946051d53fbedf60331f","hash":"8b4bd9fd839dac8a7c5052d102af9a9188107481","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/f5/99f9c874cca78fa35f629006f9ff44e2f0e736","hash":"f8681f7df210edabdbfbadf6bc424cc6e70322a4","modified":1553160728113},{"_id":"themes/next-geek/.git/objects/e8/e10fac5f553453e2414512e911e7a89137e6f6","hash":"615b2f5eeb5b6a4409c44dd96295786d75dcfd09","modified":1553160728116},{"_id":"themes/next-geek/.git/objects/f5/5262992c8eb3913632561c333ee054dac535dd","hash":"02b574e2a2b087c68aea46eda34d7ac95775d4f7","modified":1553160728113},{"_id":"themes/next-geek/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1553160728123},{"_id":"themes/next-geek/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1553160728123},{"_id":"themes/next-geek/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1553160728123},{"_id":"themes/next-geek/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1553160728123},{"_id":"themes/next-geek/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1553160728123},{"_id":"themes/next-geek/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1553160728123},{"_id":"themes/next-geek/source/js/src/lang-select.js","hash":"8bb0cd0b464357f8e2b794e64b89e4dbe2a836e3","modified":1553160728123},{"_id":"themes/next-geek/source/js/src/motion.js","hash":"28f977030d95c3a2d58789a3376811ee9fa1bf6e","modified":1553160728123},{"_id":"themes/next-geek/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1553160728123},{"_id":"themes/next-geek/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1553160728123},{"_id":"themes/next-geek/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1553160728123},{"_id":"themes/next-geek/source/js/src/utils.js","hash":"3b9f28f8d5a097254eddedf4406bc01e57781be8","modified":1553160728123},{"_id":"themes/next-geek/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1553160728123},{"_id":"themes/next-geek/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1553160728123},{"_id":"themes/next-geek/source/css/_custom/custom.styl","hash":"bd301290ba397c7f52fe60a054f8e1501c226ca1","modified":1554616593873},{"_id":"themes/next-geek/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1553160728123},{"_id":"themes/next-geek/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1553160728123},{"_id":"themes/next-geek/source/css/_variables/Mala.styl","hash":"87662c094aa68b7df36288c4ed9d62144e3d4340","modified":1553160728123},{"_id":"themes/next-geek/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1553160728123},{"_id":"themes/next-geek/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1553160728123},{"_id":"themes/next-geek/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1553160728126},{"_id":"themes/next-geek/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1553160728123},{"_id":"themes/next-geek/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1553160728126},{"_id":"themes/next-geek/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1553160728123},{"_id":"themes/next-geek/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1553160728126},{"_id":"themes/next-geek/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1553160728126},{"_id":"themes/next-geek/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1553160728126},{"_id":"themes/next-geek/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1553160728126},{"_id":"themes/next-geek/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1553160728126},{"_id":"themes/next-geek/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1553160728126},{"_id":"themes/next-geek/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1553160728126},{"_id":"themes/next-geek/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1553160728126},{"_id":"themes/next-geek/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1553160728126},{"_id":"themes/next-geek/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1553160728126},{"_id":"themes/next-geek/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1553160728126},{"_id":"themes/next-geek/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1553160728126},{"_id":"themes/next-geek/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1553160728126},{"_id":"themes/next-geek/source/lib/three/canvas_lines.min.js","hash":"a063db69fac7985b34b3174f835234ac8ef776ac","modified":1553160728126},{"_id":"themes/next-geek/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1553160728126},{"_id":"themes/next-geek/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1553160728130},{"_id":"themes/next-geek/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1553160728130},{"_id":"themes/next-geek/source/lib/three/canvas_sphere.min.js","hash":"973e8c9904de841be8aac8530c1e56b7feb4e217","modified":1553160728126},{"_id":"themes/next-geek/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1553160728126},{"_id":"themes/next-geek/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1553160728130},{"_id":"themes/next-geek/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1553160728130},{"_id":"themes/next-geek/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1553160728130},{"_id":"themes/next-geek/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1553160728126},{"_id":"source/_posts/机器学习基石-Types-of-Learning/tol1.png","hash":"5cfe8e4b80a44a2ad346824270636da79425e982","modified":1554643901472},{"_id":"themes/next-geek/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1553160728120},{"_id":"source/_posts/机器学习基石-Types-of-Learning/tol2.png","hash":"3048a9c77da8beefc4d0d3516c9574a47baecb99","modified":1554700117983},{"_id":"themes/next-geek/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1553160728120},{"_id":"themes/next-geek/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1553160728076},{"_id":"themes/next-geek/.git/refs/remotes/origin/master","hash":"6487212d9177320753753e6a6e63e6d559a1520d","modified":1553160728076},{"_id":"themes/next-geek/.git/refs/remotes/origin/dev","hash":"af33454a277b3d410d5b673da3a8aa20ec181589","modified":1553160728076},{"_id":"themes/next-geek/.git/refs/remotes/upstream/dev","hash":"45aeb4549414c755a4ebd76a732a5ef4c1aa4c65","modified":1553160728076},{"_id":"themes/next-geek/.git/refs/remotes/upstream/lanuage-button","hash":"1fd2699709b873432995cb3a45ecbdb1d489ce67","modified":1553160728076},{"_id":"themes/next-geek/.git/refs/remotes/upstream/magiclamp","hash":"e2b8b6ef88bf817326afa2e0410d935bfc526047","modified":1553160728076},{"_id":"themes/next-geek/.git/refs/remotes/upstream/master","hash":"414cc0d0467c400ed162890c6b8a825291b7c7b8","modified":1553160728076},{"_id":"themes/next-geek/.git/refs/remotes/upstream/upstream","hash":"9ee303c029f5739e69f2466e73b9d995d7519c6d","modified":1553160728076},{"_id":"themes/next-geek/.git/refs/remotes/upstream/mala","hash":"db0d6f7e82b67c7d89f9629d087372aa8be414f5","modified":1553160728076},{"_id":"themes/next-geek/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/_base.styl","hash":"d50c2a9ae363d26ed2e9bc226a9dc7abeb9ace1b","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/_footer.styl","hash":"46b7fbc74062166e718399bb2836e03d6e7a2d10","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/_header.styl","hash":"3b49f83af20fb435a6d519f7fd97a7a1b28355b3","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/_posts-copyright.styl","hash":"ab2a44eaac41942493ef3bece32f57bcaa715986","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/_posts-expanded.styl","hash":"7eb83b2585379e17c90839ffc746413d90e46e83","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/_menu.styl","hash":"972b44bca7c402bcea2fb8fe855b84bb727a6729","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/_posts-callapsed.styl","hash":"eb14b58d2fb5c90f7cfbb7dd4d8fc357da653801","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/_posts-footer.styl","hash":"cfcd4a10834f1635e99e7e0924eba026f19513ed","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/_suprise.styl","hash":"043aaeea87564f9c17ac295d33cbaff69e5472e2","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/index.styl","hash":"4091b4aecad70f9853643e232c0d16937b87e6d2","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Pisces/_layout.styl","hash":"0af5a9322156c4c21d3c7d38f5ee48de5286f523","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Pisces/_sidebar.styl","hash":"f00d0a9ff02f6814011e0b613a2d9020911b5c58","modified":1553160728123},{"_id":"themes/next-geek/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/scaffolding/base.styl","hash":"a9c6355d6516af2e13254ec89e33e5b7dcf8ceb4","modified":1553160728123},{"_id":"themes/next-geek/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1553160728123},{"_id":"themes/next-geek/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1553160728123},{"_id":"themes/next-geek/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1553160728123},{"_id":"themes/next-geek/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1553160728123},{"_id":"themes/next-geek/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1553160728123},{"_id":"themes/next-geek/source/css/_common/outline/outline.styl","hash":"f2030fa436c47791d1a42358cc0ef6f9809f212c","modified":1553160728123},{"_id":"themes/next-geek/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1553160728123},{"_id":"themes/next-geek/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1553160728123},{"_id":"themes/next-geek/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1553160728126},{"_id":"themes/next-geek/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1553160728123},{"_id":"themes/next-geek/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1553160728126},{"_id":"themes/next-geek/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1553160728123},{"_id":"themes/next-geek/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1553160728126},{"_id":"themes/next-geek/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1553160728126},{"_id":"themes/next-geek/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1553160728126},{"_id":"themes/next-geek/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1553160728130},{"_id":"themes/next-geek/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1553160728130},{"_id":"themes/next-geek/layout/_partials/suprise/ball.swig","hash":"53a4d6d81c07e36d83f156238d17ba363cc36ccf","modified":1553160728120},{"_id":"themes/next-geek/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1553160728123},{"_id":"themes/next-geek/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553160728126},{"_id":"themes/next-geek/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553160728126},{"_id":"themes/next-geek/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1553160728130},{"_id":"themes/next-geek/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1553160728126},{"_id":"themes/next-geek/.git/logs/refs/heads/master","hash":"aa726bb4440a2a69cea610fdcceb0b97e2be1676","modified":1553160728073},{"_id":"themes/next-geek/.git/logs/refs/heads/dev","hash":"a9a21325d635aea1ef50d30c5bdbc5b2f07deedd","modified":1553160728073},{"_id":"themes/next-geek/source/css/_schemes/Mala/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/comments/_hypercomments.styl","hash":"86d8af5a3b629741aa888a85357a9eb406d7e8fd","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/sidebar/sidebar-author-links.styl","hash":"59a981584dc87ebd5320680ed069083481145407","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/sidebar/sidebar-blogroll.styl","hash":"2947d7e612db21211b6b478f7adb133eebec2f66","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mala/sidebar/sidebar-author.styl","hash":"88563638954bc2c0aac9a0eda4672d5509633d82","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1553160728123},{"_id":"themes/next-geek/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1553160728123},{"_id":"themes/next-geek/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/post/post.styl","hash":"e6680feea343cecbdde8d643c777d689742abc28","modified":1554616589677},{"_id":"themes/next-geek/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1553160728123},{"_id":"themes/next-geek/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1553160728123},{"_id":"themes/next-geek/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1553160728123},{"_id":"themes/next-geek/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1553160728120},{"_id":"themes/next-geek/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553160728126},{"_id":"themes/next-geek/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1553160728120},{"_id":"themes/next-geek/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1553160728120},{"_id":"themes/next-geek/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1553160728123},{"_id":"themes/next-geek/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1553160728123},{"_id":"themes/next-geek/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1553160728123},{"_id":"themes/next-geek/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1553160728126},{"_id":"themes/next-geek/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1553160728126},{"_id":"themes/next-geek/.git/logs/refs/remotes/upstream/dev","hash":"a693e2812829653750f34b81d204aa8c2da2ee89","modified":1553160728073},{"_id":"themes/next-geek/.git/logs/refs/remotes/origin/HEAD","hash":"074c6b0446ea13bf374e0e548f6032bea73bf1a4","modified":1553160728073},{"_id":"themes/next-geek/.git/logs/refs/remotes/origin/master","hash":"9b4b0fd22e123de62abbc7bad0025b77db5b9f0b","modified":1553160728073},{"_id":"themes/next-geek/.git/logs/refs/remotes/origin/dev","hash":"f5ef261bdb54e4b7f6824c461d51482b94f76810","modified":1553160728073},{"_id":"themes/next-geek/.git/logs/refs/remotes/upstream/lanuage-button","hash":"9ea5ee05bf7cee69492c16110f47fd569ead843c","modified":1553160728073},{"_id":"themes/next-geek/.git/logs/refs/remotes/upstream/magiclamp","hash":"a388f481e5eaf9399ea24e4600642658c71f9fba","modified":1553160728073},{"_id":"themes/next-geek/.git/objects/pack/pack-8a226471a265b8f653f63f00f590f398541ab011.idx","hash":"c5000fb9566b10e0cd50a795d23ef0da67fe3d46","modified":1553160728113},{"_id":"themes/next-geek/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553160728126},{"_id":"themes/next-geek/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553160728126},{"_id":"themes/next-geek/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1553160728123},{"_id":"themes/next-geek/.git/logs/refs/remotes/upstream/mala","hash":"a47fe0933f036b87d707453f03c07e77fabe0049","modified":1553160728073},{"_id":"themes/next-geek/.git/logs/refs/remotes/upstream/master","hash":"53f92d7ad06a2a0e16e5131d07b10e030113ff9c","modified":1553160728073},{"_id":"themes/next-geek/.git/logs/refs/remotes/upstream/upstream","hash":"0187703c69da35bb0b3169d46b64ebac9518565d","modified":1553160728073},{"_id":"themes/next-geek/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1553160728126},{"_id":"themes/next-geek/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1553160728130},{"_id":"themes/next-geek/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1553160728126},{"_id":"themes/next-geek/.git/objects/pack/pack-8a226471a265b8f653f63f00f590f398541ab011.pack","hash":"fe84f3fc44eb4fa54662c3a0c4c9dfdf7c9484df","modified":1553160728113},{"_id":"public/baidu_urls.txt","hash":"0467c2eca6deb44cc3032a54911fa6e35fac4170","modified":1560442026338},{"_id":"public/atom.xml","hash":"bc672e3dc2b0aa686c689f9cc750c5001b1be472","modified":1560442580227},{"_id":"public/search.xml","hash":"94dcbddcbc532c989381ef194ef892f9e0d4abea","modified":1560442580260},{"_id":"public/sitemap.xml","hash":"264b02c98e5e2ad4979d90ab5be714bd6ea3a8e6","modified":1560442580260},{"_id":"public/baidusitemap.xml","hash":"5ef7363fda351ecc888b47dd5dedcf6a5c00bb71","modified":1560442580260},{"_id":"public/about/index.html","hash":"1f35195630052e50b9f665875b08009805da4acd","modified":1560442580453},{"_id":"public/categories/index.html","hash":"e453bf8b0da4bfccb932ccce75864e5b90edf661","modified":1560442580455},{"_id":"public/tags/index.html","hash":"dc547ad6847c67ed73b0ea4cb717a1c16882facb","modified":1560442580455},{"_id":"public/archives/index.html","hash":"a8ba4adcac9d26cdbdeeeba31bb580840535e74c","modified":1560442580454},{"_id":"public/2019/05/26/LeetCode-136-Single-Number/index.html","hash":"f436797df3b79b5821feb099b46243688d18d0ae","modified":1560442580455},{"_id":"public/2019/06/02/LeetCode-125-Valid-Palindrome/index.html","hash":"2bf7d5d277cf0f88c59163efb1c11beec108a482","modified":1560442580455},{"_id":"public/2019/06/02/LeetCode-240-Search-a-2D-Matrix-II/index.html","hash":"92ed0ff158a5e9b1ba4dc1ed24804a1dc4ce1611","modified":1560442580455},{"_id":"public/2019/06/02/LeetCode-088-Merge-Sorted-Array/index.html","hash":"ec3623f70994aff9a54eb5a0c55eb35863754dd7","modified":1560442580455},{"_id":"public/2019/05/26/LeetCode-169-Majority-Element/index.html","hash":"a7890a0c44bf6cc5cc839a140a4ac2c364cbf3ce","modified":1560442580455},{"_id":"public/2019/05/23/C-优先级队列/index.html","hash":"59afc47b7b345eb4d90137d0074c4d5e20c1029e","modified":1560442580455},{"_id":"public/2019/05/23/LeetCode-023-Merge-k-Sorted-Lists/index.html","hash":"bfa2211262d1828a9216f77acc0957fa4b9900ae","modified":1560442580455},{"_id":"public/2019/05/26/LeetCode-026-Remove-Duplicates-from-Sorted-Array/index.html","hash":"15c13faee1d3b284411d3f757a2822d1417bcddc","modified":1560442580455},{"_id":"public/2019/05/22/LeetCode-017-Letter-Combinations-of-a-Phone-Number/index.html","hash":"d69a6e4ba0ac3f9a1633e6a85e597c23e2923a51","modified":1560442580456},{"_id":"public/2019/05/23/LeetCode-021-Merge-Two-Sorted-Lists/index.html","hash":"9a8d566da141acac34909c0a988cd676722b202b","modified":1560442580456},{"_id":"public/2019/05/22/LeetCode-016-3Sum-Closest/index.html","hash":"52965d98dcaaa38a85fc8869f21c5c44d64a93c6","modified":1560442580456},{"_id":"public/2019/05/22/LeetCode-020-Valid-Parentheses/index.html","hash":"5770671f786560a82648d7d7045a4cb3ae0ed314","modified":1560442580456},{"_id":"public/2019/05/19/LeetCode-015-3Sum/index.html","hash":"5f291ff7ac4d86b0a1b5e7a25c8cf5fafbb0612d","modified":1560442580456},{"_id":"public/2019/05/01/LeetCode-013-Roman-to-Integer/index.html","hash":"a278f9c47c88db7cfe6bf11cb1bce36c3ee7a666","modified":1560442580456},{"_id":"public/2019/05/18/LeetCode-014-Longest-Common-Prefix/index.html","hash":"a6c1678a9f023fc1736a741ff03d3cc81ebf4318","modified":1560442580456},{"_id":"public/2019/06/13/LeetCode-124-Binary-Tree-Maximum-Path-Sum/index.html","hash":"8374dfb073cbaa3ec2881e7dae0adc46a4d19b26","modified":1560442580455},{"_id":"public/2019/04/27/LeetCode-010-Regular-Expression-Matching/index.html","hash":"627874f02790ba1059583e9611bca9e73ac7e83c","modified":1560442580456},{"_id":"public/2019/04/30/LeetCode-011-Container-With-Most-Water/index.html","hash":"d8b47037356fa2b3c2cebc1930cfd77c2a1da57b","modified":1560442580456},{"_id":"public/2019/04/30/LeetCode-012-Integer-to-Roman/index.html","hash":"5b76c552a8aa9b3f0d6888471e889e8820dde011","modified":1560442580456},{"_id":"public/2019/04/16/LeetCode-008-String-to-Integer-atoi/index.html","hash":"93d6a5cf6fa3dd614103d95b207ae8094801e93e","modified":1560442580456},{"_id":"public/2019/04/19/LeetCode-009-Palindrome-Number/index.html","hash":"212775f6d38179c8d95afe10db8679d961f5c0d4","modified":1560442580456},{"_id":"public/2019/04/16/LeetCode-007-Reverse-Integer/index.html","hash":"70f3321bc929be00982ee86a681c25a239262e50","modified":1560442580456},{"_id":"public/2019/04/18/MNIST入门-手写数字识别问题集锦/index.html","hash":"4aa9ec6431f40476651ac28ed0c0ddcc9b45f5c6","modified":1560442580456},{"_id":"public/2019/04/14/LeetCode-005-Longest-Palindromic-Substring/index.html","hash":"4a4dc93bdd1e7d1f82188a3c7f57f87ef4a8a329","modified":1560442580456},{"_id":"public/2019/04/14/LeetCode-004-Median-of-Two-Sorted-Arrays/index.html","hash":"d8ee4c8fcac0a2bf4a66942edd499ff774612941","modified":1560442580456},{"_id":"public/2019/04/15/LeetCode-006-ZigZag-Conversion/index.html","hash":"5e0d91110d4a9c108394f067c95ac2c7db28ae2b","modified":1560442580456},{"_id":"public/2019/04/10/Canvas中像素级别ImageData缩放/index.html","hash":"ca8d0dd46ade1a7c02b932b57d8557449f58ac11","modified":1560442580457},{"_id":"public/2019/04/07/LeetCode-001-Two-Sum/index.html","hash":"d5c240d32e35cd54fc3251462323b9c1712eaff3","modified":1560442580458},{"_id":"public/2019/04/07/机器学习基石-Types-of-Learning/index.html","hash":"21412ac15e74505a05569a8c4c35e1340b8090d1","modified":1560442580458},{"_id":"public/2019/04/13/LeetCode-003-Longest-Substring-Without-Repeating-Characters/index.html","hash":"7a87f9ad2975f2dc42668745f97e51a77918faba","modified":1560442580457},{"_id":"public/2019/04/09/LeetCode-002-Add-Two-Numbers/index.html","hash":"15b6880841119b66ae209cddf57729a34d58feb6","modified":1560442580457},{"_id":"public/2019/04/07/机器学习基石-PLA算法/index.html","hash":"370a653615bc716dd89720f79d3c0517eb3359a8","modified":1560442580458},{"_id":"public/2019/04/08/机器学习基石-Feasibility-of-Learning/index.html","hash":"0587bd414622924bdd55cdc7b43c94ac61cdf193","modified":1560442580457},{"_id":"public/2019/04/02/MNIST入门-手写数字识别/index.html","hash":"24580748abf2fdf51b45cde714a058c1e4ee02a0","modified":1560442580458},{"_id":"public/2019/04/01/Fedora26编译内核/index.html","hash":"3cdf448bbffa2d3396dbb1e16342bbe6831f9f72","modified":1560442580458},{"_id":"public/2019/03/17/Tornado中的异步/index.html","hash":"6b72fd6098fc312114950ddc1e5d023f014a4cfa","modified":1560442580458},{"_id":"public/2019/03/17/Python中的异步/index.html","hash":"0c280218ef787f7ae8ecbd462373955dfbe8ca07","modified":1560442580458},{"_id":"public/2019/03/18/SpaceVim中自定义Markdown相关快捷键/index.html","hash":"33ff28e76df1c24436f16fd40255b1ab07e85387","modified":1560442580458},{"_id":"public/2018/09/27/ACM-2017WF-F-Posterize/index.html","hash":"cdec3de27d7e3b6cb329190bcda97ee59a7c77cf","modified":1560442580458},{"_id":"public/2018/09/10/聚类和K-Means算法/index.html","hash":"3721ff6f43a47228994851ec32d8f8cbfc2d61d4","modified":1560442580458},{"_id":"public/2018/10/13/机器学习概念整理/index.html","hash":"da69d4ebc3423cd98315c44b4f657bf83df90a01","modified":1560442580458},{"_id":"public/2017/08/13/Fedora搭建LNMP环境/index.html","hash":"4841a3247ff8d52ce9db486459191ccd61eaef90","modified":1560442580458},{"_id":"public/2018/09/11/numpy-dot-函数/index.html","hash":"2119da132b7873a49b5661d6e65ec74ce0b687f3","modified":1560442580458},{"_id":"public/2017/08/12/CentOS搭建LNMP环境/index.html","hash":"7b8faa2cb895cd7241b58fc44876411678c4bd86","modified":1560442580458},{"_id":"public/2017/08/01/hello-world/index.html","hash":"e7b2094abc6f3b1e53f169ac836a687b411d841d","modified":1560442580458},{"_id":"public/archives/page/3/index.html","hash":"55f5fcf762751f3d0f0f3d698ed92af3ac4eb087","modified":1560442580459},{"_id":"public/2019/03/20/cannot-start-gnome-tweaks/index.html","hash":"a173e15be2eb937f1cd434ce5edca336c973d248","modified":1560442580458},{"_id":"public/archives/page/5/index.html","hash":"64fd690437a08bc47fba56ba2d9c88ae36e25be8","modified":1560442580459},{"_id":"public/2017/08/02/Markdown学习笔记/index.html","hash":"d235bb93c79b6f55cd66de6e3b4479de9d6282d7","modified":1560442580458},{"_id":"public/archives/2017/index.html","hash":"372ac7765ff4653558e5a2b72f797a0f3028f987","modified":1560442580459},{"_id":"public/archives/page/2/index.html","hash":"d9de4320bc66dc52e8a017d75c1e527ad17eaa26","modified":1560442580458},{"_id":"public/archives/2018/index.html","hash":"d547609a3b10b1f3c3cbff72ad284c2548cf062c","modified":1560442580459},{"_id":"public/archives/2017/08/index.html","hash":"64e78609de3f9c908684dcfee71f7eb4ca2c6e31","modified":1560442580459},{"_id":"public/archives/page/4/index.html","hash":"93b878a50b49f931286ee7caec189a1fcecdf437","modified":1560442580459},{"_id":"public/archives/2019/index.html","hash":"2c9fd8590ec431d0bf06af27c351201ed23abbb9","modified":1560442580459},{"_id":"public/archives/2018/10/index.html","hash":"227a3376e31e172a89883405f1e62fc3b3d4d16a","modified":1560442580459},{"_id":"public/archives/2018/09/index.html","hash":"66478f6e667f5f0815a1bfcbcf28d260ba1664c6","modified":1560442580459},{"_id":"public/archives/2019/03/index.html","hash":"c31251c67b5eac04dea1f9f3d3526d55bc836b79","modified":1560442580459},{"_id":"public/archives/2019/04/index.html","hash":"598778d5a18ff6304c5fa052d7094241f31b4e3e","modified":1560442580459},{"_id":"public/archives/2019/04/page/2/index.html","hash":"8f67ac684abbae50c505126e7aaa253e6924c4c3","modified":1560442580459},{"_id":"public/archives/2019/05/index.html","hash":"b883e95fe74f4643f1fe3e67bff9e7470e586963","modified":1560442580459},{"_id":"public/archives/2019/page/2/index.html","hash":"276cfd9dcf044bf917a476fa9f167b9576393845","modified":1560442580459},{"_id":"public/archives/2019/05/page/2/index.html","hash":"89450083745568374113205b07c9bb4fb3d3028d","modified":1560442580459},{"_id":"public/categories/Learning/index.html","hash":"36ec906efd47aa3ff6dc5bdcd5672e43184e5413","modified":1560442580459},{"_id":"public/archives/2019/page/3/index.html","hash":"7e37ef97f86bc45521185bee37790e4a2f4b24ec","modified":1560442580459},{"_id":"public/categories/Linux/index.html","hash":"beafede2fdc1fcab0ecfa71f6a6bed6b5158425d","modified":1560442580459},{"_id":"public/categories/LeetCode/index.html","hash":"055b53b3a50f560cadb240821ffdfa2ba9a0f489","modified":1560442580459},{"_id":"public/archives/2019/page/4/index.html","hash":"d7284ee6b761ff34f2ac7eb2278ad4c1d77bfcca","modified":1560442580459},{"_id":"public/categories/LeetCode/page/3/index.html","hash":"f13cb6c06a01a5b21cbe5ccdd5afe9b74ec701b0","modified":1560442580460},{"_id":"public/categories/LeetCode/page/2/index.html","hash":"5ee95ca26c096b13e0f8f1913f123d0eef2166bd","modified":1560442580460},{"_id":"public/categories/Python/index.html","hash":"88fc8a261632c2cedde542b4caf2e03b1b02cf17","modified":1560442580460},{"_id":"public/categories/MachineLearning/index.html","hash":"4cc7d296e52c1674241d82df809e9ecd391ac8d1","modified":1560442580460},{"_id":"public/index.html","hash":"a3114ec17d01606011899a707f6f17d7d52bb530","modified":1560442580460},{"_id":"public/categories/Daily/index.html","hash":"c322b70db80c1783b898fc092608095c5fdab4fe","modified":1560442580460},{"_id":"public/page/3/index.html","hash":"0e7210d78b2f52714e8d60fd2d72dbe6bab94f64","modified":1560442580460},{"_id":"public/page/2/index.html","hash":"1e3899632ecd6c1e554fa0108d0f73e50890166e","modified":1560442580460},{"_id":"public/page/4/index.html","hash":"0043a9bc74da2d85099bb8ee8c97639f7a4d2b39","modified":1560442580460},{"_id":"public/page/5/index.html","hash":"578ff1eae0156e6743aab0281d5a979ddfa3d626","modified":1560442580460},{"_id":"public/categories/MachineLearning/机器学习基石/index.html","hash":"068c98432292719095fc8bdf5980f2bc5bf4dea2","modified":1560442580460},{"_id":"public/tags/Canvas/index.html","hash":"0fed639fdc46517fa37a0223a835bcfa9fc973fb","modified":1560442580460},{"_id":"public/archives/2019/06/index.html","hash":"da9a0ab9eb815e94a8b55ff2d7edc54e71e4c547","modified":1560442580459},{"_id":"public/tags/C/index.html","hash":"decbce888a325d08914e07bb36f5683a404647c8","modified":1560442580461},{"_id":"public/tags/Daily/index.html","hash":"10c7b8723f738d90d512598026a6ba884c7feb73","modified":1560442580460},{"_id":"public/tags/Queue/index.html","hash":"6fd17b304ab58f6ab1c06cf2b5378c5f5209b413","modified":1560442580461},{"_id":"public/tags/LNMP/index.html","hash":"68672e38a0270452bedc39dcb4ad39996a2f4fe1","modified":1560442580461},{"_id":"public/tags/PriorityQueue/index.html","hash":"ae89938d9ddbacc786e2104746cd191c80f02653","modified":1560442580461},{"_id":"public/tags/LeetCode/index.html","hash":"02dde40486ad703d2941be0f4bac2b31e95c7132","modified":1560442580461},{"_id":"public/tags/Learning/index.html","hash":"993c9138142e41b5cd12f8cb299bff14484e39f6","modified":1560442580460},{"_id":"public/tags/LeetCode/page/2/index.html","hash":"e067dae2e6c8c701029f104b483e8ab6bdf81f1a","modified":1560442580461},{"_id":"public/tags/LeetCode/page/3/index.html","hash":"718d7ccb70aa581a6a45d66319ec2d85c1dd001a","modified":1560442580461},{"_id":"public/tags/Linked-List/index.html","hash":"23d0a28cf6f34423079b4ec0191907ae87aa9fa7","modified":1560442580461},{"_id":"public/tags/Web/index.html","hash":"0dc4d4234c159e62aafcb140af51062e793a0e1c","modified":1560442580460},{"_id":"public/tags/Hash-Map/index.html","hash":"ecf3e4220832e6964d93d53a6e5bd0227a6e1b21","modified":1560442580461},{"_id":"public/tags/Linux/index.html","hash":"d5caa54f162a8415c36badf98fa2168145a22bee","modified":1560442580461},{"_id":"public/tags/Large-Number/index.html","hash":"3f06e97d8b3c4bce83c078e89ce97141a394475a","modified":1560442580461},{"_id":"public/tags/Binary-Search/index.html","hash":"ee279fc93778c7ee2ff49384fc60bdc7c559bd32","modified":1560442580461},{"_id":"public/tags/Array/index.html","hash":"4bbdfec8b36347c4f31ea60ad79994ae16391bdb","modified":1560442580462},{"_id":"public/tags/String/index.html","hash":"03f32f5678dbdcb1d58beaaf70d15bf124a3a50f","modified":1560442580462},{"_id":"public/tags/Math/index.html","hash":"4d4bc1bd794155729cb5842b25fc7882aed53115","modified":1560442580461},{"_id":"public/tags/Reverse/index.html","hash":"a4744f30ece6a40d44204cb3e0a5fe227c2ee4e8","modified":1560442580462},{"_id":"public/tags/Big-Number/index.html","hash":"c5d0fbd02418df72073230c4fb79083567af9482","modified":1560442580462},{"_id":"public/tags/DP/index.html","hash":"71199f563ae578be45f21f510f4a40e8cecf04a0","modified":1560442580462},{"_id":"public/tags/Split/index.html","hash":"e28d6d0951b42da620f7f9f77c3b7f67d35759db","modified":1560442580462},{"_id":"public/tags/Integer/index.html","hash":"5089711dd95d8a5607bbdb431c650f222bc6e4a5","modified":1560442580462},{"_id":"public/tags/Palindrome/index.html","hash":"962f17cb62da873a7447e6849d2a251fcd25744b","modified":1560442580462},{"_id":"public/tags/Map/index.html","hash":"8ea63a1ccde61e80586f371c3b0a7818d7b1c5a2","modified":1560442580462},{"_id":"public/tags/Match/index.html","hash":"44cb0b6f6ae6ef80965097f0eaa4cc098ce3530a","modified":1560442580462},{"_id":"public/tags/String/page/2/index.html","hash":"c3acb5c9e839dda932b5a7577057eba659a1cf86","modified":1560442580462},{"_id":"public/tags/Prefix/index.html","hash":"ca3a07045bfe378bbffefc1c43e646eb915ce77b","modified":1560442580462},{"_id":"public/tags/Pointer/index.html","hash":"16a4ed0102660f257549032ae111b3a470f9dd83","modified":1560442580462},{"_id":"public/tags/Duplicates/index.html","hash":"a84c550d17763f4604a07f5ae1bd37d1a0cfb915","modified":1560442580462},{"_id":"public/tags/Recursive/index.html","hash":"8453dbf59c5278c6294800ce776df1c61ca1d5b7","modified":1560442580462},{"_id":"public/tags/Sort/index.html","hash":"19bf28b2a3041588f314782a10fbfecbab883fa7","modified":1560442580462},{"_id":"public/tags/List/index.html","hash":"adcc1c0d0e25dda3df7a2d6ec15980125ecb4020","modified":1560442580463},{"_id":"public/tags/3Sum/index.html","hash":"4f28115b3a9482a8e39a05d119fb835abd2ceee2","modified":1560442580462},{"_id":"public/tags/Merge/index.html","hash":"cac08ac97c9f2a2a51c0a49fbca86eb9da4143de","modified":1560442580463},{"_id":"public/tags/Xor/index.html","hash":"ac21e23dd5ff3db4a7fd1076334db76db5f196b0","modified":1560442580463},{"_id":"public/tags/Linear/index.html","hash":"9d5773c1b14ebba55f8e64a0c676dfaa0ad4694f","modified":1560442580463},{"_id":"public/tags/Stack/index.html","hash":"b6bb09343b498344e27ff4b6419f42b932dd929d","modified":1560442580463},{"_id":"public/tags/Majority/index.html","hash":"bcda30b01fee6ac81e31fdbd109e4e5dd7786718","modified":1560442580463},{"_id":"public/tags/Pair/index.html","hash":"c04044fa8f69c8ea9d1bd6ddee51d1c9811e789c","modified":1560442580463},{"_id":"public/tags/Matrix/index.html","hash":"7b602380642630685a03659af133c2e42a4338fd","modified":1560442580463},{"_id":"public/tags/TensorFlow/index.html","hash":"45ba8210e564f444981ddfbc3cbd1e71e37a5a82","modified":1560442580463},{"_id":"public/tags/ML/index.html","hash":"4a22d712e4dec98d2e594827766b9279556747a5","modified":1560442580463},{"_id":"public/tags/MNIST/index.html","hash":"4479c05c81841a252b6b26ebf3b2c3ccd3724477","modified":1560442580463},{"_id":"public/tags/LinkedList/index.html","hash":"9dc61926216d530c31ca180013fbdb9a715b8e10","modified":1560442580462},{"_id":"public/tags/Python/index.html","hash":"2239174f04d0ce802b2646b8269d40d1c8196bfc","modified":1560442580463},{"_id":"public/tags/Tornado/index.html","hash":"e6dcf3dabef5a7ad626bdeeeedf5b676d4a79c04","modified":1560442580463},{"_id":"public/tags/SpaceVim/index.html","hash":"1a8eade3969f8a524331cfa50cca41937ed67a9d","modified":1560442580463},{"_id":"public/tags/Closest/index.html","hash":"68eb3ac276535bfd5f8967c3efddc0afebf41fe8","modified":1560442580462},{"_id":"public/tags/Markdown/index.html","hash":"653d99b810d504d004d40de6dbe72e2d927d9045","modified":1560442580463},{"_id":"public/tags/Numpy/index.html","hash":"e1874c0081d346e6a6c1f05aa6e3c1f30bb1ae42","modified":1560442580463},{"_id":"public/tags/机器学习基石/index.html","hash":"2d192f8b6af6dff8e93a7fd3fb59bfaa4724ba78","modified":1560442580463},{"_id":"public/tags/MachineLearning/index.html","hash":"f02986a4dfe0c1f2c599ed38406fbab4823ce8ef","modified":1560442580463},{"_id":"public/tags/PLA/index.html","hash":"c98c97ceacd8ac5a7efb4ae28e8ab4ebe6fa214b","modified":1560442580464},{"_id":"public/tags/K-Means/index.html","hash":"7163806d25ee96d3215efdec7396491deb2d717f","modified":1560442580464},{"_id":"public/tags/ACM-ICPC/index.html","hash":"7d1459ed3ffec0a53148fcef5a1cffa40916e8f5","modified":1560442580464},{"_id":"public/tags/LeNet-5/index.html","hash":"fdaf191177888418de6a1530135c131990adb379","modified":1560442580464},{"_id":"public/tags/Problems/index.html","hash":"94b35fcdbb53572eacb8f912f4eb159e7b51f815","modified":1560442580464},{"_id":"public/tags/Palindromic/index.html","hash":"4cddbbafd91199e80cd77561695e36f0cf499299","modified":1560442580464},{"_id":"public/tags/Clustering/index.html","hash":"8cf195e5c0b85a6f95c6192f1d89d56d6e75b81d","modified":1560442580463},{"_id":"public/tags/Tensorflow/index.html","hash":"b02546e9d64c11266699c68d95b060800163fbc8","modified":1560442580464},{"_id":"public/tags/Search/index.html","hash":"78159ee9239079c932d5b00026e8d4056892a9e4","modified":1560442580463},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560442038172},{"_id":"public/tags/Hard/index.html","hash":"7e845b1675239bea39abfd2d65e5f6b748124f9d","modified":1560442580463},{"_id":"public/tags/BinaryTree/index.html","hash":"a9a5dd6d7dc752630714d8deba5f161c0b3a0951","modified":1560442580463},{"_id":"public/CNAME","hash":"6aa00f57d610b4557d3796a0ec787b6149b8343d","modified":1560442038180},{"_id":"public/favicon.ico","hash":"1d3b2e8527e2e02d155b444bcfb5893f5e721e73","modified":1560442038180},{"_id":"public/uploads/avatar.jpg","hash":"1d3b2e8527e2e02d155b444bcfb5893f5e721e73","modified":1560442038180},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1560442038180},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1560442038180},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1560442038180},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1560442038180},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1560442038180},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1560442038180},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1560442038181},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1560442038181},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560442038181},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1560442038181},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560442038181},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1560442038181},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1560442038181},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1560442038181},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1560442038181},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1560442038181},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1560442038181},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1560442038181},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1560442038181},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1560442038181},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1560442038181},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1560442038181},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1560442038181},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1560442038181},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1560442038181},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1560442038181},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1560442038181},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1560442038181},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1560442039083},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1560442039085},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1560442039093},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1560442039093},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1560442039094},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1560442039094},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1560442039094},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1560442039094},{"_id":"public/js/src/lang-select.js","hash":"8bb0cd0b464357f8e2b794e64b89e4dbe2a836e3","modified":1560442039094},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1560442039094},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1560442039094},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1560442039094},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1560442039094},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1560442039094},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1560442039094},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1560442039094},{"_id":"public/lib/fastclick/README.html","hash":"d6e90449a2c09f3033f7e43d68b0cc8208e22e09","modified":1560442039094},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"06811ca2f722dead021493457f27cdc264ef928d","modified":1560442039094},{"_id":"public/lib/jquery_lazyload/README.html","hash":"a08fccd381c8fdb70ba8974b208254c5ba23a95f","modified":1560442039094},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1560442039094},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1560442039094},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1560442039094},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1560442039094},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1560442039095},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1560442039095},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1560442039095},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1560442039095},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1560442039095},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1560442039095},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1560442039095},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1560442039095},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1560442039095},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1560442039095},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1560442039095},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1560442039095},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1560442039095},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1560442039095},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1560442039095},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1560442039095},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1560442039095},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1560442039095},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1560442039095},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1560442039095},{"_id":"public/css/main.css","hash":"9e7f212b9921e599736a88483fa320a4440a69e3","modified":1560442039095},{"_id":"public/uploads/Screenshot from 2019-03-19 20-57-25.png","hash":"b1208ea8f5a1d3d9a9440c9d5d84e5b443b81d2b","modified":1560442039095},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1560442039095},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1560442039096},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1560442039096},{"_id":"public/js/src/motion.js","hash":"28f977030d95c3a2d58789a3376811ee9fa1bf6e","modified":1560442039106},{"_id":"public/js/src/utils.js","hash":"3b9f28f8d5a097254eddedf4406bc01e57781be8","modified":1560442039106},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1560442039106},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1560442039106},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1560442039106},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1560442039106},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1560442039106},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1560442039107},{"_id":"public/uploads/Screenshot from 2019-03-19 21-26-16.png","hash":"92ec8d5807175f6f3bfdef909ba07c6a0c42a7be","modified":1560442039107},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1560442039109},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1560442039112},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1560442039112},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1560442039118},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1560442039118},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1560442039119},{"_id":"public/lib/three/canvas_lines.min.js","hash":"a063db69fac7985b34b3174f835234ac8ef776ac","modified":1560442039119},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"973e8c9904de841be8aac8530c1e56b7feb4e217","modified":1560442039120},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1560442039120},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1560442039120},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1560442039123},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1560442039123},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1560442039124},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1560442039145},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1560442039149},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1560442039150},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1560442039155},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1560442039172},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1560442039186},{"_id":"public/tags/Medium/page/2/index.html","hash":"63af8123f37e58e4bceba79e26d3f25e79afc560","modified":1560442580467},{"_id":"public/tags/Medium/index.html","hash":"d906b048dad8fbded8edea2a5cd9f9a6ba41efaf","modified":1560442580467},{"_id":"public/tags/Easy/index.html","hash":"3fbf2949a959c76713143f9e8b0b4e3804cc72a9","modified":1560442580467},{"_id":"public/tags/Easy/page/2/index.html","hash":"2f6519c8398f284bcdcfa100061bc342bf411051","modified":1560442580467},{"_id":"source/_posts/动态规划套路详解/4.png","hash":"555e84ea20382a764aef800d31b39b38b8d38313","modified":1563624619205},{"_id":"source/_posts/动态规划套路详解/1.png","hash":"3121f0aa272c31f28a5c8d467a5615ae305e5b78","modified":1563624619195},{"_id":"source/_posts/动态规划套路详解/3.png","hash":"7ea702841eaeb5d7ba2b40f11bd0921b0031dd46","modified":1563624619202},{"_id":"source/_posts/动态规划套路详解/5.png","hash":"f2393eaccbf66ad5db32cec53b322def6ae29df0","modified":1563624619205},{"_id":"source/_posts/动态规划套路详解/2.png","hash":"bfdb94b8d7ad3d7331e82eaeb7968a82dc88d0fd","modified":1563624619202},{"_id":"source/_posts/Linux将deb包转为ArchLinux软件包.md","hash":"6e9aac1524be13b52174175098dfbc7a061b13fb","modified":1563624619189},{"_id":"source/_posts/arch安装和gnome配置教程.md","hash":"e3d60547b6314620b31c2cefc83e4f3ac7803c06","modified":1563642605899},{"_id":"source/_posts/动态规划套路详解.md","hash":"204b32f8edad56148135451a117dd4cd9e9413e0","modified":1563624619195},{"_id":"source/_posts/记2019南大计算机本科生开放日.md","hash":"e7a24f80c69566b72f2e01b8351724c173f800c8","modified":1563624619222},{"_id":"source/_posts/动态规划套路详解/7.png","hash":"be465399af8136ddfb14d9ce19c46076b2282322","modified":1563624619212},{"_id":"source/_posts/动态规划套路详解/6.png","hash":"69c97e1ef82c380ea3d299303ad96b8508b600cc","modified":1563624619209}],"Category":[{"name":"Learning","_id":"cjwuuw3tg0004jub3zfjxylee"},{"name":"Linux","_id":"cjwuuw3tt000fjub3ss4d882a"},{"name":"LeetCode","_id":"cjwuuw3u2000vjub3c2hdu6i5"},{"name":"MachineLearning","_id":"cjwuuw3uv002sjub3jnnt2qst"},{"name":"Python","_id":"cjwuuw3ux002zjub3e42jh9tm"},{"name":"机器学习基石","parent":"cjwuuw3uv002sjub3jnnt2qst","_id":"cjwuuw3v3003cjub3951j54gh"},{"name":"Daily","_id":"cjwuuw3v7003kjub3xk1b4ha3"}],"Data":[{"_id":"next","data":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}],"Page":[{"title":"about","date":"2018-09-07T13:18:25.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-07 21:18:25\n---\n","updated":"2019-03-17T07:51:35.757Z","path":"about/index.html","_id":"cjwuuw3tc0001jub378iokcxh","comments":1,"layout":"page","content":"","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"","more":""},{"title":"archives","date":"2018-09-07T13:18:42.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2018-09-07 21:18:42\ntype: \"archives\"\n---\n","updated":"2019-03-17T07:51:35.767Z","path":"archives/index.html","_id":"cjwuuw3tf0003jub36ugwekv2","comments":1,"layout":"page","content":"","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-07T13:18:15.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-07 21:18:15\ntype: \"categories\"\n---\n","updated":"2019-03-17T07:51:35.767Z","path":"categories/index.html","_id":"cjwuuw3tj0007jub310tloerp","comments":1,"layout":"page","content":"","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-07T13:17:15.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-07 21:17:15\ntype: \"tags\"\n---\n","updated":"2019-03-17T07:51:35.771Z","path":"tags/index.html","_id":"cjwuuw3tk0009jub3ccd3skh9","comments":1,"layout":"page","content":"","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"","more":""}],"Post":[{"title":"ACM-2017WF-F-Posterize","comments":1,"mathjax":false,"date":"2018-09-27T08:27:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n  算法课居然直接安排了一个ACM-WF的题目...弄了半天弄懂了，记笔记记笔记!\n<!--more-->\n# ACM-ICPC World Finals 2017 F.Posterize DP\n\n## 原题\n### 题意\n　　Pixels in a digital picture can be represented with three integers in the range 00 to 255255 that indicate the intensity of the red, green, and blue colors.\n\n  To compress an image or to create an artistic effect, many photo-editing tools include a “posterize” operation which works as follows.\n  \n  Each color channel is examined separately; this problem focuses only on the red channel.\n  \n  Rather than allow all integers from 00 to 255255 for the red channel, a posterized image allows at most kk integers from this range.\n  \n  Each pixel’s original red intensity is replaced with the nearest of the allowed integers.\n  \n  The photo-editing tool selects a set of kk integers that minimizes the sum of the squared errors introduced across all pixels in the original image.\n  \n  If there are nn pixels that have original red values r1,…,rnr1,…,rn, and kk allowed integers v1,…,vkv1,…,vk, the sum of squared errors is defined as\n\n　　∑i=1nmin1≤j≤k(ri−vj)2.∑i=1nmin1≤j≤k(ri−vj)2.\n\n　　Your task is to compute the minimum achievable sum of squared errors, given parameter kk and a description of the red intensities of an image’s pixels.\n\n{% note info %}\n数字图像的像素可以用三个在0到255之间的整数表示,它们分别表示红色、绿色和蓝色的强度。\n\n为了压缩图片或是为了生艺术效果,许多图像编辑工具收录了如下所述的”色调分离”操作。\n\n每个颜色通道会分别考虑,本题只考虑红\n色通道的情况。\n\n不同于在红色通道使用0到255之间全部的整数,一张色调分离后的图片只会使用这些数字里至多 k\n种整数。\n\n每个像素原来的红色强度会被替换成最相近的可用强度。\n\n图像编辑工具会选择k个整数来最小化替换过程\n引起的平方误差之和。\n\n假设原图有n个像素,它们的红色取值是r1,···,rn,而 k 种可用整数为v1,···,vk ,那么平方误差之和被定义为\n\n　　∑i=1nmin1≤j≤k(ri−vj)2.∑i=1nmin1≤j≤k(ri−vj)2.\n\n你的任务是计算可以实现的最小平方误差之和,参数k和图片的红色强度会给出。\n{% endnote %}\n\n### Input\nThe first line of the input contains two integers dd (1≤d≤2561≤d≤256), the number of distinct red values that occur in the original image, and kk (1≤k≤d1≤k≤d), the number of distinct red values allowed in the posterized image. The remaining dd lines indicate the number of pixels of the image having various red values. Each such line contains two integers rr (0≤r≤2550≤r≤255) and pp (1≤p≤2261≤p≤226), where rr is a red intensity value and pp is the number of pixels having red intensity rr. Those dd lines are given in increasing order of red value.\n\n{% note info %}\n第一行包含两个整数d(1≤d≤256)和k(1≤k≤d)  \n分别表示原图中不同的红色强度有多少种,  \n色调分离后可以使用的红色强度有多少种。  \n接下来d行描述了每种红色强度在原图中占据的像素点数量。  \n每行包含两个整数r(0≤r≤255)和p(1≤p≤226)  \n这里r是一种红色强度的取值   \n而p是这种取值对应的像素点数量。这d行信息按照红色强度取值升序给出。  \n{% endnote %}\n\n### Output \nDisplay the sum of the squared errors for an optimally chosen set of kk allowed integer values.\n\n{% note info %}\n输出最优的 k 种可选取值对应的平方误差之和。\n{% endnote %}\n\n | Sample Input 1 | Sample Output 1 |\n | -----          |  -------        |\n | 2 1            |                 |  \n | 50 20000       |                 |      \n | 150 10000      |  66670000       | \n\n | Sample Input 2 | Sample Output 2 |        \n | -----          |  -------        |\n | 2 2            |                 |  \n | 50 20000       |                 |    \n | 150 10000      | 0               |\n\n | Sample Input 3 | Sample Output 3 |        \n | -----          |  -------        |\n | 4 2            |                 |       \n | 0 30000        |                 |       \n | 25 30000       |                 |         \n | 50 30000       |                 |         \n | 255 30000      | 37500000        | \n\n### 思路\n　　主要是dp,记忆化搜索＋剪枝,看后面的代码注释和题解\n\n## 题目转化\n### 题意\n有256个位置，有d个位置上有人（每个位置上可能不止一个人），你可以在k个位置上插旗（每个位置上至多一面旗子），\n\n每个人都会走到离自己最近的旗子，求所有人走的距离的平方和的最小值。\n\n### 题解\n要解决这个问题，我们可以建立一个二维数组*f[i][j]*，（j<=i），表示前i个位置，放了j个旗子，其中第i个位置一定放了旗子，前i个位置上的所有人走到旗子上的最小距离平方和。\n\n如果我们假设第i个位置上的旗子是k个旗子中的最后一个（即第i个位置后面没有旗子），那么第i个位置后面的人只能全部走到第i个位置上，所以把_f[i][j]_加上i位置后面的人走到i位置的距离平方和就可以得到所有人走的距离平方和。\n\n因此我们可以枚举最后一个旗子插的位置i，将_f[i][j_]加上i后面的人走到i位置的距离平方和，取最小值，即为答案。\n\n*f[i][j]*数组的建立我们可以用下面的公式来计算：*f[i][j]=min{f[m][j-1]+w[m][i]},（j-1<=m< i)*，其中*w[m][i]*\n\n表示m~i这一段只有m和i位置放了旗子，这一段上的人走的距离平方和。\n\n由于第i个位置上固定了一面旗子，我们可以考虑另外j-1面旗子的位置。\n\n若j-1面旗子在前m个位置（可以假设第m个位置上一定放旗子），那么*f[i][j]*可以分解成两段计算，\n\n一段是1~m位置，放了j-1个旗子，其中第m个位置一定放了旗子，这就递归成了*f[m][j-1]*；\n\n另一段是m+1~i位置，只有m和i位置放了旗子，这一段上的人只能走到m和i，即*w[m][i]*。\n\n所以我们只要枚举m的值，取*f[m][j-1]+w[m][i]*的最小值，就可以得出*f[i][j]*的值。\n\n下面给出一个f[i][j]的实例：考虑f[8][3]，前8个位置，放了3个旗子，其中第3个位置一定放了旗子。\n\n剩余的2面旗子可能在前2/3/4/5/6/7个位置上，由此枚举出所有情况：\n\n剩余的2面旗子在：\n> 　　前2个位置：f[2][2]+w[2][8]\n> 　　前3个位置：f[3][2]+w[3][8]\n> 　　前4个位置：f[4][2]+w[4][8]\n> 　　前5个位置：f[5][2]+w[5][8]\n> 　　前6个位置：f[6][2]+w[6][8]\n> 　　前7个位置：f[7][2]+w[7][8]\n\n取出这些值中的最小值，即得到f[8][3]的值。\n\n至于w[m][i]的建立较为简单，由于只有m和i位置放了旗子，m+1~i位置上的人只能就近走到m或i位置上，\n\n我们可以求出m和i的中值，前一半的人走到m，后一半的人走到i，求出距离平方和即可。\n\n### 代码参考\n```C++\n#include <cstdio>\n#include <cstring>\n#define N 260\n#define ll long long\n\n//读数据,返回一个整数\ninline int read(){\n    int x=0,f=1;\n    char ch=getchar();\n\n    //判断是否有符号\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\n    //按位读取组成整数\n    while(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\n\n//一共n个位置，kk个旗子,a[N]表示每个位置的人数\nint n,kk,a[N];\n\n//f[i][j]表示前i个位置，放了j个旗子，其中第i个位置一定放了旗子的最小平方误差\nll w[N][N],f[N][N];\n\ninline ll min(ll x,ll y){return x<y?x:y;}\n\nint main(){\n    //freopen(\"a.in\",\"r\",stdin);\n    n=read();\n    kk=read(); \n\n    //旗子数不可以比位置数多\n    if(kk>=n){\n      puts(\"0\");\n      return 0;\n    }\n\n    //读取每个位置的人数\n    for(int i=1;i<=n;++i){\n        int x=read();a[x+1]=read();\n    }\n\n    //建立w[i][j],i是第一个旗子位置,j是第二个旗子的位置\n    for(int i=1;i<=256;++i)\n\n        //i~j这一段只在i和j位置放旗子的平方误差\n        for(int j=i+2;j<=256;++j){\n          int mid=i+j>>1;\n\n            //计算i到j之间所有的位置平方和\n            for(int q=i+1;q<=j-1;++q){\n                if(q>mid) \n                  w[i][j]+=(ll)(j-q)*(j-q)*a[q];\n                else \n                  w[i][j]+=(ll)(q-i)*(q-i)*a[q];\n            }\n        }\n\n    //只放一个旗子的情况,旗子在i处，遍历i之前所有的位置,累加\n    for(int i=1;i<=256;++i)\n        for(int j=1;j<i;++j)\n            f[i][1]+=(ll)(i-j)*(i-j)*a[j];\n\n    //建立f[i][j],j是旗子的数量，从２开始到kk\n    for(int j=2;j<=kk;++j)\n        //i是一共多少个位置，从j到256\n        for(int i=j;i<=256;++i){\n            f[i][j]=f[i-1][j-1];\n\n            //前j-1个旗子放在[1,m]这里，并且m处有旗子,i处也有旗子,转化成求f[m][j-1]+w[m][i]的最小值\n            for(int m=j-1;m<i-1;++m)\n                f[i][j]=min(f[i][j],f[m][j-1]+w[m][i]);\n        }\n\n    ll ans=f[256][kk];\n    //统计答案，如果最后一个旗子不在最后一个位置，就还需要加上最后一个旗子后面的位置的平方和，枚举最后一个旗子插的位置\n\n    //i是最后一个旗子的位置,j是最后一个旗子到最后一个位置的每个位置,tmp是最后这部分的平方和\n    for(int i=255;i>=kk;--i){\n        ll tmp=0;\n        for(int j=256;j>i;--j)\n          tmp+=(ll)(j-i)*(j-i)*a[j];\n\n        //比较不同位置的平方和，取最小值\n        ans=min(ans,f[i][kk]+tmp);\n    }\n\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n\n-------\n","source":"_posts/ACM-2017WF-F-Posterize.md","raw":"---\ntitle: 'ACM-2017WF-F-Posterize'\ncomments: true\nmathjax: false\ndate: 2018-09-27 16:27:00\ntags: [ACM-ICPC,Learning,DP]\ncategories: Learning\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n  算法课居然直接安排了一个ACM-WF的题目...弄了半天弄懂了，记笔记记笔记!\n<!--more-->\n# ACM-ICPC World Finals 2017 F.Posterize DP\n\n## 原题\n### 题意\n　　Pixels in a digital picture can be represented with three integers in the range 00 to 255255 that indicate the intensity of the red, green, and blue colors.\n\n  To compress an image or to create an artistic effect, many photo-editing tools include a “posterize” operation which works as follows.\n  \n  Each color channel is examined separately; this problem focuses only on the red channel.\n  \n  Rather than allow all integers from 00 to 255255 for the red channel, a posterized image allows at most kk integers from this range.\n  \n  Each pixel’s original red intensity is replaced with the nearest of the allowed integers.\n  \n  The photo-editing tool selects a set of kk integers that minimizes the sum of the squared errors introduced across all pixels in the original image.\n  \n  If there are nn pixels that have original red values r1,…,rnr1,…,rn, and kk allowed integers v1,…,vkv1,…,vk, the sum of squared errors is defined as\n\n　　∑i=1nmin1≤j≤k(ri−vj)2.∑i=1nmin1≤j≤k(ri−vj)2.\n\n　　Your task is to compute the minimum achievable sum of squared errors, given parameter kk and a description of the red intensities of an image’s pixels.\n\n{% note info %}\n数字图像的像素可以用三个在0到255之间的整数表示,它们分别表示红色、绿色和蓝色的强度。\n\n为了压缩图片或是为了生艺术效果,许多图像编辑工具收录了如下所述的”色调分离”操作。\n\n每个颜色通道会分别考虑,本题只考虑红\n色通道的情况。\n\n不同于在红色通道使用0到255之间全部的整数,一张色调分离后的图片只会使用这些数字里至多 k\n种整数。\n\n每个像素原来的红色强度会被替换成最相近的可用强度。\n\n图像编辑工具会选择k个整数来最小化替换过程\n引起的平方误差之和。\n\n假设原图有n个像素,它们的红色取值是r1,···,rn,而 k 种可用整数为v1,···,vk ,那么平方误差之和被定义为\n\n　　∑i=1nmin1≤j≤k(ri−vj)2.∑i=1nmin1≤j≤k(ri−vj)2.\n\n你的任务是计算可以实现的最小平方误差之和,参数k和图片的红色强度会给出。\n{% endnote %}\n\n### Input\nThe first line of the input contains two integers dd (1≤d≤2561≤d≤256), the number of distinct red values that occur in the original image, and kk (1≤k≤d1≤k≤d), the number of distinct red values allowed in the posterized image. The remaining dd lines indicate the number of pixels of the image having various red values. Each such line contains two integers rr (0≤r≤2550≤r≤255) and pp (1≤p≤2261≤p≤226), where rr is a red intensity value and pp is the number of pixels having red intensity rr. Those dd lines are given in increasing order of red value.\n\n{% note info %}\n第一行包含两个整数d(1≤d≤256)和k(1≤k≤d)  \n分别表示原图中不同的红色强度有多少种,  \n色调分离后可以使用的红色强度有多少种。  \n接下来d行描述了每种红色强度在原图中占据的像素点数量。  \n每行包含两个整数r(0≤r≤255)和p(1≤p≤226)  \n这里r是一种红色强度的取值   \n而p是这种取值对应的像素点数量。这d行信息按照红色强度取值升序给出。  \n{% endnote %}\n\n### Output \nDisplay the sum of the squared errors for an optimally chosen set of kk allowed integer values.\n\n{% note info %}\n输出最优的 k 种可选取值对应的平方误差之和。\n{% endnote %}\n\n | Sample Input 1 | Sample Output 1 |\n | -----          |  -------        |\n | 2 1            |                 |  \n | 50 20000       |                 |      \n | 150 10000      |  66670000       | \n\n | Sample Input 2 | Sample Output 2 |        \n | -----          |  -------        |\n | 2 2            |                 |  \n | 50 20000       |                 |    \n | 150 10000      | 0               |\n\n | Sample Input 3 | Sample Output 3 |        \n | -----          |  -------        |\n | 4 2            |                 |       \n | 0 30000        |                 |       \n | 25 30000       |                 |         \n | 50 30000       |                 |         \n | 255 30000      | 37500000        | \n\n### 思路\n　　主要是dp,记忆化搜索＋剪枝,看后面的代码注释和题解\n\n## 题目转化\n### 题意\n有256个位置，有d个位置上有人（每个位置上可能不止一个人），你可以在k个位置上插旗（每个位置上至多一面旗子），\n\n每个人都会走到离自己最近的旗子，求所有人走的距离的平方和的最小值。\n\n### 题解\n要解决这个问题，我们可以建立一个二维数组*f[i][j]*，（j<=i），表示前i个位置，放了j个旗子，其中第i个位置一定放了旗子，前i个位置上的所有人走到旗子上的最小距离平方和。\n\n如果我们假设第i个位置上的旗子是k个旗子中的最后一个（即第i个位置后面没有旗子），那么第i个位置后面的人只能全部走到第i个位置上，所以把_f[i][j]_加上i位置后面的人走到i位置的距离平方和就可以得到所有人走的距离平方和。\n\n因此我们可以枚举最后一个旗子插的位置i，将_f[i][j_]加上i后面的人走到i位置的距离平方和，取最小值，即为答案。\n\n*f[i][j]*数组的建立我们可以用下面的公式来计算：*f[i][j]=min{f[m][j-1]+w[m][i]},（j-1<=m< i)*，其中*w[m][i]*\n\n表示m~i这一段只有m和i位置放了旗子，这一段上的人走的距离平方和。\n\n由于第i个位置上固定了一面旗子，我们可以考虑另外j-1面旗子的位置。\n\n若j-1面旗子在前m个位置（可以假设第m个位置上一定放旗子），那么*f[i][j]*可以分解成两段计算，\n\n一段是1~m位置，放了j-1个旗子，其中第m个位置一定放了旗子，这就递归成了*f[m][j-1]*；\n\n另一段是m+1~i位置，只有m和i位置放了旗子，这一段上的人只能走到m和i，即*w[m][i]*。\n\n所以我们只要枚举m的值，取*f[m][j-1]+w[m][i]*的最小值，就可以得出*f[i][j]*的值。\n\n下面给出一个f[i][j]的实例：考虑f[8][3]，前8个位置，放了3个旗子，其中第3个位置一定放了旗子。\n\n剩余的2面旗子可能在前2/3/4/5/6/7个位置上，由此枚举出所有情况：\n\n剩余的2面旗子在：\n> 　　前2个位置：f[2][2]+w[2][8]\n> 　　前3个位置：f[3][2]+w[3][8]\n> 　　前4个位置：f[4][2]+w[4][8]\n> 　　前5个位置：f[5][2]+w[5][8]\n> 　　前6个位置：f[6][2]+w[6][8]\n> 　　前7个位置：f[7][2]+w[7][8]\n\n取出这些值中的最小值，即得到f[8][3]的值。\n\n至于w[m][i]的建立较为简单，由于只有m和i位置放了旗子，m+1~i位置上的人只能就近走到m或i位置上，\n\n我们可以求出m和i的中值，前一半的人走到m，后一半的人走到i，求出距离平方和即可。\n\n### 代码参考\n```C++\n#include <cstdio>\n#include <cstring>\n#define N 260\n#define ll long long\n\n//读数据,返回一个整数\ninline int read(){\n    int x=0,f=1;\n    char ch=getchar();\n\n    //判断是否有符号\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\n    //按位读取组成整数\n    while(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\n\n//一共n个位置，kk个旗子,a[N]表示每个位置的人数\nint n,kk,a[N];\n\n//f[i][j]表示前i个位置，放了j个旗子，其中第i个位置一定放了旗子的最小平方误差\nll w[N][N],f[N][N];\n\ninline ll min(ll x,ll y){return x<y?x:y;}\n\nint main(){\n    //freopen(\"a.in\",\"r\",stdin);\n    n=read();\n    kk=read(); \n\n    //旗子数不可以比位置数多\n    if(kk>=n){\n      puts(\"0\");\n      return 0;\n    }\n\n    //读取每个位置的人数\n    for(int i=1;i<=n;++i){\n        int x=read();a[x+1]=read();\n    }\n\n    //建立w[i][j],i是第一个旗子位置,j是第二个旗子的位置\n    for(int i=1;i<=256;++i)\n\n        //i~j这一段只在i和j位置放旗子的平方误差\n        for(int j=i+2;j<=256;++j){\n          int mid=i+j>>1;\n\n            //计算i到j之间所有的位置平方和\n            for(int q=i+1;q<=j-1;++q){\n                if(q>mid) \n                  w[i][j]+=(ll)(j-q)*(j-q)*a[q];\n                else \n                  w[i][j]+=(ll)(q-i)*(q-i)*a[q];\n            }\n        }\n\n    //只放一个旗子的情况,旗子在i处，遍历i之前所有的位置,累加\n    for(int i=1;i<=256;++i)\n        for(int j=1;j<i;++j)\n            f[i][1]+=(ll)(i-j)*(i-j)*a[j];\n\n    //建立f[i][j],j是旗子的数量，从２开始到kk\n    for(int j=2;j<=kk;++j)\n        //i是一共多少个位置，从j到256\n        for(int i=j;i<=256;++i){\n            f[i][j]=f[i-1][j-1];\n\n            //前j-1个旗子放在[1,m]这里，并且m处有旗子,i处也有旗子,转化成求f[m][j-1]+w[m][i]的最小值\n            for(int m=j-1;m<i-1;++m)\n                f[i][j]=min(f[i][j],f[m][j-1]+w[m][i]);\n        }\n\n    ll ans=f[256][kk];\n    //统计答案，如果最后一个旗子不在最后一个位置，就还需要加上最后一个旗子后面的位置的平方和，枚举最后一个旗子插的位置\n\n    //i是最后一个旗子的位置,j是最后一个旗子到最后一个位置的每个位置,tmp是最后这部分的平方和\n    for(int i=255;i>=kk;--i){\n        ll tmp=0;\n        for(int j=256;j>i;--j)\n          tmp+=(ll)(j-i)*(j-i)*a[j];\n\n        //比较不同位置的平方和，取最小值\n        ans=min(ans,f[i][kk]+tmp);\n    }\n\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n\n-------\n","slug":"ACM-2017WF-F-Posterize","published":1,"updated":"2019-07-20T12:10:19.189Z","_id":"cjycjtjll0000ussbh3i01ue4","layout":"post","photos":[],"link":"","content":"<p><meta name=\"referrer\" content=\"no-referrer\"><br>  算法课居然直接安排了一个ACM-WF的题目…弄了半天弄懂了，记笔记记笔记!<br><a id=\"more\"></a></p>\n<h1 id=\"ACM-ICPC-World-Finals-2017-F-Posterize-DP\"><a href=\"#ACM-ICPC-World-Finals-2017-F-Posterize-DP\" class=\"headerlink\" title=\"ACM-ICPC World Finals 2017 F.Posterize DP\"></a>ACM-ICPC World Finals 2017 F.Posterize DP</h1><h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a>原题</h2><h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3><p>　　Pixels in a digital picture can be represented with three integers in the range 00 to 255255 that indicate the intensity of the red, green, and blue colors.</p>\n<p>  To compress an image or to create an artistic effect, many photo-editing tools include a “posterize” operation which works as follows.</p>\n<p>  Each color channel is examined separately; this problem focuses only on the red channel.</p>\n<p>  Rather than allow all integers from 00 to 255255 for the red channel, a posterized image allows at most kk integers from this range.</p>\n<p>  Each pixel’s original red intensity is replaced with the nearest of the allowed integers.</p>\n<p>  The photo-editing tool selects a set of kk integers that minimizes the sum of the squared errors introduced across all pixels in the original image.</p>\n<p>  If there are nn pixels that have original red values r1,…,rnr1,…,rn, and kk allowed integers v1,…,vkv1,…,vk, the sum of squared errors is defined as</p>\n<p>　　∑i=1nmin1≤j≤k(ri−vj)2.∑i=1nmin1≤j≤k(ri−vj)2.</p>\n<p>　　Your task is to compute the minimum achievable sum of squared errors, given parameter kk and a description of the red intensities of an image’s pixels.</p>\n<div class=\"note info\"><p>数字图像的像素可以用三个在0到255之间的整数表示,它们分别表示红色、绿色和蓝色的强度。</p>\n<p>为了压缩图片或是为了生艺术效果,许多图像编辑工具收录了如下所述的”色调分离”操作。</p>\n<p>每个颜色通道会分别考虑,本题只考虑红<br>色通道的情况。</p>\n<p>不同于在红色通道使用0到255之间全部的整数,一张色调分离后的图片只会使用这些数字里至多 k<br>种整数。</p>\n<p>每个像素原来的红色强度会被替换成最相近的可用强度。</p>\n<p>图像编辑工具会选择k个整数来最小化替换过程<br>引起的平方误差之和。</p>\n<p>假设原图有n个像素,它们的红色取值是r1,···,rn,而 k 种可用整数为v1,···,vk ,那么平方误差之和被定义为</p>\n<p>　　∑i=1nmin1≤j≤k(ri−vj)2.∑i=1nmin1≤j≤k(ri−vj)2.</p>\n<p>你的任务是计算可以实现的最小平方误差之和,参数k和图片的红色强度会给出。</p></div>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h3><p>The first line of the input contains two integers dd (1≤d≤2561≤d≤256), the number of distinct red values that occur in the original image, and kk (1≤k≤d1≤k≤d), the number of distinct red values allowed in the posterized image. The remaining dd lines indicate the number of pixels of the image having various red values. Each such line contains two integers rr (0≤r≤2550≤r≤255) and pp (1≤p≤2261≤p≤226), where rr is a red intensity value and pp is the number of pixels having red intensity rr. Those dd lines are given in increasing order of red value.</p>\n<div class=\"note info\"><p>第一行包含两个整数d(1≤d≤256)和k(1≤k≤d)<br>分别表示原图中不同的红色强度有多少种,<br>色调分离后可以使用的红色强度有多少种。<br>接下来d行描述了每种红色强度在原图中占据的像素点数量。<br>每行包含两个整数r(0≤r≤255)和p(1≤p≤226)<br>这里r是一种红色强度的取值<br>而p是这种取值对应的像素点数量。这d行信息按照红色强度取值升序给出。  </p></div>\n<h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h3><p>Display the sum of the squared errors for an optimally chosen set of kk allowed integer values.</p>\n<div class=\"note info\"><p>输出最优的 k 种可选取值对应的平方误差之和。</p></div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Sample Input 1</th>\n<th>Sample Output 1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2 1</td>\n<td></td>\n</tr>\n<tr>\n<td>50 20000</td>\n<td></td>\n</tr>\n<tr>\n<td>150 10000</td>\n<td>66670000</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Sample Input 2</th>\n<th>Sample Output 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2 2</td>\n<td></td>\n</tr>\n<tr>\n<td>50 20000</td>\n<td></td>\n</tr>\n<tr>\n<td>150 10000</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Sample Input 3</th>\n<th>Sample Output 3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4 2</td>\n<td></td>\n</tr>\n<tr>\n<td>0 30000</td>\n<td></td>\n</tr>\n<tr>\n<td>25 30000</td>\n<td></td>\n</tr>\n<tr>\n<td>50 30000</td>\n<td></td>\n</tr>\n<tr>\n<td>255 30000</td>\n<td>37500000</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>　　主要是dp,记忆化搜索＋剪枝,看后面的代码注释和题解</p>\n<h2 id=\"题目转化\"><a href=\"#题目转化\" class=\"headerlink\" title=\"题目转化\"></a>题目转化</h2><h3 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意\"></a>题意</h3><p>有256个位置，有d个位置上有人（每个位置上可能不止一个人），你可以在k个位置上插旗（每个位置上至多一面旗子），</p>\n<p>每个人都会走到离自己最近的旗子，求所有人走的距离的平方和的最小值。</p>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><p>要解决这个问题，我们可以建立一个二维数组<em>f[i][j]</em>，（j&lt;=i），表示前i个位置，放了j个旗子，其中第i个位置一定放了旗子，前i个位置上的所有人走到旗子上的最小距离平方和。</p>\n<p>如果我们假设第i个位置上的旗子是k个旗子中的最后一个（即第i个位置后面没有旗子），那么第i个位置后面的人只能全部走到第i个位置上，所以把_f[i][j]_加上i位置后面的人走到i位置的距离平方和就可以得到所有人走的距离平方和。</p>\n<p>因此我们可以枚举最后一个旗子插的位置i，将_f[i][j_]加上i后面的人走到i位置的距离平方和，取最小值，即为答案。</p>\n<p><em>f[i][j]</em>数组的建立我们可以用下面的公式来计算：<em>f[i][j]=min{f[m][j-1]+w[m][i]},（j-1&lt;=m&lt; i)</em>，其中<em>w[m][i]</em></p>\n<p>表示m~i这一段只有m和i位置放了旗子，这一段上的人走的距离平方和。</p>\n<p>由于第i个位置上固定了一面旗子，我们可以考虑另外j-1面旗子的位置。</p>\n<p>若j-1面旗子在前m个位置（可以假设第m个位置上一定放旗子），那么<em>f[i][j]</em>可以分解成两段计算，</p>\n<p>一段是1~m位置，放了j-1个旗子，其中第m个位置一定放了旗子，这就递归成了<em>f[m][j-1]</em>；</p>\n<p>另一段是m+1~i位置，只有m和i位置放了旗子，这一段上的人只能走到m和i，即<em>w[m][i]</em>。</p>\n<p>所以我们只要枚举m的值，取<em>f[m][j-1]+w[m][i]</em>的最小值，就可以得出<em>f[i][j]</em>的值。</p>\n<p>下面给出一个f[i][j]的实例：考虑f[8][3]，前8个位置，放了3个旗子，其中第3个位置一定放了旗子。</p>\n<p>剩余的2面旗子可能在前2/3/4/5/6/7个位置上，由此枚举出所有情况：</p>\n<p>剩余的2面旗子在：</p>\n<blockquote>\n<p>　　前2个位置：f[2][2]+w[2][8]<br>　　前3个位置：f[3][2]+w[3][8]<br>　　前4个位置：f[4][2]+w[4][8]<br>　　前5个位置：f[5][2]+w[5][8]<br>　　前6个位置：f[6][2]+w[6][8]<br>　　前7个位置：f[7][2]+w[7][8]</p>\n</blockquote>\n<p>取出这些值中的最小值，即得到f[8][3]的值。</p>\n<p>至于w[m][i]的建立较为简单，由于只有m和i位置放了旗子，m+1~i位置上的人只能就近走到m或i位置上，</p>\n<p>我们可以求出m和i的中值，前一半的人走到m，后一半的人走到i，求出距离平方和即可。</p>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 260</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读数据,返回一个整数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch=getchar();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断是否有符号</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">'0'</span>||ch&gt;<span class=\"string\">'9'</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;ch=getchar();&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按位读取组成整数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">'0'</span>&amp;&amp;ch&lt;=<span class=\"string\">'9'</span>) x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">'0'</span>,ch=getchar();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一共n个位置，kk个旗子,a[N]表示每个位置的人数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,kk,a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//f[i][j]表示前i个位置，放了j个旗子，其中第i个位置一定放了旗子的最小平方误差</span></span><br><span class=\"line\">ll w[N][N],f[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">min</span><span class=\"params\">(ll x,ll y)</span></span>&#123;<span class=\"keyword\">return</span> x&lt;y?x:y;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"a.in\",\"r\",stdin);</span></span><br><span class=\"line\">    n=read();</span><br><span class=\"line\">    kk=read(); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//旗子数不可以比位置数多</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(kk&gt;=n)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取每个位置的人数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=read();a[x+<span class=\"number\">1</span>]=read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//建立w[i][j],i是第一个旗子位置,j是第二个旗子的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">256</span>;++i)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//i~j这一段只在i和j位置放旗子的平方误差</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">2</span>;j&lt;=<span class=\"number\">256</span>;++j)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> mid=i+j&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//计算i到j之间所有的位置平方和</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> q=i+<span class=\"number\">1</span>;q&lt;=j<span class=\"number\">-1</span>;++q)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(q&gt;mid) </span><br><span class=\"line\">                  w[i][j]+=(ll)(j-q)*(j-q)*a[q];</span><br><span class=\"line\">                <span class=\"keyword\">else</span> </span><br><span class=\"line\">                  w[i][j]+=(ll)(q-i)*(q-i)*a[q];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//只放一个旗子的情况,旗子在i处，遍历i之前所有的位置,累加</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">256</span>;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;i;++j)</span><br><span class=\"line\">            f[i][<span class=\"number\">1</span>]+=(ll)(i-j)*(i-j)*a[j];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//建立f[i][j],j是旗子的数量，从２开始到kk</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&lt;=kk;++j)</span><br><span class=\"line\">        <span class=\"comment\">//i是一共多少个位置，从j到256</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=j;i&lt;=<span class=\"number\">256</span>;++i)&#123;</span><br><span class=\"line\">            f[i][j]=f[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//前j-1个旗子放在[1,m]这里，并且m处有旗子,i处也有旗子,转化成求f[m][j-1]+w[m][i]的最小值</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m=j<span class=\"number\">-1</span>;m&lt;i<span class=\"number\">-1</span>;++m)</span><br><span class=\"line\">                f[i][j]=min(f[i][j],f[m][j<span class=\"number\">-1</span>]+w[m][i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ll ans=f[<span class=\"number\">256</span>][kk];</span><br><span class=\"line\">    <span class=\"comment\">//统计答案，如果最后一个旗子不在最后一个位置，就还需要加上最后一个旗子后面的位置的平方和，枚举最后一个旗子插的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//i是最后一个旗子的位置,j是最后一个旗子到最后一个位置的每个位置,tmp是最后这部分的平方和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">255</span>;i&gt;=kk;--i)&#123;</span><br><span class=\"line\">        ll tmp=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">256</span>;j&gt;i;--j)</span><br><span class=\"line\">          tmp+=(ll)(j-i)*(j-i)*a[j];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//比较不同位置的平方和，取最小值</span></span><br><span class=\"line\">        ans=min(ans,f[i][kk]+tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p><meta name=\"referrer\" content=\"no-referrer\"><br>  算法课居然直接安排了一个ACM-WF的题目…弄了半天弄懂了，记笔记记笔记!<br>","more":"</p>\n<h1 id=\"ACM-ICPC-World-Finals-2017-F-Posterize-DP\"><a href=\"#ACM-ICPC-World-Finals-2017-F-Posterize-DP\" class=\"headerlink\" title=\"ACM-ICPC World Finals 2017 F.Posterize DP\"></a>ACM-ICPC World Finals 2017 F.Posterize DP</h1><h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a>原题</h2><h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3><p>　　Pixels in a digital picture can be represented with three integers in the range 00 to 255255 that indicate the intensity of the red, green, and blue colors.</p>\n<p>  To compress an image or to create an artistic effect, many photo-editing tools include a “posterize” operation which works as follows.</p>\n<p>  Each color channel is examined separately; this problem focuses only on the red channel.</p>\n<p>  Rather than allow all integers from 00 to 255255 for the red channel, a posterized image allows at most kk integers from this range.</p>\n<p>  Each pixel’s original red intensity is replaced with the nearest of the allowed integers.</p>\n<p>  The photo-editing tool selects a set of kk integers that minimizes the sum of the squared errors introduced across all pixels in the original image.</p>\n<p>  If there are nn pixels that have original red values r1,…,rnr1,…,rn, and kk allowed integers v1,…,vkv1,…,vk, the sum of squared errors is defined as</p>\n<p>　　∑i=1nmin1≤j≤k(ri−vj)2.∑i=1nmin1≤j≤k(ri−vj)2.</p>\n<p>　　Your task is to compute the minimum achievable sum of squared errors, given parameter kk and a description of the red intensities of an image’s pixels.</p>\n<div class=\"note info\"><p>数字图像的像素可以用三个在0到255之间的整数表示,它们分别表示红色、绿色和蓝色的强度。</p>\n<p>为了压缩图片或是为了生艺术效果,许多图像编辑工具收录了如下所述的”色调分离”操作。</p>\n<p>每个颜色通道会分别考虑,本题只考虑红<br>色通道的情况。</p>\n<p>不同于在红色通道使用0到255之间全部的整数,一张色调分离后的图片只会使用这些数字里至多 k<br>种整数。</p>\n<p>每个像素原来的红色强度会被替换成最相近的可用强度。</p>\n<p>图像编辑工具会选择k个整数来最小化替换过程<br>引起的平方误差之和。</p>\n<p>假设原图有n个像素,它们的红色取值是r1,···,rn,而 k 种可用整数为v1,···,vk ,那么平方误差之和被定义为</p>\n<p>　　∑i=1nmin1≤j≤k(ri−vj)2.∑i=1nmin1≤j≤k(ri−vj)2.</p>\n<p>你的任务是计算可以实现的最小平方误差之和,参数k和图片的红色强度会给出。</p></div>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h3><p>The first line of the input contains two integers dd (1≤d≤2561≤d≤256), the number of distinct red values that occur in the original image, and kk (1≤k≤d1≤k≤d), the number of distinct red values allowed in the posterized image. The remaining dd lines indicate the number of pixels of the image having various red values. Each such line contains two integers rr (0≤r≤2550≤r≤255) and pp (1≤p≤2261≤p≤226), where rr is a red intensity value and pp is the number of pixels having red intensity rr. Those dd lines are given in increasing order of red value.</p>\n<div class=\"note info\"><p>第一行包含两个整数d(1≤d≤256)和k(1≤k≤d)<br>分别表示原图中不同的红色强度有多少种,<br>色调分离后可以使用的红色强度有多少种。<br>接下来d行描述了每种红色强度在原图中占据的像素点数量。<br>每行包含两个整数r(0≤r≤255)和p(1≤p≤226)<br>这里r是一种红色强度的取值<br>而p是这种取值对应的像素点数量。这d行信息按照红色强度取值升序给出。  </p></div>\n<h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h3><p>Display the sum of the squared errors for an optimally chosen set of kk allowed integer values.</p>\n<div class=\"note info\"><p>输出最优的 k 种可选取值对应的平方误差之和。</p></div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Sample Input 1</th>\n<th>Sample Output 1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2 1</td>\n<td></td>\n</tr>\n<tr>\n<td>50 20000</td>\n<td></td>\n</tr>\n<tr>\n<td>150 10000</td>\n<td>66670000</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Sample Input 2</th>\n<th>Sample Output 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2 2</td>\n<td></td>\n</tr>\n<tr>\n<td>50 20000</td>\n<td></td>\n</tr>\n<tr>\n<td>150 10000</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Sample Input 3</th>\n<th>Sample Output 3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4 2</td>\n<td></td>\n</tr>\n<tr>\n<td>0 30000</td>\n<td></td>\n</tr>\n<tr>\n<td>25 30000</td>\n<td></td>\n</tr>\n<tr>\n<td>50 30000</td>\n<td></td>\n</tr>\n<tr>\n<td>255 30000</td>\n<td>37500000</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>　　主要是dp,记忆化搜索＋剪枝,看后面的代码注释和题解</p>\n<h2 id=\"题目转化\"><a href=\"#题目转化\" class=\"headerlink\" title=\"题目转化\"></a>题目转化</h2><h3 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意\"></a>题意</h3><p>有256个位置，有d个位置上有人（每个位置上可能不止一个人），你可以在k个位置上插旗（每个位置上至多一面旗子），</p>\n<p>每个人都会走到离自己最近的旗子，求所有人走的距离的平方和的最小值。</p>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><p>要解决这个问题，我们可以建立一个二维数组<em>f[i][j]</em>，（j&lt;=i），表示前i个位置，放了j个旗子，其中第i个位置一定放了旗子，前i个位置上的所有人走到旗子上的最小距离平方和。</p>\n<p>如果我们假设第i个位置上的旗子是k个旗子中的最后一个（即第i个位置后面没有旗子），那么第i个位置后面的人只能全部走到第i个位置上，所以把_f[i][j]_加上i位置后面的人走到i位置的距离平方和就可以得到所有人走的距离平方和。</p>\n<p>因此我们可以枚举最后一个旗子插的位置i，将_f[i][j_]加上i后面的人走到i位置的距离平方和，取最小值，即为答案。</p>\n<p><em>f[i][j]</em>数组的建立我们可以用下面的公式来计算：<em>f[i][j]=min{f[m][j-1]+w[m][i]},（j-1&lt;=m&lt; i)</em>，其中<em>w[m][i]</em></p>\n<p>表示m~i这一段只有m和i位置放了旗子，这一段上的人走的距离平方和。</p>\n<p>由于第i个位置上固定了一面旗子，我们可以考虑另外j-1面旗子的位置。</p>\n<p>若j-1面旗子在前m个位置（可以假设第m个位置上一定放旗子），那么<em>f[i][j]</em>可以分解成两段计算，</p>\n<p>一段是1~m位置，放了j-1个旗子，其中第m个位置一定放了旗子，这就递归成了<em>f[m][j-1]</em>；</p>\n<p>另一段是m+1~i位置，只有m和i位置放了旗子，这一段上的人只能走到m和i，即<em>w[m][i]</em>。</p>\n<p>所以我们只要枚举m的值，取<em>f[m][j-1]+w[m][i]</em>的最小值，就可以得出<em>f[i][j]</em>的值。</p>\n<p>下面给出一个f[i][j]的实例：考虑f[8][3]，前8个位置，放了3个旗子，其中第3个位置一定放了旗子。</p>\n<p>剩余的2面旗子可能在前2/3/4/5/6/7个位置上，由此枚举出所有情况：</p>\n<p>剩余的2面旗子在：</p>\n<blockquote>\n<p>　　前2个位置：f[2][2]+w[2][8]<br>　　前3个位置：f[3][2]+w[3][8]<br>　　前4个位置：f[4][2]+w[4][8]<br>　　前5个位置：f[5][2]+w[5][8]<br>　　前6个位置：f[6][2]+w[6][8]<br>　　前7个位置：f[7][2]+w[7][8]</p>\n</blockquote>\n<p>取出这些值中的最小值，即得到f[8][3]的值。</p>\n<p>至于w[m][i]的建立较为简单，由于只有m和i位置放了旗子，m+1~i位置上的人只能就近走到m或i位置上，</p>\n<p>我们可以求出m和i的中值，前一半的人走到m，后一半的人走到i，求出距离平方和即可。</p>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 260</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读数据,返回一个整数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch=getchar();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断是否有符号</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">'0'</span>||ch&gt;<span class=\"string\">'9'</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;ch=getchar();&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按位读取组成整数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">'0'</span>&amp;&amp;ch&lt;=<span class=\"string\">'9'</span>) x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">'0'</span>,ch=getchar();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一共n个位置，kk个旗子,a[N]表示每个位置的人数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,kk,a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//f[i][j]表示前i个位置，放了j个旗子，其中第i个位置一定放了旗子的最小平方误差</span></span><br><span class=\"line\">ll w[N][N],f[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">min</span><span class=\"params\">(ll x,ll y)</span></span>&#123;<span class=\"keyword\">return</span> x&lt;y?x:y;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"a.in\",\"r\",stdin);</span></span><br><span class=\"line\">    n=read();</span><br><span class=\"line\">    kk=read(); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//旗子数不可以比位置数多</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(kk&gt;=n)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取每个位置的人数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=read();a[x+<span class=\"number\">1</span>]=read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//建立w[i][j],i是第一个旗子位置,j是第二个旗子的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">256</span>;++i)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//i~j这一段只在i和j位置放旗子的平方误差</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">2</span>;j&lt;=<span class=\"number\">256</span>;++j)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> mid=i+j&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//计算i到j之间所有的位置平方和</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> q=i+<span class=\"number\">1</span>;q&lt;=j<span class=\"number\">-1</span>;++q)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(q&gt;mid) </span><br><span class=\"line\">                  w[i][j]+=(ll)(j-q)*(j-q)*a[q];</span><br><span class=\"line\">                <span class=\"keyword\">else</span> </span><br><span class=\"line\">                  w[i][j]+=(ll)(q-i)*(q-i)*a[q];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//只放一个旗子的情况,旗子在i处，遍历i之前所有的位置,累加</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">256</span>;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;i;++j)</span><br><span class=\"line\">            f[i][<span class=\"number\">1</span>]+=(ll)(i-j)*(i-j)*a[j];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//建立f[i][j],j是旗子的数量，从２开始到kk</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&lt;=kk;++j)</span><br><span class=\"line\">        <span class=\"comment\">//i是一共多少个位置，从j到256</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=j;i&lt;=<span class=\"number\">256</span>;++i)&#123;</span><br><span class=\"line\">            f[i][j]=f[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//前j-1个旗子放在[1,m]这里，并且m处有旗子,i处也有旗子,转化成求f[m][j-1]+w[m][i]的最小值</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m=j<span class=\"number\">-1</span>;m&lt;i<span class=\"number\">-1</span>;++m)</span><br><span class=\"line\">                f[i][j]=min(f[i][j],f[m][j<span class=\"number\">-1</span>]+w[m][i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ll ans=f[<span class=\"number\">256</span>][kk];</span><br><span class=\"line\">    <span class=\"comment\">//统计答案，如果最后一个旗子不在最后一个位置，就还需要加上最后一个旗子后面的位置的平方和，枚举最后一个旗子插的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//i是最后一个旗子的位置,j是最后一个旗子到最后一个位置的每个位置,tmp是最后这部分的平方和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">255</span>;i&gt;=kk;--i)&#123;</span><br><span class=\"line\">        ll tmp=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">256</span>;j&gt;i;--j)</span><br><span class=\"line\">          tmp+=(ll)(j-i)*(j-i)*a[j];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//比较不同位置的平方和，取最小值</span></span><br><span class=\"line\">        ans=min(ans,f[i][kk]+tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>"},{"title":"arch安装和gnome配置教程","comments":1,"mathjax":false,"date":"2019-07-20T13:13:37.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n# 前言\n两天前,我的arch,被我不小心升级glibc搞坏了..很久前就想重装下系统的,因此也就懒得重新再修复了,直接重装一个也挺好.\n\n但是!隔了这么久重装系统搞得我心态都快崩了,各种找资料.\n现在终于弄好啦,还是决定记录一下,以后就不用那么担心教程靠不靠谱\n{% endnote %}\n<!--more-->\n\n# 说明\n- 已有系统: Win10\n- 安装系统: archlinux-2019.07.1-x86_64\n- 安装磁盘: 机械硬盘的后半部分(前半部分是windows的数据)\n- 启动方式: UEFI\n- 分区格式: GPT\n- 桌面系统: Gnome3\n- 参考链接: [ArchWiki](https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%AE%89%E8%A3%85%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87)\n- 参考链接: [Arch安装教程](http://blog.lucode.net/linux/archlinux-install-tutorial.html)\n- 参考链接: [Arch安装图文教程](https://blog.csdn.net/r8l8q8/article/details/76516523)\n\n\n# 准备工作\n## 准备安装介质\n说的简单点就是为制作启动盘做准备,安装系统当然需要这个系统的镜像文件.\n可以到[Arch Download](https://www.archlinux.org/download/)这里下载镜像\n一直往下可以看到CHINA的标志, 推荐选择163的源下载,[链接在这](http://mirrors.163.com/archlinux/iso/2019.07.01/)\n\n## 制作LiveCD\n如果在windows环境制作的,可以使用[USBwriter](http://sourceforge.net/p/usbwriter/wiki/Documentation/),或者其他一些工具\n\n因为我电脑有现成的fedora media writer,所以用这个也可以制作\n\n## 网络\n身边需要可以连接的网络,有线网或者无线网\n\n如果没有wifi可以连,当然,这个wifi不能是校园网,不然没办法直接命令行连接.\n没wifi可以手机开热点啊,hhh\n\n## 磁盘空间\n从widows盘那边分出一部分给linux,我选择先压缩卷,然后新建简单卷,之后的安装就安装在这个简单卷上.\n\n选择新建简单卷还是因为安装的时候能够看的更清楚第一个分区的开始扇区\n\n## 设置usb启动\n如果以前设置过usb启动优先就不用管了\n\n进入BIOS,设置开机选项,调整开机顺序,让usb启动排在第一位\n完事之后就可以直接插入你的U盘,开始装系统!\n\n# 安装准备\n## 联网\n后面需要安装很多东西,所以最好先联网\n\n```\n# wifi-menu\n```\n\n会跳出来wifi选择的页面,自己选之前准备好的wifi连上就成\n\n## 编辑mirrorlist\n目的是为了后面下载的时候速度能快点,国外的镜像站太慢啦.\n\n```\n# vi /etc/pacman.d/mirrorlist\n# 按下面描述修改mirrorlist\n# pacman -Syy\n```\n\n我默认你已经会vim了,找163关键词,然后把163的镜像站复制粘贴到第一个镜像站前面.一堆的网址就是镜像站啦.\n\n如果不放心,还可以找关键词China,把其他的ustc之类的都放前面去.\n记得,保存后`pacman -Syy`\n\n## 分区\n**最重要的一步来咯**\n我选择了UEFI启动,对应使用GPT分区\n我的机械硬盘是/dev/sdb\n\n### 分区规划\n创建4个分区如下\n- /boot　200M　/dev/sdb3\n- /swap　8G　　/dev/sdb4\n- /root　60G　 /dev/sdb5\n- /home　150G　/dev/sdb6\n\n别问我为什么/root设置这么大，为什么人家都推荐30G左右...\n重装的其中一个原因就是/root爆了，扩容又麻烦，原本设置的是40G\n/swap设置的是和我物理内存一样的大小\n\n### 查看磁盘情况\n确定你要安装的磁盘是sd几，然后使用gdisk划分磁盘\n\n```\n# fdisk -l\n```\n你看到的东西应该类似下面的\n> Disk /dev/sdb: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors\n> Disk model: HGST HTS721010A9\n> Units: sectors of 1 * 512 = 512 bytes\n> Sector size (logical/physical): 512 bytes / 4096 bytes\n> I/O size (minimum/optimal): 4096 bytes / 4096 bytes\n> Disklabel type: gpt\n> Disk identifier: 94717E4F-9437-4814-96AA-5CD870012F36\n> \n> Device          Start        End   Sectors  Size Type\n> /dev/sdb1        2048  587202559 587200512  280G Microsoft basic data\n> /dev/sdb2   587202560 1468008447 880805888  420G Microsoft basic data\n> /dev/sdb3  1468008448 1468418047    409600  200M EFI System\n> /dev/sdb4  1468418048 1485195263  16777216    8G Linux swap\n> /dev/sdb5  1485195264 1611024383 125829120   60G Linux root (x86)\n> /dev/sdb6  1611024384 1925597183 314572800  150G Linux home\n> \n> \n> Disk /dev/sda: 119.25 GiB, 128035676160 bytes, 250069680 sectors\n> Disk model: SanDisk SD8SNAT-\n> Units: sectors of 1 * 512 = 512 bytes\n> Sector size (logical/physical): 512 bytes / 4096 bytes\n> I/O size (minimum/optimal): 4096 bytes / 4096 bytes\n> Disklabel type: gpt\n> Disk identifier: A7EA8BD9-4B05-4419-AEFA-7B4F01E54CC2\n> \n> Device         Start       End   Sectors   Size Type\n> /dev/sda1       2048    534527    532480   260M EFI System\n> /dev/sda2     534528    567295     32768    16M Microsoft reserved\n> /dev/sda3     567296 246266737 245699442 117.2G Microsoft basic data\n> /dev/sda4  246267904 250058751   3790848   1.8G Windows recovery environment\n\n通过容量判断我要安装的磁盘是sda还是sdb\n\n通过Type可以看到sdb1和sdb2都是Microsoft basic data,那是我的D盘和F盘\n\n### 分区\n\n```\ngdisk /dev/sdb\n```\n记得这里sdb要换成你自己的sd..\n\ngdisk的使用很简单，先使用？打印帮助，使用p打印分区表\n\n如果你的磁盘是空的，使用o新建一个gpt分区表，如果不是空磁盘，别这么做\n\n接着使用ｎ命令新建一个磁盘分区,然后输入分区号，默认回车就可以\n然后设置开始扇区，如果没啥意外，直接回车\n设置结束扇区，可以使用**+60G**这样的方式，不用自己计算，很方便\n接着设置Hex code, 这个很重要,可以使用L查看所有的codes,下面列出要用的\n> /boot: EF00\n> /swap: 8200\n> /root: 8303\n> /home: 8302\n\n### 格式化分区\n格式化EFI分区/boot\n\n```\n# mkfs.fat -F32 /dev/sdb3\n```\n\n格式化/root和/home\n\n```\n# mkfs.ext4 /dev/sdb5\n# mkfs.ext4 /dev/sdb6\n```\n\n开启swap分区/swap\n\n```\n# mkwsap /dev/sdb4\n# swapon /dev/sdb4\n```\n\n### 挂载分区\n一般是将根分区/挂载到/mnt下,然后将/boot和/home挂载到/mnt/boot和/mnt/home\n\n```\n# mount /dev/sdb5 /mnt\n# mkdir /mnt/{boot, home}\n# mount /dev/sdb6 /mnt/home\n# mount /dev/sdb3 /mnt/boot\n```\n\n# 安装基本系统\n## 部署基本系统\n\n```\n# pacstrap -i /mnt base base-devel net-tools\n```\n这里的net-tools提供了netstat和ifconfig等命令,可以选择不装,差别不大\n\n## 生成fstab\nfstab中记录了挂载信息,使用下面命令生成\n\n```\n# genfstab -U -p /mnt >> /mnt/etc/fstab\n```\n使用`cat /mnt/etc/fstab`检查\n\n## 基本系统设置\n### 切换到新系统\n\n```\n# arch-chroot /mnt /bin/bash\n```\n### 设置locale\n\n```\n# vim /etc/locale.gen\n```\n这里是配置本地语言环境,起码要中英文的UTF-8,所以把`en_US.UTF-8\nUTF-8`和`zh_CN.UTF-8 UTF-8`取消注释, 然后保存退出\n然后执行: \n\n```\n# locale-gen\n# # echo LANG=en_US.UTF-8 > /etc/locale.conf\n```\n\n### 设置时区\n执行如下代码:\n\n```\n# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n### 设置硬件时间\n执行如下代码:\n\n```\n# hwclock --systohc --utc\n```\n\n### 设置主机名\n建议使用小写\n\n```\n# echo 主机名 > /etc/hostname\n# vim /etc/hosts\n```\nhosts文件中有如下内容\n> 127.0.0.1\tlocalhost\n> ::1\t\tlocalhost\n> 127.0.1.1\tmyhostname.localdomain\tmyhostname\n\n如果系统有一个永久的 IP 地址，请使用这个永久的 IP 地址而不是 127.0.1.1\n\n### 生成Initramfs\n注意,这步只对 LVM、 system encryption 或 RAID有效\n正常情况下,在执行pacstrap的时候已经安装linux,并且mkinitcpio自动运行\n\n```\n# mkinitcpio -p linux\n```\n\n### 用户设置\n修改root用户密码,并且创建一个新用户,同样修改密码\n建议root密码和用户密码不要设置成一样的,平时用普通用户就可以\n\n**如果需要用root,必须清楚自己每一步会有什么后果!**\n\n```\n# passwd\n# ****你的密码****\n# useradd -m -g users -s /bin/bash 用户名\n# passwd 用户名\n# ****用户密码****\n```\n\n### 配置UEFI引导(重点)\n(这里网上看到的都有点不太一样, 导致我安装完之后电脑一直找不到Linux的引导项,\n一直进不来linux, 后来在archwiki上看到了正确的方法, 记录如下)\n\n这里使用UEFI引导,而不是BIOS,两者的区别自行百度\n\n关于启动加载器可以自己查看[ArchWiki](https://wiki.archlinux.org/index.php/Arch_boot_process_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E5%90%AF%E5%8A%A8%E5%8A%A0%E8%BD%BD%E5%99%A8),里面讲的很清楚\n\n我们选择GRUB [ArchWiki](https://wiki.archlinux.org/index.php/GRUB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)来引导系统,具体过程在archwiki中也讲的很清楚,这里不多赘述\n\n安装必要软件包\n\n```\n# pacman -S dosfstools grub efibootmgr\n```\n**注意,我们选择的EFI系统分区是之前的/boot, 选择的启动引导器标识是GRUB,\n不懂可以不管, 直接执行**\n\n执行下面的命令来将 GRUB EFI 应用 `grubx64.efi` 安装到\n`/boot/EFI/GRUB/`，并将其模块安装到 `/boot/grub/x86_64-efi/`。\n\n```\n# grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB\n```\n\n安装完之后GRUB目录位于在/boot/grub/\n\n然后执行下面命令生成主配置文件`grub.cfg`\n\n```\n# grub-mkconfig -o /boot/grub/grub.cfg\n```\n\n在/boot目录使用`tree -d`会有如下内容\n> .\n> ├── EFI\n> │   └── GRUB\n> ├── grub\n> │   ├── fonts\n> │   ├── themes\n> │   │   └── starfield\n> │   └── x86_64-efi\n> └── syslinux\n\n### 退出chroot重启\n笔记本退出之前要先安装dialog\n\n```\n# pacman -S iw wpa_supplicant dialog\n# exit\n# umount /mnt/{boot, home}\n# umount /mnt\n# reboot\n```\n\n其实不重启也可以, 这时候还连着网, 直接把需要安装的一次性装了,\n然后直接进到图形界面, 不然联网会很麻烦. 图形界面可以用networkmanager连网\n\n# 驱动安装\n## 显卡驱动\n具体的驱动匹配表可以查看[ArchWiki](https://wiki.archlinux.org/index.php/Xorg_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E5%AE%89%E8%A3%85)\n\n再次折腾了一次Nvidia驱动, 失败告终, 难受\n显卡驱动默认的vesa可以兼容大部分显卡了\n我是双显卡, 安装了下面三个显卡驱动\n\n```\n# pacman -S xf86-video-vesa     通用驱动\n# pacman -S xf86-video-intel    intel集显驱动\n# pacman -S xf86-video-nouveau  开源的N卡驱动\n```\n\n## 触摸板驱动\n\n```\n# pacman -S xf86-input-synaptics\n```\n\n## Xorg显示服务器\nxorg是其他例如xfce和gnome, kde一些桌面环境的基础, 提供图形环境基本框架\n\n```\n# pacman -S xorg\n```\n\n# 安装Gnome桌面环境\n","source":"_posts/arch安装和gnome配置教程.md","raw":"---\ntitle: arch安装和gnome配置教程\ntags:\n  - Arch\n  - Gnome\n  - UEFI\n  - GPT\n  - 双系统\n  - Install\ncategories:\n  - Daily\ncomments: true\nmathjax: false\ndate: 2019-07-20 21:13:37\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n# 前言\n两天前,我的arch,被我不小心升级glibc搞坏了..很久前就想重装下系统的,因此也就懒得重新再修复了,直接重装一个也挺好.\n\n但是!隔了这么久重装系统搞得我心态都快崩了,各种找资料.\n现在终于弄好啦,还是决定记录一下,以后就不用那么担心教程靠不靠谱\n{% endnote %}\n<!--more-->\n\n# 说明\n- 已有系统: Win10\n- 安装系统: archlinux-2019.07.1-x86_64\n- 安装磁盘: 机械硬盘的后半部分(前半部分是windows的数据)\n- 启动方式: UEFI\n- 分区格式: GPT\n- 桌面系统: Gnome3\n- 参考链接: [ArchWiki](https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%AE%89%E8%A3%85%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87)\n- 参考链接: [Arch安装教程](http://blog.lucode.net/linux/archlinux-install-tutorial.html)\n- 参考链接: [Arch安装图文教程](https://blog.csdn.net/r8l8q8/article/details/76516523)\n\n\n# 准备工作\n## 准备安装介质\n说的简单点就是为制作启动盘做准备,安装系统当然需要这个系统的镜像文件.\n可以到[Arch Download](https://www.archlinux.org/download/)这里下载镜像\n一直往下可以看到CHINA的标志, 推荐选择163的源下载,[链接在这](http://mirrors.163.com/archlinux/iso/2019.07.01/)\n\n## 制作LiveCD\n如果在windows环境制作的,可以使用[USBwriter](http://sourceforge.net/p/usbwriter/wiki/Documentation/),或者其他一些工具\n\n因为我电脑有现成的fedora media writer,所以用这个也可以制作\n\n## 网络\n身边需要可以连接的网络,有线网或者无线网\n\n如果没有wifi可以连,当然,这个wifi不能是校园网,不然没办法直接命令行连接.\n没wifi可以手机开热点啊,hhh\n\n## 磁盘空间\n从widows盘那边分出一部分给linux,我选择先压缩卷,然后新建简单卷,之后的安装就安装在这个简单卷上.\n\n选择新建简单卷还是因为安装的时候能够看的更清楚第一个分区的开始扇区\n\n## 设置usb启动\n如果以前设置过usb启动优先就不用管了\n\n进入BIOS,设置开机选项,调整开机顺序,让usb启动排在第一位\n完事之后就可以直接插入你的U盘,开始装系统!\n\n# 安装准备\n## 联网\n后面需要安装很多东西,所以最好先联网\n\n```\n# wifi-menu\n```\n\n会跳出来wifi选择的页面,自己选之前准备好的wifi连上就成\n\n## 编辑mirrorlist\n目的是为了后面下载的时候速度能快点,国外的镜像站太慢啦.\n\n```\n# vi /etc/pacman.d/mirrorlist\n# 按下面描述修改mirrorlist\n# pacman -Syy\n```\n\n我默认你已经会vim了,找163关键词,然后把163的镜像站复制粘贴到第一个镜像站前面.一堆的网址就是镜像站啦.\n\n如果不放心,还可以找关键词China,把其他的ustc之类的都放前面去.\n记得,保存后`pacman -Syy`\n\n## 分区\n**最重要的一步来咯**\n我选择了UEFI启动,对应使用GPT分区\n我的机械硬盘是/dev/sdb\n\n### 分区规划\n创建4个分区如下\n- /boot　200M　/dev/sdb3\n- /swap　8G　　/dev/sdb4\n- /root　60G　 /dev/sdb5\n- /home　150G　/dev/sdb6\n\n别问我为什么/root设置这么大，为什么人家都推荐30G左右...\n重装的其中一个原因就是/root爆了，扩容又麻烦，原本设置的是40G\n/swap设置的是和我物理内存一样的大小\n\n### 查看磁盘情况\n确定你要安装的磁盘是sd几，然后使用gdisk划分磁盘\n\n```\n# fdisk -l\n```\n你看到的东西应该类似下面的\n> Disk /dev/sdb: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors\n> Disk model: HGST HTS721010A9\n> Units: sectors of 1 * 512 = 512 bytes\n> Sector size (logical/physical): 512 bytes / 4096 bytes\n> I/O size (minimum/optimal): 4096 bytes / 4096 bytes\n> Disklabel type: gpt\n> Disk identifier: 94717E4F-9437-4814-96AA-5CD870012F36\n> \n> Device          Start        End   Sectors  Size Type\n> /dev/sdb1        2048  587202559 587200512  280G Microsoft basic data\n> /dev/sdb2   587202560 1468008447 880805888  420G Microsoft basic data\n> /dev/sdb3  1468008448 1468418047    409600  200M EFI System\n> /dev/sdb4  1468418048 1485195263  16777216    8G Linux swap\n> /dev/sdb5  1485195264 1611024383 125829120   60G Linux root (x86)\n> /dev/sdb6  1611024384 1925597183 314572800  150G Linux home\n> \n> \n> Disk /dev/sda: 119.25 GiB, 128035676160 bytes, 250069680 sectors\n> Disk model: SanDisk SD8SNAT-\n> Units: sectors of 1 * 512 = 512 bytes\n> Sector size (logical/physical): 512 bytes / 4096 bytes\n> I/O size (minimum/optimal): 4096 bytes / 4096 bytes\n> Disklabel type: gpt\n> Disk identifier: A7EA8BD9-4B05-4419-AEFA-7B4F01E54CC2\n> \n> Device         Start       End   Sectors   Size Type\n> /dev/sda1       2048    534527    532480   260M EFI System\n> /dev/sda2     534528    567295     32768    16M Microsoft reserved\n> /dev/sda3     567296 246266737 245699442 117.2G Microsoft basic data\n> /dev/sda4  246267904 250058751   3790848   1.8G Windows recovery environment\n\n通过容量判断我要安装的磁盘是sda还是sdb\n\n通过Type可以看到sdb1和sdb2都是Microsoft basic data,那是我的D盘和F盘\n\n### 分区\n\n```\ngdisk /dev/sdb\n```\n记得这里sdb要换成你自己的sd..\n\ngdisk的使用很简单，先使用？打印帮助，使用p打印分区表\n\n如果你的磁盘是空的，使用o新建一个gpt分区表，如果不是空磁盘，别这么做\n\n接着使用ｎ命令新建一个磁盘分区,然后输入分区号，默认回车就可以\n然后设置开始扇区，如果没啥意外，直接回车\n设置结束扇区，可以使用**+60G**这样的方式，不用自己计算，很方便\n接着设置Hex code, 这个很重要,可以使用L查看所有的codes,下面列出要用的\n> /boot: EF00\n> /swap: 8200\n> /root: 8303\n> /home: 8302\n\n### 格式化分区\n格式化EFI分区/boot\n\n```\n# mkfs.fat -F32 /dev/sdb3\n```\n\n格式化/root和/home\n\n```\n# mkfs.ext4 /dev/sdb5\n# mkfs.ext4 /dev/sdb6\n```\n\n开启swap分区/swap\n\n```\n# mkwsap /dev/sdb4\n# swapon /dev/sdb4\n```\n\n### 挂载分区\n一般是将根分区/挂载到/mnt下,然后将/boot和/home挂载到/mnt/boot和/mnt/home\n\n```\n# mount /dev/sdb5 /mnt\n# mkdir /mnt/{boot, home}\n# mount /dev/sdb6 /mnt/home\n# mount /dev/sdb3 /mnt/boot\n```\n\n# 安装基本系统\n## 部署基本系统\n\n```\n# pacstrap -i /mnt base base-devel net-tools\n```\n这里的net-tools提供了netstat和ifconfig等命令,可以选择不装,差别不大\n\n## 生成fstab\nfstab中记录了挂载信息,使用下面命令生成\n\n```\n# genfstab -U -p /mnt >> /mnt/etc/fstab\n```\n使用`cat /mnt/etc/fstab`检查\n\n## 基本系统设置\n### 切换到新系统\n\n```\n# arch-chroot /mnt /bin/bash\n```\n### 设置locale\n\n```\n# vim /etc/locale.gen\n```\n这里是配置本地语言环境,起码要中英文的UTF-8,所以把`en_US.UTF-8\nUTF-8`和`zh_CN.UTF-8 UTF-8`取消注释, 然后保存退出\n然后执行: \n\n```\n# locale-gen\n# # echo LANG=en_US.UTF-8 > /etc/locale.conf\n```\n\n### 设置时区\n执行如下代码:\n\n```\n# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n### 设置硬件时间\n执行如下代码:\n\n```\n# hwclock --systohc --utc\n```\n\n### 设置主机名\n建议使用小写\n\n```\n# echo 主机名 > /etc/hostname\n# vim /etc/hosts\n```\nhosts文件中有如下内容\n> 127.0.0.1\tlocalhost\n> ::1\t\tlocalhost\n> 127.0.1.1\tmyhostname.localdomain\tmyhostname\n\n如果系统有一个永久的 IP 地址，请使用这个永久的 IP 地址而不是 127.0.1.1\n\n### 生成Initramfs\n注意,这步只对 LVM、 system encryption 或 RAID有效\n正常情况下,在执行pacstrap的时候已经安装linux,并且mkinitcpio自动运行\n\n```\n# mkinitcpio -p linux\n```\n\n### 用户设置\n修改root用户密码,并且创建一个新用户,同样修改密码\n建议root密码和用户密码不要设置成一样的,平时用普通用户就可以\n\n**如果需要用root,必须清楚自己每一步会有什么后果!**\n\n```\n# passwd\n# ****你的密码****\n# useradd -m -g users -s /bin/bash 用户名\n# passwd 用户名\n# ****用户密码****\n```\n\n### 配置UEFI引导(重点)\n(这里网上看到的都有点不太一样, 导致我安装完之后电脑一直找不到Linux的引导项,\n一直进不来linux, 后来在archwiki上看到了正确的方法, 记录如下)\n\n这里使用UEFI引导,而不是BIOS,两者的区别自行百度\n\n关于启动加载器可以自己查看[ArchWiki](https://wiki.archlinux.org/index.php/Arch_boot_process_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E5%90%AF%E5%8A%A8%E5%8A%A0%E8%BD%BD%E5%99%A8),里面讲的很清楚\n\n我们选择GRUB [ArchWiki](https://wiki.archlinux.org/index.php/GRUB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)来引导系统,具体过程在archwiki中也讲的很清楚,这里不多赘述\n\n安装必要软件包\n\n```\n# pacman -S dosfstools grub efibootmgr\n```\n**注意,我们选择的EFI系统分区是之前的/boot, 选择的启动引导器标识是GRUB,\n不懂可以不管, 直接执行**\n\n执行下面的命令来将 GRUB EFI 应用 `grubx64.efi` 安装到\n`/boot/EFI/GRUB/`，并将其模块安装到 `/boot/grub/x86_64-efi/`。\n\n```\n# grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB\n```\n\n安装完之后GRUB目录位于在/boot/grub/\n\n然后执行下面命令生成主配置文件`grub.cfg`\n\n```\n# grub-mkconfig -o /boot/grub/grub.cfg\n```\n\n在/boot目录使用`tree -d`会有如下内容\n> .\n> ├── EFI\n> │   └── GRUB\n> ├── grub\n> │   ├── fonts\n> │   ├── themes\n> │   │   └── starfield\n> │   └── x86_64-efi\n> └── syslinux\n\n### 退出chroot重启\n笔记本退出之前要先安装dialog\n\n```\n# pacman -S iw wpa_supplicant dialog\n# exit\n# umount /mnt/{boot, home}\n# umount /mnt\n# reboot\n```\n\n其实不重启也可以, 这时候还连着网, 直接把需要安装的一次性装了,\n然后直接进到图形界面, 不然联网会很麻烦. 图形界面可以用networkmanager连网\n\n# 驱动安装\n## 显卡驱动\n具体的驱动匹配表可以查看[ArchWiki](https://wiki.archlinux.org/index.php/Xorg_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E5%AE%89%E8%A3%85)\n\n再次折腾了一次Nvidia驱动, 失败告终, 难受\n显卡驱动默认的vesa可以兼容大部分显卡了\n我是双显卡, 安装了下面三个显卡驱动\n\n```\n# pacman -S xf86-video-vesa     通用驱动\n# pacman -S xf86-video-intel    intel集显驱动\n# pacman -S xf86-video-nouveau  开源的N卡驱动\n```\n\n## 触摸板驱动\n\n```\n# pacman -S xf86-input-synaptics\n```\n\n## Xorg显示服务器\nxorg是其他例如xfce和gnome, kde一些桌面环境的基础, 提供图形环境基本框架\n\n```\n# pacman -S xorg\n```\n\n# 安装Gnome桌面环境\n","slug":"arch安装和gnome配置教程","published":1,"updated":"2019-07-20T17:10:05.899Z","_id":"cjycjtjn20005ussbdzcrri17","layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>两天前,我的arch,被我不小心升级glibc搞坏了..很久前就想重装下系统的,因此也就懒得重新再修复了,直接重装一个也挺好.</p>\n<p>但是!隔了这么久重装系统搞得我心态都快崩了,各种找资料.<br>现在终于弄好啦,还是决定记录一下,以后就不用那么担心教程靠不靠谱</p></div>\n<a id=\"more\"></a>\n<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><ul>\n<li>已有系统: Win10</li>\n<li>安装系统: archlinux-2019.07.1-x86_64</li>\n<li>安装磁盘: 机械硬盘的后半部分(前半部分是windows的数据)</li>\n<li>启动方式: UEFI</li>\n<li>分区格式: GPT</li>\n<li>桌面系统: Gnome3</li>\n<li>参考链接: <a href=\"https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target=\"_blank\" rel=\"noopener\">ArchWiki</a>#%E5%AE%89%E8%A3%85%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87)</li>\n<li>参考链接: <a href=\"http://blog.lucode.net/linux/archlinux-install-tutorial.html\" target=\"_blank\" rel=\"noopener\">Arch安装教程</a></li>\n<li>参考链接: <a href=\"https://blog.csdn.net/r8l8q8/article/details/76516523\" target=\"_blank\" rel=\"noopener\">Arch安装图文教程</a></li>\n</ul>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"准备安装介质\"><a href=\"#准备安装介质\" class=\"headerlink\" title=\"准备安装介质\"></a>准备安装介质</h2><p>说的简单点就是为制作启动盘做准备,安装系统当然需要这个系统的镜像文件.<br>可以到<a href=\"https://www.archlinux.org/download/\" target=\"_blank\" rel=\"noopener\">Arch Download</a>这里下载镜像<br>一直往下可以看到CHINA的标志, 推荐选择163的源下载,<a href=\"http://mirrors.163.com/archlinux/iso/2019.07.01/\" target=\"_blank\" rel=\"noopener\">链接在这</a></p>\n<h2 id=\"制作LiveCD\"><a href=\"#制作LiveCD\" class=\"headerlink\" title=\"制作LiveCD\"></a>制作LiveCD</h2><p>如果在windows环境制作的,可以使用<a href=\"http://sourceforge.net/p/usbwriter/wiki/Documentation/\" target=\"_blank\" rel=\"noopener\">USBwriter</a>,或者其他一些工具</p>\n<p>因为我电脑有现成的fedora media writer,所以用这个也可以制作</p>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><p>身边需要可以连接的网络,有线网或者无线网</p>\n<p>如果没有wifi可以连,当然,这个wifi不能是校园网,不然没办法直接命令行连接.<br>没wifi可以手机开热点啊,hhh</p>\n<h2 id=\"磁盘空间\"><a href=\"#磁盘空间\" class=\"headerlink\" title=\"磁盘空间\"></a>磁盘空间</h2><p>从widows盘那边分出一部分给linux,我选择先压缩卷,然后新建简单卷,之后的安装就安装在这个简单卷上.</p>\n<p>选择新建简单卷还是因为安装的时候能够看的更清楚第一个分区的开始扇区</p>\n<h2 id=\"设置usb启动\"><a href=\"#设置usb启动\" class=\"headerlink\" title=\"设置usb启动\"></a>设置usb启动</h2><p>如果以前设置过usb启动优先就不用管了</p>\n<p>进入BIOS,设置开机选项,调整开机顺序,让usb启动排在第一位<br>完事之后就可以直接插入你的U盘,开始装系统!</p>\n<h1 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h1><h2 id=\"联网\"><a href=\"#联网\" class=\"headerlink\" title=\"联网\"></a>联网</h2><p>后面需要安装很多东西,所以最好先联网</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wifi-menu</span><br></pre></td></tr></table></figure>\n<p>会跳出来wifi选择的页面,自己选之前准备好的wifi连上就成</p>\n<h2 id=\"编辑mirrorlist\"><a href=\"#编辑mirrorlist\" class=\"headerlink\" title=\"编辑mirrorlist\"></a>编辑mirrorlist</h2><p>目的是为了后面下载的时候速度能快点,国外的镜像站太慢啦.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vi /etc/pacman.d/mirrorlist</span><br><span class=\"line\"># 按下面描述修改mirrorlist</span><br><span class=\"line\"># pacman -Syy</span><br></pre></td></tr></table></figure>\n<p>我默认你已经会vim了,找163关键词,然后把163的镜像站复制粘贴到第一个镜像站前面.一堆的网址就是镜像站啦.</p>\n<p>如果不放心,还可以找关键词China,把其他的ustc之类的都放前面去.<br>记得,保存后<code>pacman -Syy</code></p>\n<h2 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h2><p><strong>最重要的一步来咯</strong><br>我选择了UEFI启动,对应使用GPT分区<br>我的机械硬盘是/dev/sdb</p>\n<h3 id=\"分区规划\"><a href=\"#分区规划\" class=\"headerlink\" title=\"分区规划\"></a>分区规划</h3><p>创建4个分区如下</p>\n<ul>\n<li>/boot　200M　/dev/sdb3</li>\n<li>/swap　8G　　/dev/sdb4</li>\n<li>/root　60G　 /dev/sdb5</li>\n<li>/home　150G　/dev/sdb6</li>\n</ul>\n<p>别问我为什么/root设置这么大，为什么人家都推荐30G左右…<br>重装的其中一个原因就是/root爆了，扩容又麻烦，原本设置的是40G<br>/swap设置的是和我物理内存一样的大小</p>\n<h3 id=\"查看磁盘情况\"><a href=\"#查看磁盘情况\" class=\"headerlink\" title=\"查看磁盘情况\"></a>查看磁盘情况</h3><p>确定你要安装的磁盘是sd几，然后使用gdisk划分磁盘</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># fdisk -l</span><br></pre></td></tr></table></figure>\n<p>你看到的东西应该类似下面的</p>\n<blockquote>\n<p>Disk /dev/sdb: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors<br>Disk model: HGST HTS721010A9<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 4096 bytes<br>I/O size (minimum/optimal): 4096 bytes / 4096 bytes<br>Disklabel type: gpt<br>Disk identifier: 94717E4F-9437-4814-96AA-5CD870012F36</p>\n<p>Device          Start        End   Sectors  Size Type<br>/dev/sdb1        2048  587202559 587200512  280G Microsoft basic data<br>/dev/sdb2   587202560 1468008447 880805888  420G Microsoft basic data<br>/dev/sdb3  1468008448 1468418047    409600  200M EFI System<br>/dev/sdb4  1468418048 1485195263  16777216    8G Linux swap<br>/dev/sdb5  1485195264 1611024383 125829120   60G Linux root (x86)<br>/dev/sdb6  1611024384 1925597183 314572800  150G Linux home</p>\n<p>Disk /dev/sda: 119.25 GiB, 128035676160 bytes, 250069680 sectors<br>Disk model: SanDisk SD8SNAT-<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 4096 bytes<br>I/O size (minimum/optimal): 4096 bytes / 4096 bytes<br>Disklabel type: gpt<br>Disk identifier: A7EA8BD9-4B05-4419-AEFA-7B4F01E54CC2</p>\n<p>Device         Start       End   Sectors   Size Type<br>/dev/sda1       2048    534527    532480   260M EFI System<br>/dev/sda2     534528    567295     32768    16M Microsoft reserved<br>/dev/sda3     567296 246266737 245699442 117.2G Microsoft basic data<br>/dev/sda4  246267904 250058751   3790848   1.8G Windows recovery environment</p>\n</blockquote>\n<p>通过容量判断我要安装的磁盘是sda还是sdb</p>\n<p>通过Type可以看到sdb1和sdb2都是Microsoft basic data,那是我的D盘和F盘</p>\n<h3 id=\"分区-1\"><a href=\"#分区-1\" class=\"headerlink\" title=\"分区\"></a>分区</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n<p>记得这里sdb要换成你自己的sd..</p>\n<p>gdisk的使用很简单，先使用？打印帮助，使用p打印分区表</p>\n<p>如果你的磁盘是空的，使用o新建一个gpt分区表，如果不是空磁盘，别这么做</p>\n<p>接着使用ｎ命令新建一个磁盘分区,然后输入分区号，默认回车就可以<br>然后设置开始扇区，如果没啥意外，直接回车<br>设置结束扇区，可以使用<strong>+60G</strong>这样的方式，不用自己计算，很方便<br>接着设置Hex code, 这个很重要,可以使用L查看所有的codes,下面列出要用的</p>\n<blockquote>\n<p>/boot: EF00<br>/swap: 8200<br>/root: 8303<br>/home: 8302</p>\n</blockquote>\n<h3 id=\"格式化分区\"><a href=\"#格式化分区\" class=\"headerlink\" title=\"格式化分区\"></a>格式化分区</h3><p>格式化EFI分区/boot</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkfs.fat -F32 /dev/sdb3</span><br></pre></td></tr></table></figure>\n<p>格式化/root和/home</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkfs.ext4 /dev/sdb5</span><br><span class=\"line\"># mkfs.ext4 /dev/sdb6</span><br></pre></td></tr></table></figure>\n<p>开启swap分区/swap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkwsap /dev/sdb4</span><br><span class=\"line\"># swapon /dev/sdb4</span><br></pre></td></tr></table></figure>\n<h3 id=\"挂载分区\"><a href=\"#挂载分区\" class=\"headerlink\" title=\"挂载分区\"></a>挂载分区</h3><p>一般是将根分区/挂载到/mnt下,然后将/boot和/home挂载到/mnt/boot和/mnt/home</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mount /dev/sdb5 /mnt</span><br><span class=\"line\"># mkdir /mnt/&#123;boot, home&#125;</span><br><span class=\"line\"># mount /dev/sdb6 /mnt/home</span><br><span class=\"line\"># mount /dev/sdb3 /mnt/boot</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装基本系统\"><a href=\"#安装基本系统\" class=\"headerlink\" title=\"安装基本系统\"></a>安装基本系统</h1><h2 id=\"部署基本系统\"><a href=\"#部署基本系统\" class=\"headerlink\" title=\"部署基本系统\"></a>部署基本系统</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pacstrap -i /mnt base base-devel net-tools</span><br></pre></td></tr></table></figure>\n<p>这里的net-tools提供了netstat和ifconfig等命令,可以选择不装,差别不大</p>\n<h2 id=\"生成fstab\"><a href=\"#生成fstab\" class=\"headerlink\" title=\"生成fstab\"></a>生成fstab</h2><p>fstab中记录了挂载信息,使用下面命令生成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>\n<p>使用<code>cat /mnt/etc/fstab</code>检查</p>\n<h2 id=\"基本系统设置\"><a href=\"#基本系统设置\" class=\"headerlink\" title=\"基本系统设置\"></a>基本系统设置</h2><h3 id=\"切换到新系统\"><a href=\"#切换到新系统\" class=\"headerlink\" title=\"切换到新系统\"></a>切换到新系统</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># arch-chroot /mnt /bin/bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置locale\"><a href=\"#设置locale\" class=\"headerlink\" title=\"设置locale\"></a>设置locale</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/locale.gen</span><br></pre></td></tr></table></figure>\n<p>这里是配置本地语言环境,起码要中英文的UTF-8,所以把<code>en_US.UTF-8\nUTF-8</code>和<code>zh_CN.UTF-8 UTF-8</code>取消注释, 然后保存退出<br>然后执行: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># locale-gen</span><br><span class=\"line\"># # echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置时区\"><a href=\"#设置时区\" class=\"headerlink\" title=\"设置时区\"></a>设置时区</h3><p>执行如下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置硬件时间\"><a href=\"#设置硬件时间\" class=\"headerlink\" title=\"设置硬件时间\"></a>设置硬件时间</h3><p>执行如下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hwclock --systohc --utc</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置主机名\"><a href=\"#设置主机名\" class=\"headerlink\" title=\"设置主机名\"></a>设置主机名</h3><p>建议使用小写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo 主机名 &gt; /etc/hostname</span><br><span class=\"line\"># vim /etc/hosts</span><br></pre></td></tr></table></figure>\n<p>hosts文件中有如下内容</p>\n<blockquote>\n<p>127.0.0.1    localhost<br>::1        localhost<br>127.0.1.1    myhostname.localdomain    myhostname</p>\n</blockquote>\n<p>如果系统有一个永久的 IP 地址，请使用这个永久的 IP 地址而不是 127.0.1.1</p>\n<h3 id=\"生成Initramfs\"><a href=\"#生成Initramfs\" class=\"headerlink\" title=\"生成Initramfs\"></a>生成Initramfs</h3><p>注意,这步只对 LVM、 system encryption 或 RAID有效<br>正常情况下,在执行pacstrap的时候已经安装linux,并且mkinitcpio自动运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkinitcpio -p linux</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户设置\"><a href=\"#用户设置\" class=\"headerlink\" title=\"用户设置\"></a>用户设置</h3><p>修改root用户密码,并且创建一个新用户,同样修改密码<br>建议root密码和用户密码不要设置成一样的,平时用普通用户就可以</p>\n<p><strong>如果需要用root,必须清楚自己每一步会有什么后果!</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># passwd</span><br><span class=\"line\"># ****你的密码****</span><br><span class=\"line\"># useradd -m -g users -s /bin/bash 用户名</span><br><span class=\"line\"># passwd 用户名</span><br><span class=\"line\"># ****用户密码****</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置UEFI引导-重点\"><a href=\"#配置UEFI引导-重点\" class=\"headerlink\" title=\"配置UEFI引导(重点)\"></a>配置UEFI引导(重点)</h3><p>(这里网上看到的都有点不太一样, 导致我安装完之后电脑一直找不到Linux的引导项,<br>一直进不来linux, 后来在archwiki上看到了正确的方法, 记录如下)</p>\n<p>这里使用UEFI引导,而不是BIOS,两者的区别自行百度</p>\n<p>关于启动加载器可以自己查看<a href=\"https://wiki.archlinux.org/index.php/Arch_boot_process_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E5%90%AF%E5%8A%A8%E5%8A%A0%E8%BD%BD%E5%99%A8\" target=\"_blank\" rel=\"noopener\">ArchWiki</a>,里面讲的很清楚</p>\n<p>我们选择GRUB <a href=\"https://wiki.archlinux.org/index.php/GRUB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target=\"_blank\" rel=\"noopener\">ArchWiki</a>来引导系统,具体过程在archwiki中也讲的很清楚,这里不多赘述</p>\n<p>安装必要软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pacman -S dosfstools grub efibootmgr</span><br></pre></td></tr></table></figure>\n<p><strong>注意,我们选择的EFI系统分区是之前的/boot, 选择的启动引导器标识是GRUB,<br>不懂可以不管, 直接执行</strong></p>\n<p>执行下面的命令来将 GRUB EFI 应用 <code>grubx64.efi</code> 安装到<br><code>/boot/EFI/GRUB/</code>，并将其模块安装到 <code>/boot/grub/x86_64-efi/</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB</span><br></pre></td></tr></table></figure>\n<p>安装完之后GRUB目录位于在/boot/grub/</p>\n<p>然后执行下面命令生成主配置文件<code>grub.cfg</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>\n<p>在/boot目录使用<code>tree -d</code>会有如下内容</p>\n<blockquote>\n<p>.<br>├── EFI<br>│   └── GRUB<br>├── grub<br>│   ├── fonts<br>│   ├── themes<br>│   │   └── starfield<br>│   └── x86_64-efi<br>└── syslinux</p>\n</blockquote>\n<h3 id=\"退出chroot重启\"><a href=\"#退出chroot重启\" class=\"headerlink\" title=\"退出chroot重启\"></a>退出chroot重启</h3><p>笔记本退出之前要先安装dialog</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pacman -S iw wpa_supplicant dialog</span><br><span class=\"line\"># exit</span><br><span class=\"line\"># umount /mnt/&#123;boot, home&#125;</span><br><span class=\"line\"># umount /mnt</span><br><span class=\"line\"># reboot</span><br></pre></td></tr></table></figure>\n<p>其实不重启也可以, 这时候还连着网, 直接把需要安装的一次性装了,<br>然后直接进到图形界面, 不然联网会很麻烦. 图形界面可以用networkmanager连网</p>\n<h1 id=\"驱动安装\"><a href=\"#驱动安装\" class=\"headerlink\" title=\"驱动安装\"></a>驱动安装</h1><h2 id=\"显卡驱动\"><a href=\"#显卡驱动\" class=\"headerlink\" title=\"显卡驱动\"></a>显卡驱动</h2><p>具体的驱动匹配表可以查看<a href=\"https://wiki.archlinux.org/index.php/Xorg_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">ArchWiki</a></p>\n<p>再次折腾了一次Nvidia驱动, 失败告终, 难受<br>显卡驱动默认的vesa可以兼容大部分显卡了<br>我是双显卡, 安装了下面三个显卡驱动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pacman -S xf86-video-vesa     通用驱动</span><br><span class=\"line\"># pacman -S xf86-video-intel    intel集显驱动</span><br><span class=\"line\"># pacman -S xf86-video-nouveau  开源的N卡驱动</span><br></pre></td></tr></table></figure>\n<h2 id=\"触摸板驱动\"><a href=\"#触摸板驱动\" class=\"headerlink\" title=\"触摸板驱动\"></a>触摸板驱动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pacman -S xf86-input-synaptics</span><br></pre></td></tr></table></figure>\n<h2 id=\"Xorg显示服务器\"><a href=\"#Xorg显示服务器\" class=\"headerlink\" title=\"Xorg显示服务器\"></a>Xorg显示服务器</h2><p>xorg是其他例如xfce和gnome, kde一些桌面环境的基础, 提供图形环境基本框架</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pacman -S xorg</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装Gnome桌面环境\"><a href=\"#安装Gnome桌面环境\" class=\"headerlink\" title=\"安装Gnome桌面环境\"></a>安装Gnome桌面环境</h1>","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>两天前,我的arch,被我不小心升级glibc搞坏了..很久前就想重装下系统的,因此也就懒得重新再修复了,直接重装一个也挺好.</p>\n<p>但是!隔了这么久重装系统搞得我心态都快崩了,各种找资料.<br>现在终于弄好啦,还是决定记录一下,以后就不用那么担心教程靠不靠谱</p></div>","more":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><ul>\n<li>已有系统: Win10</li>\n<li>安装系统: archlinux-2019.07.1-x86_64</li>\n<li>安装磁盘: 机械硬盘的后半部分(前半部分是windows的数据)</li>\n<li>启动方式: UEFI</li>\n<li>分区格式: GPT</li>\n<li>桌面系统: Gnome3</li>\n<li>参考链接: <a href=\"https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target=\"_blank\" rel=\"noopener\">ArchWiki</a>#%E5%AE%89%E8%A3%85%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87)</li>\n<li>参考链接: <a href=\"http://blog.lucode.net/linux/archlinux-install-tutorial.html\" target=\"_blank\" rel=\"noopener\">Arch安装教程</a></li>\n<li>参考链接: <a href=\"https://blog.csdn.net/r8l8q8/article/details/76516523\" target=\"_blank\" rel=\"noopener\">Arch安装图文教程</a></li>\n</ul>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"准备安装介质\"><a href=\"#准备安装介质\" class=\"headerlink\" title=\"准备安装介质\"></a>准备安装介质</h2><p>说的简单点就是为制作启动盘做准备,安装系统当然需要这个系统的镜像文件.<br>可以到<a href=\"https://www.archlinux.org/download/\" target=\"_blank\" rel=\"noopener\">Arch Download</a>这里下载镜像<br>一直往下可以看到CHINA的标志, 推荐选择163的源下载,<a href=\"http://mirrors.163.com/archlinux/iso/2019.07.01/\" target=\"_blank\" rel=\"noopener\">链接在这</a></p>\n<h2 id=\"制作LiveCD\"><a href=\"#制作LiveCD\" class=\"headerlink\" title=\"制作LiveCD\"></a>制作LiveCD</h2><p>如果在windows环境制作的,可以使用<a href=\"http://sourceforge.net/p/usbwriter/wiki/Documentation/\" target=\"_blank\" rel=\"noopener\">USBwriter</a>,或者其他一些工具</p>\n<p>因为我电脑有现成的fedora media writer,所以用这个也可以制作</p>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><p>身边需要可以连接的网络,有线网或者无线网</p>\n<p>如果没有wifi可以连,当然,这个wifi不能是校园网,不然没办法直接命令行连接.<br>没wifi可以手机开热点啊,hhh</p>\n<h2 id=\"磁盘空间\"><a href=\"#磁盘空间\" class=\"headerlink\" title=\"磁盘空间\"></a>磁盘空间</h2><p>从widows盘那边分出一部分给linux,我选择先压缩卷,然后新建简单卷,之后的安装就安装在这个简单卷上.</p>\n<p>选择新建简单卷还是因为安装的时候能够看的更清楚第一个分区的开始扇区</p>\n<h2 id=\"设置usb启动\"><a href=\"#设置usb启动\" class=\"headerlink\" title=\"设置usb启动\"></a>设置usb启动</h2><p>如果以前设置过usb启动优先就不用管了</p>\n<p>进入BIOS,设置开机选项,调整开机顺序,让usb启动排在第一位<br>完事之后就可以直接插入你的U盘,开始装系统!</p>\n<h1 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h1><h2 id=\"联网\"><a href=\"#联网\" class=\"headerlink\" title=\"联网\"></a>联网</h2><p>后面需要安装很多东西,所以最好先联网</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wifi-menu</span><br></pre></td></tr></table></figure>\n<p>会跳出来wifi选择的页面,自己选之前准备好的wifi连上就成</p>\n<h2 id=\"编辑mirrorlist\"><a href=\"#编辑mirrorlist\" class=\"headerlink\" title=\"编辑mirrorlist\"></a>编辑mirrorlist</h2><p>目的是为了后面下载的时候速度能快点,国外的镜像站太慢啦.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vi /etc/pacman.d/mirrorlist</span><br><span class=\"line\"># 按下面描述修改mirrorlist</span><br><span class=\"line\"># pacman -Syy</span><br></pre></td></tr></table></figure>\n<p>我默认你已经会vim了,找163关键词,然后把163的镜像站复制粘贴到第一个镜像站前面.一堆的网址就是镜像站啦.</p>\n<p>如果不放心,还可以找关键词China,把其他的ustc之类的都放前面去.<br>记得,保存后<code>pacman -Syy</code></p>\n<h2 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h2><p><strong>最重要的一步来咯</strong><br>我选择了UEFI启动,对应使用GPT分区<br>我的机械硬盘是/dev/sdb</p>\n<h3 id=\"分区规划\"><a href=\"#分区规划\" class=\"headerlink\" title=\"分区规划\"></a>分区规划</h3><p>创建4个分区如下</p>\n<ul>\n<li>/boot　200M　/dev/sdb3</li>\n<li>/swap　8G　　/dev/sdb4</li>\n<li>/root　60G　 /dev/sdb5</li>\n<li>/home　150G　/dev/sdb6</li>\n</ul>\n<p>别问我为什么/root设置这么大，为什么人家都推荐30G左右…<br>重装的其中一个原因就是/root爆了，扩容又麻烦，原本设置的是40G<br>/swap设置的是和我物理内存一样的大小</p>\n<h3 id=\"查看磁盘情况\"><a href=\"#查看磁盘情况\" class=\"headerlink\" title=\"查看磁盘情况\"></a>查看磁盘情况</h3><p>确定你要安装的磁盘是sd几，然后使用gdisk划分磁盘</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># fdisk -l</span><br></pre></td></tr></table></figure>\n<p>你看到的东西应该类似下面的</p>\n<blockquote>\n<p>Disk /dev/sdb: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors<br>Disk model: HGST HTS721010A9<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 4096 bytes<br>I/O size (minimum/optimal): 4096 bytes / 4096 bytes<br>Disklabel type: gpt<br>Disk identifier: 94717E4F-9437-4814-96AA-5CD870012F36</p>\n<p>Device          Start        End   Sectors  Size Type<br>/dev/sdb1        2048  587202559 587200512  280G Microsoft basic data<br>/dev/sdb2   587202560 1468008447 880805888  420G Microsoft basic data<br>/dev/sdb3  1468008448 1468418047    409600  200M EFI System<br>/dev/sdb4  1468418048 1485195263  16777216    8G Linux swap<br>/dev/sdb5  1485195264 1611024383 125829120   60G Linux root (x86)<br>/dev/sdb6  1611024384 1925597183 314572800  150G Linux home</p>\n<p>Disk /dev/sda: 119.25 GiB, 128035676160 bytes, 250069680 sectors<br>Disk model: SanDisk SD8SNAT-<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 4096 bytes<br>I/O size (minimum/optimal): 4096 bytes / 4096 bytes<br>Disklabel type: gpt<br>Disk identifier: A7EA8BD9-4B05-4419-AEFA-7B4F01E54CC2</p>\n<p>Device         Start       End   Sectors   Size Type<br>/dev/sda1       2048    534527    532480   260M EFI System<br>/dev/sda2     534528    567295     32768    16M Microsoft reserved<br>/dev/sda3     567296 246266737 245699442 117.2G Microsoft basic data<br>/dev/sda4  246267904 250058751   3790848   1.8G Windows recovery environment</p>\n</blockquote>\n<p>通过容量判断我要安装的磁盘是sda还是sdb</p>\n<p>通过Type可以看到sdb1和sdb2都是Microsoft basic data,那是我的D盘和F盘</p>\n<h3 id=\"分区-1\"><a href=\"#分区-1\" class=\"headerlink\" title=\"分区\"></a>分区</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n<p>记得这里sdb要换成你自己的sd..</p>\n<p>gdisk的使用很简单，先使用？打印帮助，使用p打印分区表</p>\n<p>如果你的磁盘是空的，使用o新建一个gpt分区表，如果不是空磁盘，别这么做</p>\n<p>接着使用ｎ命令新建一个磁盘分区,然后输入分区号，默认回车就可以<br>然后设置开始扇区，如果没啥意外，直接回车<br>设置结束扇区，可以使用<strong>+60G</strong>这样的方式，不用自己计算，很方便<br>接着设置Hex code, 这个很重要,可以使用L查看所有的codes,下面列出要用的</p>\n<blockquote>\n<p>/boot: EF00<br>/swap: 8200<br>/root: 8303<br>/home: 8302</p>\n</blockquote>\n<h3 id=\"格式化分区\"><a href=\"#格式化分区\" class=\"headerlink\" title=\"格式化分区\"></a>格式化分区</h3><p>格式化EFI分区/boot</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkfs.fat -F32 /dev/sdb3</span><br></pre></td></tr></table></figure>\n<p>格式化/root和/home</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkfs.ext4 /dev/sdb5</span><br><span class=\"line\"># mkfs.ext4 /dev/sdb6</span><br></pre></td></tr></table></figure>\n<p>开启swap分区/swap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkwsap /dev/sdb4</span><br><span class=\"line\"># swapon /dev/sdb4</span><br></pre></td></tr></table></figure>\n<h3 id=\"挂载分区\"><a href=\"#挂载分区\" class=\"headerlink\" title=\"挂载分区\"></a>挂载分区</h3><p>一般是将根分区/挂载到/mnt下,然后将/boot和/home挂载到/mnt/boot和/mnt/home</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mount /dev/sdb5 /mnt</span><br><span class=\"line\"># mkdir /mnt/&#123;boot, home&#125;</span><br><span class=\"line\"># mount /dev/sdb6 /mnt/home</span><br><span class=\"line\"># mount /dev/sdb3 /mnt/boot</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装基本系统\"><a href=\"#安装基本系统\" class=\"headerlink\" title=\"安装基本系统\"></a>安装基本系统</h1><h2 id=\"部署基本系统\"><a href=\"#部署基本系统\" class=\"headerlink\" title=\"部署基本系统\"></a>部署基本系统</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pacstrap -i /mnt base base-devel net-tools</span><br></pre></td></tr></table></figure>\n<p>这里的net-tools提供了netstat和ifconfig等命令,可以选择不装,差别不大</p>\n<h2 id=\"生成fstab\"><a href=\"#生成fstab\" class=\"headerlink\" title=\"生成fstab\"></a>生成fstab</h2><p>fstab中记录了挂载信息,使用下面命令生成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>\n<p>使用<code>cat /mnt/etc/fstab</code>检查</p>\n<h2 id=\"基本系统设置\"><a href=\"#基本系统设置\" class=\"headerlink\" title=\"基本系统设置\"></a>基本系统设置</h2><h3 id=\"切换到新系统\"><a href=\"#切换到新系统\" class=\"headerlink\" title=\"切换到新系统\"></a>切换到新系统</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># arch-chroot /mnt /bin/bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置locale\"><a href=\"#设置locale\" class=\"headerlink\" title=\"设置locale\"></a>设置locale</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/locale.gen</span><br></pre></td></tr></table></figure>\n<p>这里是配置本地语言环境,起码要中英文的UTF-8,所以把<code>en_US.UTF-8\nUTF-8</code>和<code>zh_CN.UTF-8 UTF-8</code>取消注释, 然后保存退出<br>然后执行: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># locale-gen</span><br><span class=\"line\"># # echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置时区\"><a href=\"#设置时区\" class=\"headerlink\" title=\"设置时区\"></a>设置时区</h3><p>执行如下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置硬件时间\"><a href=\"#设置硬件时间\" class=\"headerlink\" title=\"设置硬件时间\"></a>设置硬件时间</h3><p>执行如下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hwclock --systohc --utc</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置主机名\"><a href=\"#设置主机名\" class=\"headerlink\" title=\"设置主机名\"></a>设置主机名</h3><p>建议使用小写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo 主机名 &gt; /etc/hostname</span><br><span class=\"line\"># vim /etc/hosts</span><br></pre></td></tr></table></figure>\n<p>hosts文件中有如下内容</p>\n<blockquote>\n<p>127.0.0.1    localhost<br>::1        localhost<br>127.0.1.1    myhostname.localdomain    myhostname</p>\n</blockquote>\n<p>如果系统有一个永久的 IP 地址，请使用这个永久的 IP 地址而不是 127.0.1.1</p>\n<h3 id=\"生成Initramfs\"><a href=\"#生成Initramfs\" class=\"headerlink\" title=\"生成Initramfs\"></a>生成Initramfs</h3><p>注意,这步只对 LVM、 system encryption 或 RAID有效<br>正常情况下,在执行pacstrap的时候已经安装linux,并且mkinitcpio自动运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkinitcpio -p linux</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户设置\"><a href=\"#用户设置\" class=\"headerlink\" title=\"用户设置\"></a>用户设置</h3><p>修改root用户密码,并且创建一个新用户,同样修改密码<br>建议root密码和用户密码不要设置成一样的,平时用普通用户就可以</p>\n<p><strong>如果需要用root,必须清楚自己每一步会有什么后果!</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># passwd</span><br><span class=\"line\"># ****你的密码****</span><br><span class=\"line\"># useradd -m -g users -s /bin/bash 用户名</span><br><span class=\"line\"># passwd 用户名</span><br><span class=\"line\"># ****用户密码****</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置UEFI引导-重点\"><a href=\"#配置UEFI引导-重点\" class=\"headerlink\" title=\"配置UEFI引导(重点)\"></a>配置UEFI引导(重点)</h3><p>(这里网上看到的都有点不太一样, 导致我安装完之后电脑一直找不到Linux的引导项,<br>一直进不来linux, 后来在archwiki上看到了正确的方法, 记录如下)</p>\n<p>这里使用UEFI引导,而不是BIOS,两者的区别自行百度</p>\n<p>关于启动加载器可以自己查看<a href=\"https://wiki.archlinux.org/index.php/Arch_boot_process_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E5%90%AF%E5%8A%A8%E5%8A%A0%E8%BD%BD%E5%99%A8\" target=\"_blank\" rel=\"noopener\">ArchWiki</a>,里面讲的很清楚</p>\n<p>我们选择GRUB <a href=\"https://wiki.archlinux.org/index.php/GRUB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target=\"_blank\" rel=\"noopener\">ArchWiki</a>来引导系统,具体过程在archwiki中也讲的很清楚,这里不多赘述</p>\n<p>安装必要软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pacman -S dosfstools grub efibootmgr</span><br></pre></td></tr></table></figure>\n<p><strong>注意,我们选择的EFI系统分区是之前的/boot, 选择的启动引导器标识是GRUB,<br>不懂可以不管, 直接执行</strong></p>\n<p>执行下面的命令来将 GRUB EFI 应用 <code>grubx64.efi</code> 安装到<br><code>/boot/EFI/GRUB/</code>，并将其模块安装到 <code>/boot/grub/x86_64-efi/</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB</span><br></pre></td></tr></table></figure>\n<p>安装完之后GRUB目录位于在/boot/grub/</p>\n<p>然后执行下面命令生成主配置文件<code>grub.cfg</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>\n<p>在/boot目录使用<code>tree -d</code>会有如下内容</p>\n<blockquote>\n<p>.<br>├── EFI<br>│   └── GRUB<br>├── grub<br>│   ├── fonts<br>│   ├── themes<br>│   │   └── starfield<br>│   └── x86_64-efi<br>└── syslinux</p>\n</blockquote>\n<h3 id=\"退出chroot重启\"><a href=\"#退出chroot重启\" class=\"headerlink\" title=\"退出chroot重启\"></a>退出chroot重启</h3><p>笔记本退出之前要先安装dialog</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pacman -S iw wpa_supplicant dialog</span><br><span class=\"line\"># exit</span><br><span class=\"line\"># umount /mnt/&#123;boot, home&#125;</span><br><span class=\"line\"># umount /mnt</span><br><span class=\"line\"># reboot</span><br></pre></td></tr></table></figure>\n<p>其实不重启也可以, 这时候还连着网, 直接把需要安装的一次性装了,<br>然后直接进到图形界面, 不然联网会很麻烦. 图形界面可以用networkmanager连网</p>\n<h1 id=\"驱动安装\"><a href=\"#驱动安装\" class=\"headerlink\" title=\"驱动安装\"></a>驱动安装</h1><h2 id=\"显卡驱动\"><a href=\"#显卡驱动\" class=\"headerlink\" title=\"显卡驱动\"></a>显卡驱动</h2><p>具体的驱动匹配表可以查看<a href=\"https://wiki.archlinux.org/index.php/Xorg_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">ArchWiki</a></p>\n<p>再次折腾了一次Nvidia驱动, 失败告终, 难受<br>显卡驱动默认的vesa可以兼容大部分显卡了<br>我是双显卡, 安装了下面三个显卡驱动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pacman -S xf86-video-vesa     通用驱动</span><br><span class=\"line\"># pacman -S xf86-video-intel    intel集显驱动</span><br><span class=\"line\"># pacman -S xf86-video-nouveau  开源的N卡驱动</span><br></pre></td></tr></table></figure>\n<h2 id=\"触摸板驱动\"><a href=\"#触摸板驱动\" class=\"headerlink\" title=\"触摸板驱动\"></a>触摸板驱动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pacman -S xf86-input-synaptics</span><br></pre></td></tr></table></figure>\n<h2 id=\"Xorg显示服务器\"><a href=\"#Xorg显示服务器\" class=\"headerlink\" title=\"Xorg显示服务器\"></a>Xorg显示服务器</h2><p>xorg是其他例如xfce和gnome, kde一些桌面环境的基础, 提供图形环境基本框架</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pacman -S xorg</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装Gnome桌面环境\"><a href=\"#安装Gnome桌面环境\" class=\"headerlink\" title=\"安装Gnome桌面环境\"></a>安装Gnome桌面环境</h1>"},{"title":"Canvas中像素级别ImageData缩放","comments":1,"mathjax":false,"date":"2019-04-10T12:56:48.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n弄Web端手写数字识别的时候要把Canvas缩成32\\*32大小的，刚开始想的是用canvas的画布缩放，弄了好久发现行不通，然后无意中发现可以获得每个像素的RGBA的值，然后又自己尝试每个像素缩放，语法不熟悉，各种尝试...\n好了不多说了，代码在下面\n{% endnote %}\n<!--more-->\n\n## Canvas中对ImageData数据缩放\n- ctx: 原始canvas的context\n- outCtx: 输出canvas的context\n- scale: 缩放倍数\n- scaled: 缩放后的ImageData\n- imageData.data: 图像的RGBA数组，是一个一维数组\n\n```javascript\nfunction genImg() {\n  var imgData = ctx.getImageData(0,0,500,500);\n  outCtx.putImageData(scaleImageData(imgData,0.5),0,0);\n}\n\nfunction scaleImageData(imageData, scale) {\n  var scaled =\n      outCtx.createImageData(imageData.width * scale, imageData.height * scale);\n  for (var row = 0; row < imageData.height; row++) {\n    for (var col = 0; col < imageData.width; col++) {\n      var sourcePixel = [\n        imageData.data[(row * imageData.width + col) * 4 + 0],\n        imageData.data[(row * imageData.width + col) * 4 + 1],\n        imageData.data[(row * imageData.width + col) * 4 + 2],\n        imageData.data[(row * imageData.width + col) * 4 + 3]\n      ];\n      for (var y = 0; y < scale; y++) {\n        var destRow = Math.floor(row * scale) + y;\n        for (var x = 0; x < scale; x++) {\n          var destCol = Math.floor(col * scale) + x;\n          for (var i = 0; i < 4; i++) {\n            scaled.data[(destRow * scaled.width + destCol) * 4 + i] = sourcePixel[i];\n          }\n        }\n      }\n    }\n  }\n  return scaled;\n}\n```\n\n{% note %}\n主要就是scaleImageData这个函数，原型是stackoverflow上的，不过有bug，自己修改了下。\n遇到问题果然还是要看源码...\n{% endnote %}\n","source":"_posts/Canvas中像素级别ImageData缩放.md","raw":"---\ntitle: Canvas中像素级别ImageData缩放\ncomments: true\nmathjax: false\ndate: 2019-04-10 20:56:48\ntags: [Canvas, Web, Daily, Learning]\ncategories: Learning\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n弄Web端手写数字识别的时候要把Canvas缩成32\\*32大小的，刚开始想的是用canvas的画布缩放，弄了好久发现行不通，然后无意中发现可以获得每个像素的RGBA的值，然后又自己尝试每个像素缩放，语法不熟悉，各种尝试...\n好了不多说了，代码在下面\n{% endnote %}\n<!--more-->\n\n## Canvas中对ImageData数据缩放\n- ctx: 原始canvas的context\n- outCtx: 输出canvas的context\n- scale: 缩放倍数\n- scaled: 缩放后的ImageData\n- imageData.data: 图像的RGBA数组，是一个一维数组\n\n```javascript\nfunction genImg() {\n  var imgData = ctx.getImageData(0,0,500,500);\n  outCtx.putImageData(scaleImageData(imgData,0.5),0,0);\n}\n\nfunction scaleImageData(imageData, scale) {\n  var scaled =\n      outCtx.createImageData(imageData.width * scale, imageData.height * scale);\n  for (var row = 0; row < imageData.height; row++) {\n    for (var col = 0; col < imageData.width; col++) {\n      var sourcePixel = [\n        imageData.data[(row * imageData.width + col) * 4 + 0],\n        imageData.data[(row * imageData.width + col) * 4 + 1],\n        imageData.data[(row * imageData.width + col) * 4 + 2],\n        imageData.data[(row * imageData.width + col) * 4 + 3]\n      ];\n      for (var y = 0; y < scale; y++) {\n        var destRow = Math.floor(row * scale) + y;\n        for (var x = 0; x < scale; x++) {\n          var destCol = Math.floor(col * scale) + x;\n          for (var i = 0; i < 4; i++) {\n            scaled.data[(destRow * scaled.width + destCol) * 4 + i] = sourcePixel[i];\n          }\n        }\n      }\n    }\n  }\n  return scaled;\n}\n```\n\n{% note %}\n主要就是scaleImageData这个函数，原型是stackoverflow上的，不过有bug，自己修改了下。\n遇到问题果然还是要看源码...\n{% endnote %}\n","slug":"Canvas中像素级别ImageData缩放","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjnz000jussb45a7uspz","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><p>弄Web端手写数字识别的时候要把Canvas缩成32*32大小的，刚开始想的是用canvas的画布缩放，弄了好久发现行不通，然后无意中发现可以获得每个像素的RGBA的值，然后又自己尝试每个像素缩放，语法不熟悉，各种尝试…<br>好了不多说了，代码在下面</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Canvas中对ImageData数据缩放\"><a href=\"#Canvas中对ImageData数据缩放\" class=\"headerlink\" title=\"Canvas中对ImageData数据缩放\"></a>Canvas中对ImageData数据缩放</h2><ul>\n<li>ctx: 原始canvas的context</li>\n<li>outCtx: 输出canvas的context</li>\n<li>scale: 缩放倍数</li>\n<li>scaled: 缩放后的ImageData</li>\n<li>imageData.data: 图像的RGBA数组，是一个一维数组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genImg</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> imgData = ctx.getImageData(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">500</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">  outCtx.putImageData(scaleImageData(imgData,<span class=\"number\">0.5</span>),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scaleImageData</span>(<span class=\"params\">imageData, scale</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scaled =</span><br><span class=\"line\">      outCtx.createImageData(imageData.width * scale, imageData.height * scale);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> row = <span class=\"number\">0</span>; row &lt; imageData.height; row++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> col = <span class=\"number\">0</span>; col &lt; imageData.width; col++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> sourcePixel = [</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">0</span>],</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">1</span>],</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">2</span>],</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">3</span>]</span><br><span class=\"line\">      ];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> y = <span class=\"number\">0</span>; y &lt; scale; y++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> destRow = <span class=\"built_in\">Math</span>.floor(row * scale) + y;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; scale; x++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> destCol = <span class=\"built_in\">Math</span>.floor(col * scale) + x;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            scaled.data[(destRow * scaled.width + destCol) * <span class=\"number\">4</span> + i] = sourcePixel[i];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> scaled;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note \"><p>主要就是scaleImageData这个函数，原型是stackoverflow上的，不过有bug，自己修改了下。<br>遇到问题果然还是要看源码…</p></div>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><p>弄Web端手写数字识别的时候要把Canvas缩成32*32大小的，刚开始想的是用canvas的画布缩放，弄了好久发现行不通，然后无意中发现可以获得每个像素的RGBA的值，然后又自己尝试每个像素缩放，语法不熟悉，各种尝试…<br>好了不多说了，代码在下面</p></div>","more":"<h2 id=\"Canvas中对ImageData数据缩放\"><a href=\"#Canvas中对ImageData数据缩放\" class=\"headerlink\" title=\"Canvas中对ImageData数据缩放\"></a>Canvas中对ImageData数据缩放</h2><ul>\n<li>ctx: 原始canvas的context</li>\n<li>outCtx: 输出canvas的context</li>\n<li>scale: 缩放倍数</li>\n<li>scaled: 缩放后的ImageData</li>\n<li>imageData.data: 图像的RGBA数组，是一个一维数组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genImg</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> imgData = ctx.getImageData(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">500</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">  outCtx.putImageData(scaleImageData(imgData,<span class=\"number\">0.5</span>),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scaleImageData</span>(<span class=\"params\">imageData, scale</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scaled =</span><br><span class=\"line\">      outCtx.createImageData(imageData.width * scale, imageData.height * scale);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> row = <span class=\"number\">0</span>; row &lt; imageData.height; row++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> col = <span class=\"number\">0</span>; col &lt; imageData.width; col++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> sourcePixel = [</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">0</span>],</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">1</span>],</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">2</span>],</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">3</span>]</span><br><span class=\"line\">      ];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> y = <span class=\"number\">0</span>; y &lt; scale; y++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> destRow = <span class=\"built_in\">Math</span>.floor(row * scale) + y;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; scale; x++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> destCol = <span class=\"built_in\">Math</span>.floor(col * scale) + x;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            scaled.data[(destRow * scaled.width + destCol) * <span class=\"number\">4</span> + i] = sourcePixel[i];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> scaled;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note \"><p>主要就是scaleImageData这个函数，原型是stackoverflow上的，不过有bug，自己修改了下。<br>遇到问题果然还是要看源码…</p></div>"},{"title":"C++优先级队列","comments":1,"mathjax":false,"date":"2019-05-23T05:42:24.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n写LeetCode的时候学了优先级队列，这里总结一下STL中优先级队列的使用和实现\n{% endnote %}\n\n<!--more-->\n\n## 介绍\n\n优先级队列也是队列的一种，FIFO结构，但是和普通的队列不同的是有一个优先级的权重\n\n优先级队列有两种，一种是最小优先队列，值小的优先级越大，另一种是最大优先队列，值大的优先级越大\n\n头文件： \"queue.h\", \"functional.h\"\n\n插入和删除操作复杂度都是$$ O(lgn) $$\n\n## 使用\n\n### 构造函数\n构造函数声明如下：\n```\nstd::priority_queue<T> pq;\nstd::priority_queue<T, std::vector<T>, cmp> pq;\n```\n\n**第一种构造函数：**\n- 传入一个基本类型或者自定义类，自定义类要重载$$ < $$符号\n\n**第二种构造函数：**\n参数介绍：\n1. 是队列中元素的种类，可以是自定义的也可以是基本类型，默认是int\n2. 第二个是容纳优先级队列的容器，只需要知道默认是vector就好，使用的时候也是用vector\n3. 这个是最重要的参数，支持一个比较函数，默认是less，队列是最大优先队列。\n\n第三个参数有三种情况介绍：\n1. 自定义比较结构，使用结构体，**注意返回值！！**，最小优先队列是大于\n2. 使用默认的类型时用less()或者greater()\n3. 使用自定义类的时候重载$$ < $$符号\n\n### 常用操作\n1. q.empty(): 如果队列为空，则返回true，否则返回false\n2. q.size():  返回队列中元素的个数\n3. q.pop():   删除队首元素，但不返回其值\n4. q.top():   返回具有最高优先级的元素值，最大优先队列找最大的元素，最小优先队列找最小的，但不删除该元素\n5. q.push(item): 在基于优先级的适当位置插入新元素\n\n### 使用样例\n注意这不是一个完整的C++代码\n\n```C\n//包含头文件并使用std命名空间\n#include<functional>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n//第一种构造函数，采用默认优先级构造队列\npriority_queue<int>que;\n\n//第二种构造函数，这里使用基本的int类型，如果看其他类型，请看LeetCode 23题代码\n//自定义比较结构\nstruct cmp1{\n    bool operator ()(int &a,int &b){\n        return a>b;//最小值优先\n    }\n};\npriority_queue<int,vector<int>,cmp1>que1;//最小值优先\npriority_queue<int,vector<int>,greater<int> >que3;//注意“>>”会被认为错误，greater在functional头文件中\n\n\n//自定义数据结构并重载小于操作符\nstruct number1{\n    int x;\n    bool operator < (const number1 &a) const {\n        return x>a.x;//最小值优先\n    }\n};\npriority_queue<number1>que5; //最小优先级队列\n\nprintf(\"采用默认优先关系:/n(priority_queue<int>que;)/n\");\nprintf(\"Queue 0:/n\");\nwhile(!que.empty()){\n    printf(\"%3d\",que.top());\n    que.pop();\n}\n\n```\n\n## 实现\n引用博客：[优先队列原理与实现](https://www.cnblogs.com/luoxn28/p/5616101.html)\n推荐结合另一篇博客: [【STL学习】优先级队列Priority Queue详解与C++编程实现](https://blog.csdn.net/xiajun07061225/article/details/8556786)\n可以看这两篇博客了解插入和删除的原理，第一篇博客有图比较清楚\n\n```\npackage priorityheap;\n\nimport java.util.Arrays;\n\n/**\n * 优先队列类（最大优先队列）\n */\npublic class PriorityHeap {\n\n    // ------------------------------ Instance Variables\n\n    private int[] arr;\n    private int size;\n\n    // ------------------------------ Constructors\n\n    /**\n     * 优先队列数组默认大小为64\n     */\n    public PriorityHeap() {\n        this(64);\n    }\n\n    public PriorityHeap(int initSize) {\n        if (initSize <= 0) {\n            initSize = 64;\n        }\n        this.arr = new int[initSize];\n        this.size = 0;\n    }\n\n    // ------------------------------ Public methods\n\n    public int max() {\n        return this.arr[0];\n    }\n\n    public int maxAndRemove() {\n        int t = max();\n\n        this.arr[0] = this.arr[--size];\n        sink(0, this.arr[0]);\n        return t;\n    }\n    public void add(int data) {\n        resize(1);\n        this.arr[size++] = data;\n        pop(size - 1, data);\n    }\n\n    // ------------------------------ Private methods\n\n    /**\n     * key下沉方法\n     */\n    private void sink(int i, int key) {\n        while (2 * i <= this.size - 1) {\n            int child = 2 * i;\n            if (child < this.size - 1 && this.arr[child] < this.arr[child + 1]) {\n                child++;\n            }\n            if (this.arr[i] >= this.arr[child]) {\n                break;\n            }\n\n            swap(i, child);\n            i = child;\n        }\n    }\n\n    /**\n     * key上浮方法\n     */\n    private void pop(int i, int key) {\n        while (i > 0) {\n            int parent = i / 2;\n            if (this.arr[i] <= this.arr[parent]) {\n                break;\n            }\n            swap(i, parent);\n            i = parent;\n        }\n    }\n\n    /**\n     * 重新调整数组大小\n     */\n    private void resize(int increaseSize) {\n        if ((this.size + increaseSize) > this.arr.length) {\n            int newSize = (this.size + increaseSize) > 2 * this.arr.length ? (this.size + increaseSize) : 2 * this.arr.length;\n            int[] t = this.arr;\n\n            this.arr = Arrays.copyOf(t, newSize);\n        }\n    }\n\n    /**\n     * Swaps arr[a] with arr[b].\n     */\n    private void swap(int a, int b) {\n        int t = this.arr[a];\n        this.arr[a] = this.arr[b];\n        this.arr[b] = t;\n    }\n}\n```\n\n---------\n","source":"_posts/C-优先级队列.md","raw":"---\ntitle: C++优先级队列\ncomments: true\nmathjax: false\ndate: 2019-05-23 13:42:24\ntags: [C++, Queue, PriorityQueue]\ncategories: Learning\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n写LeetCode的时候学了优先级队列，这里总结一下STL中优先级队列的使用和实现\n{% endnote %}\n\n<!--more-->\n\n## 介绍\n\n优先级队列也是队列的一种，FIFO结构，但是和普通的队列不同的是有一个优先级的权重\n\n优先级队列有两种，一种是最小优先队列，值小的优先级越大，另一种是最大优先队列，值大的优先级越大\n\n头文件： \"queue.h\", \"functional.h\"\n\n插入和删除操作复杂度都是$$ O(lgn) $$\n\n## 使用\n\n### 构造函数\n构造函数声明如下：\n```\nstd::priority_queue<T> pq;\nstd::priority_queue<T, std::vector<T>, cmp> pq;\n```\n\n**第一种构造函数：**\n- 传入一个基本类型或者自定义类，自定义类要重载$$ < $$符号\n\n**第二种构造函数：**\n参数介绍：\n1. 是队列中元素的种类，可以是自定义的也可以是基本类型，默认是int\n2. 第二个是容纳优先级队列的容器，只需要知道默认是vector就好，使用的时候也是用vector\n3. 这个是最重要的参数，支持一个比较函数，默认是less，队列是最大优先队列。\n\n第三个参数有三种情况介绍：\n1. 自定义比较结构，使用结构体，**注意返回值！！**，最小优先队列是大于\n2. 使用默认的类型时用less()或者greater()\n3. 使用自定义类的时候重载$$ < $$符号\n\n### 常用操作\n1. q.empty(): 如果队列为空，则返回true，否则返回false\n2. q.size():  返回队列中元素的个数\n3. q.pop():   删除队首元素，但不返回其值\n4. q.top():   返回具有最高优先级的元素值，最大优先队列找最大的元素，最小优先队列找最小的，但不删除该元素\n5. q.push(item): 在基于优先级的适当位置插入新元素\n\n### 使用样例\n注意这不是一个完整的C++代码\n\n```C\n//包含头文件并使用std命名空间\n#include<functional>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n//第一种构造函数，采用默认优先级构造队列\npriority_queue<int>que;\n\n//第二种构造函数，这里使用基本的int类型，如果看其他类型，请看LeetCode 23题代码\n//自定义比较结构\nstruct cmp1{\n    bool operator ()(int &a,int &b){\n        return a>b;//最小值优先\n    }\n};\npriority_queue<int,vector<int>,cmp1>que1;//最小值优先\npriority_queue<int,vector<int>,greater<int> >que3;//注意“>>”会被认为错误，greater在functional头文件中\n\n\n//自定义数据结构并重载小于操作符\nstruct number1{\n    int x;\n    bool operator < (const number1 &a) const {\n        return x>a.x;//最小值优先\n    }\n};\npriority_queue<number1>que5; //最小优先级队列\n\nprintf(\"采用默认优先关系:/n(priority_queue<int>que;)/n\");\nprintf(\"Queue 0:/n\");\nwhile(!que.empty()){\n    printf(\"%3d\",que.top());\n    que.pop();\n}\n\n```\n\n## 实现\n引用博客：[优先队列原理与实现](https://www.cnblogs.com/luoxn28/p/5616101.html)\n推荐结合另一篇博客: [【STL学习】优先级队列Priority Queue详解与C++编程实现](https://blog.csdn.net/xiajun07061225/article/details/8556786)\n可以看这两篇博客了解插入和删除的原理，第一篇博客有图比较清楚\n\n```\npackage priorityheap;\n\nimport java.util.Arrays;\n\n/**\n * 优先队列类（最大优先队列）\n */\npublic class PriorityHeap {\n\n    // ------------------------------ Instance Variables\n\n    private int[] arr;\n    private int size;\n\n    // ------------------------------ Constructors\n\n    /**\n     * 优先队列数组默认大小为64\n     */\n    public PriorityHeap() {\n        this(64);\n    }\n\n    public PriorityHeap(int initSize) {\n        if (initSize <= 0) {\n            initSize = 64;\n        }\n        this.arr = new int[initSize];\n        this.size = 0;\n    }\n\n    // ------------------------------ Public methods\n\n    public int max() {\n        return this.arr[0];\n    }\n\n    public int maxAndRemove() {\n        int t = max();\n\n        this.arr[0] = this.arr[--size];\n        sink(0, this.arr[0]);\n        return t;\n    }\n    public void add(int data) {\n        resize(1);\n        this.arr[size++] = data;\n        pop(size - 1, data);\n    }\n\n    // ------------------------------ Private methods\n\n    /**\n     * key下沉方法\n     */\n    private void sink(int i, int key) {\n        while (2 * i <= this.size - 1) {\n            int child = 2 * i;\n            if (child < this.size - 1 && this.arr[child] < this.arr[child + 1]) {\n                child++;\n            }\n            if (this.arr[i] >= this.arr[child]) {\n                break;\n            }\n\n            swap(i, child);\n            i = child;\n        }\n    }\n\n    /**\n     * key上浮方法\n     */\n    private void pop(int i, int key) {\n        while (i > 0) {\n            int parent = i / 2;\n            if (this.arr[i] <= this.arr[parent]) {\n                break;\n            }\n            swap(i, parent);\n            i = parent;\n        }\n    }\n\n    /**\n     * 重新调整数组大小\n     */\n    private void resize(int increaseSize) {\n        if ((this.size + increaseSize) > this.arr.length) {\n            int newSize = (this.size + increaseSize) > 2 * this.arr.length ? (this.size + increaseSize) : 2 * this.arr.length;\n            int[] t = this.arr;\n\n            this.arr = Arrays.copyOf(t, newSize);\n        }\n    }\n\n    /**\n     * Swaps arr[a] with arr[b].\n     */\n    private void swap(int a, int b) {\n        int t = this.arr[a];\n        this.arr[a] = this.arr[b];\n        this.arr[b] = t;\n    }\n}\n```\n\n---------\n","slug":"C-优先级队列","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjo1000kussbik1yctju","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>写LeetCode的时候学了优先级队列，这里总结一下STL中优先级队列的使用和实现</p></div>\n<a id=\"more\"></a>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>优先级队列也是队列的一种，FIFO结构，但是和普通的队列不同的是有一个优先级的权重</p>\n<p>优先级队列有两种，一种是最小优先队列，值小的优先级越大，另一种是最大优先队列，值大的优先级越大</p>\n<p>头文件： “queue.h”, “functional.h”</p>\n<p>插入和删除操作复杂度都是<script type=\"math/tex\">O(lgn)</script></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>构造函数声明如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::priority_queue&lt;T&gt; pq;</span><br><span class=\"line\">std::priority_queue&lt;T, std::vector&lt;T&gt;, cmp&gt; pq;</span><br></pre></td></tr></table></figure></p>\n<p><strong>第一种构造函数：</strong></p>\n<ul>\n<li>传入一个基本类型或者自定义类，自定义类要重载<script type=\"math/tex\"><</script>符号</li>\n</ul>\n<p><strong>第二种构造函数：</strong><br>参数介绍：</p>\n<ol>\n<li>是队列中元素的种类，可以是自定义的也可以是基本类型，默认是int</li>\n<li>第二个是容纳优先级队列的容器，只需要知道默认是vector就好，使用的时候也是用vector</li>\n<li>这个是最重要的参数，支持一个比较函数，默认是less，队列是最大优先队列。</li>\n</ol>\n<p>第三个参数有三种情况介绍：</p>\n<ol>\n<li>自定义比较结构，使用结构体，<strong>注意返回值！！</strong>，最小优先队列是大于</li>\n<li>使用默认的类型时用less()或者greater()</li>\n<li>使用自定义类的时候重载<script type=\"math/tex\"><</script>符号</li>\n</ol>\n<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><ol>\n<li>q.empty(): 如果队列为空，则返回true，否则返回false</li>\n<li>q.size():  返回队列中元素的个数</li>\n<li>q.pop():   删除队首元素，但不返回其值</li>\n<li>q.top():   返回具有最高优先级的元素值，最大优先队列找最大的元素，最小优先队列找最小的，但不删除该元素</li>\n<li>q.push(item): 在基于优先级的适当位置插入新元素</li>\n</ol>\n<h3 id=\"使用样例\"><a href=\"#使用样例\" class=\"headerlink\" title=\"使用样例\"></a>使用样例</h3><p>注意这不是一个完整的C++代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包含头文件并使用std命名空间</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一种构造函数，采用默认优先级构造队列</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"keyword\">int</span>&gt;que;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种构造函数，这里使用基本的int类型，如果看其他类型，请看LeetCode 23题代码</span></span><br><span class=\"line\"><span class=\"comment\">//自定义比较结构</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp1</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span> <span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a,<span class=\"keyword\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a&gt;b;<span class=\"comment\">//最小值优先</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">priority_queue&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;,cmp1&gt;que1;<span class=\"comment\">//最小值优先</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;,greater&lt;<span class=\"keyword\">int</span>&gt; &gt;que3;<span class=\"comment\">//注意“&gt;&gt;”会被认为错误，greater在functional头文件中</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自定义数据结构并重载小于操作符</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">number1</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> number1 &amp;a) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x&gt;a.x;<span class=\"comment\">//最小值优先</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">priority_queue&lt;number1&gt;que5; <span class=\"comment\">//最小优先级队列</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"采用默认优先关系:/n(priority_queue&lt;int&gt;que;)/n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Queue 0:/n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%3d\"</span>,que.top());</span><br><span class=\"line\">    que.pop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>引用博客：<a href=\"https://www.cnblogs.com/luoxn28/p/5616101.html\" target=\"_blank\" rel=\"noopener\">优先队列原理与实现</a><br>推荐结合另一篇博客: <a href=\"https://blog.csdn.net/xiajun07061225/article/details/8556786\" target=\"_blank\" rel=\"noopener\">【STL学习】优先级队列Priority Queue详解与C++编程实现</a><br>可以看这两篇博客了解插入和删除的原理，第一篇博客有图比较清楚</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package priorityheap;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 优先队列类（最大优先队列）</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class PriorityHeap &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ------------------------------ Instance Variables</span><br><span class=\"line\"></span><br><span class=\"line\">    private int[] arr;</span><br><span class=\"line\">    private int size;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ------------------------------ Constructors</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 优先队列数组默认大小为64</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public PriorityHeap() &#123;</span><br><span class=\"line\">        this(64);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public PriorityHeap(int initSize) &#123;</span><br><span class=\"line\">        if (initSize &lt;= 0) &#123;</span><br><span class=\"line\">            initSize = 64;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.arr = new int[initSize];</span><br><span class=\"line\">        this.size = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ------------------------------ Public methods</span><br><span class=\"line\"></span><br><span class=\"line\">    public int max() &#123;</span><br><span class=\"line\">        return this.arr[0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int maxAndRemove() &#123;</span><br><span class=\"line\">        int t = max();</span><br><span class=\"line\"></span><br><span class=\"line\">        this.arr[0] = this.arr[--size];</span><br><span class=\"line\">        sink(0, this.arr[0]);</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void add(int data) &#123;</span><br><span class=\"line\">        resize(1);</span><br><span class=\"line\">        this.arr[size++] = data;</span><br><span class=\"line\">        pop(size - 1, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ------------------------------ Private methods</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * key下沉方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void sink(int i, int key) &#123;</span><br><span class=\"line\">        while (2 * i &lt;= this.size - 1) &#123;</span><br><span class=\"line\">            int child = 2 * i;</span><br><span class=\"line\">            if (child &lt; this.size - 1 &amp;&amp; this.arr[child] &lt; this.arr[child + 1]) &#123;</span><br><span class=\"line\">                child++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (this.arr[i] &gt;= this.arr[child]) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            swap(i, child);</span><br><span class=\"line\">            i = child;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * key上浮方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void pop(int i, int key) &#123;</span><br><span class=\"line\">        while (i &gt; 0) &#123;</span><br><span class=\"line\">            int parent = i / 2;</span><br><span class=\"line\">            if (this.arr[i] &lt;= this.arr[parent]) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(i, parent);</span><br><span class=\"line\">            i = parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 重新调整数组大小</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void resize(int increaseSize) &#123;</span><br><span class=\"line\">        if ((this.size + increaseSize) &gt; this.arr.length) &#123;</span><br><span class=\"line\">            int newSize = (this.size + increaseSize) &gt; 2 * this.arr.length ? (this.size + increaseSize) : 2 * this.arr.length;</span><br><span class=\"line\">            int[] t = this.arr;</span><br><span class=\"line\"></span><br><span class=\"line\">            this.arr = Arrays.copyOf(t, newSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Swaps arr[a] with arr[b].</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void swap(int a, int b) &#123;</span><br><span class=\"line\">        int t = this.arr[a];</span><br><span class=\"line\">        this.arr[a] = this.arr[b];</span><br><span class=\"line\">        this.arr[b] = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>写LeetCode的时候学了优先级队列，这里总结一下STL中优先级队列的使用和实现</p></div>","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>优先级队列也是队列的一种，FIFO结构，但是和普通的队列不同的是有一个优先级的权重</p>\n<p>优先级队列有两种，一种是最小优先队列，值小的优先级越大，另一种是最大优先队列，值大的优先级越大</p>\n<p>头文件： “queue.h”, “functional.h”</p>\n<p>插入和删除操作复杂度都是<script type=\"math/tex\">O(lgn)</script></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>构造函数声明如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::priority_queue&lt;T&gt; pq;</span><br><span class=\"line\">std::priority_queue&lt;T, std::vector&lt;T&gt;, cmp&gt; pq;</span><br></pre></td></tr></table></figure></p>\n<p><strong>第一种构造函数：</strong></p>\n<ul>\n<li>传入一个基本类型或者自定义类，自定义类要重载<script type=\"math/tex\"><</script>符号</li>\n</ul>\n<p><strong>第二种构造函数：</strong><br>参数介绍：</p>\n<ol>\n<li>是队列中元素的种类，可以是自定义的也可以是基本类型，默认是int</li>\n<li>第二个是容纳优先级队列的容器，只需要知道默认是vector就好，使用的时候也是用vector</li>\n<li>这个是最重要的参数，支持一个比较函数，默认是less，队列是最大优先队列。</li>\n</ol>\n<p>第三个参数有三种情况介绍：</p>\n<ol>\n<li>自定义比较结构，使用结构体，<strong>注意返回值！！</strong>，最小优先队列是大于</li>\n<li>使用默认的类型时用less()或者greater()</li>\n<li>使用自定义类的时候重载<script type=\"math/tex\"><</script>符号</li>\n</ol>\n<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><ol>\n<li>q.empty(): 如果队列为空，则返回true，否则返回false</li>\n<li>q.size():  返回队列中元素的个数</li>\n<li>q.pop():   删除队首元素，但不返回其值</li>\n<li>q.top():   返回具有最高优先级的元素值，最大优先队列找最大的元素，最小优先队列找最小的，但不删除该元素</li>\n<li>q.push(item): 在基于优先级的适当位置插入新元素</li>\n</ol>\n<h3 id=\"使用样例\"><a href=\"#使用样例\" class=\"headerlink\" title=\"使用样例\"></a>使用样例</h3><p>注意这不是一个完整的C++代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包含头文件并使用std命名空间</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一种构造函数，采用默认优先级构造队列</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"keyword\">int</span>&gt;que;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种构造函数，这里使用基本的int类型，如果看其他类型，请看LeetCode 23题代码</span></span><br><span class=\"line\"><span class=\"comment\">//自定义比较结构</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp1</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span> <span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a,<span class=\"keyword\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a&gt;b;<span class=\"comment\">//最小值优先</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">priority_queue&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;,cmp1&gt;que1;<span class=\"comment\">//最小值优先</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;,greater&lt;<span class=\"keyword\">int</span>&gt; &gt;que3;<span class=\"comment\">//注意“&gt;&gt;”会被认为错误，greater在functional头文件中</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自定义数据结构并重载小于操作符</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">number1</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> number1 &amp;a) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x&gt;a.x;<span class=\"comment\">//最小值优先</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">priority_queue&lt;number1&gt;que5; <span class=\"comment\">//最小优先级队列</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"采用默认优先关系:/n(priority_queue&lt;int&gt;que;)/n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Queue 0:/n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%3d\"</span>,que.top());</span><br><span class=\"line\">    que.pop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>引用博客：<a href=\"https://www.cnblogs.com/luoxn28/p/5616101.html\" target=\"_blank\" rel=\"noopener\">优先队列原理与实现</a><br>推荐结合另一篇博客: <a href=\"https://blog.csdn.net/xiajun07061225/article/details/8556786\" target=\"_blank\" rel=\"noopener\">【STL学习】优先级队列Priority Queue详解与C++编程实现</a><br>可以看这两篇博客了解插入和删除的原理，第一篇博客有图比较清楚</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package priorityheap;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 优先队列类（最大优先队列）</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class PriorityHeap &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ------------------------------ Instance Variables</span><br><span class=\"line\"></span><br><span class=\"line\">    private int[] arr;</span><br><span class=\"line\">    private int size;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ------------------------------ Constructors</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 优先队列数组默认大小为64</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public PriorityHeap() &#123;</span><br><span class=\"line\">        this(64);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public PriorityHeap(int initSize) &#123;</span><br><span class=\"line\">        if (initSize &lt;= 0) &#123;</span><br><span class=\"line\">            initSize = 64;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.arr = new int[initSize];</span><br><span class=\"line\">        this.size = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ------------------------------ Public methods</span><br><span class=\"line\"></span><br><span class=\"line\">    public int max() &#123;</span><br><span class=\"line\">        return this.arr[0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int maxAndRemove() &#123;</span><br><span class=\"line\">        int t = max();</span><br><span class=\"line\"></span><br><span class=\"line\">        this.arr[0] = this.arr[--size];</span><br><span class=\"line\">        sink(0, this.arr[0]);</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void add(int data) &#123;</span><br><span class=\"line\">        resize(1);</span><br><span class=\"line\">        this.arr[size++] = data;</span><br><span class=\"line\">        pop(size - 1, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ------------------------------ Private methods</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * key下沉方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void sink(int i, int key) &#123;</span><br><span class=\"line\">        while (2 * i &lt;= this.size - 1) &#123;</span><br><span class=\"line\">            int child = 2 * i;</span><br><span class=\"line\">            if (child &lt; this.size - 1 &amp;&amp; this.arr[child] &lt; this.arr[child + 1]) &#123;</span><br><span class=\"line\">                child++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (this.arr[i] &gt;= this.arr[child]) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            swap(i, child);</span><br><span class=\"line\">            i = child;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * key上浮方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void pop(int i, int key) &#123;</span><br><span class=\"line\">        while (i &gt; 0) &#123;</span><br><span class=\"line\">            int parent = i / 2;</span><br><span class=\"line\">            if (this.arr[i] &lt;= this.arr[parent]) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(i, parent);</span><br><span class=\"line\">            i = parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 重新调整数组大小</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void resize(int increaseSize) &#123;</span><br><span class=\"line\">        if ((this.size + increaseSize) &gt; this.arr.length) &#123;</span><br><span class=\"line\">            int newSize = (this.size + increaseSize) &gt; 2 * this.arr.length ? (this.size + increaseSize) : 2 * this.arr.length;</span><br><span class=\"line\">            int[] t = this.arr;</span><br><span class=\"line\"></span><br><span class=\"line\">            this.arr = Arrays.copyOf(t, newSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Swaps arr[a] with arr[b].</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void swap(int a, int b) &#123;</span><br><span class=\"line\">        int t = this.arr[a];</span><br><span class=\"line\">        this.arr[a] = this.arr[b];</span><br><span class=\"line\">        this.arr[b] = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>"},{"title":"Fedora 26 编译内核","comments":1,"mathjax":false,"date":"2019-03-31T16:09:49.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n被迫很不情愿的编译内核...以前服务器上编译过，贼麻烦，现在又要编译，为了不让我的Arch出什么幺蛾子，新弄了个虚拟机练手了。    \n还是Fedora26的，现在都出29了，时间过得真快。\n\n<!--more-->\n# 准备工作\n## 查看自己内核版本\n    uname -a\n    Linux localhost.localdomain 4.11.8-300.fc26.x86_64 #1 SMP Thu Jun 29 20:09:48 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n\n## 下载内核并解压到/usr/src目录下\n推荐一下[上海交大的网站](http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v5.x/)，速度挺快的。  \n下载好后`tar xf linux-5.0.1.tar.gz -C /usr/src`解压到/usr/src下\n\n## 注意事项\n{% note danger %}\nmake编译内核起码预留10个G，编译完之后，不然存储会不够，又要重新弄。\nboot分区发现200M会不够用，改成500M可以，扩容还是挺麻烦的\n/ 根目录（具体来说是 /lib，没挂载/lib的话就默认是使用/目录） 要有至少4G的空余空间\n{% endnote %}\n\n# 编译安装\n## make makemenuconfig\n这是带有图形化界面的配置命令，在这里面可以定制很多功能。  \n常见的是定制内核版本，或者开启ntfs的功能。\n\n内核版本在general setup里面，找到local version -append to kernel release\n\nntfs在file-systems下面，很下面的位置，找到DOS/FAT/NT Filesystems，进入后用M键启用NTFS，用模块的方式，并在下面的NTFS write support 那里用y键启用  \n\n然后 保存退出\n\n如果想用默认配置，可以直接方向键选择**save**，然后**exit**。\n\n刚开始使用这个命令可能会一直报错，解决的基本原则是提示缺少什么包\n\n就在这个包的名字后面加上-devel，然后用dnf安装（其他版本也一样，只要换一下包管理器名）\n\n### 缺少ncurses-devel包\n    dnf install ncurses-devel\n\n### 缺少flex包\n    dnf install flex\n\n### 缺少bison包\n    dnf install bison\n\n### 报错：You are building kernel with non-retpoline compiler.\n应该升级GCC了，刚开始一直卡在这，网上也没发现non-retpoline是什么鬼，后来才发现是gcc版本太低，可能我刚装的虚拟机，没升级...      \n\n    dnf update gcc\n\n### 缺少libelf-dev, libelf-devel or elfutils-libelf-devel\n报错：error: Cannot generate ORC metadata for CONFIG_UNWINDER_ORC=y, please install libelf-dev, libelf-devel or elfutils-libelf-devel\n\n这个直接安装会发现源里面没有，可以选择rpm包安装,也可以：\n\n    dnf install binutils gcc make patch libgomp glibc-headers glibc-devel kernel-headers kernel-devel dkms\n\n这也是百度到的办法...当时都惊了，源里面居然都没有...\n\n这里在装dkms,kernel-devel,patch的时候，安装了elfutils-libelf-devel和zlib-devel依赖\n\n### 缺少openssl\n报错:scripts/sign-file.c:25:10: fatal error: openssl/opensslv.h: No such file or directory\n #include <openssl/opensslv.h>\n\n 这里`dnf install openssl`发现已经安装了，很奇怪，后来发现libssl-devel在redhat系这里叫**openssl-devel**\n\n所以`dnf install openssl-devel`\n\n 如果是**debian**系的，应该是安装**openss**和**libssl-devel**\n\n## make mrproper \n清除编译过程中产生的所有中间文件   \n\n假如你之前也编译过内核，而你没有用此命令去清除之前编译产生的.o文件，那么，在make的时候，可能就会产生干扰。  \n\n清除之后要重新make menuconfig 生成.config文件\n\n## make -j8\n**-j**是代表编译时用几个线程，这里开了8个线程来编译，不然太慢了。\n\n## make modules_install\n安装内核模块，这里比较快，一会会就好了，安装完后可以看到/lib/modules目录下就会出现新的内核。\n\n## make install\n安装bzImage为/boot/vmlinuz-VERSION-RELEASE，并生成initramfs文件  \n使用ls /boot就可以查看新生成的文件，注意以安装的版本结尾的文件就好\n\n查看grub.cfg, `ls /boot/grub2`, 应该就有grub.cfg引导文件了\n\n## 重启\n这时候应该就可以在启动项发现新的内核了\n\n## 删除旧内核\n- 删除/lib/modules/目录下不需要的内核库文件\n\n- 删除/usr/src/linux/目录下不需要的内核源码\n\n- 删除/boot目录下启动的内核和内核映像文件\n\n- 更改grub的配置文件，删除不需要的内核启动列表\n\n------------------\n这时候内核编译就结束了，还是挺耗时间的，特别是编译的时候。\n\n","source":"_posts/Fedora26编译内核.md","raw":"---\ntitle: Fedora 26 编译内核\ncomments: true\nmathjax: false\ndate: 2019-04-01 00:09:49\ntags: [Linux,Learning]\ncategories: Linux\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n被迫很不情愿的编译内核...以前服务器上编译过，贼麻烦，现在又要编译，为了不让我的Arch出什么幺蛾子，新弄了个虚拟机练手了。    \n还是Fedora26的，现在都出29了，时间过得真快。\n\n<!--more-->\n# 准备工作\n## 查看自己内核版本\n    uname -a\n    Linux localhost.localdomain 4.11.8-300.fc26.x86_64 #1 SMP Thu Jun 29 20:09:48 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n\n## 下载内核并解压到/usr/src目录下\n推荐一下[上海交大的网站](http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v5.x/)，速度挺快的。  \n下载好后`tar xf linux-5.0.1.tar.gz -C /usr/src`解压到/usr/src下\n\n## 注意事项\n{% note danger %}\nmake编译内核起码预留10个G，编译完之后，不然存储会不够，又要重新弄。\nboot分区发现200M会不够用，改成500M可以，扩容还是挺麻烦的\n/ 根目录（具体来说是 /lib，没挂载/lib的话就默认是使用/目录） 要有至少4G的空余空间\n{% endnote %}\n\n# 编译安装\n## make makemenuconfig\n这是带有图形化界面的配置命令，在这里面可以定制很多功能。  \n常见的是定制内核版本，或者开启ntfs的功能。\n\n内核版本在general setup里面，找到local version -append to kernel release\n\nntfs在file-systems下面，很下面的位置，找到DOS/FAT/NT Filesystems，进入后用M键启用NTFS，用模块的方式，并在下面的NTFS write support 那里用y键启用  \n\n然后 保存退出\n\n如果想用默认配置，可以直接方向键选择**save**，然后**exit**。\n\n刚开始使用这个命令可能会一直报错，解决的基本原则是提示缺少什么包\n\n就在这个包的名字后面加上-devel，然后用dnf安装（其他版本也一样，只要换一下包管理器名）\n\n### 缺少ncurses-devel包\n    dnf install ncurses-devel\n\n### 缺少flex包\n    dnf install flex\n\n### 缺少bison包\n    dnf install bison\n\n### 报错：You are building kernel with non-retpoline compiler.\n应该升级GCC了，刚开始一直卡在这，网上也没发现non-retpoline是什么鬼，后来才发现是gcc版本太低，可能我刚装的虚拟机，没升级...      \n\n    dnf update gcc\n\n### 缺少libelf-dev, libelf-devel or elfutils-libelf-devel\n报错：error: Cannot generate ORC metadata for CONFIG_UNWINDER_ORC=y, please install libelf-dev, libelf-devel or elfutils-libelf-devel\n\n这个直接安装会发现源里面没有，可以选择rpm包安装,也可以：\n\n    dnf install binutils gcc make patch libgomp glibc-headers glibc-devel kernel-headers kernel-devel dkms\n\n这也是百度到的办法...当时都惊了，源里面居然都没有...\n\n这里在装dkms,kernel-devel,patch的时候，安装了elfutils-libelf-devel和zlib-devel依赖\n\n### 缺少openssl\n报错:scripts/sign-file.c:25:10: fatal error: openssl/opensslv.h: No such file or directory\n #include <openssl/opensslv.h>\n\n 这里`dnf install openssl`发现已经安装了，很奇怪，后来发现libssl-devel在redhat系这里叫**openssl-devel**\n\n所以`dnf install openssl-devel`\n\n 如果是**debian**系的，应该是安装**openss**和**libssl-devel**\n\n## make mrproper \n清除编译过程中产生的所有中间文件   \n\n假如你之前也编译过内核，而你没有用此命令去清除之前编译产生的.o文件，那么，在make的时候，可能就会产生干扰。  \n\n清除之后要重新make menuconfig 生成.config文件\n\n## make -j8\n**-j**是代表编译时用几个线程，这里开了8个线程来编译，不然太慢了。\n\n## make modules_install\n安装内核模块，这里比较快，一会会就好了，安装完后可以看到/lib/modules目录下就会出现新的内核。\n\n## make install\n安装bzImage为/boot/vmlinuz-VERSION-RELEASE，并生成initramfs文件  \n使用ls /boot就可以查看新生成的文件，注意以安装的版本结尾的文件就好\n\n查看grub.cfg, `ls /boot/grub2`, 应该就有grub.cfg引导文件了\n\n## 重启\n这时候应该就可以在启动项发现新的内核了\n\n## 删除旧内核\n- 删除/lib/modules/目录下不需要的内核库文件\n\n- 删除/usr/src/linux/目录下不需要的内核源码\n\n- 删除/boot目录下启动的内核和内核映像文件\n\n- 更改grub的配置文件，删除不需要的内核启动列表\n\n------------------\n这时候内核编译就结束了，还是挺耗时间的，特别是编译的时候。\n\n","slug":"Fedora26编译内核","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjo4000mussbuoxx63ve","content":"<p><meta name=\"referrer\" content=\"no-referrer\"><br>被迫很不情愿的编译内核…以前服务器上编译过，贼麻烦，现在又要编译，为了不让我的Arch出什么幺蛾子，新弄了个虚拟机练手了。<br>还是Fedora26的，现在都出29了，时间过得真快。</p>\n<a id=\"more\"></a>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"查看自己内核版本\"><a href=\"#查看自己内核版本\" class=\"headerlink\" title=\"查看自己内核版本\"></a>查看自己内核版本</h2><pre><code>uname -a\nLinux localhost.localdomain 4.11.8-300.fc26.x86_64 #1 SMP Thu Jun 29 20:09:48 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n</code></pre><h2 id=\"下载内核并解压到-usr-src目录下\"><a href=\"#下载内核并解压到-usr-src目录下\" class=\"headerlink\" title=\"下载内核并解压到/usr/src目录下\"></a>下载内核并解压到/usr/src目录下</h2><p>推荐一下<a href=\"http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v5.x/\" target=\"_blank\" rel=\"noopener\">上海交大的网站</a>，速度挺快的。<br>下载好后<code>tar xf linux-5.0.1.tar.gz -C /usr/src</code>解压到/usr/src下</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><div class=\"note danger\"><p>make编译内核起码预留10个G，编译完之后，不然存储会不够，又要重新弄。<br>boot分区发现200M会不够用，改成500M可以，扩容还是挺麻烦的<br>/ 根目录（具体来说是 /lib，没挂载/lib的话就默认是使用/目录） 要有至少4G的空余空间</p></div>\n<h1 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h1><h2 id=\"make-makemenuconfig\"><a href=\"#make-makemenuconfig\" class=\"headerlink\" title=\"make makemenuconfig\"></a>make makemenuconfig</h2><p>这是带有图形化界面的配置命令，在这里面可以定制很多功能。<br>常见的是定制内核版本，或者开启ntfs的功能。</p>\n<p>内核版本在general setup里面，找到local version -append to kernel release</p>\n<p>ntfs在file-systems下面，很下面的位置，找到DOS/FAT/NT Filesystems，进入后用M键启用NTFS，用模块的方式，并在下面的NTFS write support 那里用y键启用  </p>\n<p>然后 保存退出</p>\n<p>如果想用默认配置，可以直接方向键选择<strong>save</strong>，然后<strong>exit</strong>。</p>\n<p>刚开始使用这个命令可能会一直报错，解决的基本原则是提示缺少什么包</p>\n<p>就在这个包的名字后面加上-devel，然后用dnf安装（其他版本也一样，只要换一下包管理器名）</p>\n<h3 id=\"缺少ncurses-devel包\"><a href=\"#缺少ncurses-devel包\" class=\"headerlink\" title=\"缺少ncurses-devel包\"></a>缺少ncurses-devel包</h3><pre><code>dnf install ncurses-devel\n</code></pre><h3 id=\"缺少flex包\"><a href=\"#缺少flex包\" class=\"headerlink\" title=\"缺少flex包\"></a>缺少flex包</h3><pre><code>dnf install flex\n</code></pre><h3 id=\"缺少bison包\"><a href=\"#缺少bison包\" class=\"headerlink\" title=\"缺少bison包\"></a>缺少bison包</h3><pre><code>dnf install bison\n</code></pre><h3 id=\"报错：You-are-building-kernel-with-non-retpoline-compiler\"><a href=\"#报错：You-are-building-kernel-with-non-retpoline-compiler\" class=\"headerlink\" title=\"报错：You are building kernel with non-retpoline compiler.\"></a>报错：You are building kernel with non-retpoline compiler.</h3><p>应该升级GCC了，刚开始一直卡在这，网上也没发现non-retpoline是什么鬼，后来才发现是gcc版本太低，可能我刚装的虚拟机，没升级…      </p>\n<pre><code>dnf update gcc\n</code></pre><h3 id=\"缺少libelf-dev-libelf-devel-or-elfutils-libelf-devel\"><a href=\"#缺少libelf-dev-libelf-devel-or-elfutils-libelf-devel\" class=\"headerlink\" title=\"缺少libelf-dev, libelf-devel or elfutils-libelf-devel\"></a>缺少libelf-dev, libelf-devel or elfutils-libelf-devel</h3><p>报错：error: Cannot generate ORC metadata for CONFIG_UNWINDER_ORC=y, please install libelf-dev, libelf-devel or elfutils-libelf-devel</p>\n<p>这个直接安装会发现源里面没有，可以选择rpm包安装,也可以：</p>\n<pre><code>dnf install binutils gcc make patch libgomp glibc-headers glibc-devel kernel-headers kernel-devel dkms\n</code></pre><p>这也是百度到的办法…当时都惊了，源里面居然都没有…</p>\n<p>这里在装dkms,kernel-devel,patch的时候，安装了elfutils-libelf-devel和zlib-devel依赖</p>\n<h3 id=\"缺少openssl\"><a href=\"#缺少openssl\" class=\"headerlink\" title=\"缺少openssl\"></a>缺少openssl</h3><p>报错:scripts/sign-file.c:25:10: fatal error: openssl/opensslv.h: No such file or directory</p>\n<h1 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include \"></a>include <openssl opensslv.h=\"\"></openssl></h1><p> 这里<code>dnf install openssl</code>发现已经安装了，很奇怪，后来发现libssl-devel在redhat系这里叫<strong>openssl-devel</strong></p>\n<p>所以<code>dnf install openssl-devel</code></p>\n<p> 如果是<strong>debian</strong>系的，应该是安装<strong>openss</strong>和<strong>libssl-devel</strong></p>\n<h2 id=\"make-mrproper\"><a href=\"#make-mrproper\" class=\"headerlink\" title=\"make mrproper\"></a>make mrproper</h2><p>清除编译过程中产生的所有中间文件   </p>\n<p>假如你之前也编译过内核，而你没有用此命令去清除之前编译产生的.o文件，那么，在make的时候，可能就会产生干扰。  </p>\n<p>清除之后要重新make menuconfig 生成.config文件</p>\n<h2 id=\"make-j8\"><a href=\"#make-j8\" class=\"headerlink\" title=\"make -j8\"></a>make -j8</h2><p><strong>-j</strong>是代表编译时用几个线程，这里开了8个线程来编译，不然太慢了。</p>\n<h2 id=\"make-modules-install\"><a href=\"#make-modules-install\" class=\"headerlink\" title=\"make modules_install\"></a>make modules_install</h2><p>安装内核模块，这里比较快，一会会就好了，安装完后可以看到/lib/modules目录下就会出现新的内核。</p>\n<h2 id=\"make-install\"><a href=\"#make-install\" class=\"headerlink\" title=\"make install\"></a>make install</h2><p>安装bzImage为/boot/vmlinuz-VERSION-RELEASE，并生成initramfs文件<br>使用ls /boot就可以查看新生成的文件，注意以安装的版本结尾的文件就好</p>\n<p>查看grub.cfg, <code>ls /boot/grub2</code>, 应该就有grub.cfg引导文件了</p>\n<h2 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h2><p>这时候应该就可以在启动项发现新的内核了</p>\n<h2 id=\"删除旧内核\"><a href=\"#删除旧内核\" class=\"headerlink\" title=\"删除旧内核\"></a>删除旧内核</h2><ul>\n<li><p>删除/lib/modules/目录下不需要的内核库文件</p>\n</li>\n<li><p>删除/usr/src/linux/目录下不需要的内核源码</p>\n</li>\n<li><p>删除/boot目录下启动的内核和内核映像文件</p>\n</li>\n<li><p>更改grub的配置文件，删除不需要的内核启动列表</p>\n</li>\n</ul>\n<hr>\n<p>这时候内核编译就结束了，还是挺耗时间的，特别是编译的时候。</p>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p><meta name=\"referrer\" content=\"no-referrer\"><br>被迫很不情愿的编译内核…以前服务器上编译过，贼麻烦，现在又要编译，为了不让我的Arch出什么幺蛾子，新弄了个虚拟机练手了。<br>还是Fedora26的，现在都出29了，时间过得真快。</p>","more":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"查看自己内核版本\"><a href=\"#查看自己内核版本\" class=\"headerlink\" title=\"查看自己内核版本\"></a>查看自己内核版本</h2><pre><code>uname -a\nLinux localhost.localdomain 4.11.8-300.fc26.x86_64 #1 SMP Thu Jun 29 20:09:48 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n</code></pre><h2 id=\"下载内核并解压到-usr-src目录下\"><a href=\"#下载内核并解压到-usr-src目录下\" class=\"headerlink\" title=\"下载内核并解压到/usr/src目录下\"></a>下载内核并解压到/usr/src目录下</h2><p>推荐一下<a href=\"http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v5.x/\" target=\"_blank\" rel=\"noopener\">上海交大的网站</a>，速度挺快的。<br>下载好后<code>tar xf linux-5.0.1.tar.gz -C /usr/src</code>解压到/usr/src下</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><div class=\"note danger\"><p>make编译内核起码预留10个G，编译完之后，不然存储会不够，又要重新弄。<br>boot分区发现200M会不够用，改成500M可以，扩容还是挺麻烦的<br>/ 根目录（具体来说是 /lib，没挂载/lib的话就默认是使用/目录） 要有至少4G的空余空间</p></div>\n<h1 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h1><h2 id=\"make-makemenuconfig\"><a href=\"#make-makemenuconfig\" class=\"headerlink\" title=\"make makemenuconfig\"></a>make makemenuconfig</h2><p>这是带有图形化界面的配置命令，在这里面可以定制很多功能。<br>常见的是定制内核版本，或者开启ntfs的功能。</p>\n<p>内核版本在general setup里面，找到local version -append to kernel release</p>\n<p>ntfs在file-systems下面，很下面的位置，找到DOS/FAT/NT Filesystems，进入后用M键启用NTFS，用模块的方式，并在下面的NTFS write support 那里用y键启用  </p>\n<p>然后 保存退出</p>\n<p>如果想用默认配置，可以直接方向键选择<strong>save</strong>，然后<strong>exit</strong>。</p>\n<p>刚开始使用这个命令可能会一直报错，解决的基本原则是提示缺少什么包</p>\n<p>就在这个包的名字后面加上-devel，然后用dnf安装（其他版本也一样，只要换一下包管理器名）</p>\n<h3 id=\"缺少ncurses-devel包\"><a href=\"#缺少ncurses-devel包\" class=\"headerlink\" title=\"缺少ncurses-devel包\"></a>缺少ncurses-devel包</h3><pre><code>dnf install ncurses-devel\n</code></pre><h3 id=\"缺少flex包\"><a href=\"#缺少flex包\" class=\"headerlink\" title=\"缺少flex包\"></a>缺少flex包</h3><pre><code>dnf install flex\n</code></pre><h3 id=\"缺少bison包\"><a href=\"#缺少bison包\" class=\"headerlink\" title=\"缺少bison包\"></a>缺少bison包</h3><pre><code>dnf install bison\n</code></pre><h3 id=\"报错：You-are-building-kernel-with-non-retpoline-compiler\"><a href=\"#报错：You-are-building-kernel-with-non-retpoline-compiler\" class=\"headerlink\" title=\"报错：You are building kernel with non-retpoline compiler.\"></a>报错：You are building kernel with non-retpoline compiler.</h3><p>应该升级GCC了，刚开始一直卡在这，网上也没发现non-retpoline是什么鬼，后来才发现是gcc版本太低，可能我刚装的虚拟机，没升级…      </p>\n<pre><code>dnf update gcc\n</code></pre><h3 id=\"缺少libelf-dev-libelf-devel-or-elfutils-libelf-devel\"><a href=\"#缺少libelf-dev-libelf-devel-or-elfutils-libelf-devel\" class=\"headerlink\" title=\"缺少libelf-dev, libelf-devel or elfutils-libelf-devel\"></a>缺少libelf-dev, libelf-devel or elfutils-libelf-devel</h3><p>报错：error: Cannot generate ORC metadata for CONFIG_UNWINDER_ORC=y, please install libelf-dev, libelf-devel or elfutils-libelf-devel</p>\n<p>这个直接安装会发现源里面没有，可以选择rpm包安装,也可以：</p>\n<pre><code>dnf install binutils gcc make patch libgomp glibc-headers glibc-devel kernel-headers kernel-devel dkms\n</code></pre><p>这也是百度到的办法…当时都惊了，源里面居然都没有…</p>\n<p>这里在装dkms,kernel-devel,patch的时候，安装了elfutils-libelf-devel和zlib-devel依赖</p>\n<h3 id=\"缺少openssl\"><a href=\"#缺少openssl\" class=\"headerlink\" title=\"缺少openssl\"></a>缺少openssl</h3><p>报错:scripts/sign-file.c:25:10: fatal error: openssl/opensslv.h: No such file or directory</p>\n<h1 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include \"></a>include <openssl opensslv.h=\"\"></openssl></h1><p> 这里<code>dnf install openssl</code>发现已经安装了，很奇怪，后来发现libssl-devel在redhat系这里叫<strong>openssl-devel</strong></p>\n<p>所以<code>dnf install openssl-devel</code></p>\n<p> 如果是<strong>debian</strong>系的，应该是安装<strong>openss</strong>和<strong>libssl-devel</strong></p>\n<h2 id=\"make-mrproper\"><a href=\"#make-mrproper\" class=\"headerlink\" title=\"make mrproper\"></a>make mrproper</h2><p>清除编译过程中产生的所有中间文件   </p>\n<p>假如你之前也编译过内核，而你没有用此命令去清除之前编译产生的.o文件，那么，在make的时候，可能就会产生干扰。  </p>\n<p>清除之后要重新make menuconfig 生成.config文件</p>\n<h2 id=\"make-j8\"><a href=\"#make-j8\" class=\"headerlink\" title=\"make -j8\"></a>make -j8</h2><p><strong>-j</strong>是代表编译时用几个线程，这里开了8个线程来编译，不然太慢了。</p>\n<h2 id=\"make-modules-install\"><a href=\"#make-modules-install\" class=\"headerlink\" title=\"make modules_install\"></a>make modules_install</h2><p>安装内核模块，这里比较快，一会会就好了，安装完后可以看到/lib/modules目录下就会出现新的内核。</p>\n<h2 id=\"make-install\"><a href=\"#make-install\" class=\"headerlink\" title=\"make install\"></a>make install</h2><p>安装bzImage为/boot/vmlinuz-VERSION-RELEASE，并生成initramfs文件<br>使用ls /boot就可以查看新生成的文件，注意以安装的版本结尾的文件就好</p>\n<p>查看grub.cfg, <code>ls /boot/grub2</code>, 应该就有grub.cfg引导文件了</p>\n<h2 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h2><p>这时候应该就可以在启动项发现新的内核了</p>\n<h2 id=\"删除旧内核\"><a href=\"#删除旧内核\" class=\"headerlink\" title=\"删除旧内核\"></a>删除旧内核</h2><ul>\n<li><p>删除/lib/modules/目录下不需要的内核库文件</p>\n</li>\n<li><p>删除/usr/src/linux/目录下不需要的内核源码</p>\n</li>\n<li><p>删除/boot目录下启动的内核和内核映像文件</p>\n</li>\n<li><p>更改grub的配置文件，删除不需要的内核启动列表</p>\n</li>\n</ul>\n<hr>\n<p>这时候内核编译就结束了，还是挺耗时间的，特别是编译的时候。</p>"},{"title":"Fedora搭建LNMP环境","comments":1,"mathjax":false,"date":"2017-08-13T08:12:58.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 前言\n\nwoc!因为Algolia文章长度限制...不得不把原本的<CentOS-Fedora搭建LNMP环境>改成两篇文章...佛了\n<!--more-->\n\n原本在服务器上一直用的debian系,后来转到本机Fedora搭建环境就蒙了,之前也因为这个花了不少时间,为了把踩过得坑记下来,还是写篇文章。\n\n其实所谓LNMP其实就是指Linux+Nginx+Mysql+PHP,因为Nginx发音问题,有时候也说是LEMP。\n\n**下面就是*Centos/Fedora* 搭建LNMP环境的教程.**  \n\n# 操作环境\n\nOS: Fedora 25  \nNginx Version: 1.6.2  \nMysql Version: MariaDB 10.2  \nPHP Version: PHP7.17\n\n# 安装Nginx,PHP7.1.7和PHP-FPM\n\n## 切换到root用户\n\n    sudo -i \n    \n    ## OR ##\n    \n    su -  \n  \n## 添加repositories\n    \n    ## Remi Dependency on Fedora ##\n    \n    rpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm \n    \n    rpm -Uvh http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm\n    \n    ## The version 25 can be replaced by 26/24 ##\n    \n    rpm -Uvh http://rpms.famillecollet.com/fedora/remi-release-25.rpm  \n  \n## 安装Nginx,PHP 7.1.7 and PHP-FPM\n\n    dnf --enablerepo=remi --enablerepo=remi-php71 install nginx php-fpm php-common  \n  \n## 安装模块\n    \n    dnf --enablerepo=remi --enablerepo=remi-php71 install php-opcache php-pecl-apcu php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongodb php-pecl-redis php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml  \n  \n  \n关于这些模块的介绍可以自己百度,根据自己需要来安装,嫌麻烦的话～直接copy吧～\n\n## 关闭httpd(Apache)并打开Nginx,PHP-FPM\n\n **关闭Apache**  \n    \n    systemctl stop httpd.service  \n  \n**打开Nginx**  \n    \n    systemctl start nginx.service  \n  \n**打开PHP-FPM**  \n\n    systemctl start php-fpm.service  \n  \n## 设置开机自启Nginx PHP-FPM\n\n **关闭httpd(Apache)的开机自启**  \n    \n    systemctl disable httpd.service  \n  \n**设置Nginx和PHP-FPM开机自启**  \n    \n    systemctl enable nginx.service\n    \n    systemctl enable php-fpm.service  \n  \n## 配置Nginx 和PHP-FPM\n\n **先做好默认配置的备份**  \n    \n    cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak\n    \n    cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf  \n  \n**修改PHP-FPM配置**  \n    \n    vim /etc/php-fpm.d/www.conf\n    \n    ## 注释掉新添加一行 ##\n    \n    ;listen = /run/php-fpm/www.sock\n    \n    listen = 127.0.0.1:9000  \n  \n**为你的站点创建相关文件夹**  \n    \n    ## 将testsite.local换成你自己的　##\n    \n    mkdir -p /srv/www/testsite.local/public_html\n    \n    mkdir /srv/www/testsite.local/logs\n    \n    chown -R apache:apache /srv/www/testsite.local\n    \n    mkdir /etc/nginx/sites-available\n    \n    mkdir /etc/nginx/sites-enabled  \n  \n这里使用apache user group是因为PHP-FPM默认运行apache,并且apache能够进入一些类似httpd这样的目录\n\n**在/etc/nginx/nginx.conf文件\\”include /etc/nginx/conf.d/*.conf\\”这行后面添加一行**  \n\n    include /etc/nginx/sites-enabled/*;  \n  \n  \n**创建testsite.local 文件并配置**  \n\n    ## 这是最基本的配置 ##\n    \n    server {\n    \n        server_name testsite.local;\n    \n        access_log /srv/www/testsite.local/logs/access.log;\n    \n        error_log /srv/www/testsite.local/logs/error.log;\n    \n        root /srv/www/testsite.local/public_html;\n    \n        location / {\n    \n            index index.html index.htm index.php;\n    \n        }\n    \n        location ~ \\.php$ {\n    \n            include /etc/nginx/fastcgi_params;\n    \n            fastcgi_pass  127.0.0.1:9000;\n    \n            fastcgi_index index.php;\n    \n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    \n        }\n    \n    }  \n  \n  \n**创建软链接到sites-enabled目录**  \n    \n    cd /etc/nginx/sites-enabled/\n    \n    ln -s /etc/nginx/sites-available/testsite.local\n    \n    systemctl restart nginx.service  \n  \n  \n**将testsite.local添加到/etc/hosts中**  \n\n    127.0.0.1               localhost.localdomain localhost testsite.local  \n  \n  \n[更多的Nginx 和PHP-FPM配置点这里～](http://www.if-not-true-then-false.com/2011/nginx-\nand-php-fpm-configuration-and-optimizing-tips-and-tricks/)\n\n## 测试是否成功\n\n**创建/srv/www/testsite.local/public_html/index.php并添加以下内容:**  \n\n**然后访问域名或者服务器ip看是否出现phpinfo的页面。**\n\n## 出现403 forbidden\n\n**可能是SELinux有问题**  \n\n    chcon -R -t httpd_sys_content_t /srv/www/testsite.local/public_html  \n  \n  \n## 远程链接到服务器\n\n**打开防火墙的80端口**  \n\n    firewall-cmd --get-active-zones\n    \n    firewall-cmd --permanent --zone=public --add-service=http\n    \n    ## OR ##\n    \n    firewall-cmd --permanent --zone=public --add-port=80/tcp\n    \n    systemctl restart firewalld.service  \n  \n  \n**访问域名或者ip试试~**\n\n# 安装MariaDB\n\n这里安装的是MariaDB,而不是Mysql,有如下几个原因\n\n  * MariaDB本来就是一个Mysql的开源版本\n  * MariaDB和Mysql类似并兼容Mysql\n  * Fedora和Centos系列的发行版已经转用MariaDB了\n\n**我这里选择安装MariaDB 10.2.7 [stable],具体安装过程如下~**\n\n  * 如果之前安装了Mysql,记得备份你的数据库和配置文件!\n  * 如果是从低版本升级的,记得执行`mysql_upgrade`~\n\n## 切换root用户\n    \n    su -\n    \n    ## OR ##\n    \n    sudo -i  \n  \n  \n## 添加MariaDB repo\n\n现在Fedora 24/25/26 用户都可以直接安装MariaDB 10.1 而不用添加其他的repo来安装~\n\n[MariaDB repository configuration\ntool](http://downloads.mariadb.org/mariadb/repositories/),这里面有repo,自己选择repo文件安装,上面也有教程~\n\n## 更新并安装\n\n    dnf install mariadb mariadb-server  \n\n## 打开MariaDB并配置自启\n  \n    systemctl start mariadb.service ## use restart after update\n\n    systemctl enable mariadb.service  \n    \n## 进行secure installation\n    \n    /usr/bin/mysql_secure_installation  \n  \n自己看提示来~第一个没设置密码呢,直接回车,下面的大多数都选Y\n\n如果不想进行secure installation 的话,emmmmm….最好还是做下吧~  \n  \n到这里其实已经结束了…233333\n\n## 连接数据库\n    \n    mysql -u root -p  \n  \n## 创建数据库和user\n    \n    ## CREATE DATABASE ##\n    \n    MariaDB [(none)]> CREATE DATABASE webdb;\n    \n    ## CREATE USER ##\n    \n    MariaDB [(none)]> CREATE USER 'webdb_user'@'10.0.15.25' IDENTIFIED BY 'password123';\n    \n    ## GRANT PERMISSIONS ##\n    \n    MariaDB [(none)]> GRANT ALL ON webdb.* TO 'webdb_user'@'10.0.15.25';\n    \n    ##  FLUSH PRIVILEGES, Tell the server to reload the grant tables  ##\n    \n    MariaDB [(none)]> FLUSH PRIVILEGES;  \n  \n## 确保数据库能远程连接\n\n    firewall-cmd --get-active-zones\n    \n    ## 应该会输出如下 ##\n    \n    - public\n    \n    -    interfaces: wlp1s0\n    \n    firewall-cmd --permanent --zone=public --add-service=mysql\n    \n    systemctl restart firewalld.service\n    \n    mysql -h 10.0.15.25 -u myusername -p  \n  \n\n------------------- \n","source":"_posts/Fedora搭建LNMP环境.md","raw":"---\ntitle: Fedora搭建LNMP环境\ncomments: true\nmathjax: false\ndate: 2017-08-13 16:12:58\ntags: [LNMP,Linux]\ncategories: Linux\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 前言\n\nwoc!因为Algolia文章长度限制...不得不把原本的<CentOS-Fedora搭建LNMP环境>改成两篇文章...佛了\n<!--more-->\n\n原本在服务器上一直用的debian系,后来转到本机Fedora搭建环境就蒙了,之前也因为这个花了不少时间,为了把踩过得坑记下来,还是写篇文章。\n\n其实所谓LNMP其实就是指Linux+Nginx+Mysql+PHP,因为Nginx发音问题,有时候也说是LEMP。\n\n**下面就是*Centos/Fedora* 搭建LNMP环境的教程.**  \n\n# 操作环境\n\nOS: Fedora 25  \nNginx Version: 1.6.2  \nMysql Version: MariaDB 10.2  \nPHP Version: PHP7.17\n\n# 安装Nginx,PHP7.1.7和PHP-FPM\n\n## 切换到root用户\n\n    sudo -i \n    \n    ## OR ##\n    \n    su -  \n  \n## 添加repositories\n    \n    ## Remi Dependency on Fedora ##\n    \n    rpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm \n    \n    rpm -Uvh http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm\n    \n    ## The version 25 can be replaced by 26/24 ##\n    \n    rpm -Uvh http://rpms.famillecollet.com/fedora/remi-release-25.rpm  \n  \n## 安装Nginx,PHP 7.1.7 and PHP-FPM\n\n    dnf --enablerepo=remi --enablerepo=remi-php71 install nginx php-fpm php-common  \n  \n## 安装模块\n    \n    dnf --enablerepo=remi --enablerepo=remi-php71 install php-opcache php-pecl-apcu php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongodb php-pecl-redis php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml  \n  \n  \n关于这些模块的介绍可以自己百度,根据自己需要来安装,嫌麻烦的话～直接copy吧～\n\n## 关闭httpd(Apache)并打开Nginx,PHP-FPM\n\n **关闭Apache**  \n    \n    systemctl stop httpd.service  \n  \n**打开Nginx**  \n    \n    systemctl start nginx.service  \n  \n**打开PHP-FPM**  \n\n    systemctl start php-fpm.service  \n  \n## 设置开机自启Nginx PHP-FPM\n\n **关闭httpd(Apache)的开机自启**  \n    \n    systemctl disable httpd.service  \n  \n**设置Nginx和PHP-FPM开机自启**  \n    \n    systemctl enable nginx.service\n    \n    systemctl enable php-fpm.service  \n  \n## 配置Nginx 和PHP-FPM\n\n **先做好默认配置的备份**  \n    \n    cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak\n    \n    cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf  \n  \n**修改PHP-FPM配置**  \n    \n    vim /etc/php-fpm.d/www.conf\n    \n    ## 注释掉新添加一行 ##\n    \n    ;listen = /run/php-fpm/www.sock\n    \n    listen = 127.0.0.1:9000  \n  \n**为你的站点创建相关文件夹**  \n    \n    ## 将testsite.local换成你自己的　##\n    \n    mkdir -p /srv/www/testsite.local/public_html\n    \n    mkdir /srv/www/testsite.local/logs\n    \n    chown -R apache:apache /srv/www/testsite.local\n    \n    mkdir /etc/nginx/sites-available\n    \n    mkdir /etc/nginx/sites-enabled  \n  \n这里使用apache user group是因为PHP-FPM默认运行apache,并且apache能够进入一些类似httpd这样的目录\n\n**在/etc/nginx/nginx.conf文件\\”include /etc/nginx/conf.d/*.conf\\”这行后面添加一行**  \n\n    include /etc/nginx/sites-enabled/*;  \n  \n  \n**创建testsite.local 文件并配置**  \n\n    ## 这是最基本的配置 ##\n    \n    server {\n    \n        server_name testsite.local;\n    \n        access_log /srv/www/testsite.local/logs/access.log;\n    \n        error_log /srv/www/testsite.local/logs/error.log;\n    \n        root /srv/www/testsite.local/public_html;\n    \n        location / {\n    \n            index index.html index.htm index.php;\n    \n        }\n    \n        location ~ \\.php$ {\n    \n            include /etc/nginx/fastcgi_params;\n    \n            fastcgi_pass  127.0.0.1:9000;\n    \n            fastcgi_index index.php;\n    \n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    \n        }\n    \n    }  \n  \n  \n**创建软链接到sites-enabled目录**  \n    \n    cd /etc/nginx/sites-enabled/\n    \n    ln -s /etc/nginx/sites-available/testsite.local\n    \n    systemctl restart nginx.service  \n  \n  \n**将testsite.local添加到/etc/hosts中**  \n\n    127.0.0.1               localhost.localdomain localhost testsite.local  \n  \n  \n[更多的Nginx 和PHP-FPM配置点这里～](http://www.if-not-true-then-false.com/2011/nginx-\nand-php-fpm-configuration-and-optimizing-tips-and-tricks/)\n\n## 测试是否成功\n\n**创建/srv/www/testsite.local/public_html/index.php并添加以下内容:**  \n\n**然后访问域名或者服务器ip看是否出现phpinfo的页面。**\n\n## 出现403 forbidden\n\n**可能是SELinux有问题**  \n\n    chcon -R -t httpd_sys_content_t /srv/www/testsite.local/public_html  \n  \n  \n## 远程链接到服务器\n\n**打开防火墙的80端口**  \n\n    firewall-cmd --get-active-zones\n    \n    firewall-cmd --permanent --zone=public --add-service=http\n    \n    ## OR ##\n    \n    firewall-cmd --permanent --zone=public --add-port=80/tcp\n    \n    systemctl restart firewalld.service  \n  \n  \n**访问域名或者ip试试~**\n\n# 安装MariaDB\n\n这里安装的是MariaDB,而不是Mysql,有如下几个原因\n\n  * MariaDB本来就是一个Mysql的开源版本\n  * MariaDB和Mysql类似并兼容Mysql\n  * Fedora和Centos系列的发行版已经转用MariaDB了\n\n**我这里选择安装MariaDB 10.2.7 [stable],具体安装过程如下~**\n\n  * 如果之前安装了Mysql,记得备份你的数据库和配置文件!\n  * 如果是从低版本升级的,记得执行`mysql_upgrade`~\n\n## 切换root用户\n    \n    su -\n    \n    ## OR ##\n    \n    sudo -i  \n  \n  \n## 添加MariaDB repo\n\n现在Fedora 24/25/26 用户都可以直接安装MariaDB 10.1 而不用添加其他的repo来安装~\n\n[MariaDB repository configuration\ntool](http://downloads.mariadb.org/mariadb/repositories/),这里面有repo,自己选择repo文件安装,上面也有教程~\n\n## 更新并安装\n\n    dnf install mariadb mariadb-server  \n\n## 打开MariaDB并配置自启\n  \n    systemctl start mariadb.service ## use restart after update\n\n    systemctl enable mariadb.service  \n    \n## 进行secure installation\n    \n    /usr/bin/mysql_secure_installation  \n  \n自己看提示来~第一个没设置密码呢,直接回车,下面的大多数都选Y\n\n如果不想进行secure installation 的话,emmmmm….最好还是做下吧~  \n  \n到这里其实已经结束了…233333\n\n## 连接数据库\n    \n    mysql -u root -p  \n  \n## 创建数据库和user\n    \n    ## CREATE DATABASE ##\n    \n    MariaDB [(none)]> CREATE DATABASE webdb;\n    \n    ## CREATE USER ##\n    \n    MariaDB [(none)]> CREATE USER 'webdb_user'@'10.0.15.25' IDENTIFIED BY 'password123';\n    \n    ## GRANT PERMISSIONS ##\n    \n    MariaDB [(none)]> GRANT ALL ON webdb.* TO 'webdb_user'@'10.0.15.25';\n    \n    ##  FLUSH PRIVILEGES, Tell the server to reload the grant tables  ##\n    \n    MariaDB [(none)]> FLUSH PRIVILEGES;  \n  \n## 确保数据库能远程连接\n\n    firewall-cmd --get-active-zones\n    \n    ## 应该会输出如下 ##\n    \n    - public\n    \n    -    interfaces: wlp1s0\n    \n    firewall-cmd --permanent --zone=public --add-service=mysql\n    \n    systemctl restart firewalld.service\n    \n    mysql -h 10.0.15.25 -u myusername -p  \n  \n\n------------------- \n","slug":"Fedora搭建LNMP环境","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjoc000oussb7ntcopkn","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>woc!因为Algolia文章长度限制…不得不把原本的<centos-fedora搭建lnmp环境>改成两篇文章…佛了<br><a id=\"more\"></a></centos-fedora搭建lnmp环境></p>\n<p>原本在服务器上一直用的debian系,后来转到本机Fedora搭建环境就蒙了,之前也因为这个花了不少时间,为了把踩过得坑记下来,还是写篇文章。</p>\n<p>其实所谓LNMP其实就是指Linux+Nginx+Mysql+PHP,因为Nginx发音问题,有时候也说是LEMP。</p>\n<p><strong>下面就是<em>Centos/Fedora</em> 搭建LNMP环境的教程.</strong>  </p>\n<h1 id=\"操作环境\"><a href=\"#操作环境\" class=\"headerlink\" title=\"操作环境\"></a>操作环境</h1><p>OS: Fedora 25<br>Nginx Version: 1.6.2<br>Mysql Version: MariaDB 10.2<br>PHP Version: PHP7.17</p>\n<h1 id=\"安装Nginx-PHP7-1-7和PHP-FPM\"><a href=\"#安装Nginx-PHP7-1-7和PHP-FPM\" class=\"headerlink\" title=\"安装Nginx,PHP7.1.7和PHP-FPM\"></a>安装Nginx,PHP7.1.7和PHP-FPM</h1><h2 id=\"切换到root用户\"><a href=\"#切换到root用户\" class=\"headerlink\" title=\"切换到root用户\"></a>切换到root用户</h2><pre><code>sudo -i \n\n## OR ##\n\nsu -  \n</code></pre><h2 id=\"添加repositories\"><a href=\"#添加repositories\" class=\"headerlink\" title=\"添加repositories\"></a>添加repositories</h2><pre><code>## Remi Dependency on Fedora ##\n\nrpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm \n\nrpm -Uvh http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm\n\n## The version 25 can be replaced by 26/24 ##\n\nrpm -Uvh http://rpms.famillecollet.com/fedora/remi-release-25.rpm  \n</code></pre><h2 id=\"安装Nginx-PHP-7-1-7-and-PHP-FPM\"><a href=\"#安装Nginx-PHP-7-1-7-and-PHP-FPM\" class=\"headerlink\" title=\"安装Nginx,PHP 7.1.7 and PHP-FPM\"></a>安装Nginx,PHP 7.1.7 and PHP-FPM</h2><pre><code>dnf --enablerepo=remi --enablerepo=remi-php71 install nginx php-fpm php-common  \n</code></pre><h2 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h2><pre><code>dnf --enablerepo=remi --enablerepo=remi-php71 install php-opcache php-pecl-apcu php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongodb php-pecl-redis php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml  \n</code></pre><p>关于这些模块的介绍可以自己百度,根据自己需要来安装,嫌麻烦的话～直接copy吧～</p>\n<h2 id=\"关闭httpd-Apache-并打开Nginx-PHP-FPM\"><a href=\"#关闭httpd-Apache-并打开Nginx-PHP-FPM\" class=\"headerlink\" title=\"关闭httpd(Apache)并打开Nginx,PHP-FPM\"></a>关闭httpd(Apache)并打开Nginx,PHP-FPM</h2><p> <strong>关闭Apache</strong>  </p>\n<pre><code>systemctl stop httpd.service  \n</code></pre><p><strong>打开Nginx</strong>  </p>\n<pre><code>systemctl start nginx.service  \n</code></pre><p><strong>打开PHP-FPM</strong>  </p>\n<pre><code>systemctl start php-fpm.service  \n</code></pre><h2 id=\"设置开机自启Nginx-PHP-FPM\"><a href=\"#设置开机自启Nginx-PHP-FPM\" class=\"headerlink\" title=\"设置开机自启Nginx PHP-FPM\"></a>设置开机自启Nginx PHP-FPM</h2><p> <strong>关闭httpd(Apache)的开机自启</strong>  </p>\n<pre><code>systemctl disable httpd.service  \n</code></pre><p><strong>设置Nginx和PHP-FPM开机自启</strong>  </p>\n<pre><code>systemctl enable nginx.service\n\nsystemctl enable php-fpm.service  \n</code></pre><h2 id=\"配置Nginx-和PHP-FPM\"><a href=\"#配置Nginx-和PHP-FPM\" class=\"headerlink\" title=\"配置Nginx 和PHP-FPM\"></a>配置Nginx 和PHP-FPM</h2><p> <strong>先做好默认配置的备份</strong>  </p>\n<pre><code>cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak\n\ncp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf  \n</code></pre><p><strong>修改PHP-FPM配置</strong>  </p>\n<pre><code>vim /etc/php-fpm.d/www.conf\n\n## 注释掉新添加一行 ##\n\n;listen = /run/php-fpm/www.sock\n\nlisten = 127.0.0.1:9000  \n</code></pre><p><strong>为你的站点创建相关文件夹</strong>  </p>\n<pre><code>## 将testsite.local换成你自己的　##\n\nmkdir -p /srv/www/testsite.local/public_html\n\nmkdir /srv/www/testsite.local/logs\n\nchown -R apache:apache /srv/www/testsite.local\n\nmkdir /etc/nginx/sites-available\n\nmkdir /etc/nginx/sites-enabled  \n</code></pre><p>这里使用apache user group是因为PHP-FPM默认运行apache,并且apache能够进入一些类似httpd这样的目录</p>\n<p><strong>在/etc/nginx/nginx.conf文件\\”include /etc/nginx/conf.d/*.conf\\”这行后面添加一行</strong>  </p>\n<pre><code>include /etc/nginx/sites-enabled/*;  \n</code></pre><p><strong>创建testsite.local 文件并配置</strong>  </p>\n<pre><code>## 这是最基本的配置 ##\n\nserver {\n\n    server_name testsite.local;\n\n    access_log /srv/www/testsite.local/logs/access.log;\n\n    error_log /srv/www/testsite.local/logs/error.log;\n\n    root /srv/www/testsite.local/public_html;\n\n    location / {\n\n        index index.html index.htm index.php;\n\n    }\n\n    location ~ \\.php$ {\n\n        include /etc/nginx/fastcgi_params;\n\n        fastcgi_pass  127.0.0.1:9000;\n\n        fastcgi_index index.php;\n\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n\n    }\n\n}  \n</code></pre><p><strong>创建软链接到sites-enabled目录</strong>  </p>\n<pre><code>cd /etc/nginx/sites-enabled/\n\nln -s /etc/nginx/sites-available/testsite.local\n\nsystemctl restart nginx.service  \n</code></pre><p><strong>将testsite.local添加到/etc/hosts中</strong>  </p>\n<pre><code>127.0.0.1               localhost.localdomain localhost testsite.local  \n</code></pre><p><a href=\"http://www.if-not-true-then-false.com/2011/nginx-\nand-php-fpm-configuration-and-optimizing-tips-and-tricks/\" target=\"_blank\" rel=\"noopener\">更多的Nginx 和PHP-FPM配置点这里～</a></p>\n<h2 id=\"测试是否成功\"><a href=\"#测试是否成功\" class=\"headerlink\" title=\"测试是否成功\"></a>测试是否成功</h2><p><strong>创建/srv/www/testsite.local/public_html/index.php并添加以下内容:</strong>  </p>\n<p><strong>然后访问域名或者服务器ip看是否出现phpinfo的页面。</strong></p>\n<h2 id=\"出现403-forbidden\"><a href=\"#出现403-forbidden\" class=\"headerlink\" title=\"出现403 forbidden\"></a>出现403 forbidden</h2><p><strong>可能是SELinux有问题</strong>  </p>\n<pre><code>chcon -R -t httpd_sys_content_t /srv/www/testsite.local/public_html  \n</code></pre><h2 id=\"远程链接到服务器\"><a href=\"#远程链接到服务器\" class=\"headerlink\" title=\"远程链接到服务器\"></a>远程链接到服务器</h2><p><strong>打开防火墙的80端口</strong>  </p>\n<pre><code>firewall-cmd --get-active-zones\n\nfirewall-cmd --permanent --zone=public --add-service=http\n\n## OR ##\n\nfirewall-cmd --permanent --zone=public --add-port=80/tcp\n\nsystemctl restart firewalld.service  \n</code></pre><p><strong>访问域名或者ip试试~</strong></p>\n<h1 id=\"安装MariaDB\"><a href=\"#安装MariaDB\" class=\"headerlink\" title=\"安装MariaDB\"></a>安装MariaDB</h1><p>这里安装的是MariaDB,而不是Mysql,有如下几个原因</p>\n<ul>\n<li>MariaDB本来就是一个Mysql的开源版本</li>\n<li>MariaDB和Mysql类似并兼容Mysql</li>\n<li>Fedora和Centos系列的发行版已经转用MariaDB了</li>\n</ul>\n<p><strong>我这里选择安装MariaDB 10.2.7 [stable],具体安装过程如下~</strong></p>\n<ul>\n<li>如果之前安装了Mysql,记得备份你的数据库和配置文件!</li>\n<li>如果是从低版本升级的,记得执行<code>mysql_upgrade</code>~</li>\n</ul>\n<h2 id=\"切换root用户\"><a href=\"#切换root用户\" class=\"headerlink\" title=\"切换root用户\"></a>切换root用户</h2><pre><code>su -\n\n## OR ##\n\nsudo -i  \n</code></pre><h2 id=\"添加MariaDB-repo\"><a href=\"#添加MariaDB-repo\" class=\"headerlink\" title=\"添加MariaDB repo\"></a>添加MariaDB repo</h2><p>现在Fedora 24/25/26 用户都可以直接安装MariaDB 10.1 而不用添加其他的repo来安装~</p>\n<p><a href=\"http://downloads.mariadb.org/mariadb/repositories/\" target=\"_blank\" rel=\"noopener\">MariaDB repository configuration<br>tool</a>,这里面有repo,自己选择repo文件安装,上面也有教程~</p>\n<h2 id=\"更新并安装\"><a href=\"#更新并安装\" class=\"headerlink\" title=\"更新并安装\"></a>更新并安装</h2><pre><code>dnf install mariadb mariadb-server  \n</code></pre><h2 id=\"打开MariaDB并配置自启\"><a href=\"#打开MariaDB并配置自启\" class=\"headerlink\" title=\"打开MariaDB并配置自启\"></a>打开MariaDB并配置自启</h2><pre><code>systemctl start mariadb.service ## use restart after update\n\nsystemctl enable mariadb.service  \n</code></pre><h2 id=\"进行secure-installation\"><a href=\"#进行secure-installation\" class=\"headerlink\" title=\"进行secure installation\"></a>进行secure installation</h2><pre><code>/usr/bin/mysql_secure_installation  \n</code></pre><p>自己看提示来~第一个没设置密码呢,直接回车,下面的大多数都选Y</p>\n<p>如果不想进行secure installation 的话,emmmmm….最好还是做下吧~  </p>\n<p>到这里其实已经结束了…233333</p>\n<h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><pre><code>mysql -u root -p  \n</code></pre><h2 id=\"创建数据库和user\"><a href=\"#创建数据库和user\" class=\"headerlink\" title=\"创建数据库和user\"></a>创建数据库和user</h2><pre><code>## CREATE DATABASE ##\n\nMariaDB [(none)]&gt; CREATE DATABASE webdb;\n\n## CREATE USER ##\n\nMariaDB [(none)]&gt; CREATE USER &#39;webdb_user&#39;@&#39;10.0.15.25&#39; IDENTIFIED BY &#39;password123&#39;;\n\n## GRANT PERMISSIONS ##\n\nMariaDB [(none)]&gt; GRANT ALL ON webdb.* TO &#39;webdb_user&#39;@&#39;10.0.15.25&#39;;\n\n##  FLUSH PRIVILEGES, Tell the server to reload the grant tables  ##\n\nMariaDB [(none)]&gt; FLUSH PRIVILEGES;  \n</code></pre><h2 id=\"确保数据库能远程连接\"><a href=\"#确保数据库能远程连接\" class=\"headerlink\" title=\"确保数据库能远程连接\"></a>确保数据库能远程连接</h2><pre><code>firewall-cmd --get-active-zones\n\n## 应该会输出如下 ##\n\n- public\n\n-    interfaces: wlp1s0\n\nfirewall-cmd --permanent --zone=public --add-service=mysql\n\nsystemctl restart firewalld.service\n\nmysql -h 10.0.15.25 -u myusername -p  \n</code></pre><hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>woc!因为Algolia文章长度限制…不得不把原本的<centos-fedora搭建lnmp环境>改成两篇文章…佛了<br>","more":"</centos-fedora搭建lnmp环境></p>\n<p>原本在服务器上一直用的debian系,后来转到本机Fedora搭建环境就蒙了,之前也因为这个花了不少时间,为了把踩过得坑记下来,还是写篇文章。</p>\n<p>其实所谓LNMP其实就是指Linux+Nginx+Mysql+PHP,因为Nginx发音问题,有时候也说是LEMP。</p>\n<p><strong>下面就是<em>Centos/Fedora</em> 搭建LNMP环境的教程.</strong>  </p>\n<h1 id=\"操作环境\"><a href=\"#操作环境\" class=\"headerlink\" title=\"操作环境\"></a>操作环境</h1><p>OS: Fedora 25<br>Nginx Version: 1.6.2<br>Mysql Version: MariaDB 10.2<br>PHP Version: PHP7.17</p>\n<h1 id=\"安装Nginx-PHP7-1-7和PHP-FPM\"><a href=\"#安装Nginx-PHP7-1-7和PHP-FPM\" class=\"headerlink\" title=\"安装Nginx,PHP7.1.7和PHP-FPM\"></a>安装Nginx,PHP7.1.7和PHP-FPM</h1><h2 id=\"切换到root用户\"><a href=\"#切换到root用户\" class=\"headerlink\" title=\"切换到root用户\"></a>切换到root用户</h2><pre><code>sudo -i \n\n## OR ##\n\nsu -  \n</code></pre><h2 id=\"添加repositories\"><a href=\"#添加repositories\" class=\"headerlink\" title=\"添加repositories\"></a>添加repositories</h2><pre><code>## Remi Dependency on Fedora ##\n\nrpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm \n\nrpm -Uvh http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm\n\n## The version 25 can be replaced by 26/24 ##\n\nrpm -Uvh http://rpms.famillecollet.com/fedora/remi-release-25.rpm  \n</code></pre><h2 id=\"安装Nginx-PHP-7-1-7-and-PHP-FPM\"><a href=\"#安装Nginx-PHP-7-1-7-and-PHP-FPM\" class=\"headerlink\" title=\"安装Nginx,PHP 7.1.7 and PHP-FPM\"></a>安装Nginx,PHP 7.1.7 and PHP-FPM</h2><pre><code>dnf --enablerepo=remi --enablerepo=remi-php71 install nginx php-fpm php-common  \n</code></pre><h2 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h2><pre><code>dnf --enablerepo=remi --enablerepo=remi-php71 install php-opcache php-pecl-apcu php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongodb php-pecl-redis php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml  \n</code></pre><p>关于这些模块的介绍可以自己百度,根据自己需要来安装,嫌麻烦的话～直接copy吧～</p>\n<h2 id=\"关闭httpd-Apache-并打开Nginx-PHP-FPM\"><a href=\"#关闭httpd-Apache-并打开Nginx-PHP-FPM\" class=\"headerlink\" title=\"关闭httpd(Apache)并打开Nginx,PHP-FPM\"></a>关闭httpd(Apache)并打开Nginx,PHP-FPM</h2><p> <strong>关闭Apache</strong>  </p>\n<pre><code>systemctl stop httpd.service  \n</code></pre><p><strong>打开Nginx</strong>  </p>\n<pre><code>systemctl start nginx.service  \n</code></pre><p><strong>打开PHP-FPM</strong>  </p>\n<pre><code>systemctl start php-fpm.service  \n</code></pre><h2 id=\"设置开机自启Nginx-PHP-FPM\"><a href=\"#设置开机自启Nginx-PHP-FPM\" class=\"headerlink\" title=\"设置开机自启Nginx PHP-FPM\"></a>设置开机自启Nginx PHP-FPM</h2><p> <strong>关闭httpd(Apache)的开机自启</strong>  </p>\n<pre><code>systemctl disable httpd.service  \n</code></pre><p><strong>设置Nginx和PHP-FPM开机自启</strong>  </p>\n<pre><code>systemctl enable nginx.service\n\nsystemctl enable php-fpm.service  \n</code></pre><h2 id=\"配置Nginx-和PHP-FPM\"><a href=\"#配置Nginx-和PHP-FPM\" class=\"headerlink\" title=\"配置Nginx 和PHP-FPM\"></a>配置Nginx 和PHP-FPM</h2><p> <strong>先做好默认配置的备份</strong>  </p>\n<pre><code>cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak\n\ncp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf  \n</code></pre><p><strong>修改PHP-FPM配置</strong>  </p>\n<pre><code>vim /etc/php-fpm.d/www.conf\n\n## 注释掉新添加一行 ##\n\n;listen = /run/php-fpm/www.sock\n\nlisten = 127.0.0.1:9000  \n</code></pre><p><strong>为你的站点创建相关文件夹</strong>  </p>\n<pre><code>## 将testsite.local换成你自己的　##\n\nmkdir -p /srv/www/testsite.local/public_html\n\nmkdir /srv/www/testsite.local/logs\n\nchown -R apache:apache /srv/www/testsite.local\n\nmkdir /etc/nginx/sites-available\n\nmkdir /etc/nginx/sites-enabled  \n</code></pre><p>这里使用apache user group是因为PHP-FPM默认运行apache,并且apache能够进入一些类似httpd这样的目录</p>\n<p><strong>在/etc/nginx/nginx.conf文件\\”include /etc/nginx/conf.d/*.conf\\”这行后面添加一行</strong>  </p>\n<pre><code>include /etc/nginx/sites-enabled/*;  \n</code></pre><p><strong>创建testsite.local 文件并配置</strong>  </p>\n<pre><code>## 这是最基本的配置 ##\n\nserver {\n\n    server_name testsite.local;\n\n    access_log /srv/www/testsite.local/logs/access.log;\n\n    error_log /srv/www/testsite.local/logs/error.log;\n\n    root /srv/www/testsite.local/public_html;\n\n    location / {\n\n        index index.html index.htm index.php;\n\n    }\n\n    location ~ \\.php$ {\n\n        include /etc/nginx/fastcgi_params;\n\n        fastcgi_pass  127.0.0.1:9000;\n\n        fastcgi_index index.php;\n\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n\n    }\n\n}  \n</code></pre><p><strong>创建软链接到sites-enabled目录</strong>  </p>\n<pre><code>cd /etc/nginx/sites-enabled/\n\nln -s /etc/nginx/sites-available/testsite.local\n\nsystemctl restart nginx.service  \n</code></pre><p><strong>将testsite.local添加到/etc/hosts中</strong>  </p>\n<pre><code>127.0.0.1               localhost.localdomain localhost testsite.local  \n</code></pre><p><a href=\"http://www.if-not-true-then-false.com/2011/nginx-\nand-php-fpm-configuration-and-optimizing-tips-and-tricks/\" target=\"_blank\" rel=\"noopener\">更多的Nginx 和PHP-FPM配置点这里～</a></p>\n<h2 id=\"测试是否成功\"><a href=\"#测试是否成功\" class=\"headerlink\" title=\"测试是否成功\"></a>测试是否成功</h2><p><strong>创建/srv/www/testsite.local/public_html/index.php并添加以下内容:</strong>  </p>\n<p><strong>然后访问域名或者服务器ip看是否出现phpinfo的页面。</strong></p>\n<h2 id=\"出现403-forbidden\"><a href=\"#出现403-forbidden\" class=\"headerlink\" title=\"出现403 forbidden\"></a>出现403 forbidden</h2><p><strong>可能是SELinux有问题</strong>  </p>\n<pre><code>chcon -R -t httpd_sys_content_t /srv/www/testsite.local/public_html  \n</code></pre><h2 id=\"远程链接到服务器\"><a href=\"#远程链接到服务器\" class=\"headerlink\" title=\"远程链接到服务器\"></a>远程链接到服务器</h2><p><strong>打开防火墙的80端口</strong>  </p>\n<pre><code>firewall-cmd --get-active-zones\n\nfirewall-cmd --permanent --zone=public --add-service=http\n\n## OR ##\n\nfirewall-cmd --permanent --zone=public --add-port=80/tcp\n\nsystemctl restart firewalld.service  \n</code></pre><p><strong>访问域名或者ip试试~</strong></p>\n<h1 id=\"安装MariaDB\"><a href=\"#安装MariaDB\" class=\"headerlink\" title=\"安装MariaDB\"></a>安装MariaDB</h1><p>这里安装的是MariaDB,而不是Mysql,有如下几个原因</p>\n<ul>\n<li>MariaDB本来就是一个Mysql的开源版本</li>\n<li>MariaDB和Mysql类似并兼容Mysql</li>\n<li>Fedora和Centos系列的发行版已经转用MariaDB了</li>\n</ul>\n<p><strong>我这里选择安装MariaDB 10.2.7 [stable],具体安装过程如下~</strong></p>\n<ul>\n<li>如果之前安装了Mysql,记得备份你的数据库和配置文件!</li>\n<li>如果是从低版本升级的,记得执行<code>mysql_upgrade</code>~</li>\n</ul>\n<h2 id=\"切换root用户\"><a href=\"#切换root用户\" class=\"headerlink\" title=\"切换root用户\"></a>切换root用户</h2><pre><code>su -\n\n## OR ##\n\nsudo -i  \n</code></pre><h2 id=\"添加MariaDB-repo\"><a href=\"#添加MariaDB-repo\" class=\"headerlink\" title=\"添加MariaDB repo\"></a>添加MariaDB repo</h2><p>现在Fedora 24/25/26 用户都可以直接安装MariaDB 10.1 而不用添加其他的repo来安装~</p>\n<p><a href=\"http://downloads.mariadb.org/mariadb/repositories/\" target=\"_blank\" rel=\"noopener\">MariaDB repository configuration<br>tool</a>,这里面有repo,自己选择repo文件安装,上面也有教程~</p>\n<h2 id=\"更新并安装\"><a href=\"#更新并安装\" class=\"headerlink\" title=\"更新并安装\"></a>更新并安装</h2><pre><code>dnf install mariadb mariadb-server  \n</code></pre><h2 id=\"打开MariaDB并配置自启\"><a href=\"#打开MariaDB并配置自启\" class=\"headerlink\" title=\"打开MariaDB并配置自启\"></a>打开MariaDB并配置自启</h2><pre><code>systemctl start mariadb.service ## use restart after update\n\nsystemctl enable mariadb.service  \n</code></pre><h2 id=\"进行secure-installation\"><a href=\"#进行secure-installation\" class=\"headerlink\" title=\"进行secure installation\"></a>进行secure installation</h2><pre><code>/usr/bin/mysql_secure_installation  \n</code></pre><p>自己看提示来~第一个没设置密码呢,直接回车,下面的大多数都选Y</p>\n<p>如果不想进行secure installation 的话,emmmmm….最好还是做下吧~  </p>\n<p>到这里其实已经结束了…233333</p>\n<h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><pre><code>mysql -u root -p  \n</code></pre><h2 id=\"创建数据库和user\"><a href=\"#创建数据库和user\" class=\"headerlink\" title=\"创建数据库和user\"></a>创建数据库和user</h2><pre><code>## CREATE DATABASE ##\n\nMariaDB [(none)]&gt; CREATE DATABASE webdb;\n\n## CREATE USER ##\n\nMariaDB [(none)]&gt; CREATE USER &#39;webdb_user&#39;@&#39;10.0.15.25&#39; IDENTIFIED BY &#39;password123&#39;;\n\n## GRANT PERMISSIONS ##\n\nMariaDB [(none)]&gt; GRANT ALL ON webdb.* TO &#39;webdb_user&#39;@&#39;10.0.15.25&#39;;\n\n##  FLUSH PRIVILEGES, Tell the server to reload the grant tables  ##\n\nMariaDB [(none)]&gt; FLUSH PRIVILEGES;  \n</code></pre><h2 id=\"确保数据库能远程连接\"><a href=\"#确保数据库能远程连接\" class=\"headerlink\" title=\"确保数据库能远程连接\"></a>确保数据库能远程连接</h2><pre><code>firewall-cmd --get-active-zones\n\n## 应该会输出如下 ##\n\n- public\n\n-    interfaces: wlp1s0\n\nfirewall-cmd --permanent --zone=public --add-service=mysql\n\nsystemctl restart firewalld.service\n\nmysql -h 10.0.15.25 -u myusername -p  \n</code></pre><hr>"},{"title":"CentOS搭建LNMP环境","comments":1,"mathjax":false,"date":"2017-08-12T08:12:58.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 前言\n\nwoc!因为Algolia文章长度限制...不得不把原本的<CentOS-Fedora搭建LNMP环境>改成两篇文章...佛了\n<!--more-->\n\n原本在服务器上一直用的debian系,后来转到本机Fedora搭建环境就蒙了,之前也因为这个花了不少时间,为了把踩过得坑记下来,还是写篇文章。\n\n其实所谓LNMP其实就是指Linux+Nginx+Mysql+PHP,因为Nginx发音问题,有时候也说是LEMP。\n\n**下面就是*Centos/Fedora* 搭建LNMP环境的教程.**  \n\n# 操作环境\n\nOS: Fedora 25  \nNginx Version: 1.6.2  \nMysql Version: MariaDB 10.2  \nPHP Version: PHP7.17\n\n# 安装Nginx,PHP7.1.7和PHP-FPM\n\n## 切换到root用户\n    \n    sudo -i \n    \n    ## OR ##\n    \n    su -  \n  \n  \n## 添加repositories\n\n    ## Centos 7 Remi repo ##\n    \n    rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n    \n    rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm  \n  \n    ## Centos 7 Nginx repo ##\n    \n    vim /etc/yum.repos.d/nginx.repo\n    \n    ## 添加 ##\n    \n    [nginx]\n    \n    name=nginx repo\n    \n    baseurl=http://nginx.org/packages/centos/$releasever/$basearch/\n    \n    gpgcheck=0\n    \n    enabled=1  \n  \n  \n## 安装Nginx,PHP 7.1.7 and PHP-FPM\n\n     yum --enablerepo=remi,remi-php71 install nginx php-fpm php-common  \n  \n## 安装模块\n    \n    yum --enablerepo=remi,remi-php71 install php-opcache php-pecl-apcu php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongodb php-pecl-redis php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml  \n  \n## 关闭httpd(Apache)并打开Nginx,PHP-FPM\n\n **关闭Apache**  \n\n    /etc/init.d/httpd stop\n    \n    ## OR ## \n    \n    service httpd stop  \n  \n  \n**打开Nginx和PHP-FPM**  \n\n    systemctl start nginx.service\n    \n    systemctl start php-fpm.service  \n  \n  \n## 设置开机自启Nginx PHP-FPM\n\n **关闭httpd(Apache)的开机自启,并设置nginx和php-fpm开机自启**  \n\n    systemctl disable httpd.service\n    \n    systemctl enable nginx.service\n    \n    systemctl enable php-fpm.service  \n  \n  \n## 配置Nginx 和PHP-FPM及其他\n\n这一段的配置和fedora是一样的,可以不看了~\n\n**先做好默认配置的备份**  \n    \n    cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak\n    \n    cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf  \n  \n  \n**修改PHP-FPM配置**  \n    \n    vim /etc/php-fpm.d/www.conf\n    \n    ## 注释掉新添加一行 ##\n    \n    ;listen = /run/php-fpm/www.sock\n    \n    listen = 127.0.0.1:9000  \n  \n**为你的站点创建相关文件夹**  \n    \n    ## 将testsite.local换成你自己的　##\n    \n    mkdir -p /srv/www/testsite.local/public_html\n    \n    mkdir /srv/www/testsite.local/logs\n    \n    chown -R apache:apache /srv/www/testsite.local\n    \n    mkdir /etc/nginx/sites-available\n    \n    mkdir /etc/nginx/sites-enabled  \n  \n  \n**在/etc/nginx/nginx.conf文件”include /etc/nginx/conf.d/*.conf”这行后面添加一行**  \n    \n    include /etc/nginx/sites-enabled/*;  \n  \n  \n**创建testsite.local 文件并配置**  \n\n    ## 这是最基本的配置 ##\n    \n    server {\n    \n        server_name testsite.local;\n    \n        access_log /srv/www/testsite.local/logs/access.log;\n    \n        error_log /srv/www/testsite.local/logs/error.log;\n    \n        root /srv/www/testsite.local/public_html;\n    \n        location / {\n    \n            index index.html index.htm index.php;\n    \n        }\n    \n        location ~ \\.php$ {\n    \n            include /etc/nginx/fastcgi_params;\n    \n            fastcgi_pass  127.0.0.1:9000;\n    \n            fastcgi_index index.php;\n    \n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    \n        }\n    \n    }  \n  \n  \n**创建软链接到sites-enabled目录**  \n\n    cd /etc/nginx/sites-enabled/\n    \n    ln -s /etc/nginx/sites-available/testsite.local\n    \n    systemctl restart nginx.service  \n  \n  \n**将testsite.local添加到/etc/hosts中**  \n    \n    127.0.0.1               localhost.localdomain localhost testsite.local  \n  \n[更多的Nginx 和PHP-FPM配置点这里～](http://www.if-not-true-then-false.com/2011/nginx-\nand-php-fpm-configuration-and-optimizing-tips-and-tricks/)\n\n**测试是否成功**  \n创建/srv/www/testsite.local/public_html/index.php并添加以下内容:  \n\n然后访问域名或者服务器ip看是否出现phpinfo的页面。\n\n**出现403 forbidden**  \n有可能是SELinux有问题  \n    \n    chcon -R -t httpd_sys_content_t /srv/www/testsite.local/public_html  \n  \n  \n**远程链接到服务器**  \n打开防火墙的80端口  \n    \n    firewall-cmd --get-active-zones\n    \n    firewall-cmd --permanent --zone=public --add-service=http\n    \n    ## OR ##\n    \n    firewall-cmd --permanent --zone=public --add-port=80/tcp\n    \n    systemctl restart firewalld.service  \n\n# 安装MariaDB\n\n这里安装的是MariaDB,而不是Mysql,有如下几个原因\n\n  * MariaDB本来就是一个Mysql的开源版本\n  * MariaDB和Mysql类似并兼容Mysql\n  * Fedora和Centos系列的发行版已经转用MariaDB了\n\n**我这里选择安装MariaDB 10.2.7 [stable],具体安装过程如下~**\n\n  * 如果之前安装了Mysql,记得备份你的数据库和配置文件!\n  * 如果是从低版本升级的,记得执行`mysql_upgrade`~\n\n## 切换root用户\n    \n    su -\n    \n    ## OR ##\n    \n    sudo -i  \n  \n  \n## 添加MariaDB repo\n\n现在Fedora 24/25/26 用户都可以直接安装MariaDB 10.1 而不用添加其他的repo来安装~\n\n[MariaDB repository configuration\ntool](http://downloads.mariadb.org/mariadb/repositories/),这里面有repo,自己选择repo文件安装,上面也有教程~\n\n    yum install MariaDB MariaDB-server  \n\n## 打开MariaDB并配置自启\n\n    service mysql start ## use restart after update\n    \n    ## OR ##\n    \n    /etc/init.d/mysql start ## use restart after update\n    \n    chkconfig --levels 235 mysql on  \n  \n## 进行secure installation\n    \n    /usr/bin/mysql_secure_installation  \n  \n自己看提示来~第一个没设置密码呢,直接回车,下面的大多数都选Y\n\n如果不想进行secure installation 的话,emmmmm….最好还是做下吧~  \n  \n到这里其实已经结束了…233333\n\n## 连接数据库\n    \n    mysql -u root -p  \n  \n## 创建数据库和user\n    \n    ## CREATE DATABASE ##\n    \n    MariaDB [(none)]> CREATE DATABASE webdb;\n    \n    ## CREATE USER ##\n    \n    MariaDB [(none)]> CREATE USER 'webdb_user'@'10.0.15.25' IDENTIFIED BY 'password123';\n    \n    ## GRANT PERMISSIONS ##\n    \n    MariaDB [(none)]> GRANT ALL ON webdb.* TO 'webdb_user'@'10.0.15.25';\n    \n    ##  FLUSH PRIVILEGES, Tell the server to reload the grant tables  ##\n    \n    MariaDB [(none)]> FLUSH PRIVILEGES;  \n  \n## 确保数据库能远程连接\n\n    vim /etc/sysconfig/iptables-config\n    \n    ## 添加 ##\n    \n    -A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n    \n    ## 重启 ##\n    \n    service iptables restart\n    \n    ## OR ##\n    \n    /etc/init.d/iptables restart  \n  \n------------------- \n","source":"_posts/CentOS搭建LNMP环境.md","raw":"---\ntitle: CentOS搭建LNMP环境\ncomments: true\nmathjax: false\ndate: 2017-08-12 16:12:58\ntags: [LNMP,Linux]\ncategories: Linux\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 前言\n\nwoc!因为Algolia文章长度限制...不得不把原本的<CentOS-Fedora搭建LNMP环境>改成两篇文章...佛了\n<!--more-->\n\n原本在服务器上一直用的debian系,后来转到本机Fedora搭建环境就蒙了,之前也因为这个花了不少时间,为了把踩过得坑记下来,还是写篇文章。\n\n其实所谓LNMP其实就是指Linux+Nginx+Mysql+PHP,因为Nginx发音问题,有时候也说是LEMP。\n\n**下面就是*Centos/Fedora* 搭建LNMP环境的教程.**  \n\n# 操作环境\n\nOS: Fedora 25  \nNginx Version: 1.6.2  \nMysql Version: MariaDB 10.2  \nPHP Version: PHP7.17\n\n# 安装Nginx,PHP7.1.7和PHP-FPM\n\n## 切换到root用户\n    \n    sudo -i \n    \n    ## OR ##\n    \n    su -  \n  \n  \n## 添加repositories\n\n    ## Centos 7 Remi repo ##\n    \n    rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n    \n    rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm  \n  \n    ## Centos 7 Nginx repo ##\n    \n    vim /etc/yum.repos.d/nginx.repo\n    \n    ## 添加 ##\n    \n    [nginx]\n    \n    name=nginx repo\n    \n    baseurl=http://nginx.org/packages/centos/$releasever/$basearch/\n    \n    gpgcheck=0\n    \n    enabled=1  \n  \n  \n## 安装Nginx,PHP 7.1.7 and PHP-FPM\n\n     yum --enablerepo=remi,remi-php71 install nginx php-fpm php-common  \n  \n## 安装模块\n    \n    yum --enablerepo=remi,remi-php71 install php-opcache php-pecl-apcu php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongodb php-pecl-redis php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml  \n  \n## 关闭httpd(Apache)并打开Nginx,PHP-FPM\n\n **关闭Apache**  \n\n    /etc/init.d/httpd stop\n    \n    ## OR ## \n    \n    service httpd stop  \n  \n  \n**打开Nginx和PHP-FPM**  \n\n    systemctl start nginx.service\n    \n    systemctl start php-fpm.service  \n  \n  \n## 设置开机自启Nginx PHP-FPM\n\n **关闭httpd(Apache)的开机自启,并设置nginx和php-fpm开机自启**  \n\n    systemctl disable httpd.service\n    \n    systemctl enable nginx.service\n    \n    systemctl enable php-fpm.service  \n  \n  \n## 配置Nginx 和PHP-FPM及其他\n\n这一段的配置和fedora是一样的,可以不看了~\n\n**先做好默认配置的备份**  \n    \n    cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak\n    \n    cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf  \n  \n  \n**修改PHP-FPM配置**  \n    \n    vim /etc/php-fpm.d/www.conf\n    \n    ## 注释掉新添加一行 ##\n    \n    ;listen = /run/php-fpm/www.sock\n    \n    listen = 127.0.0.1:9000  \n  \n**为你的站点创建相关文件夹**  \n    \n    ## 将testsite.local换成你自己的　##\n    \n    mkdir -p /srv/www/testsite.local/public_html\n    \n    mkdir /srv/www/testsite.local/logs\n    \n    chown -R apache:apache /srv/www/testsite.local\n    \n    mkdir /etc/nginx/sites-available\n    \n    mkdir /etc/nginx/sites-enabled  \n  \n  \n**在/etc/nginx/nginx.conf文件”include /etc/nginx/conf.d/*.conf”这行后面添加一行**  \n    \n    include /etc/nginx/sites-enabled/*;  \n  \n  \n**创建testsite.local 文件并配置**  \n\n    ## 这是最基本的配置 ##\n    \n    server {\n    \n        server_name testsite.local;\n    \n        access_log /srv/www/testsite.local/logs/access.log;\n    \n        error_log /srv/www/testsite.local/logs/error.log;\n    \n        root /srv/www/testsite.local/public_html;\n    \n        location / {\n    \n            index index.html index.htm index.php;\n    \n        }\n    \n        location ~ \\.php$ {\n    \n            include /etc/nginx/fastcgi_params;\n    \n            fastcgi_pass  127.0.0.1:9000;\n    \n            fastcgi_index index.php;\n    \n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    \n        }\n    \n    }  \n  \n  \n**创建软链接到sites-enabled目录**  \n\n    cd /etc/nginx/sites-enabled/\n    \n    ln -s /etc/nginx/sites-available/testsite.local\n    \n    systemctl restart nginx.service  \n  \n  \n**将testsite.local添加到/etc/hosts中**  \n    \n    127.0.0.1               localhost.localdomain localhost testsite.local  \n  \n[更多的Nginx 和PHP-FPM配置点这里～](http://www.if-not-true-then-false.com/2011/nginx-\nand-php-fpm-configuration-and-optimizing-tips-and-tricks/)\n\n**测试是否成功**  \n创建/srv/www/testsite.local/public_html/index.php并添加以下内容:  \n\n然后访问域名或者服务器ip看是否出现phpinfo的页面。\n\n**出现403 forbidden**  \n有可能是SELinux有问题  \n    \n    chcon -R -t httpd_sys_content_t /srv/www/testsite.local/public_html  \n  \n  \n**远程链接到服务器**  \n打开防火墙的80端口  \n    \n    firewall-cmd --get-active-zones\n    \n    firewall-cmd --permanent --zone=public --add-service=http\n    \n    ## OR ##\n    \n    firewall-cmd --permanent --zone=public --add-port=80/tcp\n    \n    systemctl restart firewalld.service  \n\n# 安装MariaDB\n\n这里安装的是MariaDB,而不是Mysql,有如下几个原因\n\n  * MariaDB本来就是一个Mysql的开源版本\n  * MariaDB和Mysql类似并兼容Mysql\n  * Fedora和Centos系列的发行版已经转用MariaDB了\n\n**我这里选择安装MariaDB 10.2.7 [stable],具体安装过程如下~**\n\n  * 如果之前安装了Mysql,记得备份你的数据库和配置文件!\n  * 如果是从低版本升级的,记得执行`mysql_upgrade`~\n\n## 切换root用户\n    \n    su -\n    \n    ## OR ##\n    \n    sudo -i  \n  \n  \n## 添加MariaDB repo\n\n现在Fedora 24/25/26 用户都可以直接安装MariaDB 10.1 而不用添加其他的repo来安装~\n\n[MariaDB repository configuration\ntool](http://downloads.mariadb.org/mariadb/repositories/),这里面有repo,自己选择repo文件安装,上面也有教程~\n\n    yum install MariaDB MariaDB-server  \n\n## 打开MariaDB并配置自启\n\n    service mysql start ## use restart after update\n    \n    ## OR ##\n    \n    /etc/init.d/mysql start ## use restart after update\n    \n    chkconfig --levels 235 mysql on  \n  \n## 进行secure installation\n    \n    /usr/bin/mysql_secure_installation  \n  \n自己看提示来~第一个没设置密码呢,直接回车,下面的大多数都选Y\n\n如果不想进行secure installation 的话,emmmmm….最好还是做下吧~  \n  \n到这里其实已经结束了…233333\n\n## 连接数据库\n    \n    mysql -u root -p  \n  \n## 创建数据库和user\n    \n    ## CREATE DATABASE ##\n    \n    MariaDB [(none)]> CREATE DATABASE webdb;\n    \n    ## CREATE USER ##\n    \n    MariaDB [(none)]> CREATE USER 'webdb_user'@'10.0.15.25' IDENTIFIED BY 'password123';\n    \n    ## GRANT PERMISSIONS ##\n    \n    MariaDB [(none)]> GRANT ALL ON webdb.* TO 'webdb_user'@'10.0.15.25';\n    \n    ##  FLUSH PRIVILEGES, Tell the server to reload the grant tables  ##\n    \n    MariaDB [(none)]> FLUSH PRIVILEGES;  \n  \n## 确保数据库能远程连接\n\n    vim /etc/sysconfig/iptables-config\n    \n    ## 添加 ##\n    \n    -A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n    \n    ## 重启 ##\n    \n    service iptables restart\n    \n    ## OR ##\n    \n    /etc/init.d/iptables restart  \n  \n------------------- \n","slug":"CentOS搭建LNMP环境","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjoj000russbcakf6z5f","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>woc!因为Algolia文章长度限制…不得不把原本的<centos-fedora搭建lnmp环境>改成两篇文章…佛了<br><a id=\"more\"></a></centos-fedora搭建lnmp环境></p>\n<p>原本在服务器上一直用的debian系,后来转到本机Fedora搭建环境就蒙了,之前也因为这个花了不少时间,为了把踩过得坑记下来,还是写篇文章。</p>\n<p>其实所谓LNMP其实就是指Linux+Nginx+Mysql+PHP,因为Nginx发音问题,有时候也说是LEMP。</p>\n<p><strong>下面就是<em>Centos/Fedora</em> 搭建LNMP环境的教程.</strong>  </p>\n<h1 id=\"操作环境\"><a href=\"#操作环境\" class=\"headerlink\" title=\"操作环境\"></a>操作环境</h1><p>OS: Fedora 25<br>Nginx Version: 1.6.2<br>Mysql Version: MariaDB 10.2<br>PHP Version: PHP7.17</p>\n<h1 id=\"安装Nginx-PHP7-1-7和PHP-FPM\"><a href=\"#安装Nginx-PHP7-1-7和PHP-FPM\" class=\"headerlink\" title=\"安装Nginx,PHP7.1.7和PHP-FPM\"></a>安装Nginx,PHP7.1.7和PHP-FPM</h1><h2 id=\"切换到root用户\"><a href=\"#切换到root用户\" class=\"headerlink\" title=\"切换到root用户\"></a>切换到root用户</h2><pre><code>sudo -i \n\n## OR ##\n\nsu -  \n</code></pre><h2 id=\"添加repositories\"><a href=\"#添加repositories\" class=\"headerlink\" title=\"添加repositories\"></a>添加repositories</h2><pre><code>## Centos 7 Remi repo ##\n\nrpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n\nrpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm  \n\n## Centos 7 Nginx repo ##\n\nvim /etc/yum.repos.d/nginx.repo\n\n## 添加 ##\n\n[nginx]\n\nname=nginx repo\n\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\n\ngpgcheck=0\n\nenabled=1  \n</code></pre><h2 id=\"安装Nginx-PHP-7-1-7-and-PHP-FPM\"><a href=\"#安装Nginx-PHP-7-1-7-and-PHP-FPM\" class=\"headerlink\" title=\"安装Nginx,PHP 7.1.7 and PHP-FPM\"></a>安装Nginx,PHP 7.1.7 and PHP-FPM</h2><pre><code> yum --enablerepo=remi,remi-php71 install nginx php-fpm php-common  \n</code></pre><h2 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h2><pre><code>yum --enablerepo=remi,remi-php71 install php-opcache php-pecl-apcu php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongodb php-pecl-redis php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml  \n</code></pre><h2 id=\"关闭httpd-Apache-并打开Nginx-PHP-FPM\"><a href=\"#关闭httpd-Apache-并打开Nginx-PHP-FPM\" class=\"headerlink\" title=\"关闭httpd(Apache)并打开Nginx,PHP-FPM\"></a>关闭httpd(Apache)并打开Nginx,PHP-FPM</h2><p> <strong>关闭Apache</strong>  </p>\n<pre><code>/etc/init.d/httpd stop\n\n## OR ## \n\nservice httpd stop  \n</code></pre><p><strong>打开Nginx和PHP-FPM</strong>  </p>\n<pre><code>systemctl start nginx.service\n\nsystemctl start php-fpm.service  \n</code></pre><h2 id=\"设置开机自启Nginx-PHP-FPM\"><a href=\"#设置开机自启Nginx-PHP-FPM\" class=\"headerlink\" title=\"设置开机自启Nginx PHP-FPM\"></a>设置开机自启Nginx PHP-FPM</h2><p> <strong>关闭httpd(Apache)的开机自启,并设置nginx和php-fpm开机自启</strong>  </p>\n<pre><code>systemctl disable httpd.service\n\nsystemctl enable nginx.service\n\nsystemctl enable php-fpm.service  \n</code></pre><h2 id=\"配置Nginx-和PHP-FPM及其他\"><a href=\"#配置Nginx-和PHP-FPM及其他\" class=\"headerlink\" title=\"配置Nginx 和PHP-FPM及其他\"></a>配置Nginx 和PHP-FPM及其他</h2><p>这一段的配置和fedora是一样的,可以不看了~</p>\n<p><strong>先做好默认配置的备份</strong>  </p>\n<pre><code>cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak\n\ncp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf  \n</code></pre><p><strong>修改PHP-FPM配置</strong>  </p>\n<pre><code>vim /etc/php-fpm.d/www.conf\n\n## 注释掉新添加一行 ##\n\n;listen = /run/php-fpm/www.sock\n\nlisten = 127.0.0.1:9000  \n</code></pre><p><strong>为你的站点创建相关文件夹</strong>  </p>\n<pre><code>## 将testsite.local换成你自己的　##\n\nmkdir -p /srv/www/testsite.local/public_html\n\nmkdir /srv/www/testsite.local/logs\n\nchown -R apache:apache /srv/www/testsite.local\n\nmkdir /etc/nginx/sites-available\n\nmkdir /etc/nginx/sites-enabled  \n</code></pre><p><strong>在/etc/nginx/nginx.conf文件”include /etc/nginx/conf.d/*.conf”这行后面添加一行</strong>  </p>\n<pre><code>include /etc/nginx/sites-enabled/*;  \n</code></pre><p><strong>创建testsite.local 文件并配置</strong>  </p>\n<pre><code>## 这是最基本的配置 ##\n\nserver {\n\n    server_name testsite.local;\n\n    access_log /srv/www/testsite.local/logs/access.log;\n\n    error_log /srv/www/testsite.local/logs/error.log;\n\n    root /srv/www/testsite.local/public_html;\n\n    location / {\n\n        index index.html index.htm index.php;\n\n    }\n\n    location ~ \\.php$ {\n\n        include /etc/nginx/fastcgi_params;\n\n        fastcgi_pass  127.0.0.1:9000;\n\n        fastcgi_index index.php;\n\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n\n    }\n\n}  \n</code></pre><p><strong>创建软链接到sites-enabled目录</strong>  </p>\n<pre><code>cd /etc/nginx/sites-enabled/\n\nln -s /etc/nginx/sites-available/testsite.local\n\nsystemctl restart nginx.service  \n</code></pre><p><strong>将testsite.local添加到/etc/hosts中</strong>  </p>\n<pre><code>127.0.0.1               localhost.localdomain localhost testsite.local  \n</code></pre><p><a href=\"http://www.if-not-true-then-false.com/2011/nginx-\nand-php-fpm-configuration-and-optimizing-tips-and-tricks/\" target=\"_blank\" rel=\"noopener\">更多的Nginx 和PHP-FPM配置点这里～</a></p>\n<p><strong>测试是否成功</strong><br>创建/srv/www/testsite.local/public_html/index.php并添加以下内容:  </p>\n<p>然后访问域名或者服务器ip看是否出现phpinfo的页面。</p>\n<p><strong>出现403 forbidden</strong><br>有可能是SELinux有问题  </p>\n<pre><code>chcon -R -t httpd_sys_content_t /srv/www/testsite.local/public_html  \n</code></pre><p><strong>远程链接到服务器</strong><br>打开防火墙的80端口  </p>\n<pre><code>firewall-cmd --get-active-zones\n\nfirewall-cmd --permanent --zone=public --add-service=http\n\n## OR ##\n\nfirewall-cmd --permanent --zone=public --add-port=80/tcp\n\nsystemctl restart firewalld.service  \n</code></pre><h1 id=\"安装MariaDB\"><a href=\"#安装MariaDB\" class=\"headerlink\" title=\"安装MariaDB\"></a>安装MariaDB</h1><p>这里安装的是MariaDB,而不是Mysql,有如下几个原因</p>\n<ul>\n<li>MariaDB本来就是一个Mysql的开源版本</li>\n<li>MariaDB和Mysql类似并兼容Mysql</li>\n<li>Fedora和Centos系列的发行版已经转用MariaDB了</li>\n</ul>\n<p><strong>我这里选择安装MariaDB 10.2.7 [stable],具体安装过程如下~</strong></p>\n<ul>\n<li>如果之前安装了Mysql,记得备份你的数据库和配置文件!</li>\n<li>如果是从低版本升级的,记得执行<code>mysql_upgrade</code>~</li>\n</ul>\n<h2 id=\"切换root用户\"><a href=\"#切换root用户\" class=\"headerlink\" title=\"切换root用户\"></a>切换root用户</h2><pre><code>su -\n\n## OR ##\n\nsudo -i  \n</code></pre><h2 id=\"添加MariaDB-repo\"><a href=\"#添加MariaDB-repo\" class=\"headerlink\" title=\"添加MariaDB repo\"></a>添加MariaDB repo</h2><p>现在Fedora 24/25/26 用户都可以直接安装MariaDB 10.1 而不用添加其他的repo来安装~</p>\n<p><a href=\"http://downloads.mariadb.org/mariadb/repositories/\" target=\"_blank\" rel=\"noopener\">MariaDB repository configuration<br>tool</a>,这里面有repo,自己选择repo文件安装,上面也有教程~</p>\n<pre><code>yum install MariaDB MariaDB-server  \n</code></pre><h2 id=\"打开MariaDB并配置自启\"><a href=\"#打开MariaDB并配置自启\" class=\"headerlink\" title=\"打开MariaDB并配置自启\"></a>打开MariaDB并配置自启</h2><pre><code>service mysql start ## use restart after update\n\n## OR ##\n\n/etc/init.d/mysql start ## use restart after update\n\nchkconfig --levels 235 mysql on  \n</code></pre><h2 id=\"进行secure-installation\"><a href=\"#进行secure-installation\" class=\"headerlink\" title=\"进行secure installation\"></a>进行secure installation</h2><pre><code>/usr/bin/mysql_secure_installation  \n</code></pre><p>自己看提示来~第一个没设置密码呢,直接回车,下面的大多数都选Y</p>\n<p>如果不想进行secure installation 的话,emmmmm….最好还是做下吧~  </p>\n<p>到这里其实已经结束了…233333</p>\n<h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><pre><code>mysql -u root -p  \n</code></pre><h2 id=\"创建数据库和user\"><a href=\"#创建数据库和user\" class=\"headerlink\" title=\"创建数据库和user\"></a>创建数据库和user</h2><pre><code>## CREATE DATABASE ##\n\nMariaDB [(none)]&gt; CREATE DATABASE webdb;\n\n## CREATE USER ##\n\nMariaDB [(none)]&gt; CREATE USER &#39;webdb_user&#39;@&#39;10.0.15.25&#39; IDENTIFIED BY &#39;password123&#39;;\n\n## GRANT PERMISSIONS ##\n\nMariaDB [(none)]&gt; GRANT ALL ON webdb.* TO &#39;webdb_user&#39;@&#39;10.0.15.25&#39;;\n\n##  FLUSH PRIVILEGES, Tell the server to reload the grant tables  ##\n\nMariaDB [(none)]&gt; FLUSH PRIVILEGES;  \n</code></pre><h2 id=\"确保数据库能远程连接\"><a href=\"#确保数据库能远程连接\" class=\"headerlink\" title=\"确保数据库能远程连接\"></a>确保数据库能远程连接</h2><pre><code>vim /etc/sysconfig/iptables-config\n\n## 添加 ##\n\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n\n## 重启 ##\n\nservice iptables restart\n\n## OR ##\n\n/etc/init.d/iptables restart  \n</code></pre><hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>woc!因为Algolia文章长度限制…不得不把原本的<centos-fedora搭建lnmp环境>改成两篇文章…佛了<br>","more":"</centos-fedora搭建lnmp环境></p>\n<p>原本在服务器上一直用的debian系,后来转到本机Fedora搭建环境就蒙了,之前也因为这个花了不少时间,为了把踩过得坑记下来,还是写篇文章。</p>\n<p>其实所谓LNMP其实就是指Linux+Nginx+Mysql+PHP,因为Nginx发音问题,有时候也说是LEMP。</p>\n<p><strong>下面就是<em>Centos/Fedora</em> 搭建LNMP环境的教程.</strong>  </p>\n<h1 id=\"操作环境\"><a href=\"#操作环境\" class=\"headerlink\" title=\"操作环境\"></a>操作环境</h1><p>OS: Fedora 25<br>Nginx Version: 1.6.2<br>Mysql Version: MariaDB 10.2<br>PHP Version: PHP7.17</p>\n<h1 id=\"安装Nginx-PHP7-1-7和PHP-FPM\"><a href=\"#安装Nginx-PHP7-1-7和PHP-FPM\" class=\"headerlink\" title=\"安装Nginx,PHP7.1.7和PHP-FPM\"></a>安装Nginx,PHP7.1.7和PHP-FPM</h1><h2 id=\"切换到root用户\"><a href=\"#切换到root用户\" class=\"headerlink\" title=\"切换到root用户\"></a>切换到root用户</h2><pre><code>sudo -i \n\n## OR ##\n\nsu -  \n</code></pre><h2 id=\"添加repositories\"><a href=\"#添加repositories\" class=\"headerlink\" title=\"添加repositories\"></a>添加repositories</h2><pre><code>## Centos 7 Remi repo ##\n\nrpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n\nrpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm  \n\n## Centos 7 Nginx repo ##\n\nvim /etc/yum.repos.d/nginx.repo\n\n## 添加 ##\n\n[nginx]\n\nname=nginx repo\n\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\n\ngpgcheck=0\n\nenabled=1  \n</code></pre><h2 id=\"安装Nginx-PHP-7-1-7-and-PHP-FPM\"><a href=\"#安装Nginx-PHP-7-1-7-and-PHP-FPM\" class=\"headerlink\" title=\"安装Nginx,PHP 7.1.7 and PHP-FPM\"></a>安装Nginx,PHP 7.1.7 and PHP-FPM</h2><pre><code> yum --enablerepo=remi,remi-php71 install nginx php-fpm php-common  \n</code></pre><h2 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h2><pre><code>yum --enablerepo=remi,remi-php71 install php-opcache php-pecl-apcu php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongodb php-pecl-redis php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml  \n</code></pre><h2 id=\"关闭httpd-Apache-并打开Nginx-PHP-FPM\"><a href=\"#关闭httpd-Apache-并打开Nginx-PHP-FPM\" class=\"headerlink\" title=\"关闭httpd(Apache)并打开Nginx,PHP-FPM\"></a>关闭httpd(Apache)并打开Nginx,PHP-FPM</h2><p> <strong>关闭Apache</strong>  </p>\n<pre><code>/etc/init.d/httpd stop\n\n## OR ## \n\nservice httpd stop  \n</code></pre><p><strong>打开Nginx和PHP-FPM</strong>  </p>\n<pre><code>systemctl start nginx.service\n\nsystemctl start php-fpm.service  \n</code></pre><h2 id=\"设置开机自启Nginx-PHP-FPM\"><a href=\"#设置开机自启Nginx-PHP-FPM\" class=\"headerlink\" title=\"设置开机自启Nginx PHP-FPM\"></a>设置开机自启Nginx PHP-FPM</h2><p> <strong>关闭httpd(Apache)的开机自启,并设置nginx和php-fpm开机自启</strong>  </p>\n<pre><code>systemctl disable httpd.service\n\nsystemctl enable nginx.service\n\nsystemctl enable php-fpm.service  \n</code></pre><h2 id=\"配置Nginx-和PHP-FPM及其他\"><a href=\"#配置Nginx-和PHP-FPM及其他\" class=\"headerlink\" title=\"配置Nginx 和PHP-FPM及其他\"></a>配置Nginx 和PHP-FPM及其他</h2><p>这一段的配置和fedora是一样的,可以不看了~</p>\n<p><strong>先做好默认配置的备份</strong>  </p>\n<pre><code>cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak\n\ncp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf  \n</code></pre><p><strong>修改PHP-FPM配置</strong>  </p>\n<pre><code>vim /etc/php-fpm.d/www.conf\n\n## 注释掉新添加一行 ##\n\n;listen = /run/php-fpm/www.sock\n\nlisten = 127.0.0.1:9000  \n</code></pre><p><strong>为你的站点创建相关文件夹</strong>  </p>\n<pre><code>## 将testsite.local换成你自己的　##\n\nmkdir -p /srv/www/testsite.local/public_html\n\nmkdir /srv/www/testsite.local/logs\n\nchown -R apache:apache /srv/www/testsite.local\n\nmkdir /etc/nginx/sites-available\n\nmkdir /etc/nginx/sites-enabled  \n</code></pre><p><strong>在/etc/nginx/nginx.conf文件”include /etc/nginx/conf.d/*.conf”这行后面添加一行</strong>  </p>\n<pre><code>include /etc/nginx/sites-enabled/*;  \n</code></pre><p><strong>创建testsite.local 文件并配置</strong>  </p>\n<pre><code>## 这是最基本的配置 ##\n\nserver {\n\n    server_name testsite.local;\n\n    access_log /srv/www/testsite.local/logs/access.log;\n\n    error_log /srv/www/testsite.local/logs/error.log;\n\n    root /srv/www/testsite.local/public_html;\n\n    location / {\n\n        index index.html index.htm index.php;\n\n    }\n\n    location ~ \\.php$ {\n\n        include /etc/nginx/fastcgi_params;\n\n        fastcgi_pass  127.0.0.1:9000;\n\n        fastcgi_index index.php;\n\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n\n    }\n\n}  \n</code></pre><p><strong>创建软链接到sites-enabled目录</strong>  </p>\n<pre><code>cd /etc/nginx/sites-enabled/\n\nln -s /etc/nginx/sites-available/testsite.local\n\nsystemctl restart nginx.service  \n</code></pre><p><strong>将testsite.local添加到/etc/hosts中</strong>  </p>\n<pre><code>127.0.0.1               localhost.localdomain localhost testsite.local  \n</code></pre><p><a href=\"http://www.if-not-true-then-false.com/2011/nginx-\nand-php-fpm-configuration-and-optimizing-tips-and-tricks/\" target=\"_blank\" rel=\"noopener\">更多的Nginx 和PHP-FPM配置点这里～</a></p>\n<p><strong>测试是否成功</strong><br>创建/srv/www/testsite.local/public_html/index.php并添加以下内容:  </p>\n<p>然后访问域名或者服务器ip看是否出现phpinfo的页面。</p>\n<p><strong>出现403 forbidden</strong><br>有可能是SELinux有问题  </p>\n<pre><code>chcon -R -t httpd_sys_content_t /srv/www/testsite.local/public_html  \n</code></pre><p><strong>远程链接到服务器</strong><br>打开防火墙的80端口  </p>\n<pre><code>firewall-cmd --get-active-zones\n\nfirewall-cmd --permanent --zone=public --add-service=http\n\n## OR ##\n\nfirewall-cmd --permanent --zone=public --add-port=80/tcp\n\nsystemctl restart firewalld.service  \n</code></pre><h1 id=\"安装MariaDB\"><a href=\"#安装MariaDB\" class=\"headerlink\" title=\"安装MariaDB\"></a>安装MariaDB</h1><p>这里安装的是MariaDB,而不是Mysql,有如下几个原因</p>\n<ul>\n<li>MariaDB本来就是一个Mysql的开源版本</li>\n<li>MariaDB和Mysql类似并兼容Mysql</li>\n<li>Fedora和Centos系列的发行版已经转用MariaDB了</li>\n</ul>\n<p><strong>我这里选择安装MariaDB 10.2.7 [stable],具体安装过程如下~</strong></p>\n<ul>\n<li>如果之前安装了Mysql,记得备份你的数据库和配置文件!</li>\n<li>如果是从低版本升级的,记得执行<code>mysql_upgrade</code>~</li>\n</ul>\n<h2 id=\"切换root用户\"><a href=\"#切换root用户\" class=\"headerlink\" title=\"切换root用户\"></a>切换root用户</h2><pre><code>su -\n\n## OR ##\n\nsudo -i  \n</code></pre><h2 id=\"添加MariaDB-repo\"><a href=\"#添加MariaDB-repo\" class=\"headerlink\" title=\"添加MariaDB repo\"></a>添加MariaDB repo</h2><p>现在Fedora 24/25/26 用户都可以直接安装MariaDB 10.1 而不用添加其他的repo来安装~</p>\n<p><a href=\"http://downloads.mariadb.org/mariadb/repositories/\" target=\"_blank\" rel=\"noopener\">MariaDB repository configuration<br>tool</a>,这里面有repo,自己选择repo文件安装,上面也有教程~</p>\n<pre><code>yum install MariaDB MariaDB-server  \n</code></pre><h2 id=\"打开MariaDB并配置自启\"><a href=\"#打开MariaDB并配置自启\" class=\"headerlink\" title=\"打开MariaDB并配置自启\"></a>打开MariaDB并配置自启</h2><pre><code>service mysql start ## use restart after update\n\n## OR ##\n\n/etc/init.d/mysql start ## use restart after update\n\nchkconfig --levels 235 mysql on  \n</code></pre><h2 id=\"进行secure-installation\"><a href=\"#进行secure-installation\" class=\"headerlink\" title=\"进行secure installation\"></a>进行secure installation</h2><pre><code>/usr/bin/mysql_secure_installation  \n</code></pre><p>自己看提示来~第一个没设置密码呢,直接回车,下面的大多数都选Y</p>\n<p>如果不想进行secure installation 的话,emmmmm….最好还是做下吧~  </p>\n<p>到这里其实已经结束了…233333</p>\n<h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><pre><code>mysql -u root -p  \n</code></pre><h2 id=\"创建数据库和user\"><a href=\"#创建数据库和user\" class=\"headerlink\" title=\"创建数据库和user\"></a>创建数据库和user</h2><pre><code>## CREATE DATABASE ##\n\nMariaDB [(none)]&gt; CREATE DATABASE webdb;\n\n## CREATE USER ##\n\nMariaDB [(none)]&gt; CREATE USER &#39;webdb_user&#39;@&#39;10.0.15.25&#39; IDENTIFIED BY &#39;password123&#39;;\n\n## GRANT PERMISSIONS ##\n\nMariaDB [(none)]&gt; GRANT ALL ON webdb.* TO &#39;webdb_user&#39;@&#39;10.0.15.25&#39;;\n\n##  FLUSH PRIVILEGES, Tell the server to reload the grant tables  ##\n\nMariaDB [(none)]&gt; FLUSH PRIVILEGES;  \n</code></pre><h2 id=\"确保数据库能远程连接\"><a href=\"#确保数据库能远程连接\" class=\"headerlink\" title=\"确保数据库能远程连接\"></a>确保数据库能远程连接</h2><pre><code>vim /etc/sysconfig/iptables-config\n\n## 添加 ##\n\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n\n## 重启 ##\n\nservice iptables restart\n\n## OR ##\n\n/etc/init.d/iptables restart  \n</code></pre><hr>"},{"title":"LeetCode-001-Two Sum","comments":1,"mathjax":false,"date":"2019-04-07T15:31:44.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/two-sum/)   \nGiven an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution. Example: Given nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9, return [0, 1]. UPDATE (2016/2/13): The return format had been changed to zero-based indices. Please read the above updated description carefully.\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 刚开始第一反应就是暴力遍历，但是时间复杂度是$$ O(n^2) $$\n- 题解用了hash map，时间复杂度为$$ O(n) $$\n  - 第一种方式是两遍hash，第一遍将元素添加进去，第二遍遍历元素\n  - 第二种方式一遍hash，一边添加元素一边判断结果是否在已添加的元素中\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        vector<int> res;\n        map<int,int> numMap;          //创建map\n        map<int ,int>::iterator it;   //创建迭代器\n\n        for(int i=0;i<nums.size();i++){\n            it=numMap.find(target-nums[i]);       //find函数查找key\n            if(it!=numMap.end()){                 //如果到了end就说明没找到\n                res.push_back(i);\n                res.push_back(numMap[target-nums[i]]);\n                return res;\n            }\n            numMap.insert(make_pair(nums[i],i));  //插入pair\n        }\n        return res;\n    }\n};\n```\n\n{% note info %}\n## C++中vector用法回忆：\n- 创建：$$ vector<int> vec; $$\n- 访问：int i=vec[0];\n- 插入：vec.push_back(1); vec.insert(index,val)，在第i个元素后面插入\n- 删除：\n  - vec.pop_back(),删除最后一个\n  - vec.erase(index)，删除index位置处元素\n  - vec.erase(1,3)，删除[1,3)区间的元素\n- 大小：vec.size();\n- 清空：vec.clear();\n- 翻转：reverse(vec.begin(),vec.end());将元素翻转在vecotr，要#include<algorithm>\n- 排序：\n  - sort(vec.begin(),vec.end());默认按照升序排列\n  - sort(vec.begin(),vec.end(),cmp);定义排序比较函数将序排列\n> bool cmp(const int&a,const int&b){\n>   return a>b;\n> }\n- 迭代器访问\n> vector<int>::iterator it;\n> for(it=vec.begin();it!=vec.end();it++)\n>   cout<<\\*it<<endl;\n{% endnote %}\n\n\n{% note info %}\n## C++中map的用法\n- 创建：$$ map<string, int>mapString; $$ key类型为string，val类型为int\n- 添加：\n  - mapString[\"hello\"]=1; 最常用的最简单的插入方式,**会覆盖之前的数据**\n  - mapString.insert(make_pair(\"hello\",1));  次常用,** insert()不会覆盖之前的数据**\n  - mapString.insert(pair<string,int>(\"hello\",1));\n  - mapString.insert(map<string,int>::value_type(\"hello\",1));\n- 迭代：\n> map<string,int>::iterator it;\n> for ( it = mapString.begin( ); it != mapString.end( ); it++ )\n>   cout << \" \" << it -> second;\n\n- 查找：\n  - **不建议!** mapString[\"hello\"];返回\"hello\"对应的值，如果不存在，则添加一个元素，key为\"hello\",val为类型默认值,并返回这个默认值\n  - mapString.count(\"hello\"); map::count()方法返回被查找元素的个数,只有0或1\n  - map::find()方法,返回的是被查找元素的位置，没有则返回map.end()\n> map<string,int>::iterator it;\n> it = mapString.find(\"hello\");\n> if(it==test.end()){\n>   cout<<\"hello not found\"<<endl;\n> }\n\n- 删除:\n  - mapString.erase(\"hello\");\n  - 用迭代器删除,注意在迭代期间是不能被删除的\n> map<string,int>::iterator it;\n> it = mapString.find(\"hello\");\n> \n> if(it==mapString.end())  cout<<\"hello not found\"<<endl;\n> else  mapString.erase(it);\n\n- 排序：map中元素自动按照key升序排序，不可以用sort函数\n- 大小：mapString.size();\n- 清除：mapString.clear();\n\n{% endnote %}\n\n## Python Codes\n\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        map = {}\n        for i, num in enumerate(nums):\n            if target - num in map:\n                return [map[target - num], i]\n            map[num] = i\n\n        return []\n```\n\n{% note info %}\nlist中遍历的三种方式：\n1. for items in list:  根据元素遍历\n2. for index in range(len(list)):  根据索引遍历\n3. enumerate(seq, [start=0])  创建枚举对象，同时列出数据下标和数据\n  - seq: 一个序列、迭代器或其他支持迭代对象, 如列表、元组或字符串\n  - start: 下标起始位置\n  - 返回：一个列表 [(下标，数据)...], 例如[(1, 'a'), (2, 'b'), (3, 'c')]\n4. iterList = iter(list)  创建迭代器遍历\n  - 用法：for item in iterList: print(item)\n{% endnote %}\n\n## 总结\n虽然第一题很简单，但是深入了看还是能学了不少东西的，在遍历这方面，时间复杂度优化可以用map，C++时间复杂度可以从$$ O(n) $$降到$$ O(logn) $$，python和java可以直接降到$$ O(1) $$.\n\n而且打完代码复习了C++中vector的用法，还有pythonlist的enumerate遍历。C++ STL中的map是现学现卖了.\n\n打算每天一题，感觉有点晚了，亡羊补牢把。\n\n--------\n\n\n\n\n","source":"_posts/LeetCode-001-Two-Sum.md","raw":"---\ntitle: LeetCode-001-Two Sum\ncomments: true\nmathjax: false\ndate: 2019-04-07 23:31:44\ntags: [LeetCode, Hash Map, Math, Easy]\ncategories: [LeetCode]\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/two-sum/)   \nGiven an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution. Example: Given nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9, return [0, 1]. UPDATE (2016/2/13): The return format had been changed to zero-based indices. Please read the above updated description carefully.\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 刚开始第一反应就是暴力遍历，但是时间复杂度是$$ O(n^2) $$\n- 题解用了hash map，时间复杂度为$$ O(n) $$\n  - 第一种方式是两遍hash，第一遍将元素添加进去，第二遍遍历元素\n  - 第二种方式一遍hash，一边添加元素一边判断结果是否在已添加的元素中\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        vector<int> res;\n        map<int,int> numMap;          //创建map\n        map<int ,int>::iterator it;   //创建迭代器\n\n        for(int i=0;i<nums.size();i++){\n            it=numMap.find(target-nums[i]);       //find函数查找key\n            if(it!=numMap.end()){                 //如果到了end就说明没找到\n                res.push_back(i);\n                res.push_back(numMap[target-nums[i]]);\n                return res;\n            }\n            numMap.insert(make_pair(nums[i],i));  //插入pair\n        }\n        return res;\n    }\n};\n```\n\n{% note info %}\n## C++中vector用法回忆：\n- 创建：$$ vector<int> vec; $$\n- 访问：int i=vec[0];\n- 插入：vec.push_back(1); vec.insert(index,val)，在第i个元素后面插入\n- 删除：\n  - vec.pop_back(),删除最后一个\n  - vec.erase(index)，删除index位置处元素\n  - vec.erase(1,3)，删除[1,3)区间的元素\n- 大小：vec.size();\n- 清空：vec.clear();\n- 翻转：reverse(vec.begin(),vec.end());将元素翻转在vecotr，要#include<algorithm>\n- 排序：\n  - sort(vec.begin(),vec.end());默认按照升序排列\n  - sort(vec.begin(),vec.end(),cmp);定义排序比较函数将序排列\n> bool cmp(const int&a,const int&b){\n>   return a>b;\n> }\n- 迭代器访问\n> vector<int>::iterator it;\n> for(it=vec.begin();it!=vec.end();it++)\n>   cout<<\\*it<<endl;\n{% endnote %}\n\n\n{% note info %}\n## C++中map的用法\n- 创建：$$ map<string, int>mapString; $$ key类型为string，val类型为int\n- 添加：\n  - mapString[\"hello\"]=1; 最常用的最简单的插入方式,**会覆盖之前的数据**\n  - mapString.insert(make_pair(\"hello\",1));  次常用,** insert()不会覆盖之前的数据**\n  - mapString.insert(pair<string,int>(\"hello\",1));\n  - mapString.insert(map<string,int>::value_type(\"hello\",1));\n- 迭代：\n> map<string,int>::iterator it;\n> for ( it = mapString.begin( ); it != mapString.end( ); it++ )\n>   cout << \" \" << it -> second;\n\n- 查找：\n  - **不建议!** mapString[\"hello\"];返回\"hello\"对应的值，如果不存在，则添加一个元素，key为\"hello\",val为类型默认值,并返回这个默认值\n  - mapString.count(\"hello\"); map::count()方法返回被查找元素的个数,只有0或1\n  - map::find()方法,返回的是被查找元素的位置，没有则返回map.end()\n> map<string,int>::iterator it;\n> it = mapString.find(\"hello\");\n> if(it==test.end()){\n>   cout<<\"hello not found\"<<endl;\n> }\n\n- 删除:\n  - mapString.erase(\"hello\");\n  - 用迭代器删除,注意在迭代期间是不能被删除的\n> map<string,int>::iterator it;\n> it = mapString.find(\"hello\");\n> \n> if(it==mapString.end())  cout<<\"hello not found\"<<endl;\n> else  mapString.erase(it);\n\n- 排序：map中元素自动按照key升序排序，不可以用sort函数\n- 大小：mapString.size();\n- 清除：mapString.clear();\n\n{% endnote %}\n\n## Python Codes\n\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        map = {}\n        for i, num in enumerate(nums):\n            if target - num in map:\n                return [map[target - num], i]\n            map[num] = i\n\n        return []\n```\n\n{% note info %}\nlist中遍历的三种方式：\n1. for items in list:  根据元素遍历\n2. for index in range(len(list)):  根据索引遍历\n3. enumerate(seq, [start=0])  创建枚举对象，同时列出数据下标和数据\n  - seq: 一个序列、迭代器或其他支持迭代对象, 如列表、元组或字符串\n  - start: 下标起始位置\n  - 返回：一个列表 [(下标，数据)...], 例如[(1, 'a'), (2, 'b'), (3, 'c')]\n4. iterList = iter(list)  创建迭代器遍历\n  - 用法：for item in iterList: print(item)\n{% endnote %}\n\n## 总结\n虽然第一题很简单，但是深入了看还是能学了不少东西的，在遍历这方面，时间复杂度优化可以用map，C++时间复杂度可以从$$ O(n) $$降到$$ O(logn) $$，python和java可以直接降到$$ O(1) $$.\n\n而且打完代码复习了C++中vector的用法，还有pythonlist的enumerate遍历。C++ STL中的map是现学现卖了.\n\n打算每天一题，感觉有点晚了，亡羊补牢把。\n\n--------\n\n\n\n\n","slug":"LeetCode-001-Two-Sum","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjoo000uussbviws5u2r","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/two-sum/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution. Example: Given nums = [2, 7, 11, 15], target = 9,</p>\n<p>Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1]. UPDATE (2016/2/13): The return format had been changed to zero-based indices. Please read the above updated description carefully.</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>刚开始第一反应就是暴力遍历，但是时间复杂度是<script type=\"math/tex\">O(n^2)</script></li>\n<li>题解用了hash map，时间复杂度为<script type=\"math/tex\">O(n)</script><ul>\n<li>第一种方式是两遍hash，第一遍将元素添加进去，第二遍遍历元素</li>\n<li>第二种方式一遍hash，一边添加元素一边判断结果是否在已添加的元素中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; twoSum(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;</span><br><span class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; numMap;          <span class=\"comment\">//创建map</span></span><br><span class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span> ,<span class=\"keyword\">int</span>&gt;::iterator it;   <span class=\"comment\">//创建迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            it=numMap.find(target-nums[i]);       <span class=\"comment\">//find函数查找key</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(it!=numMap.end())&#123;                 <span class=\"comment\">//如果到了end就说明没找到</span></span><br><span class=\"line\">                res.push_back(i);</span><br><span class=\"line\">                res.push_back(numMap[target-nums[i]]);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            numMap.insert(make_pair(nums[i],i));  <span class=\"comment\">//插入pair</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div class=\"note info\"><h2 id=\"C-中vector用法回忆：\"><a href=\"#C-中vector用法回忆：\" class=\"headerlink\" title=\"C++中vector用法回忆：\"></a>C++中vector用法回忆：</h2><ul>\n<li>创建：<script type=\"math/tex\">vector<int> vec;</script></li>\n<li>访问：int i=vec[0];</li>\n<li>插入：vec.push_back(1); vec.insert(index,val)，在第i个元素后面插入</li>\n<li>删除：<ul>\n<li>vec.pop_back(),删除最后一个</li>\n<li>vec.erase(index)，删除index位置处元素</li>\n<li>vec.erase(1,3)，删除[1,3)区间的元素</li>\n</ul>\n</li>\n<li>大小：vec.size();</li>\n<li>清空：vec.clear();</li>\n<li>翻转：reverse(vec.begin(),vec.end());将元素翻转在vecotr，要#include<algorithm></algorithm></li>\n<li>排序：<ul>\n<li>sort(vec.begin(),vec.end());默认按照升序排列</li>\n<li>sort(vec.begin(),vec.end(),cmp);定义排序比较函数将序排列<blockquote>\n<p>bool cmp(const int&amp;a,const int&amp;b){<br>  return a&gt;b;<br>}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>迭代器访问<blockquote>\n<p>vector<int>::iterator it;<br>for(it=vec.begin();it!=vec.end();it++)<br>  cout&lt;&lt;*it&lt;&lt;endl;</int></p>\n</blockquote>\n</li>\n</ul></div>\n<div class=\"note info\"><h2 id=\"C-中map的用法\"><a href=\"#C-中map的用法\" class=\"headerlink\" title=\"C++中map的用法\"></a>C++中map的用法</h2><ul>\n<li>创建：<script type=\"math/tex\">map<string, int>mapString;</script> key类型为string，val类型为int</li>\n<li>添加：<ul>\n<li>mapString[“hello”]=1; 最常用的最简单的插入方式,<strong>会覆盖之前的数据</strong></li>\n<li>mapString.insert(make_pair(“hello”,1));  次常用,<strong> insert()不会覆盖之前的数据</strong></li>\n<li>mapString.insert(pair<string,int>(“hello”,1));</string,int></li>\n<li>mapString.insert(map<string,int>::value_type(“hello”,1));</string,int></li>\n</ul>\n</li>\n<li><p>迭代：</p>\n<blockquote>\n<p>map<string,int>::iterator it;<br>for ( it = mapString.begin( ); it != mapString.end( ); it++ )<br>  cout &lt;&lt; “ “ &lt;&lt; it -&gt; second;</string,int></p>\n</blockquote>\n</li>\n<li><p>查找：</p>\n<ul>\n<li><strong>不建议!</strong> mapString[“hello”];返回”hello”对应的值，如果不存在，则添加一个元素，key为”hello”,val为类型默认值,并返回这个默认值</li>\n<li>mapString.count(“hello”); map::count()方法返回被查找元素的个数,只有0或1</li>\n<li>map::find()方法,返回的是被查找元素的位置，没有则返回map.end()<blockquote>\n<p>map<string,int>::iterator it;<br>it = mapString.find(“hello”);<br>if(it==test.end()){<br>  cout&lt;&lt;”hello not found”&lt;&lt;endl;<br>}</string,int></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>删除:</p>\n<ul>\n<li>mapString.erase(“hello”);</li>\n<li>用迭代器删除,注意在迭代期间是不能被删除的<blockquote>\n<p>map<string,int>::iterator it;<br>it = mapString.find(“hello”);</string,int></p>\n<p>if(it==mapString.end())  cout&lt;&lt;”hello not found”&lt;&lt;endl;<br>else  mapString.erase(it);</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>排序：map中元素自动按照key升序排序，不可以用sort函数</p>\n</li>\n<li>大小：mapString.size();</li>\n<li>清除：mapString.clear();</li>\n</ul></div>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">twoSum</span><span class=\"params\">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class=\"line\">        map = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, num <span class=\"keyword\">in</span> enumerate(nums):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> target - num <span class=\"keyword\">in</span> map:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [map[target - num], i]</span><br><span class=\"line\">            map[num] = i</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br></pre></td></tr></table></figure>\n<div class=\"note info\"><p>list中遍历的三种方式：</p>\n<ol>\n<li>for items in list:  根据元素遍历</li>\n<li>for index in range(len(list)):  根据索引遍历</li>\n<li>enumerate(seq, [start=0])  创建枚举对象，同时列出数据下标和数据<ul>\n<li>seq: 一个序列、迭代器或其他支持迭代对象, 如列表、元组或字符串</li>\n<li>start: 下标起始位置</li>\n<li>返回：一个列表 [(下标，数据)…], 例如[(1, ‘a’), (2, ‘b’), (3, ‘c’)]</li>\n</ul>\n</li>\n<li>iterList = iter(list)  创建迭代器遍历<ul>\n<li>用法：for item in iterList: print(item)</li>\n</ul>\n</li>\n</ol></div>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然第一题很简单，但是深入了看还是能学了不少东西的，在遍历这方面，时间复杂度优化可以用map，C++时间复杂度可以从<script type=\"math/tex\">O(n)</script>降到<script type=\"math/tex\">O(logn)</script>，python和java可以直接降到<script type=\"math/tex\">O(1)</script>.</p>\n<p>而且打完代码复习了C++中vector的用法，还有pythonlist的enumerate遍历。C++ STL中的map是现学现卖了.</p>\n<p>打算每天一题，感觉有点晚了，亡羊补牢把。</p>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/two-sum/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution. Example: Given nums = [2, 7, 11, 15], target = 9,</p>\n<p>Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1]. UPDATE (2016/2/13): The return format had been changed to zero-based indices. Please read the above updated description carefully.</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>刚开始第一反应就是暴力遍历，但是时间复杂度是<script type=\"math/tex\">O(n^2)</script></li>\n<li>题解用了hash map，时间复杂度为<script type=\"math/tex\">O(n)</script><ul>\n<li>第一种方式是两遍hash，第一遍将元素添加进去，第二遍遍历元素</li>\n<li>第二种方式一遍hash，一边添加元素一边判断结果是否在已添加的元素中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; twoSum(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;</span><br><span class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; numMap;          <span class=\"comment\">//创建map</span></span><br><span class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span> ,<span class=\"keyword\">int</span>&gt;::iterator it;   <span class=\"comment\">//创建迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            it=numMap.find(target-nums[i]);       <span class=\"comment\">//find函数查找key</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(it!=numMap.end())&#123;                 <span class=\"comment\">//如果到了end就说明没找到</span></span><br><span class=\"line\">                res.push_back(i);</span><br><span class=\"line\">                res.push_back(numMap[target-nums[i]]);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            numMap.insert(make_pair(nums[i],i));  <span class=\"comment\">//插入pair</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div class=\"note info\"><h2 id=\"C-中vector用法回忆：\"><a href=\"#C-中vector用法回忆：\" class=\"headerlink\" title=\"C++中vector用法回忆：\"></a>C++中vector用法回忆：</h2><ul>\n<li>创建：<script type=\"math/tex\">vector<int> vec;</script></li>\n<li>访问：int i=vec[0];</li>\n<li>插入：vec.push_back(1); vec.insert(index,val)，在第i个元素后面插入</li>\n<li>删除：<ul>\n<li>vec.pop_back(),删除最后一个</li>\n<li>vec.erase(index)，删除index位置处元素</li>\n<li>vec.erase(1,3)，删除[1,3)区间的元素</li>\n</ul>\n</li>\n<li>大小：vec.size();</li>\n<li>清空：vec.clear();</li>\n<li>翻转：reverse(vec.begin(),vec.end());将元素翻转在vecotr，要#include<algorithm></algorithm></li>\n<li>排序：<ul>\n<li>sort(vec.begin(),vec.end());默认按照升序排列</li>\n<li>sort(vec.begin(),vec.end(),cmp);定义排序比较函数将序排列<blockquote>\n<p>bool cmp(const int&amp;a,const int&amp;b){<br>  return a&gt;b;<br>}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>迭代器访问<blockquote>\n<p>vector<int>::iterator it;<br>for(it=vec.begin();it!=vec.end();it++)<br>  cout&lt;&lt;*it&lt;&lt;endl;</int></p>\n</blockquote>\n</li>\n</ul></div>\n<div class=\"note info\"><h2 id=\"C-中map的用法\"><a href=\"#C-中map的用法\" class=\"headerlink\" title=\"C++中map的用法\"></a>C++中map的用法</h2><ul>\n<li>创建：<script type=\"math/tex\">map<string, int>mapString;</script> key类型为string，val类型为int</li>\n<li>添加：<ul>\n<li>mapString[“hello”]=1; 最常用的最简单的插入方式,<strong>会覆盖之前的数据</strong></li>\n<li>mapString.insert(make_pair(“hello”,1));  次常用,<strong> insert()不会覆盖之前的数据</strong></li>\n<li>mapString.insert(pair<string,int>(“hello”,1));</string,int></li>\n<li>mapString.insert(map<string,int>::value_type(“hello”,1));</string,int></li>\n</ul>\n</li>\n<li><p>迭代：</p>\n<blockquote>\n<p>map<string,int>::iterator it;<br>for ( it = mapString.begin( ); it != mapString.end( ); it++ )<br>  cout &lt;&lt; “ “ &lt;&lt; it -&gt; second;</string,int></p>\n</blockquote>\n</li>\n<li><p>查找：</p>\n<ul>\n<li><strong>不建议!</strong> mapString[“hello”];返回”hello”对应的值，如果不存在，则添加一个元素，key为”hello”,val为类型默认值,并返回这个默认值</li>\n<li>mapString.count(“hello”); map::count()方法返回被查找元素的个数,只有0或1</li>\n<li>map::find()方法,返回的是被查找元素的位置，没有则返回map.end()<blockquote>\n<p>map<string,int>::iterator it;<br>it = mapString.find(“hello”);<br>if(it==test.end()){<br>  cout&lt;&lt;”hello not found”&lt;&lt;endl;<br>}</string,int></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>删除:</p>\n<ul>\n<li>mapString.erase(“hello”);</li>\n<li>用迭代器删除,注意在迭代期间是不能被删除的<blockquote>\n<p>map<string,int>::iterator it;<br>it = mapString.find(“hello”);</string,int></p>\n<p>if(it==mapString.end())  cout&lt;&lt;”hello not found”&lt;&lt;endl;<br>else  mapString.erase(it);</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>排序：map中元素自动按照key升序排序，不可以用sort函数</p>\n</li>\n<li>大小：mapString.size();</li>\n<li>清除：mapString.clear();</li>\n</ul></div>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">twoSum</span><span class=\"params\">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class=\"line\">        map = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, num <span class=\"keyword\">in</span> enumerate(nums):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> target - num <span class=\"keyword\">in</span> map:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [map[target - num], i]</span><br><span class=\"line\">            map[num] = i</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br></pre></td></tr></table></figure>\n<div class=\"note info\"><p>list中遍历的三种方式：</p>\n<ol>\n<li>for items in list:  根据元素遍历</li>\n<li>for index in range(len(list)):  根据索引遍历</li>\n<li>enumerate(seq, [start=0])  创建枚举对象，同时列出数据下标和数据<ul>\n<li>seq: 一个序列、迭代器或其他支持迭代对象, 如列表、元组或字符串</li>\n<li>start: 下标起始位置</li>\n<li>返回：一个列表 [(下标，数据)…], 例如[(1, ‘a’), (2, ‘b’), (3, ‘c’)]</li>\n</ul>\n</li>\n<li>iterList = iter(list)  创建迭代器遍历<ul>\n<li>用法：for item in iterList: print(item)</li>\n</ul>\n</li>\n</ol></div>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然第一题很简单，但是深入了看还是能学了不少东西的，在遍历这方面，时间复杂度优化可以用map，C++时间复杂度可以从<script type=\"math/tex\">O(n)</script>降到<script type=\"math/tex\">O(logn)</script>，python和java可以直接降到<script type=\"math/tex\">O(1)</script>.</p>\n<p>而且打完代码复习了C++中vector的用法，还有pythonlist的enumerate遍历。C++ STL中的map是现学现卖了.</p>\n<p>打算每天一题，感觉有点晚了，亡羊补牢把。</p>\n<hr>"},{"title":"LeetCode-002-Add Two Numbers","comments":1,"mathjax":false,"date":"2019-04-08T16:39:36.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/add-two-numbers/)\nYou are given two **non-empty** linked lists representing two non-negative integers. \nThe digits are stored in **reverse order** and each of their nodes contain a single digit. \nAdd the two numbers and return it as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n### Example:\n> Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\n> Output: 7 -> 0 -> 8\n> Explanation: 342 + 465 = 807.\n{% endnote %}\n<!--more-->\n\n## Solutions\n因为以前做过差不多的题目，而且感觉也不难，设置一个进位标志，然后一个个往后加。\n\n犯了三个小错误\n- 算当前node的值时居然没把carry一起加起来算\n- 算下次的carry时没有把上次的carry加上\n- 忘了最后一次还可能有进位，要新建一个node\n\n还纠结好久要不要头结点，刚开始以为题目不可以用头结点，毕竟Example上没有，写到后面还是出错了，看了题解换了有头结点的版本就好了。\n\n## C++ Codes\n\n```C++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        int carry = 0;\n        ListNode *res = new ListNode(0);\n        ListNode *tmp = res;\n        ListNode *p = l1;\n        ListNode *q = l2;\n\n        while(p!=NULL && q!=NULL){\n            tmp->next = new ListNode((p->val + q->val+carry)%10);//把+carry放在了%10的后面\n            carry = (p->val + q->val+carry)/10;//居然漏了+carry\n\n            tmp = tmp->next;\n\n            p=p->next;\n            q=q->next;\n        }\n\n        while(p!=NULL){\n            tmp->next = new ListNode((p->val + carry)%10);\n            carry = (p->val + carry)/10;\n            tmp = tmp->next;\n            p = p->next;\n        }\n\n        while(q!=NULL){\n            tmp->next = new ListNode((q->val + carry)%10);\n            carry = (q->val + carry)/10;\n            tmp = tmp->next;\n            q = q->next;\n        }\n\n        if(carry>0) tmp->next = new ListNode(carry);//漏了最后的进位\n        return res->next;\n    }\n};\n```\n{% note default %}\n我这里在最后用了两个while来判断是否结束，题解上面是在第一个while里面对p和q进行了处理：\n　　只要到了NULL，就让它的值为0，时间复杂度上来说是一样的，都是$$ \\max{l1的节点数，l2的节点数} $$，简单理解为$$ O(n) $$\n{% endnote %}\n\n## Python Codes\n\n一共两种，不是自己写的，不是很熟悉Python的链表，多看看学习下。\n\n第一中的sum写法不是很懂...绝望，第二种比较好理解\n\n```\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        res = ListNode(0)\n        tmp = res\n        left = 0\n\n        while l1 or l2 or left:\n            left, right = divmod(sum(l and l.val or 0 for l in (l1, l2)) + left, 10)\n            tmp.next = ListNode(right)\n            tmp = tmp.next\n            l1 = l1 and l1.next\n            l2 = l2 and l2.next\n\n        return res.next\n```\n\n```\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        head = ListNode(0)\n        curr = head\n        carry, total = 0, 0\n\n        while(l1 or l2):\n            a = l1.val if l1 else 0\n            b = l2.val if l2 else 0\n            total = a + b + carry\n            carry = total // 10\n\n            if l1 or l2:\n                curr.next = ListNode(total % 10)\n\n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n            curr = curr.next\n\n        if carry>0:\n            curr.next = ListNode(carry)\n\n        return head.next\n```\n\n## 总结\n感觉自己解题速度有点慢，而且粗心犯小错误。\n\n感觉是练得太少，以后加油！\n\n-----------\n","source":"_posts/LeetCode-002-Add-Two-Numbers.md","raw":"---\ntitle: LeetCode-002-Add Two Numbers\ncomments: true\nmathjax: false\ndate: 2019-04-09 00:39:36\ntags: [LeetCode, Linked List, Large Number, Math, Medium]\ncategories: [LeetCode]\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/add-two-numbers/)\nYou are given two **non-empty** linked lists representing two non-negative integers. \nThe digits are stored in **reverse order** and each of their nodes contain a single digit. \nAdd the two numbers and return it as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n### Example:\n> Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\n> Output: 7 -> 0 -> 8\n> Explanation: 342 + 465 = 807.\n{% endnote %}\n<!--more-->\n\n## Solutions\n因为以前做过差不多的题目，而且感觉也不难，设置一个进位标志，然后一个个往后加。\n\n犯了三个小错误\n- 算当前node的值时居然没把carry一起加起来算\n- 算下次的carry时没有把上次的carry加上\n- 忘了最后一次还可能有进位，要新建一个node\n\n还纠结好久要不要头结点，刚开始以为题目不可以用头结点，毕竟Example上没有，写到后面还是出错了，看了题解换了有头结点的版本就好了。\n\n## C++ Codes\n\n```C++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        int carry = 0;\n        ListNode *res = new ListNode(0);\n        ListNode *tmp = res;\n        ListNode *p = l1;\n        ListNode *q = l2;\n\n        while(p!=NULL && q!=NULL){\n            tmp->next = new ListNode((p->val + q->val+carry)%10);//把+carry放在了%10的后面\n            carry = (p->val + q->val+carry)/10;//居然漏了+carry\n\n            tmp = tmp->next;\n\n            p=p->next;\n            q=q->next;\n        }\n\n        while(p!=NULL){\n            tmp->next = new ListNode((p->val + carry)%10);\n            carry = (p->val + carry)/10;\n            tmp = tmp->next;\n            p = p->next;\n        }\n\n        while(q!=NULL){\n            tmp->next = new ListNode((q->val + carry)%10);\n            carry = (q->val + carry)/10;\n            tmp = tmp->next;\n            q = q->next;\n        }\n\n        if(carry>0) tmp->next = new ListNode(carry);//漏了最后的进位\n        return res->next;\n    }\n};\n```\n{% note default %}\n我这里在最后用了两个while来判断是否结束，题解上面是在第一个while里面对p和q进行了处理：\n　　只要到了NULL，就让它的值为0，时间复杂度上来说是一样的，都是$$ \\max{l1的节点数，l2的节点数} $$，简单理解为$$ O(n) $$\n{% endnote %}\n\n## Python Codes\n\n一共两种，不是自己写的，不是很熟悉Python的链表，多看看学习下。\n\n第一中的sum写法不是很懂...绝望，第二种比较好理解\n\n```\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        res = ListNode(0)\n        tmp = res\n        left = 0\n\n        while l1 or l2 or left:\n            left, right = divmod(sum(l and l.val or 0 for l in (l1, l2)) + left, 10)\n            tmp.next = ListNode(right)\n            tmp = tmp.next\n            l1 = l1 and l1.next\n            l2 = l2 and l2.next\n\n        return res.next\n```\n\n```\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        head = ListNode(0)\n        curr = head\n        carry, total = 0, 0\n\n        while(l1 or l2):\n            a = l1.val if l1 else 0\n            b = l2.val if l2 else 0\n            total = a + b + carry\n            carry = total // 10\n\n            if l1 or l2:\n                curr.next = ListNode(total % 10)\n\n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n            curr = curr.next\n\n        if carry>0:\n            curr.next = ListNode(carry)\n\n        return head.next\n```\n\n## 总结\n感觉自己解题速度有点慢，而且粗心犯小错误。\n\n感觉是练得太少，以后加油！\n\n-----------\n","slug":"LeetCode-002-Add-Two-Numbers","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjoz000xussbomxubunh","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/add-two-numbers/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers.<br>The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit.<br>Add the two numbers and return it as a linked list.<br>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example:\"></a>Example:</h3><blockquote>\n<p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8<br>Explanation: 342 + 465 = 807.</p>\n</blockquote></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><p>因为以前做过差不多的题目，而且感觉也不难，设置一个进位标志，然后一个个往后加。</p>\n<p>犯了三个小错误</p>\n<ul>\n<li>算当前node的值时居然没把carry一起加起来算</li>\n<li>算下次的carry时没有把上次的carry加上</li>\n<li>忘了最后一次还可能有进位，要新建一个node</li>\n</ul>\n<p>还纠结好久要不要头结点，刚开始以为题目不可以用头结点，毕竟Example上没有，写到后面还是出错了，看了题解换了有头结点的版本就好了。</p>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ListNode *res = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *tmp = res;</span><br><span class=\"line\">        ListNode *p = l1;</span><br><span class=\"line\">        ListNode *q = l2;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span> &amp;&amp; q!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            tmp-&gt;next = <span class=\"keyword\">new</span> ListNode((p-&gt;val + q-&gt;val+carry)%<span class=\"number\">10</span>);<span class=\"comment\">//把+carry放在了%10的后面</span></span><br><span class=\"line\">            carry = (p-&gt;val + q-&gt;val+carry)/<span class=\"number\">10</span>;<span class=\"comment\">//居然漏了+carry</span></span><br><span class=\"line\"></span><br><span class=\"line\">            tmp = tmp-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">            q=q-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            tmp-&gt;next = <span class=\"keyword\">new</span> ListNode((p-&gt;val + carry)%<span class=\"number\">10</span>);</span><br><span class=\"line\">            carry = (p-&gt;val + carry)/<span class=\"number\">10</span>;</span><br><span class=\"line\">            tmp = tmp-&gt;next;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            tmp-&gt;next = <span class=\"keyword\">new</span> ListNode((q-&gt;val + carry)%<span class=\"number\">10</span>);</span><br><span class=\"line\">            carry = (q-&gt;val + carry)/<span class=\"number\">10</span>;</span><br><span class=\"line\">            tmp = tmp-&gt;next;</span><br><span class=\"line\">            q = q-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(carry&gt;<span class=\"number\">0</span>) tmp-&gt;next = <span class=\"keyword\">new</span> ListNode(carry);<span class=\"comment\">//漏了最后的进位</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div class=\"note default\"><p>我这里在最后用了两个while来判断是否结束，题解上面是在第一个while里面对p和q进行了处理：<br>　　只要到了NULL，就让它的值为0，时间复杂度上来说是一样的，都是<script type=\"math/tex\">\\max{l1的节点数，l2的节点数}</script>，简单理解为<script type=\"math/tex\">O(n)</script></p></div>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>一共两种，不是自己写的，不是很熟悉Python的链表，多看看学习下。</p>\n<p>第一中的sum写法不是很懂…绝望，第二种比较好理解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Definition for singly-linked list.</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode:</span><br><span class=\"line\">        res = ListNode(0)</span><br><span class=\"line\">        tmp = res</span><br><span class=\"line\">        left = 0</span><br><span class=\"line\"></span><br><span class=\"line\">        while l1 or l2 or left:</span><br><span class=\"line\">            left, right = divmod(sum(l and l.val or 0 for l in (l1, l2)) + left, 10)</span><br><span class=\"line\">            tmp.next = ListNode(right)</span><br><span class=\"line\">            tmp = tmp.next</span><br><span class=\"line\">            l1 = l1 and l1.next</span><br><span class=\"line\">            l2 = l2 and l2.next</span><br><span class=\"line\"></span><br><span class=\"line\">        return res.next</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Definition for singly-linked list.</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode:</span><br><span class=\"line\">        head = ListNode(0)</span><br><span class=\"line\">        curr = head</span><br><span class=\"line\">        carry, total = 0, 0</span><br><span class=\"line\"></span><br><span class=\"line\">        while(l1 or l2):</span><br><span class=\"line\">            a = l1.val if l1 else 0</span><br><span class=\"line\">            b = l2.val if l2 else 0</span><br><span class=\"line\">            total = a + b + carry</span><br><span class=\"line\">            carry = total // 10</span><br><span class=\"line\"></span><br><span class=\"line\">            if l1 or l2:</span><br><span class=\"line\">                curr.next = ListNode(total % 10)</span><br><span class=\"line\"></span><br><span class=\"line\">            if l1:</span><br><span class=\"line\">                l1 = l1.next</span><br><span class=\"line\">            if l2:</span><br><span class=\"line\">                l2 = l2.next</span><br><span class=\"line\">            curr = curr.next</span><br><span class=\"line\"></span><br><span class=\"line\">        if carry&gt;0:</span><br><span class=\"line\">            curr.next = ListNode(carry)</span><br><span class=\"line\"></span><br><span class=\"line\">        return head.next</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>感觉自己解题速度有点慢，而且粗心犯小错误。</p>\n<p>感觉是练得太少，以后加油！</p>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/add-two-numbers/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers.<br>The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit.<br>Add the two numbers and return it as a linked list.<br>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example:\"></a>Example:</h3><blockquote>\n<p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8<br>Explanation: 342 + 465 = 807.</p>\n</blockquote></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><p>因为以前做过差不多的题目，而且感觉也不难，设置一个进位标志，然后一个个往后加。</p>\n<p>犯了三个小错误</p>\n<ul>\n<li>算当前node的值时居然没把carry一起加起来算</li>\n<li>算下次的carry时没有把上次的carry加上</li>\n<li>忘了最后一次还可能有进位，要新建一个node</li>\n</ul>\n<p>还纠结好久要不要头结点，刚开始以为题目不可以用头结点，毕竟Example上没有，写到后面还是出错了，看了题解换了有头结点的版本就好了。</p>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ListNode *res = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *tmp = res;</span><br><span class=\"line\">        ListNode *p = l1;</span><br><span class=\"line\">        ListNode *q = l2;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span> &amp;&amp; q!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            tmp-&gt;next = <span class=\"keyword\">new</span> ListNode((p-&gt;val + q-&gt;val+carry)%<span class=\"number\">10</span>);<span class=\"comment\">//把+carry放在了%10的后面</span></span><br><span class=\"line\">            carry = (p-&gt;val + q-&gt;val+carry)/<span class=\"number\">10</span>;<span class=\"comment\">//居然漏了+carry</span></span><br><span class=\"line\"></span><br><span class=\"line\">            tmp = tmp-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">            q=q-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            tmp-&gt;next = <span class=\"keyword\">new</span> ListNode((p-&gt;val + carry)%<span class=\"number\">10</span>);</span><br><span class=\"line\">            carry = (p-&gt;val + carry)/<span class=\"number\">10</span>;</span><br><span class=\"line\">            tmp = tmp-&gt;next;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            tmp-&gt;next = <span class=\"keyword\">new</span> ListNode((q-&gt;val + carry)%<span class=\"number\">10</span>);</span><br><span class=\"line\">            carry = (q-&gt;val + carry)/<span class=\"number\">10</span>;</span><br><span class=\"line\">            tmp = tmp-&gt;next;</span><br><span class=\"line\">            q = q-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(carry&gt;<span class=\"number\">0</span>) tmp-&gt;next = <span class=\"keyword\">new</span> ListNode(carry);<span class=\"comment\">//漏了最后的进位</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div class=\"note default\"><p>我这里在最后用了两个while来判断是否结束，题解上面是在第一个while里面对p和q进行了处理：<br>　　只要到了NULL，就让它的值为0，时间复杂度上来说是一样的，都是<script type=\"math/tex\">\\max{l1的节点数，l2的节点数}</script>，简单理解为<script type=\"math/tex\">O(n)</script></p></div>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>一共两种，不是自己写的，不是很熟悉Python的链表，多看看学习下。</p>\n<p>第一中的sum写法不是很懂…绝望，第二种比较好理解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Definition for singly-linked list.</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode:</span><br><span class=\"line\">        res = ListNode(0)</span><br><span class=\"line\">        tmp = res</span><br><span class=\"line\">        left = 0</span><br><span class=\"line\"></span><br><span class=\"line\">        while l1 or l2 or left:</span><br><span class=\"line\">            left, right = divmod(sum(l and l.val or 0 for l in (l1, l2)) + left, 10)</span><br><span class=\"line\">            tmp.next = ListNode(right)</span><br><span class=\"line\">            tmp = tmp.next</span><br><span class=\"line\">            l1 = l1 and l1.next</span><br><span class=\"line\">            l2 = l2 and l2.next</span><br><span class=\"line\"></span><br><span class=\"line\">        return res.next</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Definition for singly-linked list.</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode:</span><br><span class=\"line\">        head = ListNode(0)</span><br><span class=\"line\">        curr = head</span><br><span class=\"line\">        carry, total = 0, 0</span><br><span class=\"line\"></span><br><span class=\"line\">        while(l1 or l2):</span><br><span class=\"line\">            a = l1.val if l1 else 0</span><br><span class=\"line\">            b = l2.val if l2 else 0</span><br><span class=\"line\">            total = a + b + carry</span><br><span class=\"line\">            carry = total // 10</span><br><span class=\"line\"></span><br><span class=\"line\">            if l1 or l2:</span><br><span class=\"line\">                curr.next = ListNode(total % 10)</span><br><span class=\"line\"></span><br><span class=\"line\">            if l1:</span><br><span class=\"line\">                l1 = l1.next</span><br><span class=\"line\">            if l2:</span><br><span class=\"line\">                l2 = l2.next</span><br><span class=\"line\">            curr = curr.next</span><br><span class=\"line\"></span><br><span class=\"line\">        if carry&gt;0:</span><br><span class=\"line\">            curr.next = ListNode(carry)</span><br><span class=\"line\"></span><br><span class=\"line\">        return head.next</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>感觉自己解题速度有点慢，而且粗心犯小错误。</p>\n<p>感觉是练得太少，以后加油！</p>\n<hr>"},{"title":"cannot start gnome-tweaks","comments":1,"mathjax":false,"date":"2019-03-20T12:36:47.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n今天在用Gnome-tweaks的时候发现打不开了???很莫名其妙,怀疑是滚动更新滚炸了。bing了一下在stackoverflow上找到了解决办法。\n<!--more-->\n\n# 无法打开gnome-tweaks\n\n## 报错信息\n```\n [sudo] password for root: \n Traceback (most recent call last):\n   File \"/usr/bin/gnome-tweaks\", line 13, in <module>\n     import gi\n ModuleNotFoundError: No module named 'gi'\n```\n\n## 解决办法\n\n参照了[stackoverflow](https://stackoverflow.com/questions/32640083/gnome-terminal-not-starting-due-to-error-in-python-script-related-to-gi)\n\n**步骤如下**\n- 在命令行进入python2、python3测试import gi，看有没有gi这个包\n- 发现只有python3.7下面有这个包\n- $ sudo vim /usr/bin/gnome-tweaks\n- 编辑第一行，把`#!/usr/bin/env python`改成`#!/usr/bin/python`\n- 我这里`python->python3.7`,如果不是的话要写成`!/usr/bin/python3.7`\n- 重新运行gnome-tweaks\n- 注意不要带sudo,我这里sudo出现了如下报错\n```\nNo protocol specified\nUnable to init server: Could not connect: Connection refused\n```\n\n---------\nOK，问题解决\n","source":"_posts/cannot-start-gnome-tweaks.md","raw":"---\ntitle: cannot start gnome-tweaks\ncomments: true\nmathjax: false\ndate: 2019-03-20 20:36:47\ntags: [Daily,Linux]\ncategories: Daily\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n今天在用Gnome-tweaks的时候发现打不开了???很莫名其妙,怀疑是滚动更新滚炸了。bing了一下在stackoverflow上找到了解决办法。\n<!--more-->\n\n# 无法打开gnome-tweaks\n\n## 报错信息\n```\n [sudo] password for root: \n Traceback (most recent call last):\n   File \"/usr/bin/gnome-tweaks\", line 13, in <module>\n     import gi\n ModuleNotFoundError: No module named 'gi'\n```\n\n## 解决办法\n\n参照了[stackoverflow](https://stackoverflow.com/questions/32640083/gnome-terminal-not-starting-due-to-error-in-python-script-related-to-gi)\n\n**步骤如下**\n- 在命令行进入python2、python3测试import gi，看有没有gi这个包\n- 发现只有python3.7下面有这个包\n- $ sudo vim /usr/bin/gnome-tweaks\n- 编辑第一行，把`#!/usr/bin/env python`改成`#!/usr/bin/python`\n- 我这里`python->python3.7`,如果不是的话要写成`!/usr/bin/python3.7`\n- 重新运行gnome-tweaks\n- 注意不要带sudo,我这里sudo出现了如下报错\n```\nNo protocol specified\nUnable to init server: Could not connect: Connection refused\n```\n\n---------\nOK，问题解决\n","slug":"cannot-start-gnome-tweaks","published":1,"updated":"2019-07-20T12:10:19.195Z","layout":"post","photos":[],"link":"","_id":"cjycjtjpa0010ussb7qd2z0p8","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>今天在用Gnome-tweaks的时候发现打不开了???很莫名其妙,怀疑是滚动更新滚炸了。bing了一下在stackoverflow上找到了解决办法。<br><a id=\"more\"></a></p>\n<h1 id=\"无法打开gnome-tweaks\"><a href=\"#无法打开gnome-tweaks\" class=\"headerlink\" title=\"无法打开gnome-tweaks\"></a>无法打开gnome-tweaks</h1><h2 id=\"报错信息\"><a href=\"#报错信息\" class=\"headerlink\" title=\"报错信息\"></a>报错信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] password for root: </span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;/usr/bin/gnome-tweaks&quot;, line 13, in &lt;module&gt;</span><br><span class=\"line\">    import gi</span><br><span class=\"line\">ModuleNotFoundError: No module named &apos;gi&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>参照了<a href=\"https://stackoverflow.com/questions/32640083/gnome-terminal-not-starting-due-to-error-in-python-script-related-to-gi\" target=\"_blank\" rel=\"noopener\">stackoverflow</a></p>\n<p><strong>步骤如下</strong></p>\n<ul>\n<li>在命令行进入python2、python3测试import gi，看有没有gi这个包</li>\n<li>发现只有python3.7下面有这个包</li>\n<li>$ sudo vim /usr/bin/gnome-tweaks</li>\n<li>编辑第一行，把<code>#!/usr/bin/env python</code>改成<code>#!/usr/bin/python</code></li>\n<li>我这里<code>python-&gt;python3.7</code>,如果不是的话要写成<code>!/usr/bin/python3.7</code></li>\n<li>重新运行gnome-tweaks</li>\n<li>注意不要带sudo,我这里sudo出现了如下报错<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No protocol specified</span><br><span class=\"line\">Unable to init server: Could not connect: Connection refused</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p>OK，问题解决</p>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>今天在用Gnome-tweaks的时候发现打不开了???很莫名其妙,怀疑是滚动更新滚炸了。bing了一下在stackoverflow上找到了解决办法。<br>","more":"</p>\n<h1 id=\"无法打开gnome-tweaks\"><a href=\"#无法打开gnome-tweaks\" class=\"headerlink\" title=\"无法打开gnome-tweaks\"></a>无法打开gnome-tweaks</h1><h2 id=\"报错信息\"><a href=\"#报错信息\" class=\"headerlink\" title=\"报错信息\"></a>报错信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] password for root: </span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;/usr/bin/gnome-tweaks&quot;, line 13, in &lt;module&gt;</span><br><span class=\"line\">    import gi</span><br><span class=\"line\">ModuleNotFoundError: No module named &apos;gi&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>参照了<a href=\"https://stackoverflow.com/questions/32640083/gnome-terminal-not-starting-due-to-error-in-python-script-related-to-gi\" target=\"_blank\" rel=\"noopener\">stackoverflow</a></p>\n<p><strong>步骤如下</strong></p>\n<ul>\n<li>在命令行进入python2、python3测试import gi，看有没有gi这个包</li>\n<li>发现只有python3.7下面有这个包</li>\n<li>$ sudo vim /usr/bin/gnome-tweaks</li>\n<li>编辑第一行，把<code>#!/usr/bin/env python</code>改成<code>#!/usr/bin/python</code></li>\n<li>我这里<code>python-&gt;python3.7</code>,如果不是的话要写成<code>!/usr/bin/python3.7</code></li>\n<li>重新运行gnome-tweaks</li>\n<li>注意不要带sudo,我这里sudo出现了如下报错<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No protocol specified</span><br><span class=\"line\">Unable to init server: Could not connect: Connection refused</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p>OK，问题解决</p>"},{"title":"Hello World","date":"2017-08-01T06:04:32.000Z","_content":"\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-08-01 14:04:32\n---\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2019-07-20T12:10:19.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycjtjq2001nussbu60cxdom","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"LeetCode-003-Longest Substring Without Repeating Characters","comments":1,"mathjax":false,"date":"2019-04-12T17:02:13.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/longest-substring-without-repeating-characters/) \nGiven a string, find the length of the **longest substring** without repeating characters.\n### Examples:\n> \"abcabcbb\" ---> 3\n> \"bbbbb\" ---> 1\n> \"pwwkew\" ---> 3\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 第一反应下想到的也是暴力遍历，写一个判断有没有重复字符串的函数，然后遍历每个子串，时间复杂度是$$ O(n^3) $$，太高了，导致第一次提交没过，后面优化了下暴力法，过了。\n- 除了暴力，题解上给出了**滑动窗口**的解法，利用前后两个指针i,j 不断移动来遍历字符串以及子串，i,j中间的就是没有重复字符的,如果遇到重复字符，就把i自增，一直到没有重复字符为止（就是相当于找到和j处的相同字符的为止），时间复杂度是$$ O(n) $$\n- 最后是优化的滑动窗口，先记录每个字符第一次出现的位置pos，然后第二次出现的时候，将第一个指针i直接变成pos+1\n- 对上面的优化还有一个技巧是利用整数数组代替Map，也可以用bitmap每一位表示一个字符数量\n\n## C++ Codes\n这是我优化过的暴力法，勉强过了，判断函数那边用了太大的数组，可以用bitmap降低空间复杂度\n\n用了72ms,20.1MB...僵硬\n\n```C++\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        if(s.length()==0)return 0;\n        int max=1;\n        //i是最大长度，j是每次遍历的起始位置\n        for(int j=0;j<s.length();j++){\n            //这里让i直接从max开始，可以少一点没用的遍历\n            for(int i=max;i+j<=s.length();i++){\n                //如果有重复字符直接退出循环\n                if(!judgeSubstring(s.substr(j,i))) break;\n                max=i;\n            }\n        }\n        return max;\n    }\n\n    bool judgeSubstring(string substr){\n        int tmp[128]={0};\n        for(int i=0;i<substr.length();i++){\n            //如果不是0就肯定有重复字符\n            if(tmp[int(substr[i])])return false;\n            tmp[int(substr[i])]+=1;\n        }\n        return true;\n    }\n};\n```\n\n好了，这是第三种方法对应的代码，这次只用了12ms,9.1MB，话说感觉这种滑动窗口有点像快排...\n\n```C++\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int n=s.length();\n        //用来保存每个字符的下一个位置，用于出现重复字符的时候直接赋值给i\n        int cNum[128]={0};      \n        int max=0;\n        //i是第一个指针，j是第二个\n        for(int j=0,i=0;j<n;j++){\n            //如果不为0就是出现了和s[j]一样的字符，让i等于那个字符的后一个位置\n            if(cNum[s[j]]){\n                i = cNum[s[j]]>i?cNum[s[j]]:i;\n            }\n            //这里不管有没有重复字符都要更新max和cNum[s[j]]\n            //很明显，如果有，i已经被更新，相当于已经变成了没有重复字符的情形，位置也要更新\n            max=(j-i+1)>max?(j-i+1):max;\n            cNum[s[j]]=j+1;\n        }\n        return max;\n    }\n\n};\n```\n\n## Python Codes\n用时52ms，12.7MB\n\n```Python\nclass Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        cNum=dict()\n        res=0\n        start=0\n        for i in range(len(s)):\n            if s[i] in cNum:\n                start=max(start,cNum[s[i]])\n            res=max(res,i-start+1)\n            cNum[s[i]]=i+1\n        return res\n```\n\n## 总结\n总感觉自己想的太简单，优化还是有点难度的，这道题关键的就是一次遍历，用两个指针表示字符串，并且没有单独拿出字符串判断，而是用set或者map、dict这种方式记录当前子串的内容，用于判断是否有没有出现重复字符，优化的时候减少无用的遍历\n\n------\n","source":"_posts/LeetCode-003-Longest-Substring-Without-Repeating-Characters.md","raw":"---\ntitle: LeetCode-003-Longest Substring Without Repeating Characters\ncomments: true\nmathjax: false\ndate: 2019-04-13 01:02:13\ntags: [LeetCode, String, Math, Medium]\ncategories: LeetCode\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/longest-substring-without-repeating-characters/) \nGiven a string, find the length of the **longest substring** without repeating characters.\n### Examples:\n> \"abcabcbb\" ---> 3\n> \"bbbbb\" ---> 1\n> \"pwwkew\" ---> 3\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 第一反应下想到的也是暴力遍历，写一个判断有没有重复字符串的函数，然后遍历每个子串，时间复杂度是$$ O(n^3) $$，太高了，导致第一次提交没过，后面优化了下暴力法，过了。\n- 除了暴力，题解上给出了**滑动窗口**的解法，利用前后两个指针i,j 不断移动来遍历字符串以及子串，i,j中间的就是没有重复字符的,如果遇到重复字符，就把i自增，一直到没有重复字符为止（就是相当于找到和j处的相同字符的为止），时间复杂度是$$ O(n) $$\n- 最后是优化的滑动窗口，先记录每个字符第一次出现的位置pos，然后第二次出现的时候，将第一个指针i直接变成pos+1\n- 对上面的优化还有一个技巧是利用整数数组代替Map，也可以用bitmap每一位表示一个字符数量\n\n## C++ Codes\n这是我优化过的暴力法，勉强过了，判断函数那边用了太大的数组，可以用bitmap降低空间复杂度\n\n用了72ms,20.1MB...僵硬\n\n```C++\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        if(s.length()==0)return 0;\n        int max=1;\n        //i是最大长度，j是每次遍历的起始位置\n        for(int j=0;j<s.length();j++){\n            //这里让i直接从max开始，可以少一点没用的遍历\n            for(int i=max;i+j<=s.length();i++){\n                //如果有重复字符直接退出循环\n                if(!judgeSubstring(s.substr(j,i))) break;\n                max=i;\n            }\n        }\n        return max;\n    }\n\n    bool judgeSubstring(string substr){\n        int tmp[128]={0};\n        for(int i=0;i<substr.length();i++){\n            //如果不是0就肯定有重复字符\n            if(tmp[int(substr[i])])return false;\n            tmp[int(substr[i])]+=1;\n        }\n        return true;\n    }\n};\n```\n\n好了，这是第三种方法对应的代码，这次只用了12ms,9.1MB，话说感觉这种滑动窗口有点像快排...\n\n```C++\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int n=s.length();\n        //用来保存每个字符的下一个位置，用于出现重复字符的时候直接赋值给i\n        int cNum[128]={0};      \n        int max=0;\n        //i是第一个指针，j是第二个\n        for(int j=0,i=0;j<n;j++){\n            //如果不为0就是出现了和s[j]一样的字符，让i等于那个字符的后一个位置\n            if(cNum[s[j]]){\n                i = cNum[s[j]]>i?cNum[s[j]]:i;\n            }\n            //这里不管有没有重复字符都要更新max和cNum[s[j]]\n            //很明显，如果有，i已经被更新，相当于已经变成了没有重复字符的情形，位置也要更新\n            max=(j-i+1)>max?(j-i+1):max;\n            cNum[s[j]]=j+1;\n        }\n        return max;\n    }\n\n};\n```\n\n## Python Codes\n用时52ms，12.7MB\n\n```Python\nclass Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        cNum=dict()\n        res=0\n        start=0\n        for i in range(len(s)):\n            if s[i] in cNum:\n                start=max(start,cNum[s[i]])\n            res=max(res,i-start+1)\n            cNum[s[i]]=i+1\n        return res\n```\n\n## 总结\n总感觉自己想的太简单，优化还是有点难度的，这道题关键的就是一次遍历，用两个指针表示字符串，并且没有单独拿出字符串判断，而是用set或者map、dict这种方式记录当前子串的内容，用于判断是否有没有出现重复字符，优化的时候减少无用的遍历\n\n------\n","slug":"LeetCode-003-Longest-Substring-Without-Repeating-Characters","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjs7001oussb8hihw1ws","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><blockquote>\n<p>“abcabcbb” —-&gt; 3<br>“bbbbb” —-&gt; 1<br>“pwwkew” —-&gt; 3</p>\n</blockquote></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>第一反应下想到的也是暴力遍历，写一个判断有没有重复字符串的函数，然后遍历每个子串，时间复杂度是<script type=\"math/tex\">O(n^3)</script>，太高了，导致第一次提交没过，后面优化了下暴力法，过了。</li>\n<li>除了暴力，题解上给出了<strong>滑动窗口</strong>的解法，利用前后两个指针i,j 不断移动来遍历字符串以及子串，i,j中间的就是没有重复字符的,如果遇到重复字符，就把i自增，一直到没有重复字符为止（就是相当于找到和j处的相同字符的为止），时间复杂度是<script type=\"math/tex\">O(n)</script></li>\n<li>最后是优化的滑动窗口，先记录每个字符第一次出现的位置pos，然后第二次出现的时候，将第一个指针i直接变成pos+1</li>\n<li>对上面的优化还有一个技巧是利用整数数组代替Map，也可以用bitmap每一位表示一个字符数量</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>这是我优化过的暴力法，勉强过了，判断函数那边用了太大的数组，可以用bitmap降低空间复杂度</p>\n<p>用了72ms,20.1MB…僵硬</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//i是最大长度，j是每次遍历的起始位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;s.length();j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里让i直接从max开始，可以少一点没用的遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=max;i+j&lt;=s.length();i++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果有重复字符直接退出循环</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!judgeSubstring(s.substr(j,i))) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                max=i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judgeSubstring</span><span class=\"params\">(<span class=\"built_in\">string</span> substr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp[<span class=\"number\">128</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;substr.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果不是0就肯定有重复字符</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp[<span class=\"keyword\">int</span>(substr[i])])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            tmp[<span class=\"keyword\">int</span>(substr[i])]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>好了，这是第三种方法对应的代码，这次只用了12ms,9.1MB，话说感觉这种滑动窗口有点像快排…</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=s.length();</span><br><span class=\"line\">        <span class=\"comment\">//用来保存每个字符的下一个位置，用于出现重复字符的时候直接赋值给i</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cNum[<span class=\"number\">128</span>]=&#123;<span class=\"number\">0</span>&#125;;      </span><br><span class=\"line\">        <span class=\"keyword\">int</span> max=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//i是第一个指针，j是第二个</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>,i=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果不为0就是出现了和s[j]一样的字符，让i等于那个字符的后一个位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cNum[s[j]])&#123;</span><br><span class=\"line\">                i = cNum[s[j]]&gt;i?cNum[s[j]]:i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//这里不管有没有重复字符都要更新max和cNum[s[j]]</span></span><br><span class=\"line\">            <span class=\"comment\">//很明显，如果有，i已经被更新，相当于已经变成了没有重复字符的情形，位置也要更新</span></span><br><span class=\"line\">            max=(j-i+<span class=\"number\">1</span>)&gt;max?(j-i+<span class=\"number\">1</span>):max;</span><br><span class=\"line\">            cNum[s[j]]=j+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>用时52ms，12.7MB</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        cNum=dict()</span><br><span class=\"line\">        res=<span class=\"number\">0</span></span><br><span class=\"line\">        start=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i] <span class=\"keyword\">in</span> cNum:</span><br><span class=\"line\">                start=max(start,cNum[s[i]])</span><br><span class=\"line\">            res=max(res,i-start+<span class=\"number\">1</span>)</span><br><span class=\"line\">            cNum[s[i]]=i+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总感觉自己想的太简单，优化还是有点难度的，这道题关键的就是一次遍历，用两个指针表示字符串，并且没有单独拿出字符串判断，而是用set或者map、dict这种方式记录当前子串的内容，用于判断是否有没有出现重复字符，优化的时候减少无用的遍历</p>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><blockquote>\n<p>“abcabcbb” —-&gt; 3<br>“bbbbb” —-&gt; 1<br>“pwwkew” —-&gt; 3</p>\n</blockquote></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>第一反应下想到的也是暴力遍历，写一个判断有没有重复字符串的函数，然后遍历每个子串，时间复杂度是<script type=\"math/tex\">O(n^3)</script>，太高了，导致第一次提交没过，后面优化了下暴力法，过了。</li>\n<li>除了暴力，题解上给出了<strong>滑动窗口</strong>的解法，利用前后两个指针i,j 不断移动来遍历字符串以及子串，i,j中间的就是没有重复字符的,如果遇到重复字符，就把i自增，一直到没有重复字符为止（就是相当于找到和j处的相同字符的为止），时间复杂度是<script type=\"math/tex\">O(n)</script></li>\n<li>最后是优化的滑动窗口，先记录每个字符第一次出现的位置pos，然后第二次出现的时候，将第一个指针i直接变成pos+1</li>\n<li>对上面的优化还有一个技巧是利用整数数组代替Map，也可以用bitmap每一位表示一个字符数量</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>这是我优化过的暴力法，勉强过了，判断函数那边用了太大的数组，可以用bitmap降低空间复杂度</p>\n<p>用了72ms,20.1MB…僵硬</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//i是最大长度，j是每次遍历的起始位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;s.length();j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里让i直接从max开始，可以少一点没用的遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=max;i+j&lt;=s.length();i++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果有重复字符直接退出循环</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!judgeSubstring(s.substr(j,i))) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                max=i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judgeSubstring</span><span class=\"params\">(<span class=\"built_in\">string</span> substr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp[<span class=\"number\">128</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;substr.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果不是0就肯定有重复字符</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp[<span class=\"keyword\">int</span>(substr[i])])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            tmp[<span class=\"keyword\">int</span>(substr[i])]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>好了，这是第三种方法对应的代码，这次只用了12ms,9.1MB，话说感觉这种滑动窗口有点像快排…</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=s.length();</span><br><span class=\"line\">        <span class=\"comment\">//用来保存每个字符的下一个位置，用于出现重复字符的时候直接赋值给i</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cNum[<span class=\"number\">128</span>]=&#123;<span class=\"number\">0</span>&#125;;      </span><br><span class=\"line\">        <span class=\"keyword\">int</span> max=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//i是第一个指针，j是第二个</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>,i=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果不为0就是出现了和s[j]一样的字符，让i等于那个字符的后一个位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cNum[s[j]])&#123;</span><br><span class=\"line\">                i = cNum[s[j]]&gt;i?cNum[s[j]]:i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//这里不管有没有重复字符都要更新max和cNum[s[j]]</span></span><br><span class=\"line\">            <span class=\"comment\">//很明显，如果有，i已经被更新，相当于已经变成了没有重复字符的情形，位置也要更新</span></span><br><span class=\"line\">            max=(j-i+<span class=\"number\">1</span>)&gt;max?(j-i+<span class=\"number\">1</span>):max;</span><br><span class=\"line\">            cNum[s[j]]=j+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>用时52ms，12.7MB</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        cNum=dict()</span><br><span class=\"line\">        res=<span class=\"number\">0</span></span><br><span class=\"line\">        start=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i] <span class=\"keyword\">in</span> cNum:</span><br><span class=\"line\">                start=max(start,cNum[s[i]])</span><br><span class=\"line\">            res=max(res,i-start+<span class=\"number\">1</span>)</span><br><span class=\"line\">            cNum[s[i]]=i+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总感觉自己想的太简单，优化还是有点难度的，这道题关键的就是一次遍历，用两个指针表示字符串，并且没有单独拿出字符串判断，而是用set或者map、dict这种方式记录当前子串的内容，用于判断是否有没有出现重复字符，优化的时候减少无用的遍历</p>\n<hr>"},{"title":"LeetCode-004-Median of Two Sorted Arrays","comments":1,"mathjax":false,"date":"2019-04-13T17:48:43.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/median-of-two-sorted-arrays/)   \nThere are two sorted arrays nums1 and nums2 of size m and n respectively.\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\nYou may assume nums1 and nums2 cannot be both empty\n### Examples:\n> a = [1, 3], b = [2] ---> 2.0\n> a = [1, 2], b = [3, 4] ---> 2.5\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 刚开始是一点思路都么得...如果没有O(log (m+n))的限制，还能用遍历的方法找到，但是加了log，应该是要用二叉的\n- 题解里面给出了将两个数组，以i，j为分界，分为两部分:[0,i-1], [i,m-1], [0, j-1], [j,n-1]，使得左边的[0,i-1], [0,j-1] 全都小于右边的[i,m-1], [j,n-1]，利用中位数的意义\n- 前提要**确保m<=n**，这很重要！刚开始就弄反了导致一直找不到bug..\n- 同时配合二叉搜索，这时搜索的条件就变成了：如果左边的有大于右边的数，就缩小，如果右边的有小于左边的数，就扩大\n- 这里需要判断几个边界条件：i=0, j=0, i=m, j=n这四种\n\n\n## C++ Codes\n用时是36ms, 内存9.6MB\n\n```C++\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int m=nums1.size();\n        int n=nums2.size();\n        if(m>n){    //确保m<=n,不然会造成j可能是负数\n            nums1.swap(nums2);\n            int tmp=m; m=n; n=tmp;\n        }\n        \n        int imin=0,imax=m,half=(m+n+1)/2;\n        while(imin<=imax){\n            int i=(imin+imax)/2;\n            int j=half - i;\n            int maxLeft = 0, minRight=0;\n            \n            if(i<imax && nums2[j-1]>nums1[i]){  //i太小\n                imin = i+1;\n            } else if(i>imin && nums1[i-1]>nums2[j]){   //i太大\n                imax=i-1;\n            } else{\n                //maxleft = max(nums1[i-1],nums2[j-1]), i, j可能是0, i-1就可能为-1\n                if(i==0){ maxLeft=nums2[j-1];}\n                else if(j==0){ maxLeft = nums1[i-1];}\n                else { maxLeft = nums1[i-1]>nums2[j-1]?nums1[i-1]:nums2[j-1];}\n                \n                //如果是奇数个\n                if((m+n)%2){ return maxLeft;}\n                \n                //maxRight = max(nums1[i], nums2[j]), i, j可能是m和n，nums1[i]就会越界\n                if(i==m){ minRight=nums2[j];}\n                else if(j==n){ minRight = nums1[i];}\n                else { minRight=nums1[i]<nums2[j]?nums1[i]:nums2[j];}\n                \n                return (minRight+maxLeft)/2.0;\n            }\n        }\n        return 0;\n    }\n};\n\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m = len(nums1)\n        n = len(nums2)\n        if(m>n):\n            nums1,nums2,m,n = nums2,nums1,n,m\n    \n        # 整除\n        imin, imax, half = 0, m, (m+n+1)//2\n        while imin<=imax:\n            i = (imin+imax)//2;\n            j = half - i;\n            maxLeft = 0\n            minRight = 0\n            print(i,j)\n            if i<m and nums2[j-1]>nums1[i]:\n                imin = i+1\n            elif i>0 and nums1[i-1]>nums2[j]:\n                imax = i-1\n            else :\n                if i==0: maxLeft = nums2[j-1]\n                elif j==0: maxLeft = nums1[i-1]\n                else:\n                    maxLeft = max(nums2[j-1],nums1[i-1])\n                \n                if (m+n)%2==1: return maxLeft\n                \n                if i==m: minRight = nums2[j]\n                elif j==n: minRight = nums1[i]\n                else :\n                    minRight = min(nums1[i],nums2[j])\n                    \n                return (minRight+maxLeft)/2\n```\n\n## 总结\n- 对用到中位数的题目可以想想中位数的意义，搜索那个分界点，可以直接遍历分界点也可以二叉找，看时间复杂度。\n- 要注意前提是m<=n，不然会出错\n- 注意搜索时候变化条件，还有几个边界情况注意判断\n- while循环的条件这里是imin<=imax，等于的时候就是到叶子节点了\n- python这里居然只能用双斜线整除\n\n------\n","source":"_posts/LeetCode-004-Median-of-Two-Sorted-Arrays.md","raw":"---\ntitle: LeetCode-004-Median of Two Sorted Arrays\ntags:\n  - LeetCode\n  - Math\n  - Binary Search\n  - Array\n  - Hard\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-04-14 01:48:43\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/median-of-two-sorted-arrays/)   \nThere are two sorted arrays nums1 and nums2 of size m and n respectively.\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\nYou may assume nums1 and nums2 cannot be both empty\n### Examples:\n> a = [1, 3], b = [2] ---> 2.0\n> a = [1, 2], b = [3, 4] ---> 2.5\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 刚开始是一点思路都么得...如果没有O(log (m+n))的限制，还能用遍历的方法找到，但是加了log，应该是要用二叉的\n- 题解里面给出了将两个数组，以i，j为分界，分为两部分:[0,i-1], [i,m-1], [0, j-1], [j,n-1]，使得左边的[0,i-1], [0,j-1] 全都小于右边的[i,m-1], [j,n-1]，利用中位数的意义\n- 前提要**确保m<=n**，这很重要！刚开始就弄反了导致一直找不到bug..\n- 同时配合二叉搜索，这时搜索的条件就变成了：如果左边的有大于右边的数，就缩小，如果右边的有小于左边的数，就扩大\n- 这里需要判断几个边界条件：i=0, j=0, i=m, j=n这四种\n\n\n## C++ Codes\n用时是36ms, 内存9.6MB\n\n```C++\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int m=nums1.size();\n        int n=nums2.size();\n        if(m>n){    //确保m<=n,不然会造成j可能是负数\n            nums1.swap(nums2);\n            int tmp=m; m=n; n=tmp;\n        }\n        \n        int imin=0,imax=m,half=(m+n+1)/2;\n        while(imin<=imax){\n            int i=(imin+imax)/2;\n            int j=half - i;\n            int maxLeft = 0, minRight=0;\n            \n            if(i<imax && nums2[j-1]>nums1[i]){  //i太小\n                imin = i+1;\n            } else if(i>imin && nums1[i-1]>nums2[j]){   //i太大\n                imax=i-1;\n            } else{\n                //maxleft = max(nums1[i-1],nums2[j-1]), i, j可能是0, i-1就可能为-1\n                if(i==0){ maxLeft=nums2[j-1];}\n                else if(j==0){ maxLeft = nums1[i-1];}\n                else { maxLeft = nums1[i-1]>nums2[j-1]?nums1[i-1]:nums2[j-1];}\n                \n                //如果是奇数个\n                if((m+n)%2){ return maxLeft;}\n                \n                //maxRight = max(nums1[i], nums2[j]), i, j可能是m和n，nums1[i]就会越界\n                if(i==m){ minRight=nums2[j];}\n                else if(j==n){ minRight = nums1[i];}\n                else { minRight=nums1[i]<nums2[j]?nums1[i]:nums2[j];}\n                \n                return (minRight+maxLeft)/2.0;\n            }\n        }\n        return 0;\n    }\n};\n\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m = len(nums1)\n        n = len(nums2)\n        if(m>n):\n            nums1,nums2,m,n = nums2,nums1,n,m\n    \n        # 整除\n        imin, imax, half = 0, m, (m+n+1)//2\n        while imin<=imax:\n            i = (imin+imax)//2;\n            j = half - i;\n            maxLeft = 0\n            minRight = 0\n            print(i,j)\n            if i<m and nums2[j-1]>nums1[i]:\n                imin = i+1\n            elif i>0 and nums1[i-1]>nums2[j]:\n                imax = i-1\n            else :\n                if i==0: maxLeft = nums2[j-1]\n                elif j==0: maxLeft = nums1[i-1]\n                else:\n                    maxLeft = max(nums2[j-1],nums1[i-1])\n                \n                if (m+n)%2==1: return maxLeft\n                \n                if i==m: minRight = nums2[j]\n                elif j==n: minRight = nums1[i]\n                else :\n                    minRight = min(nums1[i],nums2[j])\n                    \n                return (minRight+maxLeft)/2\n```\n\n## 总结\n- 对用到中位数的题目可以想想中位数的意义，搜索那个分界点，可以直接遍历分界点也可以二叉找，看时间复杂度。\n- 要注意前提是m<=n，不然会出错\n- 注意搜索时候变化条件，还有几个边界情况注意判断\n- while循环的条件这里是imin<=imax，等于的时候就是到叶子节点了\n- python这里居然只能用双斜线整除\n\n------\n","slug":"LeetCode-004-Median-of-Two-Sorted-Arrays","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjs8001pussb17x1i83c","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>There are two sorted arrays nums1 and nums2 of size m and n respectively.<br>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).<br>You may assume nums1 and nums2 cannot be both empty</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><blockquote>\n<p>a = [1, 3], b = [2] —-&gt; 2.0<br>a = [1, 2], b = [3, 4] —-&gt; 2.5</p>\n</blockquote></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>刚开始是一点思路都么得…如果没有O(log (m+n))的限制，还能用遍历的方法找到，但是加了log，应该是要用二叉的</li>\n<li>题解里面给出了将两个数组，以i，j为分界，分为两部分:[0,i-1], [i,m-1], [0, j-1], [j,n-1]，使得左边的[0,i-1], [0,j-1] 全都小于右边的[i,m-1], [j,n-1]，利用中位数的意义</li>\n<li>前提要<strong>确保m&lt;=n</strong>，这很重要！刚开始就弄反了导致一直找不到bug..</li>\n<li>同时配合二叉搜索，这时搜索的条件就变成了：如果左边的有大于右边的数，就缩小，如果右边的有小于左边的数，就扩大</li>\n<li>这里需要判断几个边界条件：i=0, j=0, i=m, j=n这四种</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>用时是36ms, 内存9.6MB</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums1, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m=nums1.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=nums2.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m&gt;n)&#123;    <span class=\"comment\">//确保m&lt;=n,不然会造成j可能是负数</span></span><br><span class=\"line\">            nums1.swap(nums2);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp=m; m=n; n=tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> imin=<span class=\"number\">0</span>,imax=m,half=(m+n+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(imin&lt;=imax)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i=(imin+imax)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j=half - i;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> maxLeft = <span class=\"number\">0</span>, minRight=<span class=\"number\">0</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;imax &amp;&amp; nums2[j<span class=\"number\">-1</span>]&gt;nums1[i])&#123;  <span class=\"comment\">//i太小</span></span><br><span class=\"line\">                imin = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i&gt;imin &amp;&amp; nums1[i<span class=\"number\">-1</span>]&gt;nums2[j])&#123;   <span class=\"comment\">//i太大</span></span><br><span class=\"line\">                imax=i<span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//maxleft = max(nums1[i-1],nums2[j-1]), i, j可能是0, i-1就可能为-1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span>)&#123; maxLeft=nums2[j<span class=\"number\">-1</span>];&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span>)&#123; maxLeft = nums1[i<span class=\"number\">-1</span>];&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; maxLeft = nums1[i<span class=\"number\">-1</span>]&gt;nums2[j<span class=\"number\">-1</span>]?nums1[i<span class=\"number\">-1</span>]:nums2[j<span class=\"number\">-1</span>];&#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//如果是奇数个</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>((m+n)%<span class=\"number\">2</span>)&#123; <span class=\"keyword\">return</span> maxLeft;&#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//maxRight = max(nums1[i], nums2[j]), i, j可能是m和n，nums1[i]就会越界</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==m)&#123; minRight=nums2[j];&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==n)&#123; minRight = nums1[i];&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; minRight=nums1[i]&lt;nums2[j]?nums1[i]:nums2[j];&#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">return</span> (minRight+maxLeft)/<span class=\"number\">2.0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(self, nums1: List[int], nums2: List[int])</span> -&gt; float:</span></span><br><span class=\"line\">        m = len(nums1)</span><br><span class=\"line\">        n = len(nums2)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m&gt;n):</span><br><span class=\"line\">            nums1,nums2,m,n = nums2,nums1,n,m</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\"># 整除</span></span><br><span class=\"line\">        imin, imax, half = <span class=\"number\">0</span>, m, (m+n+<span class=\"number\">1</span>)//<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> imin&lt;=imax:</span><br><span class=\"line\">            i = (imin+imax)//<span class=\"number\">2</span>;</span><br><span class=\"line\">            j = half - i;</span><br><span class=\"line\">            maxLeft = <span class=\"number\">0</span></span><br><span class=\"line\">            minRight = <span class=\"number\">0</span></span><br><span class=\"line\">            print(i,j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i&lt;m <span class=\"keyword\">and</span> nums2[j<span class=\"number\">-1</span>]&gt;nums1[i]:</span><br><span class=\"line\">                imin = i+<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> nums1[i<span class=\"number\">-1</span>]&gt;nums2[j]:</span><br><span class=\"line\">                imax = i<span class=\"number\">-1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> :</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i==<span class=\"number\">0</span>: maxLeft = nums2[j<span class=\"number\">-1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> j==<span class=\"number\">0</span>: maxLeft = nums1[i<span class=\"number\">-1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    maxLeft = max(nums2[j<span class=\"number\">-1</span>],nums1[i<span class=\"number\">-1</span>])</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (m+n)%<span class=\"number\">2</span>==<span class=\"number\">1</span>: <span class=\"keyword\">return</span> maxLeft</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> i==m: minRight = nums2[j]</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> j==n: minRight = nums1[i]</span><br><span class=\"line\">                <span class=\"keyword\">else</span> :</span><br><span class=\"line\">                    minRight = min(nums1[i],nums2[j])</span><br><span class=\"line\">                    </span><br><span class=\"line\">                <span class=\"keyword\">return</span> (minRight+maxLeft)/<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>对用到中位数的题目可以想想中位数的意义，搜索那个分界点，可以直接遍历分界点也可以二叉找，看时间复杂度。</li>\n<li>要注意前提是m&lt;=n，不然会出错</li>\n<li>注意搜索时候变化条件，还有几个边界情况注意判断</li>\n<li>while循环的条件这里是imin&lt;=imax，等于的时候就是到叶子节点了</li>\n<li>python这里居然只能用双斜线整除</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>There are two sorted arrays nums1 and nums2 of size m and n respectively.<br>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).<br>You may assume nums1 and nums2 cannot be both empty</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><blockquote>\n<p>a = [1, 3], b = [2] —-&gt; 2.0<br>a = [1, 2], b = [3, 4] —-&gt; 2.5</p>\n</blockquote></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>刚开始是一点思路都么得…如果没有O(log (m+n))的限制，还能用遍历的方法找到，但是加了log，应该是要用二叉的</li>\n<li>题解里面给出了将两个数组，以i，j为分界，分为两部分:[0,i-1], [i,m-1], [0, j-1], [j,n-1]，使得左边的[0,i-1], [0,j-1] 全都小于右边的[i,m-1], [j,n-1]，利用中位数的意义</li>\n<li>前提要<strong>确保m&lt;=n</strong>，这很重要！刚开始就弄反了导致一直找不到bug..</li>\n<li>同时配合二叉搜索，这时搜索的条件就变成了：如果左边的有大于右边的数，就缩小，如果右边的有小于左边的数，就扩大</li>\n<li>这里需要判断几个边界条件：i=0, j=0, i=m, j=n这四种</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>用时是36ms, 内存9.6MB</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums1, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m=nums1.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=nums2.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m&gt;n)&#123;    <span class=\"comment\">//确保m&lt;=n,不然会造成j可能是负数</span></span><br><span class=\"line\">            nums1.swap(nums2);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp=m; m=n; n=tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> imin=<span class=\"number\">0</span>,imax=m,half=(m+n+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(imin&lt;=imax)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i=(imin+imax)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j=half - i;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> maxLeft = <span class=\"number\">0</span>, minRight=<span class=\"number\">0</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;imax &amp;&amp; nums2[j<span class=\"number\">-1</span>]&gt;nums1[i])&#123;  <span class=\"comment\">//i太小</span></span><br><span class=\"line\">                imin = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i&gt;imin &amp;&amp; nums1[i<span class=\"number\">-1</span>]&gt;nums2[j])&#123;   <span class=\"comment\">//i太大</span></span><br><span class=\"line\">                imax=i<span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//maxleft = max(nums1[i-1],nums2[j-1]), i, j可能是0, i-1就可能为-1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span>)&#123; maxLeft=nums2[j<span class=\"number\">-1</span>];&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span>)&#123; maxLeft = nums1[i<span class=\"number\">-1</span>];&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; maxLeft = nums1[i<span class=\"number\">-1</span>]&gt;nums2[j<span class=\"number\">-1</span>]?nums1[i<span class=\"number\">-1</span>]:nums2[j<span class=\"number\">-1</span>];&#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//如果是奇数个</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>((m+n)%<span class=\"number\">2</span>)&#123; <span class=\"keyword\">return</span> maxLeft;&#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//maxRight = max(nums1[i], nums2[j]), i, j可能是m和n，nums1[i]就会越界</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==m)&#123; minRight=nums2[j];&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==n)&#123; minRight = nums1[i];&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; minRight=nums1[i]&lt;nums2[j]?nums1[i]:nums2[j];&#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">return</span> (minRight+maxLeft)/<span class=\"number\">2.0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(self, nums1: List[int], nums2: List[int])</span> -&gt; float:</span></span><br><span class=\"line\">        m = len(nums1)</span><br><span class=\"line\">        n = len(nums2)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m&gt;n):</span><br><span class=\"line\">            nums1,nums2,m,n = nums2,nums1,n,m</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\"># 整除</span></span><br><span class=\"line\">        imin, imax, half = <span class=\"number\">0</span>, m, (m+n+<span class=\"number\">1</span>)//<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> imin&lt;=imax:</span><br><span class=\"line\">            i = (imin+imax)//<span class=\"number\">2</span>;</span><br><span class=\"line\">            j = half - i;</span><br><span class=\"line\">            maxLeft = <span class=\"number\">0</span></span><br><span class=\"line\">            minRight = <span class=\"number\">0</span></span><br><span class=\"line\">            print(i,j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i&lt;m <span class=\"keyword\">and</span> nums2[j<span class=\"number\">-1</span>]&gt;nums1[i]:</span><br><span class=\"line\">                imin = i+<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> nums1[i<span class=\"number\">-1</span>]&gt;nums2[j]:</span><br><span class=\"line\">                imax = i<span class=\"number\">-1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> :</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i==<span class=\"number\">0</span>: maxLeft = nums2[j<span class=\"number\">-1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> j==<span class=\"number\">0</span>: maxLeft = nums1[i<span class=\"number\">-1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    maxLeft = max(nums2[j<span class=\"number\">-1</span>],nums1[i<span class=\"number\">-1</span>])</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (m+n)%<span class=\"number\">2</span>==<span class=\"number\">1</span>: <span class=\"keyword\">return</span> maxLeft</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> i==m: minRight = nums2[j]</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> j==n: minRight = nums1[i]</span><br><span class=\"line\">                <span class=\"keyword\">else</span> :</span><br><span class=\"line\">                    minRight = min(nums1[i],nums2[j])</span><br><span class=\"line\">                    </span><br><span class=\"line\">                <span class=\"keyword\">return</span> (minRight+maxLeft)/<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>对用到中位数的题目可以想想中位数的意义，搜索那个分界点，可以直接遍历分界点也可以二叉找，看时间复杂度。</li>\n<li>要注意前提是m&lt;=n，不然会出错</li>\n<li>注意搜索时候变化条件，还有几个边界情况注意判断</li>\n<li>while循环的条件这里是imin&lt;=imax，等于的时候就是到叶子节点了</li>\n<li>python这里居然只能用双斜线整除</li>\n</ul>\n<hr>"},{"title":"LeetCode-005-Longest Palindromic Substring","comments":1,"mathjax":false,"date":"2019-04-14T13:22:07.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/longest-palindromic-substring/solution/)   \nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\n### Examples:\n> \"babad\" ---> \"bab\"\n> \"cbbd\" ---> \"bb\"\n{% endnote %}\n<!--more-->\n\n## Solutions\n- **暴力法**：首先想到的当然是暴力法...暴力大法好/斜眼笑\n- **遍历中心点暴力:**感觉直接暴力子串太幼稚，想了想可以遍历所有字串的中心点，于是产生了下面第一种解法，遍历每个下标，然后对子串是奇数个字符和偶数个字符分别查找最长子串，记录最长子串起始下标和长度，最后返回。时间复杂度是$$ O(n^2) $$\n- **动态规划: **看了题解，里面讲到了动态规划的解法，首先是有一个二维数组P[i, j]，用于保存i-j位置这段子串是不是回文，是就是true，不是就是false，初始化P中长度为1和2的子串，P[i-1, j+1]=True相当于：**P[i, j]==true && S[i-1]==S[j+1]**\n- **翻转字符串和原字符串比较：**:把字符串翻转，然后和原来的比较，找到最长的公共子串就是要的结果，这种方法有缺陷就是可能存在非回文子串的反向副本，改进的办法也很简单，就是比较找到的公共子串的索引是否和反向子串的原索引相同，不相同就可以排除了\n\n\n## C++ Codes\n遍历中心点法：用了32ms，8.8MB\n\n```C++\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        int maxLen = 1;\n        int pos = 0;\n        int n = s.length();\n        for(int i=0;i<n;i++){\n            //判断子串为奇数个字符时\n            int tmp = 1;\n            while(i-tmp>=0 && i+tmp<n && s[i-tmp]==s[i+tmp]){\n                if((2*tmp+1)>maxLen){\n                    maxLen = 2*tmp+1;\n                    pos = i-tmp;\n                }\n                tmp++;\n            }\n            \n            //断子串为偶数个字符时\n            tmp = 1;\n            while(i-tmp+1>=0 && i+tmp<n && s[i-tmp+1]==s[i+tmp] ){\n                if(2*tmp>maxLen){\n                    maxLen = 2*tmp;\n                    pos = i-tmp+1;\n                }\n                tmp++;\n            }\n        }    \n\n        return s.substr(pos,maxLen);\n    }\n};\n```\n\n动态规划版本：用了140ms，13.1MB\n\n```C++\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n = s.length();\n        if(n==0)return \"\";\n        \n        int p[n][n]={0};\n        int pos = 0;\n        int maxLen = 1;\n        \n        //初始化数组边界\n        for(int i=0;i<n-1;i++){\n            p[i][i]=1;\n            p[i][i+1]=s[i]==s[i+1]?1:0;\n            if(p[i][i+1]){\n                pos = i;\n                maxLen = 2;\n            }\n        }\n        p[n-1][n-1]=1;\n        \n        //动规循环\n        for(int i=2;i<n;i++){   //长度-1\n            for(int j=0;j+i<n;j++){   //起始下标\n                if( p[j+1][j+i-1]==1 && s[j]==s[j+i]){\n                    p[j][j+i]=1;\n                    if((i+1)>maxLen){\n                        maxLen = i+1;\n                        pos = j;\n                    }\n                }\n            }\n        }\n        return s.substr(pos,maxLen);\n    }\n};\n```\n\n## 总结\n- 算法题要注意边界问题，遍历的时候别下标越界\n- C++中数组要注意初始化，不会像java那样有默认值\n- 动态规划注意初始化边界\n- 暴力的时候注意子串长度还可以是偶数\n\n------\n","source":"_posts/LeetCode-005-Longest-Palindromic-Substring.md","raw":"---\ntitle: LeetCode-005-Longest Palindromic Substring\ntags:\n  - LeetCode\n  - Medium\n  - Math\n  - String\n  - Palindromic\n  - DP\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-04-14 21:22:07\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/longest-palindromic-substring/solution/)   \nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\n### Examples:\n> \"babad\" ---> \"bab\"\n> \"cbbd\" ---> \"bb\"\n{% endnote %}\n<!--more-->\n\n## Solutions\n- **暴力法**：首先想到的当然是暴力法...暴力大法好/斜眼笑\n- **遍历中心点暴力:**感觉直接暴力子串太幼稚，想了想可以遍历所有字串的中心点，于是产生了下面第一种解法，遍历每个下标，然后对子串是奇数个字符和偶数个字符分别查找最长子串，记录最长子串起始下标和长度，最后返回。时间复杂度是$$ O(n^2) $$\n- **动态规划: **看了题解，里面讲到了动态规划的解法，首先是有一个二维数组P[i, j]，用于保存i-j位置这段子串是不是回文，是就是true，不是就是false，初始化P中长度为1和2的子串，P[i-1, j+1]=True相当于：**P[i, j]==true && S[i-1]==S[j+1]**\n- **翻转字符串和原字符串比较：**:把字符串翻转，然后和原来的比较，找到最长的公共子串就是要的结果，这种方法有缺陷就是可能存在非回文子串的反向副本，改进的办法也很简单，就是比较找到的公共子串的索引是否和反向子串的原索引相同，不相同就可以排除了\n\n\n## C++ Codes\n遍历中心点法：用了32ms，8.8MB\n\n```C++\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        int maxLen = 1;\n        int pos = 0;\n        int n = s.length();\n        for(int i=0;i<n;i++){\n            //判断子串为奇数个字符时\n            int tmp = 1;\n            while(i-tmp>=0 && i+tmp<n && s[i-tmp]==s[i+tmp]){\n                if((2*tmp+1)>maxLen){\n                    maxLen = 2*tmp+1;\n                    pos = i-tmp;\n                }\n                tmp++;\n            }\n            \n            //断子串为偶数个字符时\n            tmp = 1;\n            while(i-tmp+1>=0 && i+tmp<n && s[i-tmp+1]==s[i+tmp] ){\n                if(2*tmp>maxLen){\n                    maxLen = 2*tmp;\n                    pos = i-tmp+1;\n                }\n                tmp++;\n            }\n        }    \n\n        return s.substr(pos,maxLen);\n    }\n};\n```\n\n动态规划版本：用了140ms，13.1MB\n\n```C++\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n = s.length();\n        if(n==0)return \"\";\n        \n        int p[n][n]={0};\n        int pos = 0;\n        int maxLen = 1;\n        \n        //初始化数组边界\n        for(int i=0;i<n-1;i++){\n            p[i][i]=1;\n            p[i][i+1]=s[i]==s[i+1]?1:0;\n            if(p[i][i+1]){\n                pos = i;\n                maxLen = 2;\n            }\n        }\n        p[n-1][n-1]=1;\n        \n        //动规循环\n        for(int i=2;i<n;i++){   //长度-1\n            for(int j=0;j+i<n;j++){   //起始下标\n                if( p[j+1][j+i-1]==1 && s[j]==s[j+i]){\n                    p[j][j+i]=1;\n                    if((i+1)>maxLen){\n                        maxLen = i+1;\n                        pos = j;\n                    }\n                }\n            }\n        }\n        return s.substr(pos,maxLen);\n    }\n};\n```\n\n## 总结\n- 算法题要注意边界问题，遍历的时候别下标越界\n- C++中数组要注意初始化，不会像java那样有默认值\n- 动态规划注意初始化边界\n- 暴力的时候注意子串长度还可以是偶数\n\n------\n","slug":"LeetCode-005-Longest-Palindromic-Substring","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjse001russbz9n20krz","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/longest-palindromic-substring/solution/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><blockquote>\n<p>“babad” —-&gt; “bab”<br>“cbbd” —-&gt; “bb”</p>\n</blockquote></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li><strong>暴力法</strong>：首先想到的当然是暴力法…暴力大法好/斜眼笑</li>\n<li><strong>遍历中心点暴力:</strong>感觉直接暴力子串太幼稚，想了想可以遍历所有字串的中心点，于是产生了下面第一种解法，遍历每个下标，然后对子串是奇数个字符和偶数个字符分别查找最长子串，记录最长子串起始下标和长度，最后返回。时间复杂度是<script type=\"math/tex\">O(n^2)</script></li>\n<li><strong>动态规划: </strong>看了题解，里面讲到了动态规划的解法，首先是有一个二维数组P[i, j]，用于保存i-j位置这段子串是不是回文，是就是true，不是就是false，初始化P中长度为1和2的子串，P[i-1, j+1]=True相当于：<strong>P[i, j]==true &amp;&amp; S[i-1]==S[j+1]</strong></li>\n<li><strong>翻转字符串和原字符串比较：</strong>:把字符串翻转，然后和原来的比较，找到最长的公共子串就是要的结果，这种方法有缺陷就是可能存在非回文子串的反向副本，改进的办法也很简单，就是比较找到的公共子串的索引是否和反向子串的原索引相同，不相同就可以排除了</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>遍历中心点法：用了32ms，8.8MB</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxLen = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断子串为奇数个字符时</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i-tmp&gt;=<span class=\"number\">0</span> &amp;&amp; i+tmp&lt;n &amp;&amp; s[i-tmp]==s[i+tmp])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((<span class=\"number\">2</span>*tmp+<span class=\"number\">1</span>)&gt;maxLen)&#123;</span><br><span class=\"line\">                    maxLen = <span class=\"number\">2</span>*tmp+<span class=\"number\">1</span>;</span><br><span class=\"line\">                    pos = i-tmp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tmp++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//断子串为偶数个字符时</span></span><br><span class=\"line\">            tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i-tmp+<span class=\"number\">1</span>&gt;=<span class=\"number\">0</span> &amp;&amp; i+tmp&lt;n &amp;&amp; s[i-tmp+<span class=\"number\">1</span>]==s[i+tmp] )&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"number\">2</span>*tmp&gt;maxLen)&#123;</span><br><span class=\"line\">                    maxLen = <span class=\"number\">2</span>*tmp;</span><br><span class=\"line\">                    pos = i-tmp+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tmp++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.substr(pos,maxLen);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>动态规划版本：用了140ms，13.1MB</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> p[n][n]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxLen = <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//初始化数组边界</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">            p[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            p[i][i+<span class=\"number\">1</span>]=s[i]==s[i+<span class=\"number\">1</span>]?<span class=\"number\">1</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p[i][i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                pos = i;</span><br><span class=\"line\">                maxLen = <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p[n<span class=\"number\">-1</span>][n<span class=\"number\">-1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//动规循环</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;n;i++)&#123;   <span class=\"comment\">//长度-1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j+i&lt;n;j++)&#123;   <span class=\"comment\">//起始下标</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>( p[j+<span class=\"number\">1</span>][j+i<span class=\"number\">-1</span>]==<span class=\"number\">1</span> &amp;&amp; s[j]==s[j+i])&#123;</span><br><span class=\"line\">                    p[j][j+i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((i+<span class=\"number\">1</span>)&gt;maxLen)&#123;</span><br><span class=\"line\">                        maxLen = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">                        pos = j;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.substr(pos,maxLen);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>算法题要注意边界问题，遍历的时候别下标越界</li>\n<li>C++中数组要注意初始化，不会像java那样有默认值</li>\n<li>动态规划注意初始化边界</li>\n<li>暴力的时候注意子串长度还可以是偶数</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/longest-palindromic-substring/solution/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><blockquote>\n<p>“babad” —-&gt; “bab”<br>“cbbd” —-&gt; “bb”</p>\n</blockquote></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li><strong>暴力法</strong>：首先想到的当然是暴力法…暴力大法好/斜眼笑</li>\n<li><strong>遍历中心点暴力:</strong>感觉直接暴力子串太幼稚，想了想可以遍历所有字串的中心点，于是产生了下面第一种解法，遍历每个下标，然后对子串是奇数个字符和偶数个字符分别查找最长子串，记录最长子串起始下标和长度，最后返回。时间复杂度是<script type=\"math/tex\">O(n^2)</script></li>\n<li><strong>动态规划: </strong>看了题解，里面讲到了动态规划的解法，首先是有一个二维数组P[i, j]，用于保存i-j位置这段子串是不是回文，是就是true，不是就是false，初始化P中长度为1和2的子串，P[i-1, j+1]=True相当于：<strong>P[i, j]==true &amp;&amp; S[i-1]==S[j+1]</strong></li>\n<li><strong>翻转字符串和原字符串比较：</strong>:把字符串翻转，然后和原来的比较，找到最长的公共子串就是要的结果，这种方法有缺陷就是可能存在非回文子串的反向副本，改进的办法也很简单，就是比较找到的公共子串的索引是否和反向子串的原索引相同，不相同就可以排除了</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>遍历中心点法：用了32ms，8.8MB</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxLen = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断子串为奇数个字符时</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i-tmp&gt;=<span class=\"number\">0</span> &amp;&amp; i+tmp&lt;n &amp;&amp; s[i-tmp]==s[i+tmp])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((<span class=\"number\">2</span>*tmp+<span class=\"number\">1</span>)&gt;maxLen)&#123;</span><br><span class=\"line\">                    maxLen = <span class=\"number\">2</span>*tmp+<span class=\"number\">1</span>;</span><br><span class=\"line\">                    pos = i-tmp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tmp++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//断子串为偶数个字符时</span></span><br><span class=\"line\">            tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i-tmp+<span class=\"number\">1</span>&gt;=<span class=\"number\">0</span> &amp;&amp; i+tmp&lt;n &amp;&amp; s[i-tmp+<span class=\"number\">1</span>]==s[i+tmp] )&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"number\">2</span>*tmp&gt;maxLen)&#123;</span><br><span class=\"line\">                    maxLen = <span class=\"number\">2</span>*tmp;</span><br><span class=\"line\">                    pos = i-tmp+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tmp++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.substr(pos,maxLen);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>动态规划版本：用了140ms，13.1MB</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> p[n][n]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxLen = <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//初始化数组边界</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">            p[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            p[i][i+<span class=\"number\">1</span>]=s[i]==s[i+<span class=\"number\">1</span>]?<span class=\"number\">1</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p[i][i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                pos = i;</span><br><span class=\"line\">                maxLen = <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p[n<span class=\"number\">-1</span>][n<span class=\"number\">-1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//动规循环</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;n;i++)&#123;   <span class=\"comment\">//长度-1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j+i&lt;n;j++)&#123;   <span class=\"comment\">//起始下标</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>( p[j+<span class=\"number\">1</span>][j+i<span class=\"number\">-1</span>]==<span class=\"number\">1</span> &amp;&amp; s[j]==s[j+i])&#123;</span><br><span class=\"line\">                    p[j][j+i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((i+<span class=\"number\">1</span>)&gt;maxLen)&#123;</span><br><span class=\"line\">                        maxLen = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">                        pos = j;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.substr(pos,maxLen);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>算法题要注意边界问题，遍历的时候别下标越界</li>\n<li>C++中数组要注意初始化，不会像java那样有默认值</li>\n<li>动态规划注意初始化边界</li>\n<li>暴力的时候注意子串长度还可以是偶数</li>\n</ul>\n<hr>"},{"title":"LeetCode-006-ZigZag Conversion","comments":1,"mathjax":false,"date":"2019-04-15T12:47:37.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/zigzag-conversion/submissions/)   \nThe string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n> P   A   H   N\n> A P L S I I G\n> Y   I   R  \n\nAnd then read line by line: **\"PAHNAPLSIIGYIR\"**\nWrite the code that will take a string and make this conversion given a number of rows:   \n> string convert(string s, int numRows);\n{% endnote %}\n<!--more-->\n{% note info %}\n### Examples:\n**Input:** s = \"PAYPALISHIRING\", numRows = 3\n**Output:** \"PAHNAPLSIIGYIR\"\n\n**Input:** s = \"PAYPALISHIRING\", numRows = 4\n**Output:** \"PINALSIGYAHRPI\"\n**Explanation:**\n> P     I    N\n> A   L S  I G\n> Y A   H R\n> P     I\n{% endnote %}\n\n## Solutions\n- 想到的是用数学方法，遍历每一行，然后计算每一行字符的位置，逐个添加进去，是题解的第二种方法。每行的字符位置都满足一个数列，所以可以很简单的计算出来。时间复杂度是$$ O(n) $$.\n- 题解还给了一种方法是按行排序，每一行建一个字符串，从左向右迭代源字符串，判断每个字符是属于哪一行，然后加到那一行的字符串上，最后对每行字符串拼接，原理感觉和上一种方法差不多。时间复杂度也是$$ O(n) $$  \n\n## C++ Codes\n自己想到的解法，用时12ms，内存10.2MB，超过99.51%感觉还是挺快的。\n```C++\nclass Solution {\npublic:\n    string convert(string s, int numRows) {\n        int len = s.length();\n        int num = ceil(len*1.0/numRows);\n        string res = \"\";\n        int d = 2*numRows-2;\n\n        if(numRows==1)return s;\n        for(int i=0;i<numRows;i++){   //遍历行\n            for(int j=1;j<=num;j++){    //遍历每个Z\n                if(i==0 && (j-1)*d<len){  //第一行\n                    res+=s[(j-1)*d];\n                } else if(i==(numRows-1) && ((j-1)*d+numRows-1)<len){ //最后一行\n                    res+=s[(j-1)*d+numRows-1];\n                } else{ //其余行\n                        if((j-1)*d+i<len)\n                            res+=s[(j-1)*d+i];\n                        if(j*d-i<len)\n                            res+=s[j*d-i];\n                }\n            }\n        }\n        return res;\n    }\n};\n```\n\n第二种遍历每个字符的解法:测试是20ms，12.6MB\n```C++\nclass Solution {\npublic:\n    string convert(string s, int numRows) {\n\n        if (numRows == 1) return s;\n\n        vector<string> rows(min(numRows, int(s.size())));\n        int curRow = 0;\n        bool goingDown = false;\n\n        for (char c : s) {\n            rows[curRow] += c;\n            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;\n            curRow += goingDown ? 1 : -1;\n        }\n\n        string ret;\n        for (string row : rows) ret += row;\n        return ret;\n    }\n};\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        slen = len(s)\n        num = math.ceil(slen/numRows);\n        res = \"\"\n        d = 2*numRows-2\n        \n        if numRows==1:\n            return s\n        for i in range(numRows):\n            for j in range(1,num+1):\n                if i==0 and (j-1)*d<slen:\n                    res = res + s[(j-1)*d]\n                elif i==numRows-1 and (j-1)*d+numRows-1<slen:\n                    res = res + s[(j-1)*d+numRows-1]\n                else :\n                    if (j-1)*d+i<slen:\n                        res = res + s[(j-1)*d+i]\n                    if(j*d-i<slen):\n                        res = res + s[j*d-i]\n                        \n        return res;\n```\n\n## 总结\n- 很多题目可以直接从数学角度着手，会很方便\n- 暴力法在很多时候都有用啊，时间复杂度不够再优化下说不定就过了\n\n\n------\n","source":"_posts/LeetCode-006-ZigZag-Conversion.md","raw":"---\ntitle: LeetCode-006-ZigZag Conversion\ntags:\n  - LeetCode\n  - Medium\n  - Math\n  - String\n  - Split\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-04-15 20:47:37\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/zigzag-conversion/submissions/)   \nThe string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n> P   A   H   N\n> A P L S I I G\n> Y   I   R  \n\nAnd then read line by line: **\"PAHNAPLSIIGYIR\"**\nWrite the code that will take a string and make this conversion given a number of rows:   \n> string convert(string s, int numRows);\n{% endnote %}\n<!--more-->\n{% note info %}\n### Examples:\n**Input:** s = \"PAYPALISHIRING\", numRows = 3\n**Output:** \"PAHNAPLSIIGYIR\"\n\n**Input:** s = \"PAYPALISHIRING\", numRows = 4\n**Output:** \"PINALSIGYAHRPI\"\n**Explanation:**\n> P     I    N\n> A   L S  I G\n> Y A   H R\n> P     I\n{% endnote %}\n\n## Solutions\n- 想到的是用数学方法，遍历每一行，然后计算每一行字符的位置，逐个添加进去，是题解的第二种方法。每行的字符位置都满足一个数列，所以可以很简单的计算出来。时间复杂度是$$ O(n) $$.\n- 题解还给了一种方法是按行排序，每一行建一个字符串，从左向右迭代源字符串，判断每个字符是属于哪一行，然后加到那一行的字符串上，最后对每行字符串拼接，原理感觉和上一种方法差不多。时间复杂度也是$$ O(n) $$  \n\n## C++ Codes\n自己想到的解法，用时12ms，内存10.2MB，超过99.51%感觉还是挺快的。\n```C++\nclass Solution {\npublic:\n    string convert(string s, int numRows) {\n        int len = s.length();\n        int num = ceil(len*1.0/numRows);\n        string res = \"\";\n        int d = 2*numRows-2;\n\n        if(numRows==1)return s;\n        for(int i=0;i<numRows;i++){   //遍历行\n            for(int j=1;j<=num;j++){    //遍历每个Z\n                if(i==0 && (j-1)*d<len){  //第一行\n                    res+=s[(j-1)*d];\n                } else if(i==(numRows-1) && ((j-1)*d+numRows-1)<len){ //最后一行\n                    res+=s[(j-1)*d+numRows-1];\n                } else{ //其余行\n                        if((j-1)*d+i<len)\n                            res+=s[(j-1)*d+i];\n                        if(j*d-i<len)\n                            res+=s[j*d-i];\n                }\n            }\n        }\n        return res;\n    }\n};\n```\n\n第二种遍历每个字符的解法:测试是20ms，12.6MB\n```C++\nclass Solution {\npublic:\n    string convert(string s, int numRows) {\n\n        if (numRows == 1) return s;\n\n        vector<string> rows(min(numRows, int(s.size())));\n        int curRow = 0;\n        bool goingDown = false;\n\n        for (char c : s) {\n            rows[curRow] += c;\n            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;\n            curRow += goingDown ? 1 : -1;\n        }\n\n        string ret;\n        for (string row : rows) ret += row;\n        return ret;\n    }\n};\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        slen = len(s)\n        num = math.ceil(slen/numRows);\n        res = \"\"\n        d = 2*numRows-2\n        \n        if numRows==1:\n            return s\n        for i in range(numRows):\n            for j in range(1,num+1):\n                if i==0 and (j-1)*d<slen:\n                    res = res + s[(j-1)*d]\n                elif i==numRows-1 and (j-1)*d+numRows-1<slen:\n                    res = res + s[(j-1)*d+numRows-1]\n                else :\n                    if (j-1)*d+i<slen:\n                        res = res + s[(j-1)*d+i]\n                    if(j*d-i<slen):\n                        res = res + s[j*d-i]\n                        \n        return res;\n```\n\n## 总结\n- 很多题目可以直接从数学角度着手，会很方便\n- 暴力法在很多时候都有用啊，时间复杂度不够再优化下说不定就过了\n\n\n------\n","slug":"LeetCode-006-ZigZag-Conversion","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjsj001tussb449a6u1d","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/zigzag-conversion/submissions/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n<blockquote>\n<p>P   A   H   N<br>A P L S I I G<br>Y   I   R  </p>\n</blockquote>\n<p>And then read line by line: <strong>“PAHNAPLSIIGYIR”</strong><br>Write the code that will take a string and make this conversion given a number of rows:   </p>\n<blockquote>\n<p>string convert(string s, int numRows);</p>\n</blockquote></div>\n<a id=\"more\"></a>\n<div class=\"note info\"><h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong> s = “PAYPALISHIRING”, numRows = 3<br><strong>Output:</strong> “PAHNAPLSIIGYIR”</p>\n<p><strong>Input:</strong> s = “PAYPALISHIRING”, numRows = 4<br><strong>Output:</strong> “PINALSIGYAHRPI”<br><strong>Explanation:</strong></p>\n<blockquote>\n<p>P     I    N<br>A   L S  I G<br>Y A   H R<br>P     I</p>\n</blockquote></div>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>想到的是用数学方法，遍历每一行，然后计算每一行字符的位置，逐个添加进去，是题解的第二种方法。每行的字符位置都满足一个数列，所以可以很简单的计算出来。时间复杂度是<script type=\"math/tex\">O(n)</script>.</li>\n<li>题解还给了一种方法是按行排序，每一行建一个字符串，从左向右迭代源字符串，判断每个字符是属于哪一行，然后加到那一行的字符串上，最后对每行字符串拼接，原理感觉和上一种方法差不多。时间复杂度也是<script type=\"math/tex\">O(n)</script>  </li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>自己想到的解法，用时12ms，内存10.2MB，超过99.51%感觉还是挺快的。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">convert</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> numRows)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"built_in\">ceil</span>(len*<span class=\"number\">1.0</span>/numRows);</span><br><span class=\"line\">        <span class=\"built_in\">string</span> res = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d = <span class=\"number\">2</span>*numRows<span class=\"number\">-2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numRows==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;numRows;i++)&#123;   <span class=\"comment\">//遍历行</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=num;j++)&#123;    <span class=\"comment\">//遍历每个Z</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span> &amp;&amp; (j<span class=\"number\">-1</span>)*d&lt;len)&#123;  <span class=\"comment\">//第一行</span></span><br><span class=\"line\">                    res+=s[(j<span class=\"number\">-1</span>)*d];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i==(numRows<span class=\"number\">-1</span>) &amp;&amp; ((j<span class=\"number\">-1</span>)*d+numRows<span class=\"number\">-1</span>)&lt;len)&#123; <span class=\"comment\">//最后一行</span></span><br><span class=\"line\">                    res+=s[(j<span class=\"number\">-1</span>)*d+numRows<span class=\"number\">-1</span>];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span>&#123; <span class=\"comment\">//其余行</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>((j<span class=\"number\">-1</span>)*d+i&lt;len)</span><br><span class=\"line\">                            res+=s[(j<span class=\"number\">-1</span>)*d+i];</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(j*d-i&lt;len)</span><br><span class=\"line\">                            res+=s[j*d-i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>第二种遍历每个字符的解法:测试是20ms，12.6MB<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">convert</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> numRows)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numRows == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; rows(min(numRows, <span class=\"keyword\">int</span>(s.size())));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> curRow = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> goingDown = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : s) &#123;</span><br><span class=\"line\">            rows[curRow] += c;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curRow == <span class=\"number\">0</span> || curRow == numRows - <span class=\"number\">1</span>) goingDown = !goingDown;</span><br><span class=\"line\">            curRow += goingDown ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">string</span> ret;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">string</span> row : rows) ret += row;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convert</span><span class=\"params\">(self, s: str, numRows: int)</span> -&gt; str:</span></span><br><span class=\"line\">        slen = len(s)</span><br><span class=\"line\">        num = math.ceil(slen/numRows);</span><br><span class=\"line\">        res = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        d = <span class=\"number\">2</span>*numRows<span class=\"number\">-2</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> numRows==<span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numRows):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,num+<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i==<span class=\"number\">0</span> <span class=\"keyword\">and</span> (j<span class=\"number\">-1</span>)*d&lt;slen:</span><br><span class=\"line\">                    res = res + s[(j<span class=\"number\">-1</span>)*d]</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> i==numRows<span class=\"number\">-1</span> <span class=\"keyword\">and</span> (j<span class=\"number\">-1</span>)*d+numRows<span class=\"number\">-1</span>&lt;slen:</span><br><span class=\"line\">                    res = res + s[(j<span class=\"number\">-1</span>)*d+numRows<span class=\"number\">-1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">else</span> :</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (j<span class=\"number\">-1</span>)*d+i&lt;slen:</span><br><span class=\"line\">                        res = res + s[(j<span class=\"number\">-1</span>)*d+i]</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(j*d-i&lt;slen):</span><br><span class=\"line\">                        res = res + s[j*d-i]</span><br><span class=\"line\">                        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>很多题目可以直接从数学角度着手，会很方便</li>\n<li>暴力法在很多时候都有用啊，时间复杂度不够再优化下说不定就过了</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/zigzag-conversion/submissions/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n<blockquote>\n<p>P   A   H   N<br>A P L S I I G<br>Y   I   R  </p>\n</blockquote>\n<p>And then read line by line: <strong>“PAHNAPLSIIGYIR”</strong><br>Write the code that will take a string and make this conversion given a number of rows:   </p>\n<blockquote>\n<p>string convert(string s, int numRows);</p>\n</blockquote></div>","more":"<div class=\"note info\"><h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong> s = “PAYPALISHIRING”, numRows = 3<br><strong>Output:</strong> “PAHNAPLSIIGYIR”</p>\n<p><strong>Input:</strong> s = “PAYPALISHIRING”, numRows = 4<br><strong>Output:</strong> “PINALSIGYAHRPI”<br><strong>Explanation:</strong></p>\n<blockquote>\n<p>P     I    N<br>A   L S  I G<br>Y A   H R<br>P     I</p>\n</blockquote></div>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>想到的是用数学方法，遍历每一行，然后计算每一行字符的位置，逐个添加进去，是题解的第二种方法。每行的字符位置都满足一个数列，所以可以很简单的计算出来。时间复杂度是<script type=\"math/tex\">O(n)</script>.</li>\n<li>题解还给了一种方法是按行排序，每一行建一个字符串，从左向右迭代源字符串，判断每个字符是属于哪一行，然后加到那一行的字符串上，最后对每行字符串拼接，原理感觉和上一种方法差不多。时间复杂度也是<script type=\"math/tex\">O(n)</script>  </li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>自己想到的解法，用时12ms，内存10.2MB，超过99.51%感觉还是挺快的。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">convert</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> numRows)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"built_in\">ceil</span>(len*<span class=\"number\">1.0</span>/numRows);</span><br><span class=\"line\">        <span class=\"built_in\">string</span> res = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d = <span class=\"number\">2</span>*numRows<span class=\"number\">-2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numRows==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;numRows;i++)&#123;   <span class=\"comment\">//遍历行</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=num;j++)&#123;    <span class=\"comment\">//遍历每个Z</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span> &amp;&amp; (j<span class=\"number\">-1</span>)*d&lt;len)&#123;  <span class=\"comment\">//第一行</span></span><br><span class=\"line\">                    res+=s[(j<span class=\"number\">-1</span>)*d];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i==(numRows<span class=\"number\">-1</span>) &amp;&amp; ((j<span class=\"number\">-1</span>)*d+numRows<span class=\"number\">-1</span>)&lt;len)&#123; <span class=\"comment\">//最后一行</span></span><br><span class=\"line\">                    res+=s[(j<span class=\"number\">-1</span>)*d+numRows<span class=\"number\">-1</span>];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span>&#123; <span class=\"comment\">//其余行</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>((j<span class=\"number\">-1</span>)*d+i&lt;len)</span><br><span class=\"line\">                            res+=s[(j<span class=\"number\">-1</span>)*d+i];</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(j*d-i&lt;len)</span><br><span class=\"line\">                            res+=s[j*d-i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>第二种遍历每个字符的解法:测试是20ms，12.6MB<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">convert</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> numRows)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numRows == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; rows(min(numRows, <span class=\"keyword\">int</span>(s.size())));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> curRow = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> goingDown = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : s) &#123;</span><br><span class=\"line\">            rows[curRow] += c;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curRow == <span class=\"number\">0</span> || curRow == numRows - <span class=\"number\">1</span>) goingDown = !goingDown;</span><br><span class=\"line\">            curRow += goingDown ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">string</span> ret;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">string</span> row : rows) ret += row;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convert</span><span class=\"params\">(self, s: str, numRows: int)</span> -&gt; str:</span></span><br><span class=\"line\">        slen = len(s)</span><br><span class=\"line\">        num = math.ceil(slen/numRows);</span><br><span class=\"line\">        res = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        d = <span class=\"number\">2</span>*numRows<span class=\"number\">-2</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> numRows==<span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numRows):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,num+<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i==<span class=\"number\">0</span> <span class=\"keyword\">and</span> (j<span class=\"number\">-1</span>)*d&lt;slen:</span><br><span class=\"line\">                    res = res + s[(j<span class=\"number\">-1</span>)*d]</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> i==numRows<span class=\"number\">-1</span> <span class=\"keyword\">and</span> (j<span class=\"number\">-1</span>)*d+numRows<span class=\"number\">-1</span>&lt;slen:</span><br><span class=\"line\">                    res = res + s[(j<span class=\"number\">-1</span>)*d+numRows<span class=\"number\">-1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">else</span> :</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (j<span class=\"number\">-1</span>)*d+i&lt;slen:</span><br><span class=\"line\">                        res = res + s[(j<span class=\"number\">-1</span>)*d+i]</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(j*d-i&lt;slen):</span><br><span class=\"line\">                        res = res + s[j*d-i]</span><br><span class=\"line\">                        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>很多题目可以直接从数学角度着手，会很方便</li>\n<li>暴力法在很多时候都有用啊，时间复杂度不够再优化下说不定就过了</li>\n</ul>\n<hr>"},{"title":"LeetCode-007-Reverse Integer","comments":1,"mathjax":false,"date":"2019-04-16T14:07:29.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/reverse-integer/)   \nGiven a 32-bit signed integer, reverse digits of an integer.\n\n### Examples:\n**Input:**123\n**Output:**321\n**Input:**-123\n**Output:**-321\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 用字符串的方法，先将输入转换成字符串，然后判断第一个字符是不是‘-’，是就加到结果字符串上，最后逆序添加字符到结果字符串上，再将字符串转换成长整数，return之前判断是否有溢出\n- 题解的办法是用取模的方法获取每一位之后再加到结果上，遍历一遍，但是这种方法在计算结果时容易溢出，要事先检查\n\n\n## C++ Codes\n我的字符串方法，4ms，8.3MB\n```C++\nclass Solution {\npublic:\n    int reverse(int x) {\n        string str = to_string(x);\n        string res=\"\";\n        if(str[0]=='-'){\n            str = str.substr(1,str.length());\n            res+='-';\n        }\n        for(int i =0;i<str.length();i++){\n            res+=str[str.length()-1-i];\n        }\n        long tmp =  atol(res.c_str());\n        if(tmp>pow(2,31)-1 || tmp<pow(2,31)*(-1)){\n            return 0;\n        }\n        return (int)tmp;\n    }\n};\n```\n\n题解的数学方法，8ms，8.3MB\n```C++\nclass Solution {\npublic:\n    int reverse(int x) {\n        int rev = 0;\n        while (x != 0) {\n            int pop = x % 10;\n            x /= 10;\n            if (rev > INT_MAX/10 || (rev == INT_MAX / 10 && pop > 7)) return 0;\n            if (rev < INT_MIN/10 || (rev == INT_MIN / 10 && pop < -8)) return 0;\n            rev = rev * 10 + pop;\n        }\n        return rev;\n    }\n};\n```\n\n## Python Codes\nPython的和第一种方法一样做，差别不大\n\n## 总结\n- C++中int型最大最小可以用<limits.h>中的INT_MAX和INT_MIN表示，分别是$$ 2^31=2147483647 $$和$$ -2^31-1=-2147483648 $$\n- C++中有atoi(),atol(),c_str(),to_string()这几种方法，分别是字符串转int，字符串转long，字符串转C串，整形转字符串\n\n------\n","source":"_posts/LeetCode-007-Reverse-Integer.md","raw":"---\ntitle: LeetCode-007-Reverse Integer\ntags:\n  - LeetCode\n  - Easy\n  - Reverse\n  - Big Number\n  - String\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-04-16 22:07:29\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/reverse-integer/)   \nGiven a 32-bit signed integer, reverse digits of an integer.\n\n### Examples:\n**Input:**123\n**Output:**321\n**Input:**-123\n**Output:**-321\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 用字符串的方法，先将输入转换成字符串，然后判断第一个字符是不是‘-’，是就加到结果字符串上，最后逆序添加字符到结果字符串上，再将字符串转换成长整数，return之前判断是否有溢出\n- 题解的办法是用取模的方法获取每一位之后再加到结果上，遍历一遍，但是这种方法在计算结果时容易溢出，要事先检查\n\n\n## C++ Codes\n我的字符串方法，4ms，8.3MB\n```C++\nclass Solution {\npublic:\n    int reverse(int x) {\n        string str = to_string(x);\n        string res=\"\";\n        if(str[0]=='-'){\n            str = str.substr(1,str.length());\n            res+='-';\n        }\n        for(int i =0;i<str.length();i++){\n            res+=str[str.length()-1-i];\n        }\n        long tmp =  atol(res.c_str());\n        if(tmp>pow(2,31)-1 || tmp<pow(2,31)*(-1)){\n            return 0;\n        }\n        return (int)tmp;\n    }\n};\n```\n\n题解的数学方法，8ms，8.3MB\n```C++\nclass Solution {\npublic:\n    int reverse(int x) {\n        int rev = 0;\n        while (x != 0) {\n            int pop = x % 10;\n            x /= 10;\n            if (rev > INT_MAX/10 || (rev == INT_MAX / 10 && pop > 7)) return 0;\n            if (rev < INT_MIN/10 || (rev == INT_MIN / 10 && pop < -8)) return 0;\n            rev = rev * 10 + pop;\n        }\n        return rev;\n    }\n};\n```\n\n## Python Codes\nPython的和第一种方法一样做，差别不大\n\n## 总结\n- C++中int型最大最小可以用<limits.h>中的INT_MAX和INT_MIN表示，分别是$$ 2^31=2147483647 $$和$$ -2^31-1=-2147483648 $$\n- C++中有atoi(),atol(),c_str(),to_string()这几种方法，分别是字符串转int，字符串转long，字符串转C串，整形转字符串\n\n------\n","slug":"LeetCode-007-Reverse-Integer","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjsr001wussbecbk4bv3","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/reverse-integer/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a 32-bit signed integer, reverse digits of an integer.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>123<br><strong>Output:</strong>321<br><strong>Input:</strong>-123<br><strong>Output:</strong>-321</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>用字符串的方法，先将输入转换成字符串，然后判断第一个字符是不是‘-’，是就加到结果字符串上，最后逆序添加字符到结果字符串上，再将字符串转换成长整数，return之前判断是否有溢出</li>\n<li>题解的办法是用取模的方法获取每一位之后再加到结果上，遍历一遍，但是这种方法在计算结果时容易溢出，要事先检查</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>我的字符串方法，4ms，8.3MB<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> str = to_string(x);</span><br><span class=\"line\">        <span class=\"built_in\">string</span> res=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[<span class=\"number\">0</span>]==<span class=\"string\">'-'</span>)&#123;</span><br><span class=\"line\">            str = str.substr(<span class=\"number\">1</span>,str.length());</span><br><span class=\"line\">            res+=<span class=\"string\">'-'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;str.length();i++)&#123;</span><br><span class=\"line\">            res+=str[str.length()<span class=\"number\">-1</span>-i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> tmp =  atol(res.c_str());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmp&gt;<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>,<span class=\"number\">31</span>)<span class=\"number\">-1</span> || tmp&lt;<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>,<span class=\"number\">31</span>)*(<span class=\"number\">-1</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>题解的数学方法，8ms，8.3MB<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rev = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pop = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">            x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rev &gt; INT_MAX/<span class=\"number\">10</span> || (rev == INT_MAX / <span class=\"number\">10</span> &amp;&amp; pop &gt; <span class=\"number\">7</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rev &lt; INT_MIN/<span class=\"number\">10</span> || (rev == INT_MIN / <span class=\"number\">10</span> &amp;&amp; pop &lt; <span class=\"number\">-8</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            rev = rev * <span class=\"number\">10</span> + pop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>Python的和第一种方法一样做，差别不大</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>C++中int型最大最小可以用<limits.h>中的INT_MAX和INT_MIN表示，分别是<script type=\"math/tex\">2^31=2147483647</script>和<script type=\"math/tex\">-2^31-1=-2147483648</script></limits.h></li>\n<li>C++中有atoi(),atol(),c_str(),to_string()这几种方法，分别是字符串转int，字符串转long，字符串转C串，整形转字符串</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/reverse-integer/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a 32-bit signed integer, reverse digits of an integer.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>123<br><strong>Output:</strong>321<br><strong>Input:</strong>-123<br><strong>Output:</strong>-321</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>用字符串的方法，先将输入转换成字符串，然后判断第一个字符是不是‘-’，是就加到结果字符串上，最后逆序添加字符到结果字符串上，再将字符串转换成长整数，return之前判断是否有溢出</li>\n<li>题解的办法是用取模的方法获取每一位之后再加到结果上，遍历一遍，但是这种方法在计算结果时容易溢出，要事先检查</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>我的字符串方法，4ms，8.3MB<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> str = to_string(x);</span><br><span class=\"line\">        <span class=\"built_in\">string</span> res=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[<span class=\"number\">0</span>]==<span class=\"string\">'-'</span>)&#123;</span><br><span class=\"line\">            str = str.substr(<span class=\"number\">1</span>,str.length());</span><br><span class=\"line\">            res+=<span class=\"string\">'-'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;str.length();i++)&#123;</span><br><span class=\"line\">            res+=str[str.length()<span class=\"number\">-1</span>-i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> tmp =  atol(res.c_str());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmp&gt;<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>,<span class=\"number\">31</span>)<span class=\"number\">-1</span> || tmp&lt;<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>,<span class=\"number\">31</span>)*(<span class=\"number\">-1</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>题解的数学方法，8ms，8.3MB<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rev = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pop = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">            x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rev &gt; INT_MAX/<span class=\"number\">10</span> || (rev == INT_MAX / <span class=\"number\">10</span> &amp;&amp; pop &gt; <span class=\"number\">7</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rev &lt; INT_MIN/<span class=\"number\">10</span> || (rev == INT_MIN / <span class=\"number\">10</span> &amp;&amp; pop &lt; <span class=\"number\">-8</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            rev = rev * <span class=\"number\">10</span> + pop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>Python的和第一种方法一样做，差别不大</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>C++中int型最大最小可以用<limits.h>中的INT_MAX和INT_MIN表示，分别是<script type=\"math/tex\">2^31=2147483647</script>和<script type=\"math/tex\">-2^31-1=-2147483648</script></limits.h></li>\n<li>C++中有atoi(),atol(),c_str(),to_string()这几种方法，分别是字符串转int，字符串转long，字符串转C串，整形转字符串</li>\n</ul>\n<hr>"},{"title":"LeetCode-008-String to Integer (atoi)","comments":1,"mathjax":false,"date":"2019-04-16T14:26:17.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/string-to-integer-atoi/)   \n实现C++的atoi()函数\nThe function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.\n\nThe string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.\n\nIf the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.\n\nIf no valid conversion could be performed, a zero value is returned.\n{% endnote %}\n<!--more-->\n{% note info %}\n**Note:**  \n> Only the space character ' ' is considered as whitespace character.\n> Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: $$ [−2^{31},  2^{31} − 1] $$. If the numerical value is out of the range of representable values, INT_MAX $$ 2^{31}-1 $$ or INT_MIN $$ -2^{31} $$ is returned.\n{% endnote %}\n### Examples:\n**Input:**\"42\"\n**Output:**42\n**Input:**\"    -42\"\n**Output:**-42\n**Input:**\"words and 987\"\n**Output:**987\n\n## Solutions\n- 没啥思维量，就是简单的遍历每个字符，然后设置两个flag，一个用于判断有没有到数字部分，第二个判断是不是负数，如果没到数字部分，就要分情况讨论，如果到了数字部分，判断到没到非数字，到了就退出，没到就每个数字加到结果上\n\n\n## C++ Codes\n每个字符遍历过去的方法，12ms，8.4MB\n```C++\nclass Solution {\npublic:\n    int myAtoi(string str) {\n        long long tmp = 0;\n        int n = str.length();\n        if(n==0)return 0;\n        bool flag = false;//是否到数字部分\n        int flag2 = 1;//负数标志，有就变为-1\n\n        for(int i=0;i<n;i++){\n            //已经开始数字部分的情况，即flag = true\n            if(tmp>INT_MAX)break;\n            if(flag && (str[i]<'0' || str[i]>'9')) break;\n            if(flag) tmp = tmp*10+str[i]-'0';\n\n            //还没到数字的情况，前面那部分，分为空格、非数字非符号、数字或正负号\n            if(!flag && str[i]==' ') continue;\n            if(!flag && str[i]!='+' && str[i]!='-' && (str[i]<'0' || str[i]>'9') )\n                return 0;\n            if(!flag && (str[i]=='+' || str[i]=='-'|| (str[i]>='0'&&str[i]<='9'))){\n                flag = true;\n                if(str[i]=='-')flag2 = -1;\n                if(str[i]=='+'||str[i]=='-')continue;\n                tmp = tmp*10+str[i]-'0';\n            }\n        }\n\n        tmp*=flag2;\n        if(tmp>INT_MAX) return INT_MAX;\n        if(tmp<INT_MIN) return INT_MIN;\n        return (int)tmp;\n    }\n};\n```\n\n## Python Codes\n借用了[HazzaCheng的代码](http://chengfeng96.com/blog/2017/03/07/LeetCode-No-8-String-to-Integer-atoi/),这道题用python解简直作弊..\n```python\nclass Solution(object):\n    def myAtoi(self, s):\n        ls = list(s.strip())\n        if len(ls) == 0:\n            return 0\n\n        sign = -1 if ls[0] == '-' else 1\n        if ls[0] in ['-', '+']:\n            del ls[0]\n        res, i = 0, 0\n        while i < len(ls) and ls[i].isdigit():\n            res = res * 10 + ord(ls[i]) - ord('0')\n            i += 1\n        return max(-2 ** 31, min(sign * res, 2 ** 31 - 1))\n```\n\n## 总结\n- 要注意各种情况的判断\n- 就算用了long long作为中转，在循环中也要判断是否已经超过int表示范围，提前break，可能出现longlong都无法表示的测试\n- 注意空串\n- 注意前面的符号\n- 不应该进行的操作及时continue掉\n- 还是会出现'+'号的\n\n------\n","source":"_posts/LeetCode-008-String-to-Integer-atoi.md","raw":"---\ntitle: LeetCode-008-String to Integer (atoi)\ntags:\n  - LeetCode\n  - Medium\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-04-16 22:26:17\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/string-to-integer-atoi/)   \n实现C++的atoi()函数\nThe function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.\n\nThe string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.\n\nIf the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.\n\nIf no valid conversion could be performed, a zero value is returned.\n{% endnote %}\n<!--more-->\n{% note info %}\n**Note:**  \n> Only the space character ' ' is considered as whitespace character.\n> Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: $$ [−2^{31},  2^{31} − 1] $$. If the numerical value is out of the range of representable values, INT_MAX $$ 2^{31}-1 $$ or INT_MIN $$ -2^{31} $$ is returned.\n{% endnote %}\n### Examples:\n**Input:**\"42\"\n**Output:**42\n**Input:**\"    -42\"\n**Output:**-42\n**Input:**\"words and 987\"\n**Output:**987\n\n## Solutions\n- 没啥思维量，就是简单的遍历每个字符，然后设置两个flag，一个用于判断有没有到数字部分，第二个判断是不是负数，如果没到数字部分，就要分情况讨论，如果到了数字部分，判断到没到非数字，到了就退出，没到就每个数字加到结果上\n\n\n## C++ Codes\n每个字符遍历过去的方法，12ms，8.4MB\n```C++\nclass Solution {\npublic:\n    int myAtoi(string str) {\n        long long tmp = 0;\n        int n = str.length();\n        if(n==0)return 0;\n        bool flag = false;//是否到数字部分\n        int flag2 = 1;//负数标志，有就变为-1\n\n        for(int i=0;i<n;i++){\n            //已经开始数字部分的情况，即flag = true\n            if(tmp>INT_MAX)break;\n            if(flag && (str[i]<'0' || str[i]>'9')) break;\n            if(flag) tmp = tmp*10+str[i]-'0';\n\n            //还没到数字的情况，前面那部分，分为空格、非数字非符号、数字或正负号\n            if(!flag && str[i]==' ') continue;\n            if(!flag && str[i]!='+' && str[i]!='-' && (str[i]<'0' || str[i]>'9') )\n                return 0;\n            if(!flag && (str[i]=='+' || str[i]=='-'|| (str[i]>='0'&&str[i]<='9'))){\n                flag = true;\n                if(str[i]=='-')flag2 = -1;\n                if(str[i]=='+'||str[i]=='-')continue;\n                tmp = tmp*10+str[i]-'0';\n            }\n        }\n\n        tmp*=flag2;\n        if(tmp>INT_MAX) return INT_MAX;\n        if(tmp<INT_MIN) return INT_MIN;\n        return (int)tmp;\n    }\n};\n```\n\n## Python Codes\n借用了[HazzaCheng的代码](http://chengfeng96.com/blog/2017/03/07/LeetCode-No-8-String-to-Integer-atoi/),这道题用python解简直作弊..\n```python\nclass Solution(object):\n    def myAtoi(self, s):\n        ls = list(s.strip())\n        if len(ls) == 0:\n            return 0\n\n        sign = -1 if ls[0] == '-' else 1\n        if ls[0] in ['-', '+']:\n            del ls[0]\n        res, i = 0, 0\n        while i < len(ls) and ls[i].isdigit():\n            res = res * 10 + ord(ls[i]) - ord('0')\n            i += 1\n        return max(-2 ** 31, min(sign * res, 2 ** 31 - 1))\n```\n\n## 总结\n- 要注意各种情况的判断\n- 就算用了long long作为中转，在循环中也要判断是否已经超过int表示范围，提前break，可能出现longlong都无法表示的测试\n- 注意空串\n- 注意前面的符号\n- 不应该进行的操作及时continue掉\n- 还是会出现'+'号的\n\n------\n","slug":"LeetCode-008-String-to-Integer-atoi","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjsx001zussbxw84hw7c","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/string-to-integer-atoi/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>实现C++的atoi()函数<br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\n<p>If no valid conversion could be performed, a zero value is returned.</p></div>\n<a id=\"more\"></a>\n<div class=\"note info\"><p><strong>Note:</strong>  </p>\n<blockquote>\n<p>Only the space character ‘ ‘ is considered as whitespace character.<br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: <script type=\"math/tex\">[−2^{31},  2^{31} − 1]</script>. If the numerical value is out of the range of representable values, INT_MAX <script type=\"math/tex\">2^{31}-1</script> or INT_MIN <script type=\"math/tex\">-2^{31}</script> is returned.</p>\n</blockquote></div>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>“42”<br><strong>Output:</strong>42<br><strong>Input:</strong>“    -42”<br><strong>Output:</strong>-42<br><strong>Input:</strong>“words and 987”<br><strong>Output:</strong>987</p>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>没啥思维量，就是简单的遍历每个字符，然后设置两个flag，一个用于判断有没有到数字部分，第二个判断是不是负数，如果没到数字部分，就要分情况讨论，如果到了数字部分，判断到没到非数字，到了就退出，没到就每个数字加到结果上</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>每个字符遍历过去的方法，12ms，8.4MB<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">myAtoi</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = str.length();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span>;<span class=\"comment\">//是否到数字部分</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag2 = <span class=\"number\">1</span>;<span class=\"comment\">//负数标志，有就变为-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//已经开始数字部分的情况，即flag = true</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp&gt;INT_MAX)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag &amp;&amp; (str[i]&lt;<span class=\"string\">'0'</span> || str[i]&gt;<span class=\"string\">'9'</span>)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag) tmp = tmp*<span class=\"number\">10</span>+str[i]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//还没到数字的情况，前面那部分，分为空格、非数字非符号、数字或正负号</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag &amp;&amp; str[i]==<span class=\"string\">' '</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag &amp;&amp; str[i]!=<span class=\"string\">'+'</span> &amp;&amp; str[i]!=<span class=\"string\">'-'</span> &amp;&amp; (str[i]&lt;<span class=\"string\">'0'</span> || str[i]&gt;<span class=\"string\">'9'</span>) )</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag &amp;&amp; (str[i]==<span class=\"string\">'+'</span> || str[i]==<span class=\"string\">'-'</span>|| (str[i]&gt;=<span class=\"string\">'0'</span>&amp;&amp;str[i]&lt;=<span class=\"string\">'9'</span>)))&#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(str[i]==<span class=\"string\">'-'</span>)flag2 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(str[i]==<span class=\"string\">'+'</span>||str[i]==<span class=\"string\">'-'</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                tmp = tmp*<span class=\"number\">10</span>+str[i]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tmp*=flag2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmp&gt;INT_MAX) <span class=\"keyword\">return</span> INT_MAX;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmp&lt;INT_MIN) <span class=\"keyword\">return</span> INT_MIN;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>借用了<a href=\"http://chengfeng96.com/blog/2017/03/07/LeetCode-No-8-String-to-Integer-atoi/\" target=\"_blank\" rel=\"noopener\">HazzaCheng的代码</a>,这道题用python解简直作弊..<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myAtoi</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        ls = list(s.strip())</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(ls) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sign = <span class=\"number\">-1</span> <span class=\"keyword\">if</span> ls[<span class=\"number\">0</span>] == <span class=\"string\">'-'</span> <span class=\"keyword\">else</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ls[<span class=\"number\">0</span>] <span class=\"keyword\">in</span> [<span class=\"string\">'-'</span>, <span class=\"string\">'+'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">del</span> ls[<span class=\"number\">0</span>]</span><br><span class=\"line\">        res, i = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(ls) <span class=\"keyword\">and</span> ls[i].isdigit():</span><br><span class=\"line\">            res = res * <span class=\"number\">10</span> + ord(ls[i]) - ord(<span class=\"string\">'0'</span>)</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(<span class=\"number\">-2</span> ** <span class=\"number\">31</span>, min(sign * res, <span class=\"number\">2</span> ** <span class=\"number\">31</span> - <span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>要注意各种情况的判断</li>\n<li>就算用了long long作为中转，在循环中也要判断是否已经超过int表示范围，提前break，可能出现longlong都无法表示的测试</li>\n<li>注意空串</li>\n<li>注意前面的符号</li>\n<li>不应该进行的操作及时continue掉</li>\n<li>还是会出现’+’号的</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/string-to-integer-atoi/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>实现C++的atoi()函数<br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\n<p>If no valid conversion could be performed, a zero value is returned.</p></div>","more":"<div class=\"note info\"><p><strong>Note:</strong>  </p>\n<blockquote>\n<p>Only the space character ‘ ‘ is considered as whitespace character.<br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: <script type=\"math/tex\">[−2^{31},  2^{31} − 1]</script>. If the numerical value is out of the range of representable values, INT_MAX <script type=\"math/tex\">2^{31}-1</script> or INT_MIN <script type=\"math/tex\">-2^{31}</script> is returned.</p>\n</blockquote></div>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>“42”<br><strong>Output:</strong>42<br><strong>Input:</strong>“    -42”<br><strong>Output:</strong>-42<br><strong>Input:</strong>“words and 987”<br><strong>Output:</strong>987</p>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>没啥思维量，就是简单的遍历每个字符，然后设置两个flag，一个用于判断有没有到数字部分，第二个判断是不是负数，如果没到数字部分，就要分情况讨论，如果到了数字部分，判断到没到非数字，到了就退出，没到就每个数字加到结果上</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>每个字符遍历过去的方法，12ms，8.4MB<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">myAtoi</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = str.length();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span>;<span class=\"comment\">//是否到数字部分</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag2 = <span class=\"number\">1</span>;<span class=\"comment\">//负数标志，有就变为-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//已经开始数字部分的情况，即flag = true</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp&gt;INT_MAX)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag &amp;&amp; (str[i]&lt;<span class=\"string\">'0'</span> || str[i]&gt;<span class=\"string\">'9'</span>)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag) tmp = tmp*<span class=\"number\">10</span>+str[i]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//还没到数字的情况，前面那部分，分为空格、非数字非符号、数字或正负号</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag &amp;&amp; str[i]==<span class=\"string\">' '</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag &amp;&amp; str[i]!=<span class=\"string\">'+'</span> &amp;&amp; str[i]!=<span class=\"string\">'-'</span> &amp;&amp; (str[i]&lt;<span class=\"string\">'0'</span> || str[i]&gt;<span class=\"string\">'9'</span>) )</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag &amp;&amp; (str[i]==<span class=\"string\">'+'</span> || str[i]==<span class=\"string\">'-'</span>|| (str[i]&gt;=<span class=\"string\">'0'</span>&amp;&amp;str[i]&lt;=<span class=\"string\">'9'</span>)))&#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(str[i]==<span class=\"string\">'-'</span>)flag2 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(str[i]==<span class=\"string\">'+'</span>||str[i]==<span class=\"string\">'-'</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                tmp = tmp*<span class=\"number\">10</span>+str[i]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tmp*=flag2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmp&gt;INT_MAX) <span class=\"keyword\">return</span> INT_MAX;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmp&lt;INT_MIN) <span class=\"keyword\">return</span> INT_MIN;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>借用了<a href=\"http://chengfeng96.com/blog/2017/03/07/LeetCode-No-8-String-to-Integer-atoi/\" target=\"_blank\" rel=\"noopener\">HazzaCheng的代码</a>,这道题用python解简直作弊..<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myAtoi</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        ls = list(s.strip())</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(ls) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sign = <span class=\"number\">-1</span> <span class=\"keyword\">if</span> ls[<span class=\"number\">0</span>] == <span class=\"string\">'-'</span> <span class=\"keyword\">else</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ls[<span class=\"number\">0</span>] <span class=\"keyword\">in</span> [<span class=\"string\">'-'</span>, <span class=\"string\">'+'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">del</span> ls[<span class=\"number\">0</span>]</span><br><span class=\"line\">        res, i = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(ls) <span class=\"keyword\">and</span> ls[i].isdigit():</span><br><span class=\"line\">            res = res * <span class=\"number\">10</span> + ord(ls[i]) - ord(<span class=\"string\">'0'</span>)</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(<span class=\"number\">-2</span> ** <span class=\"number\">31</span>, min(sign * res, <span class=\"number\">2</span> ** <span class=\"number\">31</span> - <span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>要注意各种情况的判断</li>\n<li>就算用了long long作为中转，在循环中也要判断是否已经超过int表示范围，提前break，可能出现longlong都无法表示的测试</li>\n<li>注意空串</li>\n<li>注意前面的符号</li>\n<li>不应该进行的操作及时continue掉</li>\n<li>还是会出现’+’号的</li>\n</ul>\n<hr>"},{"title":"LeetCode-009-Palindrome Number","comments":1,"mathjax":false,"date":"2019-04-18T16:24:57.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/palindrome-number/)   \nDetermine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\n\n### Examples:\n**Input:**121\n**Output:**true\n**Input:**-121\n**Output:**true\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 首先想到的肯定是转成字符串，然后前后每个数判断是否相等，遇到不等的就return，这种方法会创建一个字符串，可能会慢一点\n- 另一种方法也很容易想，就是把数字翻转过来嘛，再比较，相等的就是回文数了，但是可能会出现翻转后的数字溢出的问题，所以，可以只把后半部分的数字翻转，和前半部分的数字比较，如果是奇数位，可以把多一位的那部分除以10再比较。\n\n\n## C++ Codes\n转成字符串的方法，36ms，8.2MB\n\n```\n```C++\nclass Solution {\npublic:\n    bool isPalindrome(int x) {\n        string xstr = to_string(x);\n        int n = xstr.length();\n        for(int i=0;i<n/2;i++){\n            if(xstr[i]!=xstr[n-i-1]) return false;\n        }\n        return true;\n    }\n};\n```\n\n## Python Codes\nPython的代码和这个几乎一样，就不写了\n\n## 总结\n- 因为是简单题，所以没啥思维难度，很容易想到方法，要注意的还是细节上面小心点 \n\n------\n","source":"_posts/LeetCode-009-Palindrome-Number.md","raw":"---\ntitle: LeetCode-009-Palindrome Number\ntags:\n  - LeetCode\n  - Palindrome\n  - String\n  - Easy\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-04-19 00:24:57\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/palindrome-number/)   \nDetermine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\n\n### Examples:\n**Input:**121\n**Output:**true\n**Input:**-121\n**Output:**true\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 首先想到的肯定是转成字符串，然后前后每个数判断是否相等，遇到不等的就return，这种方法会创建一个字符串，可能会慢一点\n- 另一种方法也很容易想，就是把数字翻转过来嘛，再比较，相等的就是回文数了，但是可能会出现翻转后的数字溢出的问题，所以，可以只把后半部分的数字翻转，和前半部分的数字比较，如果是奇数位，可以把多一位的那部分除以10再比较。\n\n\n## C++ Codes\n转成字符串的方法，36ms，8.2MB\n\n```\n```C++\nclass Solution {\npublic:\n    bool isPalindrome(int x) {\n        string xstr = to_string(x);\n        int n = xstr.length();\n        for(int i=0;i<n/2;i++){\n            if(xstr[i]!=xstr[n-i-1]) return false;\n        }\n        return true;\n    }\n};\n```\n\n## Python Codes\nPython的代码和这个几乎一样，就不写了\n\n## 总结\n- 因为是简单题，所以没啥思维难度，很容易想到方法，要注意的还是细节上面小心点 \n\n------\n","slug":"LeetCode-009-Palindrome-Number","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjt20022ussb776b4hk4","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/palindrome-number/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>121<br><strong>Output:</strong>true<br><strong>Input:</strong>-121<br><strong>Output:</strong>true</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>首先想到的肯定是转成字符串，然后前后每个数判断是否相等，遇到不等的就return，这种方法会创建一个字符串，可能会慢一点</li>\n<li>另一种方法也很容易想，就是把数字翻转过来嘛，再比较，相等的就是回文数了，但是可能会出现翻转后的数字溢出的问题，所以，可以只把后半部分的数字翻转，和前半部分的数字比较，如果是奇数位，可以把多一位的那部分除以10再比较。</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>转成字符串的方法，36ms，8.2MB</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```C++</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    bool isPalindrome(int x) &#123;</span><br><span class=\"line\">        string xstr = to_string(x);</span><br><span class=\"line\">        int n = xstr.length();</span><br><span class=\"line\">        for(int i=0;i&lt;n/2;i++)&#123;</span><br><span class=\"line\">            if(xstr[i]!=xstr[n-i-1]) return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>Python的代码和这个几乎一样，就不写了</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>因为是简单题，所以没啥思维难度，很容易想到方法，要注意的还是细节上面小心点 </li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/palindrome-number/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>121<br><strong>Output:</strong>true<br><strong>Input:</strong>-121<br><strong>Output:</strong>true</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>首先想到的肯定是转成字符串，然后前后每个数判断是否相等，遇到不等的就return，这种方法会创建一个字符串，可能会慢一点</li>\n<li>另一种方法也很容易想，就是把数字翻转过来嘛，再比较，相等的就是回文数了，但是可能会出现翻转后的数字溢出的问题，所以，可以只把后半部分的数字翻转，和前半部分的数字比较，如果是奇数位，可以把多一位的那部分除以10再比较。</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>转成字符串的方法，36ms，8.2MB</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```C++</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    bool isPalindrome(int x) &#123;</span><br><span class=\"line\">        string xstr = to_string(x);</span><br><span class=\"line\">        int n = xstr.length();</span><br><span class=\"line\">        for(int i=0;i&lt;n/2;i++)&#123;</span><br><span class=\"line\">            if(xstr[i]!=xstr[n-i-1]) return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>Python的代码和这个几乎一样，就不写了</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>因为是简单题，所以没啥思维难度，很容易想到方法，要注意的还是细节上面小心点 </li>\n</ul>\n<hr>"},{"title":"LeetCode-010-Regular Expression Matching","comments":1,"mathjax":false,"date":"2019-04-26T17:43:57.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/regular-expression-matching/)   \nGiven an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '\\*'.\n\n> '.' Matches any single character.\n> '\\*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\n\n**Note**:\n> s could be empty and contains only lowercase letters a-z.\n> p could be empty and contains only lowercase letters a-z, and characters like . or \\*.\n\n### Examples:\n**Input:** s=\"aa\" p=\"a\"\n**Output:** false\n**Input:** s=\"aa\" p=\"a\\*\"\n**Output:** true\n**Input:** s=\"ab\" p=\".\\*\"\n**Output:** true\n**Input:** s=\"aab\" p=\"c\\*a\\*b\"\n**Output:** true\n**Input:** s=\"mississippi\" p=\"mis\\*is\\*p\\*.\"\n**Output:** false\n\n佛了，一道题搞了两个多小时，还是有bug...貌似方法错了，题解说了递归和DP，我用到了递归，可还是不行，DP就直接没想到，先码着回头改\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 递归，首字母匹配，并且后面的子串也匹配\n- DP动态规划，自上而下和自下而上两种，自下而上的不用递归，时间复杂度上会好点\n- 自下而上的方法，在判断前一个字符的时候，因为后面的部分已经判断过了，所以可以直接从dp表里面取数据\n\n## C++ Codes\n**递归方法**\n\n```C++\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n        if(p.empty())return s.empty();\n        //第一个字符匹配或者是.匹配符\n        bool first_match = (!s.empty() &&\n                            (p[0]==s[0]||p[0]=='.'));\n\n        //如果是字符加*\n        if(p.length()>=2 && p[1]=='*'){\n            return (isMatch(s, p.substr(2)) ||\n                (first_match && isMatch(s.substr(1), p)));\n        //如果没有*或者少于两个字符\n        } else {\n            return first_match &&\n                isMatch(s.substr(1), p.substr(1));\n        }\n    }\n};\n```\n\n## Java Codes\n**自上而下的DP**\n\n```Java\nenum Result {\n    TRUE, FALSE\n}\n\nclass Solution {\n    Result[][] memo;\n\n    public boolean isMatch(String text, String pattern) {\n        memo = new Result[text.length() + 1][pattern.length() + 1];\n        return dp(0, 0, text, pattern);\n    }\n\n    public boolean dp(int i, int j, String text, String pattern) {\n        if (memo[i][j] != null) {\n            return memo[i][j] == Result.TRUE;\n        }\n        boolean ans;\n        if (j == pattern.length()){\n            ans = i == text.length();\n        } else{\n            boolean first_match = (i < text.length() &&\n                                   (pattern.charAt(j) == text.charAt(i) ||\n                                    pattern.charAt(j) == '.'));\n\n            if (j + 1 < pattern.length() && pattern.charAt(j+1) == '*'){\n                ans = (dp(i, j+2, text, pattern) ||\n                       first_match && dp(i+1, j, text, pattern));\n            } else {\n                ans = first_match && dp(i+1, j+1, text, pattern);\n            }\n        }\n        memo[i][j] = ans ? Result.TRUE : Result.FALSE;\n        return ans;\n    }\n}\n```\n\n**自下而上的DP**\n\n```Java\nclass Solution {\n    public boolean isMatch(String text, String pattern) {\n        boolean[][] dp = new boolean[text.length() + 1][pattern.length() + 1];\n        dp[text.length()][pattern.length()] = true;\n\n        for (int i = text.length(); i >= 0; i--){\n            for (int j = pattern.length() - 1; j >= 0; j--){\n                boolean first_match = (i < text.length() &&\n                                       (pattern.charAt(j) == text.charAt(i) ||\n                                        pattern.charAt(j) == '.'));\n                if (j + 1 < pattern.length() && pattern.charAt(j+1) == '*'){\n                    dp[i][j] = dp[i][j+2] || first_match && dp[i+1][j];\n                } else {\n                    dp[i][j] = first_match && dp[i+1][j+1];\n                }\n            }\n        }\n        return dp[0][0];\n    }\n}\n```\n\n## C++ Codes\n\n暂时码着自己代码，还有bug，在s遍历完了，p没遍历完时会出错...代码太丑陋了，只会暴力吗，僵硬...\n\n```C++\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int si=0,pi=0;\n        int sn=s.length(), pn=p.length();\n        for(pi;pi<pn,si<sn;pi++){\n            cout<<s.substr(si)<<\"\\t\"<<p.substr(pi)<<endl;\n            switch(p[pi]){\n                case '.':        //任意单个字符\n                    si++;\n                    break;\n                case '*':        //零个或者多个前面的元素\n                    if(p[pi-1]=='.') \n                    {\n                        if(pi==pn-1)re后面还要改turn true;    //如果.*是最后两个字符，直接返回true\n                        while((p[pi+1]=='.'||p[pi+1]=='*')&&pi<pn){ //如果后面持续特殊字符\n                            pi++;\n                        }\n                        if(pi==pn)return true;  //如果到最后全是特殊字符\n\n                        //p[pi+1]是普通字符,让si++,找s[si]==p[pi+1]\n                        while(s[si]!=p[pi+1] && si<sn) si++;\n                        break;\n                    }\n                    if(p[pi-1]!=s[si])//零个\n                        break;\n                    \n                    //一个或者多个,后面部分的需要也匹配\n                    if(p[pi-1]==s[si])si++;\n                    if(si==sn && pi==pn-1)return true;\n                    else if(si==sn)si--;\n                    while(p[pi-1]==s[si] &&(si<sn && pi+1<pn && isMatch(s.substr(si),p.substr(pi+1))==false)){\n                        si++;\n                    }\n\n                    break; \n                default:\n                    if(p[pi]==s[si] && si<sn){           //相等就继续遍历\n                        si++;\n                        break;\n                    }//不等，则判断后面是否有*，如果有，这个字符可以跳过,注意这里si并没有自增\n                    else if(p[pi]!=s[si] && pi+1<pn && p[pi+1]=='*'){\n                        break;\n                    }\n                    else return false;\n            }\n        }\n        if(pi==pn && si==sn)return true;\n        return false;\n    }\n};\n```\n\n## Python Codes\n\n评论区有人一行Java正则就搞定了，我觉得，python一行也够了...\n\n```python\n略\n```\n\n## 总结\n- 正则匹配这里，其实应该先想到递归和DP的，但是思维太局限，训练的少，虽然会递归和DP，但是想不起来用..仿佛读了假书..\n- 算法题需要训练，不光是会算法，不然都不知道题目应该用什么算法...\n- 这道题来说，递归还是挺容易写的，首字母匹配，后面的也匹配就可以，再考虑下\\*字符的情况\n\n\n------\n","source":"_posts/LeetCode-010-Regular-Expression-Matching.md","raw":"---\ntitle: LeetCode-010-Regular Expression Matching\ntags:\n  - LeetCode\n  - DP\n  - String\n  - Match\n  - Hard\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-04-27 01:43:57\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/regular-expression-matching/)   \nGiven an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '\\*'.\n\n> '.' Matches any single character.\n> '\\*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\n\n**Note**:\n> s could be empty and contains only lowercase letters a-z.\n> p could be empty and contains only lowercase letters a-z, and characters like . or \\*.\n\n### Examples:\n**Input:** s=\"aa\" p=\"a\"\n**Output:** false\n**Input:** s=\"aa\" p=\"a\\*\"\n**Output:** true\n**Input:** s=\"ab\" p=\".\\*\"\n**Output:** true\n**Input:** s=\"aab\" p=\"c\\*a\\*b\"\n**Output:** true\n**Input:** s=\"mississippi\" p=\"mis\\*is\\*p\\*.\"\n**Output:** false\n\n佛了，一道题搞了两个多小时，还是有bug...貌似方法错了，题解说了递归和DP，我用到了递归，可还是不行，DP就直接没想到，先码着回头改\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 递归，首字母匹配，并且后面的子串也匹配\n- DP动态规划，自上而下和自下而上两种，自下而上的不用递归，时间复杂度上会好点\n- 自下而上的方法，在判断前一个字符的时候，因为后面的部分已经判断过了，所以可以直接从dp表里面取数据\n\n## C++ Codes\n**递归方法**\n\n```C++\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n        if(p.empty())return s.empty();\n        //第一个字符匹配或者是.匹配符\n        bool first_match = (!s.empty() &&\n                            (p[0]==s[0]||p[0]=='.'));\n\n        //如果是字符加*\n        if(p.length()>=2 && p[1]=='*'){\n            return (isMatch(s, p.substr(2)) ||\n                (first_match && isMatch(s.substr(1), p)));\n        //如果没有*或者少于两个字符\n        } else {\n            return first_match &&\n                isMatch(s.substr(1), p.substr(1));\n        }\n    }\n};\n```\n\n## Java Codes\n**自上而下的DP**\n\n```Java\nenum Result {\n    TRUE, FALSE\n}\n\nclass Solution {\n    Result[][] memo;\n\n    public boolean isMatch(String text, String pattern) {\n        memo = new Result[text.length() + 1][pattern.length() + 1];\n        return dp(0, 0, text, pattern);\n    }\n\n    public boolean dp(int i, int j, String text, String pattern) {\n        if (memo[i][j] != null) {\n            return memo[i][j] == Result.TRUE;\n        }\n        boolean ans;\n        if (j == pattern.length()){\n            ans = i == text.length();\n        } else{\n            boolean first_match = (i < text.length() &&\n                                   (pattern.charAt(j) == text.charAt(i) ||\n                                    pattern.charAt(j) == '.'));\n\n            if (j + 1 < pattern.length() && pattern.charAt(j+1) == '*'){\n                ans = (dp(i, j+2, text, pattern) ||\n                       first_match && dp(i+1, j, text, pattern));\n            } else {\n                ans = first_match && dp(i+1, j+1, text, pattern);\n            }\n        }\n        memo[i][j] = ans ? Result.TRUE : Result.FALSE;\n        return ans;\n    }\n}\n```\n\n**自下而上的DP**\n\n```Java\nclass Solution {\n    public boolean isMatch(String text, String pattern) {\n        boolean[][] dp = new boolean[text.length() + 1][pattern.length() + 1];\n        dp[text.length()][pattern.length()] = true;\n\n        for (int i = text.length(); i >= 0; i--){\n            for (int j = pattern.length() - 1; j >= 0; j--){\n                boolean first_match = (i < text.length() &&\n                                       (pattern.charAt(j) == text.charAt(i) ||\n                                        pattern.charAt(j) == '.'));\n                if (j + 1 < pattern.length() && pattern.charAt(j+1) == '*'){\n                    dp[i][j] = dp[i][j+2] || first_match && dp[i+1][j];\n                } else {\n                    dp[i][j] = first_match && dp[i+1][j+1];\n                }\n            }\n        }\n        return dp[0][0];\n    }\n}\n```\n\n## C++ Codes\n\n暂时码着自己代码，还有bug，在s遍历完了，p没遍历完时会出错...代码太丑陋了，只会暴力吗，僵硬...\n\n```C++\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int si=0,pi=0;\n        int sn=s.length(), pn=p.length();\n        for(pi;pi<pn,si<sn;pi++){\n            cout<<s.substr(si)<<\"\\t\"<<p.substr(pi)<<endl;\n            switch(p[pi]){\n                case '.':        //任意单个字符\n                    si++;\n                    break;\n                case '*':        //零个或者多个前面的元素\n                    if(p[pi-1]=='.') \n                    {\n                        if(pi==pn-1)re后面还要改turn true;    //如果.*是最后两个字符，直接返回true\n                        while((p[pi+1]=='.'||p[pi+1]=='*')&&pi<pn){ //如果后面持续特殊字符\n                            pi++;\n                        }\n                        if(pi==pn)return true;  //如果到最后全是特殊字符\n\n                        //p[pi+1]是普通字符,让si++,找s[si]==p[pi+1]\n                        while(s[si]!=p[pi+1] && si<sn) si++;\n                        break;\n                    }\n                    if(p[pi-1]!=s[si])//零个\n                        break;\n                    \n                    //一个或者多个,后面部分的需要也匹配\n                    if(p[pi-1]==s[si])si++;\n                    if(si==sn && pi==pn-1)return true;\n                    else if(si==sn)si--;\n                    while(p[pi-1]==s[si] &&(si<sn && pi+1<pn && isMatch(s.substr(si),p.substr(pi+1))==false)){\n                        si++;\n                    }\n\n                    break; \n                default:\n                    if(p[pi]==s[si] && si<sn){           //相等就继续遍历\n                        si++;\n                        break;\n                    }//不等，则判断后面是否有*，如果有，这个字符可以跳过,注意这里si并没有自增\n                    else if(p[pi]!=s[si] && pi+1<pn && p[pi+1]=='*'){\n                        break;\n                    }\n                    else return false;\n            }\n        }\n        if(pi==pn && si==sn)return true;\n        return false;\n    }\n};\n```\n\n## Python Codes\n\n评论区有人一行Java正则就搞定了，我觉得，python一行也够了...\n\n```python\n略\n```\n\n## 总结\n- 正则匹配这里，其实应该先想到递归和DP的，但是思维太局限，训练的少，虽然会递归和DP，但是想不起来用..仿佛读了假书..\n- 算法题需要训练，不光是会算法，不然都不知道题目应该用什么算法...\n- 这道题来说，递归还是挺容易写的，首字母匹配，后面的也匹配就可以，再考虑下\\*字符的情况\n\n\n------\n","slug":"LeetCode-010-Regular-Expression-Matching","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjt40025ussbpmd718ld","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/regular-expression-matching/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given an input string (s) and a pattern (p), implement regular expression matching with support for ‘.’ and ‘*‘.</p>\n<blockquote>\n<p>‘.’ Matches any single character.<br>‘*‘ Matches zero or more of the preceding element.</p>\n</blockquote>\n<p>The matching should cover the entire input string (not partial).</p>\n<p><strong>Note</strong>:</p>\n<blockquote>\n<p>s could be empty and contains only lowercase letters a-z.<br>p could be empty and contains only lowercase letters a-z, and characters like . or *.</p>\n</blockquote>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong> s=”aa” p=”a”<br><strong>Output:</strong> false<br><strong>Input:</strong> s=”aa” p=”a*“<br><strong>Output:</strong> true<br><strong>Input:</strong> s=”ab” p=”.*“<br><strong>Output:</strong> true<br><strong>Input:</strong> s=”aab” p=”c*a*b”<br><strong>Output:</strong> true<br><strong>Input:</strong> s=”mississippi” p=”mis*is*p*.”<br><strong>Output:</strong> false</p>\n<p>佛了，一道题搞了两个多小时，还是有bug…貌似方法错了，题解说了递归和DP，我用到了递归，可还是不行，DP就直接没想到，先码着回头改</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>递归，首字母匹配，并且后面的子串也匹配</li>\n<li>DP动态规划，自上而下和自下而上两种，自下而上的不用递归，时间复杂度上会好点</li>\n<li>自下而上的方法，在判断前一个字符的时候，因为后面的部分已经判断过了，所以可以直接从dp表里面取数据</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p><strong>递归方法</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isMatch</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.empty())<span class=\"keyword\">return</span> s.empty();</span><br><span class=\"line\">        <span class=\"comment\">//第一个字符匹配或者是.匹配符</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> first_match = (!s.empty() &amp;&amp;</span><br><span class=\"line\">                            (p[<span class=\"number\">0</span>]==s[<span class=\"number\">0</span>]||p[<span class=\"number\">0</span>]==<span class=\"string\">'.'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果是字符加*</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.length()&gt;=<span class=\"number\">2</span> &amp;&amp; p[<span class=\"number\">1</span>]==<span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (isMatch(s, p.substr(<span class=\"number\">2</span>)) ||</span><br><span class=\"line\">                (first_match &amp;&amp; isMatch(s.substr(<span class=\"number\">1</span>), p)));</span><br><span class=\"line\">        <span class=\"comment\">//如果没有*或者少于两个字符</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> first_match &amp;&amp;</span><br><span class=\"line\">                isMatch(s.substr(<span class=\"number\">1</span>), p.substr(<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Java-Codes\"><a href=\"#Java-Codes\" class=\"headerlink\" title=\"Java Codes\"></a>Java Codes</h2><p><strong>自上而下的DP</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Result &#123;</span><br><span class=\"line\">    TRUE, FALSE</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    Result[][] memo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String text, String pattern)</span> </span>&#123;</span><br><span class=\"line\">        memo = <span class=\"keyword\">new</span> Result[text.length() + <span class=\"number\">1</span>][pattern.length() + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp(<span class=\"number\">0</span>, <span class=\"number\">0</span>, text, pattern);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dp</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, String text, String pattern)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (memo[i][j] != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> memo[i][j] == Result.TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ans;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == pattern.length())&#123;</span><br><span class=\"line\">            ans = i == text.length();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> first_match = (i &lt; text.length() &amp;&amp;</span><br><span class=\"line\">                                   (pattern.charAt(j) == text.charAt(i) ||</span><br><span class=\"line\">                                    pattern.charAt(j) == <span class=\"string\">'.'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; pattern.length() &amp;&amp; pattern.charAt(j+<span class=\"number\">1</span>) == <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                ans = (dp(i, j+<span class=\"number\">2</span>, text, pattern) ||</span><br><span class=\"line\">                       first_match &amp;&amp; dp(i+<span class=\"number\">1</span>, j, text, pattern));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans = first_match &amp;&amp; dp(i+<span class=\"number\">1</span>, j+<span class=\"number\">1</span>, text, pattern);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        memo[i][j] = ans ? Result.TRUE : Result.FALSE;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>自下而上的DP</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String text, String pattern)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[text.length() + <span class=\"number\">1</span>][pattern.length() + <span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[text.length()][pattern.length()] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = text.length(); i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = pattern.length() - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> first_match = (i &lt; text.length() &amp;&amp;</span><br><span class=\"line\">                                       (pattern.charAt(j) == text.charAt(i) ||</span><br><span class=\"line\">                                        pattern.charAt(j) == <span class=\"string\">'.'</span>));</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; pattern.length() &amp;&amp; pattern.charAt(j+<span class=\"number\">1</span>) == <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i][j+<span class=\"number\">2</span>] || first_match &amp;&amp; dp[i+<span class=\"number\">1</span>][j];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    dp[i][j] = first_match &amp;&amp; dp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-Codes-1\"><a href=\"#C-Codes-1\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>暂时码着自己代码，还有bug，在s遍历完了，p没遍历完时会出错…代码太丑陋了，只会暴力吗，僵硬…</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isMatch</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> si=<span class=\"number\">0</span>,pi=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sn=s.length(), pn=p.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(pi;pi&lt;pn,si&lt;sn;pi++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;s.substr(si)&lt;&lt;<span class=\"string\">\"\\t\"</span>&lt;&lt;p.substr(pi)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(p[pi])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'.'</span>:        <span class=\"comment\">//任意单个字符</span></span><br><span class=\"line\">                    si++;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'*'</span>:        <span class=\"comment\">//零个或者多个前面的元素</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p[pi<span class=\"number\">-1</span>]==<span class=\"string\">'.'</span>) </span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(pi==pn<span class=\"number\">-1</span>)re后面还要改turn <span class=\"literal\">true</span>;    <span class=\"comment\">//如果.*是最后两个字符，直接返回true</span></span><br><span class=\"line\">                        <span class=\"keyword\">while</span>((p[pi+<span class=\"number\">1</span>]==<span class=\"string\">'.'</span>||p[pi+<span class=\"number\">1</span>]==<span class=\"string\">'*'</span>)&amp;&amp;pi&lt;pn)&#123; <span class=\"comment\">//如果后面持续特殊字符</span></span><br><span class=\"line\">                            pi++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(pi==pn)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">//如果到最后全是特殊字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">//p[pi+1]是普通字符,让si++,找s[si]==p[pi+1]</span></span><br><span class=\"line\">                        <span class=\"keyword\">while</span>(s[si]!=p[pi+<span class=\"number\">1</span>] &amp;&amp; si&lt;sn) si++;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p[pi<span class=\"number\">-1</span>]!=s[si])<span class=\"comment\">//零个</span></span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"comment\">//一个或者多个,后面部分的需要也匹配</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p[pi<span class=\"number\">-1</span>]==s[si])si++;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(si==sn &amp;&amp; pi==pn<span class=\"number\">-1</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(si==sn)si--;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(p[pi<span class=\"number\">-1</span>]==s[si] &amp;&amp;(si&lt;sn &amp;&amp; pi+<span class=\"number\">1</span>&lt;pn &amp;&amp; isMatch(s.substr(si),p.substr(pi+<span class=\"number\">1</span>))==<span class=\"literal\">false</span>))&#123;</span><br><span class=\"line\">                        si++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>; </span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p[pi]==s[si] &amp;&amp; si&lt;sn)&#123;           <span class=\"comment\">//相等就继续遍历</span></span><br><span class=\"line\">                        si++;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;<span class=\"comment\">//不等，则判断后面是否有*，如果有，这个字符可以跳过,注意这里si并没有自增</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p[pi]!=s[si] &amp;&amp; pi+<span class=\"number\">1</span>&lt;pn &amp;&amp; p[pi+<span class=\"number\">1</span>]==<span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pi==pn &amp;&amp; si==sn)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>评论区有人一行Java正则就搞定了，我觉得，python一行也够了…</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">略</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>正则匹配这里，其实应该先想到递归和DP的，但是思维太局限，训练的少，虽然会递归和DP，但是想不起来用..仿佛读了假书..</li>\n<li>算法题需要训练，不光是会算法，不然都不知道题目应该用什么算法…</li>\n<li>这道题来说，递归还是挺容易写的，首字母匹配，后面的也匹配就可以，再考虑下*字符的情况</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/regular-expression-matching/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given an input string (s) and a pattern (p), implement regular expression matching with support for ‘.’ and ‘*‘.</p>\n<blockquote>\n<p>‘.’ Matches any single character.<br>‘*‘ Matches zero or more of the preceding element.</p>\n</blockquote>\n<p>The matching should cover the entire input string (not partial).</p>\n<p><strong>Note</strong>:</p>\n<blockquote>\n<p>s could be empty and contains only lowercase letters a-z.<br>p could be empty and contains only lowercase letters a-z, and characters like . or *.</p>\n</blockquote>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong> s=”aa” p=”a”<br><strong>Output:</strong> false<br><strong>Input:</strong> s=”aa” p=”a*“<br><strong>Output:</strong> true<br><strong>Input:</strong> s=”ab” p=”.*“<br><strong>Output:</strong> true<br><strong>Input:</strong> s=”aab” p=”c*a*b”<br><strong>Output:</strong> true<br><strong>Input:</strong> s=”mississippi” p=”mis*is*p*.”<br><strong>Output:</strong> false</p>\n<p>佛了，一道题搞了两个多小时，还是有bug…貌似方法错了，题解说了递归和DP，我用到了递归，可还是不行，DP就直接没想到，先码着回头改</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>递归，首字母匹配，并且后面的子串也匹配</li>\n<li>DP动态规划，自上而下和自下而上两种，自下而上的不用递归，时间复杂度上会好点</li>\n<li>自下而上的方法，在判断前一个字符的时候，因为后面的部分已经判断过了，所以可以直接从dp表里面取数据</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p><strong>递归方法</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isMatch</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.empty())<span class=\"keyword\">return</span> s.empty();</span><br><span class=\"line\">        <span class=\"comment\">//第一个字符匹配或者是.匹配符</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> first_match = (!s.empty() &amp;&amp;</span><br><span class=\"line\">                            (p[<span class=\"number\">0</span>]==s[<span class=\"number\">0</span>]||p[<span class=\"number\">0</span>]==<span class=\"string\">'.'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果是字符加*</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.length()&gt;=<span class=\"number\">2</span> &amp;&amp; p[<span class=\"number\">1</span>]==<span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (isMatch(s, p.substr(<span class=\"number\">2</span>)) ||</span><br><span class=\"line\">                (first_match &amp;&amp; isMatch(s.substr(<span class=\"number\">1</span>), p)));</span><br><span class=\"line\">        <span class=\"comment\">//如果没有*或者少于两个字符</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> first_match &amp;&amp;</span><br><span class=\"line\">                isMatch(s.substr(<span class=\"number\">1</span>), p.substr(<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Java-Codes\"><a href=\"#Java-Codes\" class=\"headerlink\" title=\"Java Codes\"></a>Java Codes</h2><p><strong>自上而下的DP</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Result &#123;</span><br><span class=\"line\">    TRUE, FALSE</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    Result[][] memo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String text, String pattern)</span> </span>&#123;</span><br><span class=\"line\">        memo = <span class=\"keyword\">new</span> Result[text.length() + <span class=\"number\">1</span>][pattern.length() + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp(<span class=\"number\">0</span>, <span class=\"number\">0</span>, text, pattern);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dp</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, String text, String pattern)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (memo[i][j] != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> memo[i][j] == Result.TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ans;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == pattern.length())&#123;</span><br><span class=\"line\">            ans = i == text.length();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> first_match = (i &lt; text.length() &amp;&amp;</span><br><span class=\"line\">                                   (pattern.charAt(j) == text.charAt(i) ||</span><br><span class=\"line\">                                    pattern.charAt(j) == <span class=\"string\">'.'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; pattern.length() &amp;&amp; pattern.charAt(j+<span class=\"number\">1</span>) == <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                ans = (dp(i, j+<span class=\"number\">2</span>, text, pattern) ||</span><br><span class=\"line\">                       first_match &amp;&amp; dp(i+<span class=\"number\">1</span>, j, text, pattern));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans = first_match &amp;&amp; dp(i+<span class=\"number\">1</span>, j+<span class=\"number\">1</span>, text, pattern);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        memo[i][j] = ans ? Result.TRUE : Result.FALSE;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>自下而上的DP</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String text, String pattern)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[text.length() + <span class=\"number\">1</span>][pattern.length() + <span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[text.length()][pattern.length()] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = text.length(); i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = pattern.length() - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> first_match = (i &lt; text.length() &amp;&amp;</span><br><span class=\"line\">                                       (pattern.charAt(j) == text.charAt(i) ||</span><br><span class=\"line\">                                        pattern.charAt(j) == <span class=\"string\">'.'</span>));</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; pattern.length() &amp;&amp; pattern.charAt(j+<span class=\"number\">1</span>) == <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i][j+<span class=\"number\">2</span>] || first_match &amp;&amp; dp[i+<span class=\"number\">1</span>][j];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    dp[i][j] = first_match &amp;&amp; dp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-Codes-1\"><a href=\"#C-Codes-1\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>暂时码着自己代码，还有bug，在s遍历完了，p没遍历完时会出错…代码太丑陋了，只会暴力吗，僵硬…</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isMatch</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> si=<span class=\"number\">0</span>,pi=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sn=s.length(), pn=p.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(pi;pi&lt;pn,si&lt;sn;pi++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;s.substr(si)&lt;&lt;<span class=\"string\">\"\\t\"</span>&lt;&lt;p.substr(pi)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(p[pi])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'.'</span>:        <span class=\"comment\">//任意单个字符</span></span><br><span class=\"line\">                    si++;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'*'</span>:        <span class=\"comment\">//零个或者多个前面的元素</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p[pi<span class=\"number\">-1</span>]==<span class=\"string\">'.'</span>) </span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(pi==pn<span class=\"number\">-1</span>)re后面还要改turn <span class=\"literal\">true</span>;    <span class=\"comment\">//如果.*是最后两个字符，直接返回true</span></span><br><span class=\"line\">                        <span class=\"keyword\">while</span>((p[pi+<span class=\"number\">1</span>]==<span class=\"string\">'.'</span>||p[pi+<span class=\"number\">1</span>]==<span class=\"string\">'*'</span>)&amp;&amp;pi&lt;pn)&#123; <span class=\"comment\">//如果后面持续特殊字符</span></span><br><span class=\"line\">                            pi++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(pi==pn)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">//如果到最后全是特殊字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">//p[pi+1]是普通字符,让si++,找s[si]==p[pi+1]</span></span><br><span class=\"line\">                        <span class=\"keyword\">while</span>(s[si]!=p[pi+<span class=\"number\">1</span>] &amp;&amp; si&lt;sn) si++;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p[pi<span class=\"number\">-1</span>]!=s[si])<span class=\"comment\">//零个</span></span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"comment\">//一个或者多个,后面部分的需要也匹配</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p[pi<span class=\"number\">-1</span>]==s[si])si++;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(si==sn &amp;&amp; pi==pn<span class=\"number\">-1</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(si==sn)si--;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(p[pi<span class=\"number\">-1</span>]==s[si] &amp;&amp;(si&lt;sn &amp;&amp; pi+<span class=\"number\">1</span>&lt;pn &amp;&amp; isMatch(s.substr(si),p.substr(pi+<span class=\"number\">1</span>))==<span class=\"literal\">false</span>))&#123;</span><br><span class=\"line\">                        si++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>; </span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p[pi]==s[si] &amp;&amp; si&lt;sn)&#123;           <span class=\"comment\">//相等就继续遍历</span></span><br><span class=\"line\">                        si++;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;<span class=\"comment\">//不等，则判断后面是否有*，如果有，这个字符可以跳过,注意这里si并没有自增</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p[pi]!=s[si] &amp;&amp; pi+<span class=\"number\">1</span>&lt;pn &amp;&amp; p[pi+<span class=\"number\">1</span>]==<span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pi==pn &amp;&amp; si==sn)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>评论区有人一行Java正则就搞定了，我觉得，python一行也够了…</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">略</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>正则匹配这里，其实应该先想到递归和DP的，但是思维太局限，训练的少，虽然会递归和DP，但是想不起来用..仿佛读了假书..</li>\n<li>算法题需要训练，不光是会算法，不然都不知道题目应该用什么算法…</li>\n<li>这道题来说，递归还是挺容易写的，首字母匹配，后面的也匹配就可以，再考虑下*字符的情况</li>\n</ul>\n<hr>"},{"title":"LeetCode-011-Container With Most Water","comments":1,"mathjax":false,"date":"2019-04-30T01:28:09.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/container-with-most-water/)   \nGiven n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n\n**Note**: You may not slant the container and n is at least 2.\n{% asset_img 011.png %}\n\n### Examples:\n**Input:** [1,8,6,2,5,4,8,3,7]\n**Output:** 49\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 第一种方法就是暴力法，遍历每种情况，是$$ O(n^2) $$复杂度，找到这里面的最大容量的情况，尝试了会超时，所以只能尽量优化到$$ O(n) $$，于是有了下一种方法\n- 第二种方法是用两个指针，初始情况是一个指向最开头，一个指向结尾，此时的宽度是最大的，然后比较当前两个指针所在位置的高度，低的一方向里面移动，移动会导致宽度减小，所以只能高度低的一边向内移，可能会有更高的。时间复杂度是$$ O(n) $$\n\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        if(height.size() <= 1) return -1;\n        int i = 0, j = height.size() - 1, res = 0;\n        while(i < j){\n            res = max(res, min(height[i], height[j]) * (j - i));\n            height[i] < height[j] ? i++ : j--;\n        }\n        return res;\n    }\n};\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def maxArea(self, height: List[int]) -> int:\n        if len(height) <= 1:\n            return -1\n        i = res = 0\n        j = len(height) - 1\n        while i < j:\n            res = max(res, min(height[i], height[j]) * (j - i))\n            if height[i]<height[j]:\n                i += 1\n            else:\n                j -= 1\n        return res\n```\n\n## 总结\n- 这道题思维上很简单，就是找到最大面积的两个值，但是如果简单的暴力法，中等难度的题目很明显没这么无脑，所以直接就超时了\n- 之前做过的题目里也用到过两个指针遍历的方法，这样的$$ O(n) $$复杂度还是很快的\n\n\n------\n","source":"_posts/LeetCode-011-Container-With-Most-Water.md","raw":"---\ntitle: LeetCode-011-Container With Most Water\ntags:\n  - LeetCode\n  - Math\n  - Medium\n  - Pointer\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-04-30 09:28:09\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/container-with-most-water/)   \nGiven n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n\n**Note**: You may not slant the container and n is at least 2.\n{% asset_img 011.png %}\n\n### Examples:\n**Input:** [1,8,6,2,5,4,8,3,7]\n**Output:** 49\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 第一种方法就是暴力法，遍历每种情况，是$$ O(n^2) $$复杂度，找到这里面的最大容量的情况，尝试了会超时，所以只能尽量优化到$$ O(n) $$，于是有了下一种方法\n- 第二种方法是用两个指针，初始情况是一个指向最开头，一个指向结尾，此时的宽度是最大的，然后比较当前两个指针所在位置的高度，低的一方向里面移动，移动会导致宽度减小，所以只能高度低的一边向内移，可能会有更高的。时间复杂度是$$ O(n) $$\n\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        if(height.size() <= 1) return -1;\n        int i = 0, j = height.size() - 1, res = 0;\n        while(i < j){\n            res = max(res, min(height[i], height[j]) * (j - i));\n            height[i] < height[j] ? i++ : j--;\n        }\n        return res;\n    }\n};\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def maxArea(self, height: List[int]) -> int:\n        if len(height) <= 1:\n            return -1\n        i = res = 0\n        j = len(height) - 1\n        while i < j:\n            res = max(res, min(height[i], height[j]) * (j - i))\n            if height[i]<height[j]:\n                i += 1\n            else:\n                j -= 1\n        return res\n```\n\n## 总结\n- 这道题思维上很简单，就是找到最大面积的两个值，但是如果简单的暴力法，中等难度的题目很明显没这么无脑，所以直接就超时了\n- 之前做过的题目里也用到过两个指针遍历的方法，这样的$$ O(n) $$复杂度还是很快的\n\n\n------\n","slug":"LeetCode-011-Container-With-Most-Water","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjtf0028ussba8mxewhe","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/container-with-most-water/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<p><strong>Note</strong>: You may not slant the container and n is at least 2.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong> [1,8,6,2,5,4,8,3,7]<br><strong>Output:</strong> 49</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>第一种方法就是暴力法，遍历每种情况，是<script type=\"math/tex\">O(n^2)</script>复杂度，找到这里面的最大容量的情况，尝试了会超时，所以只能尽量优化到<script type=\"math/tex\">O(n)</script>，于是有了下一种方法</li>\n<li>第二种方法是用两个指针，初始情况是一个指向最开头，一个指向结尾，此时的宽度是最大的，然后比较当前两个指针所在位置的高度，低的一方向里面移动，移动会导致宽度减小，所以只能高度低的一边向内移，可能会有更高的。时间复杂度是<script type=\"math/tex\">O(n)</script></li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(height.size() &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = height.size() - <span class=\"number\">1</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">            res = max(res, min(height[i], height[j]) * (j - i));</span><br><span class=\"line\">            height[i] &lt; height[j] ? i++ : j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxArea</span><span class=\"params\">(self, height: List[int])</span> -&gt; int:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(height) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        i = res = <span class=\"number\">0</span></span><br><span class=\"line\">        j = len(height) - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; j:</span><br><span class=\"line\">            res = max(res, min(height[i], height[j]) * (j - i))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> height[i]&lt;height[j]:</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                j -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>这道题思维上很简单，就是找到最大面积的两个值，但是如果简单的暴力法，中等难度的题目很明显没这么无脑，所以直接就超时了</li>\n<li>之前做过的题目里也用到过两个指针遍历的方法，这样的<script type=\"math/tex\">O(n)</script>复杂度还是很快的</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/container-with-most-water/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<p><strong>Note</strong>: You may not slant the container and n is at least 2.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong> [1,8,6,2,5,4,8,3,7]<br><strong>Output:</strong> 49</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>第一种方法就是暴力法，遍历每种情况，是<script type=\"math/tex\">O(n^2)</script>复杂度，找到这里面的最大容量的情况，尝试了会超时，所以只能尽量优化到<script type=\"math/tex\">O(n)</script>，于是有了下一种方法</li>\n<li>第二种方法是用两个指针，初始情况是一个指向最开头，一个指向结尾，此时的宽度是最大的，然后比较当前两个指针所在位置的高度，低的一方向里面移动，移动会导致宽度减小，所以只能高度低的一边向内移，可能会有更高的。时间复杂度是<script type=\"math/tex\">O(n)</script></li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(height.size() &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = height.size() - <span class=\"number\">1</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">            res = max(res, min(height[i], height[j]) * (j - i));</span><br><span class=\"line\">            height[i] &lt; height[j] ? i++ : j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxArea</span><span class=\"params\">(self, height: List[int])</span> -&gt; int:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(height) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        i = res = <span class=\"number\">0</span></span><br><span class=\"line\">        j = len(height) - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; j:</span><br><span class=\"line\">            res = max(res, min(height[i], height[j]) * (j - i))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> height[i]&lt;height[j]:</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                j -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>这道题思维上很简单，就是找到最大面积的两个值，但是如果简单的暴力法，中等难度的题目很明显没这么无脑，所以直接就超时了</li>\n<li>之前做过的题目里也用到过两个指针遍历的方法，这样的<script type=\"math/tex\">O(n)</script>复杂度还是很快的</li>\n</ul>\n<hr>"},{"title":"LeetCode-012-Integer to Roman","comments":1,"mathjax":false,"date":"2019-04-30T01:28:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/integer-to-roman/)   \nRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n> Symbol　　　Value\n> I　　　　　　1\n> V　　　　　　5\n> X　　　　　　10\n> L　　　　　　50\n> C　　　　　　100\n> D　　　　　　500\n> M　　　　　　1000\n\nFor example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\n- I can be placed before V (5) and X (10) to make 4 and 9. \n- X can be placed before L (50) and C (100) to make 40 and 90. \n- C can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.\n\n### Examples:\n**Input:** 3\n**Output:** \"III\"\n**Input:** 4\n**Output:** \"IV\"\n**Input:** 58\n**Output:** \"LVIII\"\n**Input:** 1994\n**Output:** \"MCMXCIV\"\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 这题，题目比较长，可能容易晕，但是很好理解，就是把一个整数转成罗马数字，给出了每个字符表示的大小\n- 简单的办法就是从最大值开始，整除得到这个字母的个数，求模得到剩余的数字，然后再次对较小的整除、求模一直到“I”，就是1为止，过程中把字符加到结果字符串上\n- 这里由于有对应关系，所以C++中用两个数组表示对应关系，也可以用map<string,int>表示，Python直接用字典就可以\n\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:\n    string intToRoman(int num) {\n        int values[]={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n        string chr[]={\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"};\n        \n        string res;\n        for(int i=0; i<13; i++){\n            for(int j=0;j<num/values[i];j++)\n                res += chr[i];\n            num %= values[i];\n        }\n        return res;\n    }\n};\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def intToRoman(self, num: int) -> str:\n        values = {\"M\":1000,\"CM\":900,\"D\":500,\"CD\":400,\"C\":100,\"XC\":90,\"L\":50,\"XL\":40,\"X\":10,\"IX\":9,\"V\":5,\"IV\":4,\"I\":1}\n        res = \"\"\n        for key,value in values.items():\n            for i in range(num//value):\n                res += key\n            num %= value                \n        return res;\n```\n\n## 总结\n- 有对应关系的时候，没必要写很多重复代码，用map或者两个列表对应起来，遍历一遍就可以 \n\n\n------\n","source":"_posts/LeetCode-012-Integer-to-Roman.md","raw":"---\ntitle: LeetCode-012-Integer to Roman\ntags:\n  - LeetCode\n  - Map\n  - Integer\n  - String\n  - Medium\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-04-30 09:28:41\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/integer-to-roman/)   \nRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n> Symbol　　　Value\n> I　　　　　　1\n> V　　　　　　5\n> X　　　　　　10\n> L　　　　　　50\n> C　　　　　　100\n> D　　　　　　500\n> M　　　　　　1000\n\nFor example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\n- I can be placed before V (5) and X (10) to make 4 and 9. \n- X can be placed before L (50) and C (100) to make 40 and 90. \n- C can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.\n\n### Examples:\n**Input:** 3\n**Output:** \"III\"\n**Input:** 4\n**Output:** \"IV\"\n**Input:** 58\n**Output:** \"LVIII\"\n**Input:** 1994\n**Output:** \"MCMXCIV\"\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 这题，题目比较长，可能容易晕，但是很好理解，就是把一个整数转成罗马数字，给出了每个字符表示的大小\n- 简单的办法就是从最大值开始，整除得到这个字母的个数，求模得到剩余的数字，然后再次对较小的整除、求模一直到“I”，就是1为止，过程中把字符加到结果字符串上\n- 这里由于有对应关系，所以C++中用两个数组表示对应关系，也可以用map<string,int>表示，Python直接用字典就可以\n\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:\n    string intToRoman(int num) {\n        int values[]={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n        string chr[]={\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"};\n        \n        string res;\n        for(int i=0; i<13; i++){\n            for(int j=0;j<num/values[i];j++)\n                res += chr[i];\n            num %= values[i];\n        }\n        return res;\n    }\n};\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def intToRoman(self, num: int) -> str:\n        values = {\"M\":1000,\"CM\":900,\"D\":500,\"CD\":400,\"C\":100,\"XC\":90,\"L\":50,\"XL\":40,\"X\":10,\"IX\":9,\"V\":5,\"IV\":4,\"I\":1}\n        res = \"\"\n        for key,value in values.items():\n            for i in range(num//value):\n                res += key\n            num %= value                \n        return res;\n```\n\n## 总结\n- 有对应关系的时候，没必要写很多重复代码，用map或者两个列表对应起来，遍历一遍就可以 \n\n\n------\n","slug":"LeetCode-012-Integer-to-Roman","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjtk002bussb436tnrb3","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/integer-to-roman/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p>\n<blockquote>\n<p>Symbol　　　Value<br>I　　　　　　1<br>V　　　　　　5<br>X　　　　　　10<br>L　　　　　　50<br>C　　　　　　100<br>D　　　　　　500<br>M　　　　　　1000</p>\n</blockquote>\n<p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p>\n<ul>\n<li>I can be placed before V (5) and X (10) to make 4 and 9. </li>\n<li>X can be placed before L (50) and C (100) to make 40 and 90. </li>\n<li>C can be placed before D (500) and M (1000) to make 400 and 900.</li>\n</ul>\n<p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong> 3<br><strong>Output:</strong> “III”<br><strong>Input:</strong> 4<br><strong>Output:</strong> “IV”<br><strong>Input:</strong> 58<br><strong>Output:</strong> “LVIII”<br><strong>Input:</strong> 1994<br><strong>Output:</strong> “MCMXCIV”</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>这题，题目比较长，可能容易晕，但是很好理解，就是把一个整数转成罗马数字，给出了每个字符表示的大小</li>\n<li>简单的办法就是从最大值开始，整除得到这个字母的个数，求模得到剩余的数字，然后再次对较小的整除、求模一直到“I”，就是1为止，过程中把字符加到结果字符串上</li>\n<li>这里由于有对应关系，所以C++中用两个数组表示对应关系，也可以用map<string,int>表示，Python直接用字典就可以</string,int></li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">intToRoman</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> values[]=&#123;<span class=\"number\">1000</span>,<span class=\"number\">900</span>,<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">100</span>,<span class=\"number\">90</span>,<span class=\"number\">50</span>,<span class=\"number\">40</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> chr[]=&#123;<span class=\"string\">\"M\"</span>,<span class=\"string\">\"CM\"</span>,<span class=\"string\">\"D\"</span>,<span class=\"string\">\"CD\"</span>,<span class=\"string\">\"C\"</span>,<span class=\"string\">\"XC\"</span>,<span class=\"string\">\"L\"</span>,<span class=\"string\">\"XL\"</span>,<span class=\"string\">\"X\"</span>,<span class=\"string\">\"IX\"</span>,<span class=\"string\">\"V\"</span>,<span class=\"string\">\"IV\"</span>,<span class=\"string\">\"I\"</span>&#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">string</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">13</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;num/values[i];j++)</span><br><span class=\"line\">                res += chr[i];</span><br><span class=\"line\">            num %= values[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">intToRoman</span><span class=\"params\">(self, num: int)</span> -&gt; str:</span></span><br><span class=\"line\">        values = &#123;<span class=\"string\">\"M\"</span>:<span class=\"number\">1000</span>,<span class=\"string\">\"CM\"</span>:<span class=\"number\">900</span>,<span class=\"string\">\"D\"</span>:<span class=\"number\">500</span>,<span class=\"string\">\"CD\"</span>:<span class=\"number\">400</span>,<span class=\"string\">\"C\"</span>:<span class=\"number\">100</span>,<span class=\"string\">\"XC\"</span>:<span class=\"number\">90</span>,<span class=\"string\">\"L\"</span>:<span class=\"number\">50</span>,<span class=\"string\">\"XL\"</span>:<span class=\"number\">40</span>,<span class=\"string\">\"X\"</span>:<span class=\"number\">10</span>,<span class=\"string\">\"IX\"</span>:<span class=\"number\">9</span>,<span class=\"string\">\"V\"</span>:<span class=\"number\">5</span>,<span class=\"string\">\"IV\"</span>:<span class=\"number\">4</span>,<span class=\"string\">\"I\"</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">        res = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> values.items():</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num//value):</span><br><span class=\"line\">                res += key</span><br><span class=\"line\">            num %= value                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>有对应关系的时候，没必要写很多重复代码，用map或者两个列表对应起来，遍历一遍就可以 </li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/integer-to-roman/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p>\n<blockquote>\n<p>Symbol　　　Value<br>I　　　　　　1<br>V　　　　　　5<br>X　　　　　　10<br>L　　　　　　50<br>C　　　　　　100<br>D　　　　　　500<br>M　　　　　　1000</p>\n</blockquote>\n<p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p>\n<ul>\n<li>I can be placed before V (5) and X (10) to make 4 and 9. </li>\n<li>X can be placed before L (50) and C (100) to make 40 and 90. </li>\n<li>C can be placed before D (500) and M (1000) to make 400 and 900.</li>\n</ul>\n<p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong> 3<br><strong>Output:</strong> “III”<br><strong>Input:</strong> 4<br><strong>Output:</strong> “IV”<br><strong>Input:</strong> 58<br><strong>Output:</strong> “LVIII”<br><strong>Input:</strong> 1994<br><strong>Output:</strong> “MCMXCIV”</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>这题，题目比较长，可能容易晕，但是很好理解，就是把一个整数转成罗马数字，给出了每个字符表示的大小</li>\n<li>简单的办法就是从最大值开始，整除得到这个字母的个数，求模得到剩余的数字，然后再次对较小的整除、求模一直到“I”，就是1为止，过程中把字符加到结果字符串上</li>\n<li>这里由于有对应关系，所以C++中用两个数组表示对应关系，也可以用map<string,int>表示，Python直接用字典就可以</string,int></li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">intToRoman</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> values[]=&#123;<span class=\"number\">1000</span>,<span class=\"number\">900</span>,<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">100</span>,<span class=\"number\">90</span>,<span class=\"number\">50</span>,<span class=\"number\">40</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> chr[]=&#123;<span class=\"string\">\"M\"</span>,<span class=\"string\">\"CM\"</span>,<span class=\"string\">\"D\"</span>,<span class=\"string\">\"CD\"</span>,<span class=\"string\">\"C\"</span>,<span class=\"string\">\"XC\"</span>,<span class=\"string\">\"L\"</span>,<span class=\"string\">\"XL\"</span>,<span class=\"string\">\"X\"</span>,<span class=\"string\">\"IX\"</span>,<span class=\"string\">\"V\"</span>,<span class=\"string\">\"IV\"</span>,<span class=\"string\">\"I\"</span>&#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">string</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">13</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;num/values[i];j++)</span><br><span class=\"line\">                res += chr[i];</span><br><span class=\"line\">            num %= values[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">intToRoman</span><span class=\"params\">(self, num: int)</span> -&gt; str:</span></span><br><span class=\"line\">        values = &#123;<span class=\"string\">\"M\"</span>:<span class=\"number\">1000</span>,<span class=\"string\">\"CM\"</span>:<span class=\"number\">900</span>,<span class=\"string\">\"D\"</span>:<span class=\"number\">500</span>,<span class=\"string\">\"CD\"</span>:<span class=\"number\">400</span>,<span class=\"string\">\"C\"</span>:<span class=\"number\">100</span>,<span class=\"string\">\"XC\"</span>:<span class=\"number\">90</span>,<span class=\"string\">\"L\"</span>:<span class=\"number\">50</span>,<span class=\"string\">\"XL\"</span>:<span class=\"number\">40</span>,<span class=\"string\">\"X\"</span>:<span class=\"number\">10</span>,<span class=\"string\">\"IX\"</span>:<span class=\"number\">9</span>,<span class=\"string\">\"V\"</span>:<span class=\"number\">5</span>,<span class=\"string\">\"IV\"</span>:<span class=\"number\">4</span>,<span class=\"string\">\"I\"</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">        res = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> values.items():</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num//value):</span><br><span class=\"line\">                res += key</span><br><span class=\"line\">            num %= value                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>有对应关系的时候，没必要写很多重复代码，用map或者两个列表对应起来，遍历一遍就可以 </li>\n</ul>\n<hr>"},{"title":"LeetCode-013-Roman to Integer","comments":1,"mathjax":false,"date":"2019-04-30T19:57:54.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/roman-to-integer/)   \nRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol　　　Value\nI　　　　　　 1\nV　　　　　　 5\nX　　　　　　 10\nL　　　　　　 50\nC　　　　　　 100\nD　　　　　　 500\nM　　　　　　 1000\n\nFor example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\n- I can be placed before V (5) and X (10) to make 4 and 9. \n- X can be placed before L (50) and C (100) to make 40 and 90. \n- C can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.\n\n### Examples:\n**Input:**\"III\"\n**Output:**3\n\n**Input:**\"IV\"\n**Output:**4\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 想到两种方法，第一种是遍历字符串，判断每个字符和右边字符代表数字的大小，如果不小于右边的，就加上这个字符代表的数字，否则减去。遍历之前要建立字符对应数字的map，时间复杂度是O(n)\n- 还有一种方法是遍历每种情况，然后从左向右查找字符串中的字符，并且记录出现的次数，最后加上次数乘以数字,时间复杂度也是O(n),但是比第一种会花更多时间，因为有无用的比较\n\n\n## C++ Codes\n第一种，遍历字符串，40ms，10.8MB\n```C++\nclass Solution {\npublic:\n    int romanToInt(string s) {\n        int res = 0;\n        map<char,int> values;\n        values['M']=1000;\n        values['D']=500;\n        values['C']=100;\n        values['L']=50;\n        values['X']=10;\n        values['V']=5;\n        values['I']=1;\n        \n        for(int i=0;i<s.length()-1;i++)\n          values[s[i]]>=values[s[i+1]]?\n              res+=values[s[i]]:res-=values[s[i]];\n        \n        //加上最后一位\n        res += values[s[s.length()-1]];\n        return res;\n    }\n};\n```\n\n第二种，遍历每种情况，160ms，8.6MB\n```C++\nclass Solution {\npublic:\n    int romanToInt(string s) {\n        int values[]={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n        string chr[]={\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"};\n        int pos = 0, cnt = 0, res = 0;\n\n        for(int i=0;i<13;i++){\n            while(s.substr(pos,chr[i].length())==chr[i]){\n                cnt++;\n                pos+=chr[i].length();\n            }\n            res += values[i]*cnt;\n            cnt = 0;\n        }\n        return res;\n    }\n};\n```\n\n## Python Codes\n和C++相差不多，就不写了，比较简单\n\n## 总结\n- map真好用\n- 尽量不要有没有用的比较判断之类的\n\n\n------\n","source":"_posts/LeetCode-013-Roman-to-Integer.md","raw":"---\ntitle: LeetCode-013-Roman to Integer\ntags:\n  - LeetCode\n  - Math\n  - String\n  - Integer\n  - Easy\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-05-01 03:57:54\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/roman-to-integer/)   \nRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol　　　Value\nI　　　　　　 1\nV　　　　　　 5\nX　　　　　　 10\nL　　　　　　 50\nC　　　　　　 100\nD　　　　　　 500\nM　　　　　　 1000\n\nFor example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\n- I can be placed before V (5) and X (10) to make 4 and 9. \n- X can be placed before L (50) and C (100) to make 40 and 90. \n- C can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.\n\n### Examples:\n**Input:**\"III\"\n**Output:**3\n\n**Input:**\"IV\"\n**Output:**4\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 想到两种方法，第一种是遍历字符串，判断每个字符和右边字符代表数字的大小，如果不小于右边的，就加上这个字符代表的数字，否则减去。遍历之前要建立字符对应数字的map，时间复杂度是O(n)\n- 还有一种方法是遍历每种情况，然后从左向右查找字符串中的字符，并且记录出现的次数，最后加上次数乘以数字,时间复杂度也是O(n),但是比第一种会花更多时间，因为有无用的比较\n\n\n## C++ Codes\n第一种，遍历字符串，40ms，10.8MB\n```C++\nclass Solution {\npublic:\n    int romanToInt(string s) {\n        int res = 0;\n        map<char,int> values;\n        values['M']=1000;\n        values['D']=500;\n        values['C']=100;\n        values['L']=50;\n        values['X']=10;\n        values['V']=5;\n        values['I']=1;\n        \n        for(int i=0;i<s.length()-1;i++)\n          values[s[i]]>=values[s[i+1]]?\n              res+=values[s[i]]:res-=values[s[i]];\n        \n        //加上最后一位\n        res += values[s[s.length()-1]];\n        return res;\n    }\n};\n```\n\n第二种，遍历每种情况，160ms，8.6MB\n```C++\nclass Solution {\npublic:\n    int romanToInt(string s) {\n        int values[]={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n        string chr[]={\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"};\n        int pos = 0, cnt = 0, res = 0;\n\n        for(int i=0;i<13;i++){\n            while(s.substr(pos,chr[i].length())==chr[i]){\n                cnt++;\n                pos+=chr[i].length();\n            }\n            res += values[i]*cnt;\n            cnt = 0;\n        }\n        return res;\n    }\n};\n```\n\n## Python Codes\n和C++相差不多，就不写了，比较简单\n\n## 总结\n- map真好用\n- 尽量不要有没有用的比较判断之类的\n\n\n------\n","slug":"LeetCode-013-Roman-to-Integer","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjtm002eussbdaa0hq22","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/roman-to-integer/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.<br>Symbol　　　Value<br>I　　　　　　 1<br>V　　　　　　 5<br>X　　　　　　 10<br>L　　　　　　 50<br>C　　　　　　 100<br>D　　　　　　 500<br>M　　　　　　 1000</p>\n<p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p>\n<ul>\n<li>I can be placed before V (5) and X (10) to make 4 and 9. </li>\n<li>X can be placed before L (50) and C (100) to make 40 and 90. </li>\n<li>C can be placed before D (500) and M (1000) to make 400 and 900.</li>\n</ul>\n<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>“III”<br><strong>Output:</strong>3</p>\n<p><strong>Input:</strong>“IV”<br><strong>Output:</strong>4</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>想到两种方法，第一种是遍历字符串，判断每个字符和右边字符代表数字的大小，如果不小于右边的，就加上这个字符代表的数字，否则减去。遍历之前要建立字符对应数字的map，时间复杂度是O(n)</li>\n<li>还有一种方法是遍历每种情况，然后从左向右查找字符串中的字符，并且记录出现的次数，最后加上次数乘以数字,时间复杂度也是O(n),但是比第一种会花更多时间，因为有无用的比较</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>第一种，遍历字符串，40ms，10.8MB<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">romanToInt</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; values;</span><br><span class=\"line\">        values[<span class=\"string\">'M'</span>]=<span class=\"number\">1000</span>;</span><br><span class=\"line\">        values[<span class=\"string\">'D'</span>]=<span class=\"number\">500</span>;</span><br><span class=\"line\">        values[<span class=\"string\">'C'</span>]=<span class=\"number\">100</span>;</span><br><span class=\"line\">        values[<span class=\"string\">'L'</span>]=<span class=\"number\">50</span>;</span><br><span class=\"line\">        values[<span class=\"string\">'X'</span>]=<span class=\"number\">10</span>;</span><br><span class=\"line\">        values[<span class=\"string\">'V'</span>]=<span class=\"number\">5</span>;</span><br><span class=\"line\">        values[<span class=\"string\">'I'</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length()<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">          values[s[i]]&gt;=values[s[i+<span class=\"number\">1</span>]]?</span><br><span class=\"line\">              res+=values[s[i]]:res-=values[s[i]];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//加上最后一位</span></span><br><span class=\"line\">        res += values[s[s.length()<span class=\"number\">-1</span>]];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>第二种，遍历每种情况，160ms，8.6MB<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">romanToInt</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> values[]=&#123;<span class=\"number\">1000</span>,<span class=\"number\">900</span>,<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">100</span>,<span class=\"number\">90</span>,<span class=\"number\">50</span>,<span class=\"number\">40</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> chr[]=&#123;<span class=\"string\">\"M\"</span>,<span class=\"string\">\"CM\"</span>,<span class=\"string\">\"D\"</span>,<span class=\"string\">\"CD\"</span>,<span class=\"string\">\"C\"</span>,<span class=\"string\">\"XC\"</span>,<span class=\"string\">\"L\"</span>,<span class=\"string\">\"XL\"</span>,<span class=\"string\">\"X\"</span>,<span class=\"string\">\"IX\"</span>,<span class=\"string\">\"V\"</span>,<span class=\"string\">\"IV\"</span>,<span class=\"string\">\"I\"</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">13</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(s.substr(pos,chr[i].length())==chr[i])&#123;</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">                pos+=chr[i].length();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res += values[i]*cnt;</span><br><span class=\"line\">            cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>和C++相差不多，就不写了，比较简单</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>map真好用</li>\n<li>尽量不要有没有用的比较判断之类的</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/roman-to-integer/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.<br>Symbol　　　Value<br>I　　　　　　 1<br>V　　　　　　 5<br>X　　　　　　 10<br>L　　　　　　 50<br>C　　　　　　 100<br>D　　　　　　 500<br>M　　　　　　 1000</p>\n<p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p>\n<ul>\n<li>I can be placed before V (5) and X (10) to make 4 and 9. </li>\n<li>X can be placed before L (50) and C (100) to make 40 and 90. </li>\n<li>C can be placed before D (500) and M (1000) to make 400 and 900.</li>\n</ul>\n<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>“III”<br><strong>Output:</strong>3</p>\n<p><strong>Input:</strong>“IV”<br><strong>Output:</strong>4</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>想到两种方法，第一种是遍历字符串，判断每个字符和右边字符代表数字的大小，如果不小于右边的，就加上这个字符代表的数字，否则减去。遍历之前要建立字符对应数字的map，时间复杂度是O(n)</li>\n<li>还有一种方法是遍历每种情况，然后从左向右查找字符串中的字符，并且记录出现的次数，最后加上次数乘以数字,时间复杂度也是O(n),但是比第一种会花更多时间，因为有无用的比较</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>第一种，遍历字符串，40ms，10.8MB<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">romanToInt</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; values;</span><br><span class=\"line\">        values[<span class=\"string\">'M'</span>]=<span class=\"number\">1000</span>;</span><br><span class=\"line\">        values[<span class=\"string\">'D'</span>]=<span class=\"number\">500</span>;</span><br><span class=\"line\">        values[<span class=\"string\">'C'</span>]=<span class=\"number\">100</span>;</span><br><span class=\"line\">        values[<span class=\"string\">'L'</span>]=<span class=\"number\">50</span>;</span><br><span class=\"line\">        values[<span class=\"string\">'X'</span>]=<span class=\"number\">10</span>;</span><br><span class=\"line\">        values[<span class=\"string\">'V'</span>]=<span class=\"number\">5</span>;</span><br><span class=\"line\">        values[<span class=\"string\">'I'</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length()<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">          values[s[i]]&gt;=values[s[i+<span class=\"number\">1</span>]]?</span><br><span class=\"line\">              res+=values[s[i]]:res-=values[s[i]];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//加上最后一位</span></span><br><span class=\"line\">        res += values[s[s.length()<span class=\"number\">-1</span>]];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>第二种，遍历每种情况，160ms，8.6MB<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">romanToInt</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> values[]=&#123;<span class=\"number\">1000</span>,<span class=\"number\">900</span>,<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">100</span>,<span class=\"number\">90</span>,<span class=\"number\">50</span>,<span class=\"number\">40</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> chr[]=&#123;<span class=\"string\">\"M\"</span>,<span class=\"string\">\"CM\"</span>,<span class=\"string\">\"D\"</span>,<span class=\"string\">\"CD\"</span>,<span class=\"string\">\"C\"</span>,<span class=\"string\">\"XC\"</span>,<span class=\"string\">\"L\"</span>,<span class=\"string\">\"XL\"</span>,<span class=\"string\">\"X\"</span>,<span class=\"string\">\"IX\"</span>,<span class=\"string\">\"V\"</span>,<span class=\"string\">\"IV\"</span>,<span class=\"string\">\"I\"</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">13</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(s.substr(pos,chr[i].length())==chr[i])&#123;</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">                pos+=chr[i].length();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res += values[i]*cnt;</span><br><span class=\"line\">            cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>和C++相差不多，就不写了，比较简单</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>map真好用</li>\n<li>尽量不要有没有用的比较判断之类的</li>\n</ul>\n<hr>"},{"title":"LeetCode-014-Longest Common Prefix","comments":1,"mathjax":false,"date":"2019-05-18T04:55:53.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n一道简单题，看到腾讯50题里有，还是花点时间补上了，没想到简单题方法还这么多\n\n## [Problem](https://leetcode.com/problems/longest-common-prefix/)   \nWrite a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".\n\n### Examples:\n**Input:**[\"flower\",\"flow\",\"flight\"]\n**Output:**\"fl\"\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 找公共前缀这个问题，比较简单的想法就是一个个比较嘛，最先想到的也是这种方法，以第一个字符串为基准，从前往后比较每个字符是否和后面的字符全部相等，如果有不等的，那肯定前面的就是最长的公共前缀了，如果都相等，那就继续比较后一个字符\n- 另一种差不多的方法是从后往前，先比较最长的，再慢慢减小\n- 优化的办法是二分查找，minLen作为最短字符串的长度，二分查找这个是否为最长公共前缀\n- 题解中还有分治法，这个算法的思路来自于LCP操作的结合律。 我们可以发现： LCP(S1…Sn)=LCP(LCP(S1…Sk),LCP(Sk+1…Sn))，其中LCP(S1...Sn)是字符串[S1...Sn]的最长公共前缀\n- 基于二分查找，更进一步是用字典树，详细的看题解把\n\n## C++ Codes\n第一种解法，最容易想到的\n```C++\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        string prefix;\n        int flag = 1;\n        if(strs.size()==0 || strs[0].length()==0)return prefix;\n\n        for(int i=0;i<strs[0].length();i++){\n            for(int j=1;j<strs.size();j++){\n                if(strs[j].length()<i+1 || strs[j][i]!=strs[0][i]){\n                    flag = 0;\n                    break;\n                }\n            }\n\n            if(flag) prefix += strs[0][i];\n            else break;\n        }\n        return prefix;\n    }\n};\n```\n\n## 总结\n- emm，简单题也有这么多种做法...\n- 最长公共前缀可以1.遍历前缀，2.二分查找前缀，3.分治找前缀，4.字典树找前缀\n\n\n------\n","source":"_posts/LeetCode-014-Longest-Common-Prefix.md","raw":"---\ntitle: LeetCode-014-Longest Common Prefix\ntags:\n  - LeetCode\n  - Prefix\n  - String\n  - Easy\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-05-18 12:55:53\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n一道简单题，看到腾讯50题里有，还是花点时间补上了，没想到简单题方法还这么多\n\n## [Problem](https://leetcode.com/problems/longest-common-prefix/)   \nWrite a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".\n\n### Examples:\n**Input:**[\"flower\",\"flow\",\"flight\"]\n**Output:**\"fl\"\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 找公共前缀这个问题，比较简单的想法就是一个个比较嘛，最先想到的也是这种方法，以第一个字符串为基准，从前往后比较每个字符是否和后面的字符全部相等，如果有不等的，那肯定前面的就是最长的公共前缀了，如果都相等，那就继续比较后一个字符\n- 另一种差不多的方法是从后往前，先比较最长的，再慢慢减小\n- 优化的办法是二分查找，minLen作为最短字符串的长度，二分查找这个是否为最长公共前缀\n- 题解中还有分治法，这个算法的思路来自于LCP操作的结合律。 我们可以发现： LCP(S1…Sn)=LCP(LCP(S1…Sk),LCP(Sk+1…Sn))，其中LCP(S1...Sn)是字符串[S1...Sn]的最长公共前缀\n- 基于二分查找，更进一步是用字典树，详细的看题解把\n\n## C++ Codes\n第一种解法，最容易想到的\n```C++\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        string prefix;\n        int flag = 1;\n        if(strs.size()==0 || strs[0].length()==0)return prefix;\n\n        for(int i=0;i<strs[0].length();i++){\n            for(int j=1;j<strs.size();j++){\n                if(strs[j].length()<i+1 || strs[j][i]!=strs[0][i]){\n                    flag = 0;\n                    break;\n                }\n            }\n\n            if(flag) prefix += strs[0][i];\n            else break;\n        }\n        return prefix;\n    }\n};\n```\n\n## 总结\n- emm，简单题也有这么多种做法...\n- 最长公共前缀可以1.遍历前缀，2.二分查找前缀，3.分治找前缀，4.字典树找前缀\n\n\n------\n","slug":"LeetCode-014-Longest-Common-Prefix","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjts002hussblsu7ajbk","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一道简单题，看到腾讯50题里有，还是花点时间补上了，没想到简单题方法还这么多</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/longest-common-prefix/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Write a function to find the longest common prefix string amongst an array of strings.</p>\n<p>If there is no common prefix, return an empty string “”.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>[“flower”,”flow”,”flight”]<br><strong>Output:</strong>“fl”</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>找公共前缀这个问题，比较简单的想法就是一个个比较嘛，最先想到的也是这种方法，以第一个字符串为基准，从前往后比较每个字符是否和后面的字符全部相等，如果有不等的，那肯定前面的就是最长的公共前缀了，如果都相等，那就继续比较后一个字符</li>\n<li>另一种差不多的方法是从后往前，先比较最长的，再慢慢减小</li>\n<li>优化的办法是二分查找，minLen作为最短字符串的长度，二分查找这个是否为最长公共前缀</li>\n<li>题解中还有分治法，这个算法的思路来自于LCP操作的结合律。 我们可以发现： LCP(S1…Sn)=LCP(LCP(S1…Sk),LCP(Sk+1…Sn))，其中LCP(S1…Sn)是字符串[S1…Sn]的最长公共前缀</li>\n<li>基于二分查找，更进一步是用字典树，详细的看题解把</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>第一种解法，最容易想到的<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> prefix;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strs.size()==<span class=\"number\">0</span> || strs[<span class=\"number\">0</span>].length()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> prefix;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;strs[<span class=\"number\">0</span>].length();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;strs.size();j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(strs[j].length()&lt;i+<span class=\"number\">1</span> || strs[j][i]!=strs[<span class=\"number\">0</span>][i])&#123;</span><br><span class=\"line\">                    flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag) prefix += strs[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>emm，简单题也有这么多种做法…</li>\n<li>最长公共前缀可以1.遍历前缀，2.二分查找前缀，3.分治找前缀，4.字典树找前缀</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一道简单题，看到腾讯50题里有，还是花点时间补上了，没想到简单题方法还这么多</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/longest-common-prefix/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Write a function to find the longest common prefix string amongst an array of strings.</p>\n<p>If there is no common prefix, return an empty string “”.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>[“flower”,”flow”,”flight”]<br><strong>Output:</strong>“fl”</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>找公共前缀这个问题，比较简单的想法就是一个个比较嘛，最先想到的也是这种方法，以第一个字符串为基准，从前往后比较每个字符是否和后面的字符全部相等，如果有不等的，那肯定前面的就是最长的公共前缀了，如果都相等，那就继续比较后一个字符</li>\n<li>另一种差不多的方法是从后往前，先比较最长的，再慢慢减小</li>\n<li>优化的办法是二分查找，minLen作为最短字符串的长度，二分查找这个是否为最长公共前缀</li>\n<li>题解中还有分治法，这个算法的思路来自于LCP操作的结合律。 我们可以发现： LCP(S1…Sn)=LCP(LCP(S1…Sk),LCP(Sk+1…Sn))，其中LCP(S1…Sn)是字符串[S1…Sn]的最长公共前缀</li>\n<li>基于二分查找，更进一步是用字典树，详细的看题解把</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>第一种解法，最容易想到的<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> prefix;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strs.size()==<span class=\"number\">0</span> || strs[<span class=\"number\">0</span>].length()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> prefix;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;strs[<span class=\"number\">0</span>].length();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;strs.size();j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(strs[j].length()&lt;i+<span class=\"number\">1</span> || strs[j][i]!=strs[<span class=\"number\">0</span>][i])&#123;</span><br><span class=\"line\">                    flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag) prefix += strs[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>emm，简单题也有这么多种做法…</li>\n<li>最长公共前缀可以1.遍历前缀，2.二分查找前缀，3.分治找前缀，4.字典树找前缀</li>\n</ul>\n<hr>"},{"title":"LeetCode-015-3Sum","comments":1,"mathjax":false,"date":"2019-05-19T13:22:18.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n快半月没更新了，也没怎么刷题，家里有事情耽误了，后面一周又忙着别的，以后简单难度的题就直接略过了，加快进度，么得时间咯\n\n## [Problem](https://leetcode.com/problems/3sum/)   \nGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n\n**Note:**  \nThe solution set must not contain duplicate triplets.\n\n### Examples:\n**Input:**nums = [-1, 0, 1, 2, -1, -4]\n**Output:**[ [-1, 0, 1], [-1, -1, 2] ]\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 暴力法，但是想想不优化的花$$ n^3 $$的复杂度还是算了，就算优化估计也难过\n- 想了递归的方法，先固定一个数，问题变成找两个数和为第一个数的负数，然后再固定一个数，找最后一个，但是相当于也是$$ n^3 $$，想了用类似dp那样的优化，似乎也不行，数字只能用一次\n- 最后的方法是，先选第一个数，然后找剩下的连个数，让三个数和为0，剩下的两个数找的时候优化一下，排序后一个从前一个从后找，具体看代码\n\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        //先排序预处理，如果发现全都是大于0或者全小于0，或者少于三个元素，就返回\n        sort(nums.begin(),nums.end());\n        if(nums.size()<3||nums.front()>0||nums.back()<0) return {};\n\n        vector<vector<int>> res;\n        int len = nums.size();\n\n        for(int i=0;i<len;i++){\n            //很明显只需要找第一个数小于0的\n            if(nums[i]>0)break;\n            //这里记得要写i>0，边界判断，容易丢\n            if(i>0 && nums[i]==nums[i-1]) continue;\n\n            //left自增，right自减\n            int left = i+1, right = len-1;\n            while(left<right){\n                int tmp = nums[i]+nums[left]+nums[right];\n                if(tmp==0){\n                    res.push_back(vector<int>{nums[i], nums[left], nums[right]});\n                    \n                    //如果出现数字相同跳过，注意边界条件：left < right\n                    while (left < right && nums[left] == nums[left + 1]) left += 1;\n                    while (left < right && nums[right] == nums[right - 1]) right -= 1;\n\n                    left++;\n                    right--;\n                }\n                //很好理解，大于0说明正数太大，小于0说明负数太小\n                else if(tmp>0) right--;\n                else if(tmp<0) left++;\n            }\n        }\n        return res;\n    }\n};\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        res = []\n\n        for i in range(n):\n            if res[i] > 0\n                break\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n\n            left = i + 1\n            right = n - 1\n            while left < right:\n                cur_sum = nums[i] + nums[left] + nums[right]\n                if cur_sum == 0:\n                    tmp = [nums[i],nums[left],nums[right]]\n                    res.append(tmp)\n                    while left < right and nums[left] == nums[left+1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right-1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n                elif cur_sum > 0:\n                    right -= 1\n                else:\n                    left += 1\n        return res\n```\n\n## 总结\n- 找符合条件的数的时候，双指针前后开始找很好用\n- 边界条件判断很重要，条件语句要多想想，容易漏\n\n\n------\n","source":"_posts/LeetCode-015-3Sum.md","raw":"---\ntitle: LeetCode-015-3Sum\ntags:\n  - LeetCode\n  - Medium\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-05-19 21:22:18\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n快半月没更新了，也没怎么刷题，家里有事情耽误了，后面一周又忙着别的，以后简单难度的题就直接略过了，加快进度，么得时间咯\n\n## [Problem](https://leetcode.com/problems/3sum/)   \nGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n\n**Note:**  \nThe solution set must not contain duplicate triplets.\n\n### Examples:\n**Input:**nums = [-1, 0, 1, 2, -1, -4]\n**Output:**[ [-1, 0, 1], [-1, -1, 2] ]\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 暴力法，但是想想不优化的花$$ n^3 $$的复杂度还是算了，就算优化估计也难过\n- 想了递归的方法，先固定一个数，问题变成找两个数和为第一个数的负数，然后再固定一个数，找最后一个，但是相当于也是$$ n^3 $$，想了用类似dp那样的优化，似乎也不行，数字只能用一次\n- 最后的方法是，先选第一个数，然后找剩下的连个数，让三个数和为0，剩下的两个数找的时候优化一下，排序后一个从前一个从后找，具体看代码\n\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        //先排序预处理，如果发现全都是大于0或者全小于0，或者少于三个元素，就返回\n        sort(nums.begin(),nums.end());\n        if(nums.size()<3||nums.front()>0||nums.back()<0) return {};\n\n        vector<vector<int>> res;\n        int len = nums.size();\n\n        for(int i=0;i<len;i++){\n            //很明显只需要找第一个数小于0的\n            if(nums[i]>0)break;\n            //这里记得要写i>0，边界判断，容易丢\n            if(i>0 && nums[i]==nums[i-1]) continue;\n\n            //left自增，right自减\n            int left = i+1, right = len-1;\n            while(left<right){\n                int tmp = nums[i]+nums[left]+nums[right];\n                if(tmp==0){\n                    res.push_back(vector<int>{nums[i], nums[left], nums[right]});\n                    \n                    //如果出现数字相同跳过，注意边界条件：left < right\n                    while (left < right && nums[left] == nums[left + 1]) left += 1;\n                    while (left < right && nums[right] == nums[right - 1]) right -= 1;\n\n                    left++;\n                    right--;\n                }\n                //很好理解，大于0说明正数太大，小于0说明负数太小\n                else if(tmp>0) right--;\n                else if(tmp<0) left++;\n            }\n        }\n        return res;\n    }\n};\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        res = []\n\n        for i in range(n):\n            if res[i] > 0\n                break\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n\n            left = i + 1\n            right = n - 1\n            while left < right:\n                cur_sum = nums[i] + nums[left] + nums[right]\n                if cur_sum == 0:\n                    tmp = [nums[i],nums[left],nums[right]]\n                    res.append(tmp)\n                    while left < right and nums[left] == nums[left+1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right-1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n                elif cur_sum > 0:\n                    right -= 1\n                else:\n                    left += 1\n        return res\n```\n\n## 总结\n- 找符合条件的数的时候，双指针前后开始找很好用\n- 边界条件判断很重要，条件语句要多想想，容易漏\n\n\n------\n","slug":"LeetCode-015-3Sum","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjtz002kussbb1vwnsmm","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>快半月没更新了，也没怎么刷题，家里有事情耽误了，后面一周又忙着别的，以后简单难度的题就直接略过了，加快进度，么得时间咯</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/3sum/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n<p><strong>Note:</strong><br>The solution set must not contain duplicate triplets.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>nums = [-1, 0, 1, 2, -1, -4]<br><strong>Output:</strong>[ [-1, 0, 1], [-1, -1, 2] ]</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>暴力法，但是想想不优化的花<script type=\"math/tex\">n^3</script>的复杂度还是算了，就算优化估计也难过</li>\n<li>想了递归的方法，先固定一个数，问题变成找两个数和为第一个数的负数，然后再固定一个数，找最后一个，但是相当于也是<script type=\"math/tex\">n^3</script>，想了用类似dp那样的优化，似乎也不行，数字只能用一次</li>\n<li>最后的方法是，先选第一个数，然后找剩下的连个数，让三个数和为0，剩下的两个数找的时候优化一下，排序后一个从前一个从后找，具体看代码</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; threeSum(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//先排序预处理，如果发现全都是大于0或者全小于0，或者少于三个元素，就返回</span></span><br><span class=\"line\">        sort(nums.begin(),nums.end());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.size()&lt;<span class=\"number\">3</span>||nums.front()&gt;<span class=\"number\">0</span>||nums.back()&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.size();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//很明显只需要找第一个数小于0的</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]&gt;<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"comment\">//这里记得要写i&gt;0，边界判断，容易丢</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; nums[i]==nums[i<span class=\"number\">-1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//left自增，right自减</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> left = i+<span class=\"number\">1</span>, right = len<span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = nums[i]+nums[left]+nums[right];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    res.push_back(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;nums[i], nums[left], nums[right]&#125;);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"comment\">//如果出现数字相同跳过，注意边界条件：left &lt; right</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class=\"number\">1</span>]) left += <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class=\"number\">1</span>]) right -= <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    left++;</span><br><span class=\"line\">                    right--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//很好理解，大于0说明正数太大，小于0说明负数太小</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tmp&gt;<span class=\"number\">0</span>) right--;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tmp&lt;<span class=\"number\">0</span>) left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">threeSum</span><span class=\"params\">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class=\"line\">        nums.sort()</span><br><span class=\"line\">        n = len(nums)</span><br><span class=\"line\">        res = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res[i] &gt; <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> nums[i] == nums[i<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            left = i + <span class=\"number\">1</span></span><br><span class=\"line\">            right = n - <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">                cur_sum = nums[i] + nums[left] + nums[right]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> cur_sum == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    tmp = [nums[i],nums[left],nums[right]]</span><br><span class=\"line\">                    res.append(tmp)</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> nums[left] == nums[left+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                        left += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> nums[right] == nums[right<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                        right -= <span class=\"number\">1</span></span><br><span class=\"line\">                    left += <span class=\"number\">1</span></span><br><span class=\"line\">                    right -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> cur_sum &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    right -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    left += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>找符合条件的数的时候，双指针前后开始找很好用</li>\n<li>边界条件判断很重要，条件语句要多想想，容易漏</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>快半月没更新了，也没怎么刷题，家里有事情耽误了，后面一周又忙着别的，以后简单难度的题就直接略过了，加快进度，么得时间咯</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/3sum/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n<p><strong>Note:</strong><br>The solution set must not contain duplicate triplets.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>nums = [-1, 0, 1, 2, -1, -4]<br><strong>Output:</strong>[ [-1, 0, 1], [-1, -1, 2] ]</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>暴力法，但是想想不优化的花<script type=\"math/tex\">n^3</script>的复杂度还是算了，就算优化估计也难过</li>\n<li>想了递归的方法，先固定一个数，问题变成找两个数和为第一个数的负数，然后再固定一个数，找最后一个，但是相当于也是<script type=\"math/tex\">n^3</script>，想了用类似dp那样的优化，似乎也不行，数字只能用一次</li>\n<li>最后的方法是，先选第一个数，然后找剩下的连个数，让三个数和为0，剩下的两个数找的时候优化一下，排序后一个从前一个从后找，具体看代码</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; threeSum(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//先排序预处理，如果发现全都是大于0或者全小于0，或者少于三个元素，就返回</span></span><br><span class=\"line\">        sort(nums.begin(),nums.end());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.size()&lt;<span class=\"number\">3</span>||nums.front()&gt;<span class=\"number\">0</span>||nums.back()&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.size();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//很明显只需要找第一个数小于0的</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]&gt;<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"comment\">//这里记得要写i&gt;0，边界判断，容易丢</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; nums[i]==nums[i<span class=\"number\">-1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//left自增，right自减</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> left = i+<span class=\"number\">1</span>, right = len<span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = nums[i]+nums[left]+nums[right];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    res.push_back(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;nums[i], nums[left], nums[right]&#125;);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"comment\">//如果出现数字相同跳过，注意边界条件：left &lt; right</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class=\"number\">1</span>]) left += <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class=\"number\">1</span>]) right -= <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    left++;</span><br><span class=\"line\">                    right--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//很好理解，大于0说明正数太大，小于0说明负数太小</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tmp&gt;<span class=\"number\">0</span>) right--;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tmp&lt;<span class=\"number\">0</span>) left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">threeSum</span><span class=\"params\">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class=\"line\">        nums.sort()</span><br><span class=\"line\">        n = len(nums)</span><br><span class=\"line\">        res = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res[i] &gt; <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> nums[i] == nums[i<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            left = i + <span class=\"number\">1</span></span><br><span class=\"line\">            right = n - <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">                cur_sum = nums[i] + nums[left] + nums[right]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> cur_sum == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    tmp = [nums[i],nums[left],nums[right]]</span><br><span class=\"line\">                    res.append(tmp)</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> nums[left] == nums[left+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                        left += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> nums[right] == nums[right<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                        right -= <span class=\"number\">1</span></span><br><span class=\"line\">                    left += <span class=\"number\">1</span></span><br><span class=\"line\">                    right -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> cur_sum &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    right -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    left += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>找符合条件的数的时候，双指针前后开始找很好用</li>\n<li>边界条件判断很重要，条件语句要多想想，容易漏</li>\n</ul>\n<hr>"},{"title":"LeetCode-016-3Sum Closest","comments":1,"mathjax":false,"date":"2019-05-22T05:28:15.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/3sum-closest/)   \nGiven an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\n### Examples:\n**Input:**Given array nums = [-1, 2, 1, -4], and target = 1.\n**Output:**The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 还是基于上一道题，用三指针，在将向量排序后，第一个指针从前往后移动，后面两个指针一个指向第一个指针的后一个元素，另一个指向最后一个元素。记录和target相差最小的三数之和，每次比较target和当前三数之和，如果三数之和比target大，那就减小第三个指针位置，如果比target小，就增加第二个指针位置，相等就直接返回了。\n\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:\n    int threeSumClosest(vector<int>& nums, int target) {\n        sort(nums.begin(),nums.end());\n        if(nums.size()<3) return 0;\n        \n        //初始化为前三个的和与target的差\n        int min_diff = nums[0]+nums[1]+nums[2];\n        for(int i=0;i<nums.size()-2;i++){\n            if(i>0 && nums[i]==nums[i-1]) continue;\n            \n            int l = i+1, r = nums.size()-1;\n            while(l<r){\n                //当前三个数和target的差\n                int cur_diff = nums[i]+nums[l]+nums[r];\n                if(target == cur_diff)return target;\n                if(abs(target-cur_diff) < abs(target-min_diff))min_diff = cur_diff;\n                if(target > cur_diff)l++;\n                if(target < cur_diff)r--;\n            }\n        }\n        return min_diff;\n    }\n};\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        nums.sort()\n        n = len(nums)\n        res = float(\"inf\")\n        for i in range(n):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            left = i + 1\n            right = n - 1\n            while left < right :\n                #print(left,right)\n                cur = nums[i] + nums[left] + nums[right]\n                if cur == target:return target\n                if abs(res-target) > abs(cur-target):\n                    res = cur\n                if cur > target:\n                    right -= 1\n                elif cur < target:\n                    left += 1\n        return res\n```\n\n## 总结\n- 基本办法和第15题一样，中间处理有点差别\n\n\n------\n","source":"_posts/LeetCode-016-3Sum-Closest.md","raw":"---\ntitle: LeetCode-016-3Sum Closest\ntags:\n  - LeetCode\n  - Closest\n  - 3Sum\n  - Medium\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-05-22 13:28:15\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/3sum-closest/)   \nGiven an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\n### Examples:\n**Input:**Given array nums = [-1, 2, 1, -4], and target = 1.\n**Output:**The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 还是基于上一道题，用三指针，在将向量排序后，第一个指针从前往后移动，后面两个指针一个指向第一个指针的后一个元素，另一个指向最后一个元素。记录和target相差最小的三数之和，每次比较target和当前三数之和，如果三数之和比target大，那就减小第三个指针位置，如果比target小，就增加第二个指针位置，相等就直接返回了。\n\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:\n    int threeSumClosest(vector<int>& nums, int target) {\n        sort(nums.begin(),nums.end());\n        if(nums.size()<3) return 0;\n        \n        //初始化为前三个的和与target的差\n        int min_diff = nums[0]+nums[1]+nums[2];\n        for(int i=0;i<nums.size()-2;i++){\n            if(i>0 && nums[i]==nums[i-1]) continue;\n            \n            int l = i+1, r = nums.size()-1;\n            while(l<r){\n                //当前三个数和target的差\n                int cur_diff = nums[i]+nums[l]+nums[r];\n                if(target == cur_diff)return target;\n                if(abs(target-cur_diff) < abs(target-min_diff))min_diff = cur_diff;\n                if(target > cur_diff)l++;\n                if(target < cur_diff)r--;\n            }\n        }\n        return min_diff;\n    }\n};\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        nums.sort()\n        n = len(nums)\n        res = float(\"inf\")\n        for i in range(n):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            left = i + 1\n            right = n - 1\n            while left < right :\n                #print(left,right)\n                cur = nums[i] + nums[left] + nums[right]\n                if cur == target:return target\n                if abs(res-target) > abs(cur-target):\n                    res = cur\n                if cur > target:\n                    right -= 1\n                elif cur < target:\n                    left += 1\n        return res\n```\n\n## 总结\n- 基本办法和第15题一样，中间处理有点差别\n\n\n------\n","slug":"LeetCode-016-3Sum-Closest","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtju3002nussblg5wz0i8","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/3sum-closest/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>Given array nums = [-1, 2, 1, -4], and target = 1.<br><strong>Output:</strong>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>还是基于上一道题，用三指针，在将向量排序后，第一个指针从前往后移动，后面两个指针一个指向第一个指针的后一个元素，另一个指向最后一个元素。记录和target相差最小的三数之和，每次比较target和当前三数之和，如果三数之和比target大，那就减小第三个指针位置，如果比target小，就增加第二个指针位置，相等就直接返回了。</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">threeSumClosest</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        sort(nums.begin(),nums.end());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.size()&lt;<span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//初始化为前三个的和与target的差</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> min_diff = nums[<span class=\"number\">0</span>]+nums[<span class=\"number\">1</span>]+nums[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.size()<span class=\"number\">-2</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; nums[i]==nums[i<span class=\"number\">-1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">int</span> l = i+<span class=\"number\">1</span>, r = nums.size()<span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l&lt;r)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//当前三个数和target的差</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> cur_diff = nums[i]+nums[l]+nums[r];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(target == cur_diff)<span class=\"keyword\">return</span> target;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(target-cur_diff) &lt; <span class=\"built_in\">abs</span>(target-min_diff))min_diff = cur_diff;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(target &gt; cur_diff)l++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(target &lt; cur_diff)r--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min_diff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">threeSumClosest</span><span class=\"params\">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class=\"line\">        nums.sort()</span><br><span class=\"line\">        n = len(nums)</span><br><span class=\"line\">        res = float(<span class=\"string\">\"inf\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> nums[i] == nums[i<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            left = i + <span class=\"number\">1</span></span><br><span class=\"line\">            right = n - <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> left &lt; right :</span><br><span class=\"line\">                <span class=\"comment\">#print(left,right)</span></span><br><span class=\"line\">                cur = nums[i] + nums[left] + nums[right]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> cur == target:<span class=\"keyword\">return</span> target</span><br><span class=\"line\">                <span class=\"keyword\">if</span> abs(res-target) &gt; abs(cur-target):</span><br><span class=\"line\">                    res = cur</span><br><span class=\"line\">                <span class=\"keyword\">if</span> cur &gt; target:</span><br><span class=\"line\">                    right -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> cur &lt; target:</span><br><span class=\"line\">                    left += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>基本办法和第15题一样，中间处理有点差别</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/3sum-closest/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>Given array nums = [-1, 2, 1, -4], and target = 1.<br><strong>Output:</strong>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>还是基于上一道题，用三指针，在将向量排序后，第一个指针从前往后移动，后面两个指针一个指向第一个指针的后一个元素，另一个指向最后一个元素。记录和target相差最小的三数之和，每次比较target和当前三数之和，如果三数之和比target大，那就减小第三个指针位置，如果比target小，就增加第二个指针位置，相等就直接返回了。</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">threeSumClosest</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        sort(nums.begin(),nums.end());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.size()&lt;<span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//初始化为前三个的和与target的差</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> min_diff = nums[<span class=\"number\">0</span>]+nums[<span class=\"number\">1</span>]+nums[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.size()<span class=\"number\">-2</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; nums[i]==nums[i<span class=\"number\">-1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">int</span> l = i+<span class=\"number\">1</span>, r = nums.size()<span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l&lt;r)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//当前三个数和target的差</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> cur_diff = nums[i]+nums[l]+nums[r];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(target == cur_diff)<span class=\"keyword\">return</span> target;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(target-cur_diff) &lt; <span class=\"built_in\">abs</span>(target-min_diff))min_diff = cur_diff;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(target &gt; cur_diff)l++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(target &lt; cur_diff)r--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min_diff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">threeSumClosest</span><span class=\"params\">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class=\"line\">        nums.sort()</span><br><span class=\"line\">        n = len(nums)</span><br><span class=\"line\">        res = float(<span class=\"string\">\"inf\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> nums[i] == nums[i<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            left = i + <span class=\"number\">1</span></span><br><span class=\"line\">            right = n - <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> left &lt; right :</span><br><span class=\"line\">                <span class=\"comment\">#print(left,right)</span></span><br><span class=\"line\">                cur = nums[i] + nums[left] + nums[right]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> cur == target:<span class=\"keyword\">return</span> target</span><br><span class=\"line\">                <span class=\"keyword\">if</span> abs(res-target) &gt; abs(cur-target):</span><br><span class=\"line\">                    res = cur</span><br><span class=\"line\">                <span class=\"keyword\">if</span> cur &gt; target:</span><br><span class=\"line\">                    right -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> cur &lt; target:</span><br><span class=\"line\">                    left += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>基本办法和第15题一样，中间处理有点差别</li>\n</ul>\n<hr>"},{"title":"LeetCode-017-Letter Combinations of a Phone Number","comments":1,"mathjax":false,"date":"2019-05-22T05:48:56.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/letter-combinations-of-a-phone-number/)   \nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n2：\"abc\", 3-\"def\", 4-\"ghi\", 5-\"jkl\", 6-\"mno\", 7-\"pqrs\", 8-\"tuv\", 9-\"wxyz\"\n\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n### Examples:\n**Input:**\"23\"\n**Output:**[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 递归，当后面的全部完成了排列之后，前面的加上就是全部的排列方式，这里要记录前缀，到最后没有数字的时候，就添加前缀并返回\n\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:        \n    string mapChar[10] = {\"\",\"\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"};\n    vector<string> letterCombinations(string digits) {\n        if(digits.length()==0)return {};\n        vector<string> res;\n        recurDigit(digits,\"\",res);\n        return res;\n    }\n    \n    void recurDigit(string digits,string prefix, vector<string>& res){\n        //边界条件\n        if(digits==\"\") {\n            res.push_back(prefix);\n            return;\n        }\n        \n        string key = mapChar[digits[0]-'0'];\n        int n = key.length();\n        for(int i=0;i<n;i++)\n            recurDigit(digits.substr(1), prefix+key[i], res);\n        \n    }\n    \n};\n```\n\n## 总结\n- 递归要处理好边界条件，这里是当digits为空的时候，就返回\n- 这里用了记录前缀的方式，感觉也可以使用前面的加上后缀的方式，返回的时候返回字符，应该也可以\n- 这题让我想到了全排列的解法\n\n\n------\n","source":"_posts/LeetCode-017-Letter-Combinations-of-a-Phone-Number.md","raw":"---\ntitle: LeetCode-017-Letter Combinations of a Phone Number\ntags:\n  - LeetCode\n  - Recursive\n  - Map\n  - Medium\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-05-22 13:48:56\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/letter-combinations-of-a-phone-number/)   \nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n2：\"abc\", 3-\"def\", 4-\"ghi\", 5-\"jkl\", 6-\"mno\", 7-\"pqrs\", 8-\"tuv\", 9-\"wxyz\"\n\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n### Examples:\n**Input:**\"23\"\n**Output:**[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 递归，当后面的全部完成了排列之后，前面的加上就是全部的排列方式，这里要记录前缀，到最后没有数字的时候，就添加前缀并返回\n\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:        \n    string mapChar[10] = {\"\",\"\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"};\n    vector<string> letterCombinations(string digits) {\n        if(digits.length()==0)return {};\n        vector<string> res;\n        recurDigit(digits,\"\",res);\n        return res;\n    }\n    \n    void recurDigit(string digits,string prefix, vector<string>& res){\n        //边界条件\n        if(digits==\"\") {\n            res.push_back(prefix);\n            return;\n        }\n        \n        string key = mapChar[digits[0]-'0'];\n        int n = key.length();\n        for(int i=0;i<n;i++)\n            recurDigit(digits.substr(1), prefix+key[i], res);\n        \n    }\n    \n};\n```\n\n## 总结\n- 递归要处理好边界条件，这里是当digits为空的时候，就返回\n- 这里用了记录前缀的方式，感觉也可以使用前面的加上后缀的方式，返回的时候返回字符，应该也可以\n- 这题让我想到了全排列的解法\n\n\n------\n","slug":"LeetCode-017-Letter-Combinations-of-a-Phone-Number","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtju9002qussbyw4dmp4t","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/letter-combinations-of-a-phone-number/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.<br>2：”abc”, 3-“def”, 4-“ghi”, 5-“jkl”, 6-“mno”, 7-“pqrs”, 8-“tuv”, 9-“wxyz”</p>\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>“23”<br><strong>Output:</strong>[“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>递归，当后面的全部完成了排列之后，前面的加上就是全部的排列方式，这里要记录前缀，到最后没有数字的时候，就添加前缀并返回</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:        </span><br><span class=\"line\">    <span class=\"built_in\">string</span> mapChar[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"abc\"</span>,<span class=\"string\">\"def\"</span>,<span class=\"string\">\"ghi\"</span>,<span class=\"string\">\"jkl\"</span>,<span class=\"string\">\"mno\"</span>,<span class=\"string\">\"pqrs\"</span>,<span class=\"string\">\"tuv\"</span>,<span class=\"string\">\"wxyz\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; letterCombinations(<span class=\"built_in\">string</span> digits) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(digits.length()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; res;</span><br><span class=\"line\">        recurDigit(digits,<span class=\"string\">\"\"</span>,res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recurDigit</span><span class=\"params\">(<span class=\"built_in\">string</span> digits,<span class=\"built_in\">string</span> prefix, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; res)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//边界条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(digits==<span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">            res.push_back(prefix);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">string</span> key = mapChar[digits[<span class=\"number\">0</span>]-<span class=\"string\">'0'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = key.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">            recurDigit(digits.substr(<span class=\"number\">1</span>), prefix+key[i], res);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>递归要处理好边界条件，这里是当digits为空的时候，就返回</li>\n<li>这里用了记录前缀的方式，感觉也可以使用前面的加上后缀的方式，返回的时候返回字符，应该也可以</li>\n<li>这题让我想到了全排列的解法</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/letter-combinations-of-a-phone-number/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.<br>2：”abc”, 3-“def”, 4-“ghi”, 5-“jkl”, 6-“mno”, 7-“pqrs”, 8-“tuv”, 9-“wxyz”</p>\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>“23”<br><strong>Output:</strong>[“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>递归，当后面的全部完成了排列之后，前面的加上就是全部的排列方式，这里要记录前缀，到最后没有数字的时候，就添加前缀并返回</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:        </span><br><span class=\"line\">    <span class=\"built_in\">string</span> mapChar[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"abc\"</span>,<span class=\"string\">\"def\"</span>,<span class=\"string\">\"ghi\"</span>,<span class=\"string\">\"jkl\"</span>,<span class=\"string\">\"mno\"</span>,<span class=\"string\">\"pqrs\"</span>,<span class=\"string\">\"tuv\"</span>,<span class=\"string\">\"wxyz\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; letterCombinations(<span class=\"built_in\">string</span> digits) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(digits.length()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; res;</span><br><span class=\"line\">        recurDigit(digits,<span class=\"string\">\"\"</span>,res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recurDigit</span><span class=\"params\">(<span class=\"built_in\">string</span> digits,<span class=\"built_in\">string</span> prefix, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; res)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//边界条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(digits==<span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">            res.push_back(prefix);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">string</span> key = mapChar[digits[<span class=\"number\">0</span>]-<span class=\"string\">'0'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = key.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">            recurDigit(digits.substr(<span class=\"number\">1</span>), prefix+key[i], res);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>递归要处理好边界条件，这里是当digits为空的时候，就返回</li>\n<li>这里用了记录前缀的方式，感觉也可以使用前面的加上后缀的方式，返回的时候返回字符，应该也可以</li>\n<li>这题让我想到了全排列的解法</li>\n</ul>\n<hr>"},{"title":"LeetCode-020-Valid Parentheses","comments":1,"mathjax":false,"date":"2019-05-22T05:59:04.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/valid-parentheses/)   \nGiven a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n\nNote that an empty string is also considered valid.\n\n### Examples:\n**Input:**\"()\"\n**Output:** true\n**Input:**\"[(])\"\n**Output:** false\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 简单的利用栈，如果是左括号，就入栈，如果是右括号，就和栈顶匹配，相同，就让栈顶出栈，否则返回错误 ，这里用哈希表映射左右括号\n\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:\n    bool isValid(string s) {\n        if(s.length()==0)return true;\n        \n        //定义栈和哈希表\n        stack<char> chstack;\n        map<char,char> mp;\n        mp[')']='(';\n        mp[']']='[';\n        mp['}']='{';\n\n        for(int i=0;i<s.length();i++){\n            //左括号入栈\n            if(s[i]=='(' || s[i]=='[' || s[i]=='{'){\n                chstack.push(s[i]);\n            }\n            //右括号匹配栈顶\n            else{\n                if(chstack.empty()) return false;\n                if(mp[s[i]]==chstack.top()) chstack.pop();\n                else return false;\n            }\n        }\n        //如果匹配完了栈为空，就是符合要求的\n        if(chstack.empty())return true;\n        else return false;\n    }\n};\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        lookup = {\n            \"(\":\")\",\n            \"[\":\"]\",\n            \"{\":\"}\"\n        }\n        for alp in s:\n            if alp in lookup:\n                stack.append(alp)\n                continue\n            if stack and lookup[stack[-1]] == alp:\n                stack.pop()\n            else:\n                return False\n        return True if not stack else False\n```\n\n## 总结\n- 做过的题，简单的利用出栈入栈进行括号匹配 \n\n\n------\n","source":"_posts/LeetCode-020-Valid-Parentheses.md","raw":"---\ntitle: LeetCode-020-Valid Parentheses\ntags:\n  - LeetCode\n  - Stack\n  - Pair\n  - String\n  - Easy\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-05-22 13:59:04\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/valid-parentheses/)   \nGiven a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n\nNote that an empty string is also considered valid.\n\n### Examples:\n**Input:**\"()\"\n**Output:** true\n**Input:**\"[(])\"\n**Output:** false\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 简单的利用栈，如果是左括号，就入栈，如果是右括号，就和栈顶匹配，相同，就让栈顶出栈，否则返回错误 ，这里用哈希表映射左右括号\n\n\n## C++ Codes\n\n```C++\nclass Solution {\npublic:\n    bool isValid(string s) {\n        if(s.length()==0)return true;\n        \n        //定义栈和哈希表\n        stack<char> chstack;\n        map<char,char> mp;\n        mp[')']='(';\n        mp[']']='[';\n        mp['}']='{';\n\n        for(int i=0;i<s.length();i++){\n            //左括号入栈\n            if(s[i]=='(' || s[i]=='[' || s[i]=='{'){\n                chstack.push(s[i]);\n            }\n            //右括号匹配栈顶\n            else{\n                if(chstack.empty()) return false;\n                if(mp[s[i]]==chstack.top()) chstack.pop();\n                else return false;\n            }\n        }\n        //如果匹配完了栈为空，就是符合要求的\n        if(chstack.empty())return true;\n        else return false;\n    }\n};\n```\n\n## Python Codes\n\n```python\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        lookup = {\n            \"(\":\")\",\n            \"[\":\"]\",\n            \"{\":\"}\"\n        }\n        for alp in s:\n            if alp in lookup:\n                stack.append(alp)\n                continue\n            if stack and lookup[stack[-1]] == alp:\n                stack.pop()\n            else:\n                return False\n        return True if not stack else False\n```\n\n## 总结\n- 做过的题，简单的利用出栈入栈进行括号匹配 \n\n\n------\n","slug":"LeetCode-020-Valid-Parentheses","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjuf002tussbl5gpekkh","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>\n<p>An input string is valid if:</p>\n<ol>\n<li>Open brackets must be closed by the same type of brackets.</li>\n<li>Open brackets must be closed in the correct order.</li>\n</ol>\n<p>Note that an empty string is also considered valid.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>“()”<br><strong>Output:</strong> true<br><strong>Input:</strong>“[(])”<br><strong>Output:</strong> false</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>简单的利用栈，如果是左括号，就入栈，如果是右括号，就和栈顶匹配，相同，就让栈顶出栈，否则返回错误 ，这里用哈希表映射左右括号</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isValid</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//定义栈和哈希表</span></span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">char</span>&gt; chstack;</span><br><span class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">char</span>&gt; mp;</span><br><span class=\"line\">        mp[<span class=\"string\">')'</span>]=<span class=\"string\">'('</span>;</span><br><span class=\"line\">        mp[<span class=\"string\">']'</span>]=<span class=\"string\">'['</span>;</span><br><span class=\"line\">        mp[<span class=\"string\">'&#125;'</span>]=<span class=\"string\">'&#123;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//左括号入栈</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">'('</span> || s[i]==<span class=\"string\">'['</span> || s[i]==<span class=\"string\">'&#123;'</span>)&#123;</span><br><span class=\"line\">                chstack.push(s[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//右括号匹配栈顶</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(chstack.empty()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mp[s[i]]==chstack.top()) chstack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果匹配完了栈为空，就是符合要求的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(chstack.empty())<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isValid</span><span class=\"params\">(self, s: str)</span> -&gt; bool:</span></span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        lookup = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"(\"</span>:<span class=\"string\">\")\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"[\"</span>:<span class=\"string\">\"]\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&#123;\"</span>:<span class=\"string\">\"&#125;\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> alp <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> alp <span class=\"keyword\">in</span> lookup:</span><br><span class=\"line\">                stack.append(alp)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> stack <span class=\"keyword\">and</span> lookup[stack[<span class=\"number\">-1</span>]] == alp:</span><br><span class=\"line\">                stack.pop()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> stack <span class=\"keyword\">else</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>做过的题，简单的利用出栈入栈进行括号匹配 </li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>\n<p>An input string is valid if:</p>\n<ol>\n<li>Open brackets must be closed by the same type of brackets.</li>\n<li>Open brackets must be closed in the correct order.</li>\n</ol>\n<p>Note that an empty string is also considered valid.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>“()”<br><strong>Output:</strong> true<br><strong>Input:</strong>“[(])”<br><strong>Output:</strong> false</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>简单的利用栈，如果是左括号，就入栈，如果是右括号，就和栈顶匹配，相同，就让栈顶出栈，否则返回错误 ，这里用哈希表映射左右括号</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isValid</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//定义栈和哈希表</span></span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">char</span>&gt; chstack;</span><br><span class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">char</span>&gt; mp;</span><br><span class=\"line\">        mp[<span class=\"string\">')'</span>]=<span class=\"string\">'('</span>;</span><br><span class=\"line\">        mp[<span class=\"string\">']'</span>]=<span class=\"string\">'['</span>;</span><br><span class=\"line\">        mp[<span class=\"string\">'&#125;'</span>]=<span class=\"string\">'&#123;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//左括号入栈</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">'('</span> || s[i]==<span class=\"string\">'['</span> || s[i]==<span class=\"string\">'&#123;'</span>)&#123;</span><br><span class=\"line\">                chstack.push(s[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//右括号匹配栈顶</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(chstack.empty()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mp[s[i]]==chstack.top()) chstack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果匹配完了栈为空，就是符合要求的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(chstack.empty())<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isValid</span><span class=\"params\">(self, s: str)</span> -&gt; bool:</span></span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        lookup = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"(\"</span>:<span class=\"string\">\")\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"[\"</span>:<span class=\"string\">\"]\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&#123;\"</span>:<span class=\"string\">\"&#125;\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> alp <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> alp <span class=\"keyword\">in</span> lookup:</span><br><span class=\"line\">                stack.append(alp)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> stack <span class=\"keyword\">and</span> lookup[stack[<span class=\"number\">-1</span>]] == alp:</span><br><span class=\"line\">                stack.pop()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> stack <span class=\"keyword\">else</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>做过的题，简单的利用出栈入栈进行括号匹配 </li>\n</ul>\n<hr>"},{"title":"LeetCode-021-Merge Two Sorted Lists","comments":1,"mathjax":false,"date":"2019-05-22T16:28:14.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem]()   \nMerge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\n\n简单说就是合并两个有序链表\n\n### Examples:\n**Input:**1->2->4, 1->3->4\n**Output:**1->1->2->3->4->4\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 第一种方法是新建一个链表，每次创建新的节点，不影响原始链表。在两个链表都非空的是比较结点值大小，将小的值作为新节点的值插入结果链表中，并移动指针。\n- 第二种方法也挺简单，只是单纯的改变指针，就地合并，但是会影响原始链表。\n- Python使用的方法，递归，也是就地的，前面的较小的节点加上后面所有的排好序的节点就是要的结果\n\n\n## C++ Codes\n\n### 方法一\n创建一个头结点，依次比较l1和l2的节点，逐个插入到新链表中，插入过程是创建了新的节点\n\n```C++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode* res = new ListNode(0);\n        ListNode *p = res;\n        ListNode *p1 = l1;\n        ListNode *p2 = l2;\n        while(p1!=NULL && p2!=NULL){\n            if(p1->val > p2->val){\n                p->next = new ListNode(p2->val);\n                p2 = p2->next;\n            }\n            else{\n                p->next = new ListNode(p1->val);\n                p1 = p1->next;\n            }\n            p = p->next;\n        }\n        while(p1!=NULL){\n            p->next = new ListNode(p1->val);\n            p = p->next;\n            p1 = p1->next;\n        }\n        while(p2!=NULL){\n            p->next = new ListNode(p2->val);\n            p = p->next;\n            p2 = p2->next;\n        }\n        return res->next;\n    }\n};\n```\n\n### 方法二\n这种方法也可以像方法一那样，创建一个头结点，然后比较l1和l2，依次改变两个链表的指针\n\n我用了另一种就地方法，其中一个链表不变，另一个链表依次找到合适位置插入这个这个链表\n\n```C++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        //p1: 结果链表头结点，指向较小的\n        //p2: 另一个链表的头结点\n        if(l1==NULL)return l2;\n        if(l2==NULL)return l1;\n        ListNode *p1, *p2;\n        if(l1->val < l2->val){\n            p1 = l1; p2 = l2;\n        }else{\n            p1 = l2; p2 = l1;\n        }\n        ListNode *prefix=p1, *res = p1;\n        p1 = p1->next;\n        while(p2!=NULL){\n            //找到p2指向的节点第一次小于p1节点的位置，前插\n            while(p1!=NULL && p2->val > p1->val){\n                prefix = prefix->next;\n                p1 = p1->next;\n            }\n            //p1到结尾\n            if(p1==NULL){\n                prefix->next = p2;\n                return res;\n            }\n            else{\n                prefix->next = p2;\n                p2 = p2->next;\n                prefix->next->next = p1;\n                prefix = prefix->next;\n            }\n            \n        }\n        return res;\n    }\n};\n```\n\n## Python Codes\n递归的方法，每次保证递归返回的是较小的节点\n\n这里用了交换l1和l2指针的方法，事实证明....不交换直接判断哪个小来调用递归时间少一点...佛了，交换是64ms，不交换是48ms...\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        if not l1: return l2\n        if not l2: return l1\n        if l1.val>l2.val: l1, l2 = l2, l1\n        l1.next = self.mergeTwoLists(l1.next,l2)\n        return l1\n```\n\n## 总结\n- 链表的问题这里总结是两种方法，一种是迭代，一种是递归，迭代过程中要注意节点指针不要混乱了。\n\n\n------\n","source":"_posts/LeetCode-021-Merge-Two-Sorted-Lists.md","raw":"---\ntitle: LeetCode-021-Merge Two Sorted Lists\ntags:\n  - LeetCode\n  - LinkedList\n  - List\n  - Merge\n  - Easy\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-05-23 00:28:14\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem]()   \nMerge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\n\n简单说就是合并两个有序链表\n\n### Examples:\n**Input:**1->2->4, 1->3->4\n**Output:**1->1->2->3->4->4\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 第一种方法是新建一个链表，每次创建新的节点，不影响原始链表。在两个链表都非空的是比较结点值大小，将小的值作为新节点的值插入结果链表中，并移动指针。\n- 第二种方法也挺简单，只是单纯的改变指针，就地合并，但是会影响原始链表。\n- Python使用的方法，递归，也是就地的，前面的较小的节点加上后面所有的排好序的节点就是要的结果\n\n\n## C++ Codes\n\n### 方法一\n创建一个头结点，依次比较l1和l2的节点，逐个插入到新链表中，插入过程是创建了新的节点\n\n```C++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode* res = new ListNode(0);\n        ListNode *p = res;\n        ListNode *p1 = l1;\n        ListNode *p2 = l2;\n        while(p1!=NULL && p2!=NULL){\n            if(p1->val > p2->val){\n                p->next = new ListNode(p2->val);\n                p2 = p2->next;\n            }\n            else{\n                p->next = new ListNode(p1->val);\n                p1 = p1->next;\n            }\n            p = p->next;\n        }\n        while(p1!=NULL){\n            p->next = new ListNode(p1->val);\n            p = p->next;\n            p1 = p1->next;\n        }\n        while(p2!=NULL){\n            p->next = new ListNode(p2->val);\n            p = p->next;\n            p2 = p2->next;\n        }\n        return res->next;\n    }\n};\n```\n\n### 方法二\n这种方法也可以像方法一那样，创建一个头结点，然后比较l1和l2，依次改变两个链表的指针\n\n我用了另一种就地方法，其中一个链表不变，另一个链表依次找到合适位置插入这个这个链表\n\n```C++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        //p1: 结果链表头结点，指向较小的\n        //p2: 另一个链表的头结点\n        if(l1==NULL)return l2;\n        if(l2==NULL)return l1;\n        ListNode *p1, *p2;\n        if(l1->val < l2->val){\n            p1 = l1; p2 = l2;\n        }else{\n            p1 = l2; p2 = l1;\n        }\n        ListNode *prefix=p1, *res = p1;\n        p1 = p1->next;\n        while(p2!=NULL){\n            //找到p2指向的节点第一次小于p1节点的位置，前插\n            while(p1!=NULL && p2->val > p1->val){\n                prefix = prefix->next;\n                p1 = p1->next;\n            }\n            //p1到结尾\n            if(p1==NULL){\n                prefix->next = p2;\n                return res;\n            }\n            else{\n                prefix->next = p2;\n                p2 = p2->next;\n                prefix->next->next = p1;\n                prefix = prefix->next;\n            }\n            \n        }\n        return res;\n    }\n};\n```\n\n## Python Codes\n递归的方法，每次保证递归返回的是较小的节点\n\n这里用了交换l1和l2指针的方法，事实证明....不交换直接判断哪个小来调用递归时间少一点...佛了，交换是64ms，不交换是48ms...\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        if not l1: return l2\n        if not l2: return l1\n        if l1.val>l2.val: l1, l2 = l2, l1\n        l1.next = self.mergeTwoLists(l1.next,l2)\n        return l1\n```\n\n## 总结\n- 链表的问题这里总结是两种方法，一种是迭代，一种是递归，迭代过程中要注意节点指针不要混乱了。\n\n\n------\n","slug":"LeetCode-021-Merge-Two-Sorted-Lists","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjuj002wussb8itzi9mx","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"\">Problem</a></h2><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>\n<p>简单说就是合并两个有序链表</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br><strong>Output:</strong>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>第一种方法是新建一个链表，每次创建新的节点，不影响原始链表。在两个链表都非空的是比较结点值大小，将小的值作为新节点的值插入结果链表中，并移动指针。</li>\n<li>第二种方法也挺简单，只是单纯的改变指针，就地合并，但是会影响原始链表。</li>\n<li>Python使用的方法，递归，也是就地的，前面的较小的节点加上后面所有的排好序的节点就是要的结果</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>创建一个头结点，依次比较l1和l2的节点，逐个插入到新链表中，插入过程是创建了新的节点</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* res = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *p = res;</span><br><span class=\"line\">        ListNode *p1 = l1;</span><br><span class=\"line\">        ListNode *p2 = l2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p1!=<span class=\"literal\">NULL</span> &amp;&amp; p2!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p1-&gt;val &gt; p2-&gt;val)&#123;</span><br><span class=\"line\">                p-&gt;next = <span class=\"keyword\">new</span> ListNode(p2-&gt;val);</span><br><span class=\"line\">                p2 = p2-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                p-&gt;next = <span class=\"keyword\">new</span> ListNode(p1-&gt;val);</span><br><span class=\"line\">                p1 = p1-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p1!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            p-&gt;next = <span class=\"keyword\">new</span> ListNode(p1-&gt;val);</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">            p1 = p1-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p2!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            p-&gt;next = <span class=\"keyword\">new</span> ListNode(p2-&gt;val);</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">            p2 = p2-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>这种方法也可以像方法一那样，创建一个头结点，然后比较l1和l2，依次改变两个链表的指针</p>\n<p>我用了另一种就地方法，其中一个链表不变，另一个链表依次找到合适位置插入这个这个链表</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//p1: 结果链表头结点，指向较小的</span></span><br><span class=\"line\">        <span class=\"comment\">//p2: 另一个链表的头结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l2==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">        ListNode *p1, *p2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1-&gt;val &lt; l2-&gt;val)&#123;</span><br><span class=\"line\">            p1 = l1; p2 = l2;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            p1 = l2; p2 = l1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode *prefix=p1, *res = p1;</span><br><span class=\"line\">        p1 = p1-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p2!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//找到p2指向的节点第一次小于p1节点的位置，前插</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(p1!=<span class=\"literal\">NULL</span> &amp;&amp; p2-&gt;val &gt; p1-&gt;val)&#123;</span><br><span class=\"line\">                prefix = prefix-&gt;next;</span><br><span class=\"line\">                p1 = p1-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//p1到结尾</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p1==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                prefix-&gt;next = p2;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                prefix-&gt;next = p2;</span><br><span class=\"line\">                p2 = p2-&gt;next;</span><br><span class=\"line\">                prefix-&gt;next-&gt;next = p1;</span><br><span class=\"line\">                prefix = prefix-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>递归的方法，每次保证递归返回的是较小的节点</p>\n<p>这里用了交换l1和l2指针的方法，事实证明….不交换直接判断哪个小来调用递归时间少一点…佛了，交换是64ms，不交换是48ms…</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeTwoLists</span><span class=\"params\">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> l1: <span class=\"keyword\">return</span> l2</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> l2: <span class=\"keyword\">return</span> l1</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l1.val&gt;l2.val: l1, l2 = l2, l1</span><br><span class=\"line\">        l1.next = self.mergeTwoLists(l1.next,l2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l1</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>链表的问题这里总结是两种方法，一种是迭代，一种是递归，迭代过程中要注意节点指针不要混乱了。</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"\">Problem</a></h2><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>\n<p>简单说就是合并两个有序链表</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br><strong>Output:</strong>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>第一种方法是新建一个链表，每次创建新的节点，不影响原始链表。在两个链表都非空的是比较结点值大小，将小的值作为新节点的值插入结果链表中，并移动指针。</li>\n<li>第二种方法也挺简单，只是单纯的改变指针，就地合并，但是会影响原始链表。</li>\n<li>Python使用的方法，递归，也是就地的，前面的较小的节点加上后面所有的排好序的节点就是要的结果</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>创建一个头结点，依次比较l1和l2的节点，逐个插入到新链表中，插入过程是创建了新的节点</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* res = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *p = res;</span><br><span class=\"line\">        ListNode *p1 = l1;</span><br><span class=\"line\">        ListNode *p2 = l2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p1!=<span class=\"literal\">NULL</span> &amp;&amp; p2!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p1-&gt;val &gt; p2-&gt;val)&#123;</span><br><span class=\"line\">                p-&gt;next = <span class=\"keyword\">new</span> ListNode(p2-&gt;val);</span><br><span class=\"line\">                p2 = p2-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                p-&gt;next = <span class=\"keyword\">new</span> ListNode(p1-&gt;val);</span><br><span class=\"line\">                p1 = p1-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p1!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            p-&gt;next = <span class=\"keyword\">new</span> ListNode(p1-&gt;val);</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">            p1 = p1-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p2!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            p-&gt;next = <span class=\"keyword\">new</span> ListNode(p2-&gt;val);</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">            p2 = p2-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>这种方法也可以像方法一那样，创建一个头结点，然后比较l1和l2，依次改变两个链表的指针</p>\n<p>我用了另一种就地方法，其中一个链表不变，另一个链表依次找到合适位置插入这个这个链表</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//p1: 结果链表头结点，指向较小的</span></span><br><span class=\"line\">        <span class=\"comment\">//p2: 另一个链表的头结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l2==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">        ListNode *p1, *p2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1-&gt;val &lt; l2-&gt;val)&#123;</span><br><span class=\"line\">            p1 = l1; p2 = l2;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            p1 = l2; p2 = l1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode *prefix=p1, *res = p1;</span><br><span class=\"line\">        p1 = p1-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p2!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//找到p2指向的节点第一次小于p1节点的位置，前插</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(p1!=<span class=\"literal\">NULL</span> &amp;&amp; p2-&gt;val &gt; p1-&gt;val)&#123;</span><br><span class=\"line\">                prefix = prefix-&gt;next;</span><br><span class=\"line\">                p1 = p1-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//p1到结尾</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p1==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                prefix-&gt;next = p2;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                prefix-&gt;next = p2;</span><br><span class=\"line\">                p2 = p2-&gt;next;</span><br><span class=\"line\">                prefix-&gt;next-&gt;next = p1;</span><br><span class=\"line\">                prefix = prefix-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>递归的方法，每次保证递归返回的是较小的节点</p>\n<p>这里用了交换l1和l2指针的方法，事实证明….不交换直接判断哪个小来调用递归时间少一点…佛了，交换是64ms，不交换是48ms…</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeTwoLists</span><span class=\"params\">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> l1: <span class=\"keyword\">return</span> l2</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> l2: <span class=\"keyword\">return</span> l1</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l1.val&gt;l2.val: l1, l2 = l2, l1</span><br><span class=\"line\">        l1.next = self.mergeTwoLists(l1.next,l2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l1</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>链表的问题这里总结是两种方法，一种是迭代，一种是递归，迭代过程中要注意节点指针不要混乱了。</li>\n</ul>\n<hr>"},{"title":"LeetCode-023-Merge k Sorted Lists","comments":1,"mathjax":false,"date":"2019-05-23T05:10:02.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/merge-k-sorted-lists/)   \nMerge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\n\n### Examples:\n**Input:**\n> [\n> 　　1->4->5,\n> 　　1->3->4,\n> 　　2->6\n> ]\n**Output:** 1->1->2->3->4->4->5->6\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 相对上一题难度加大了一点，但是如果按照上一题的思路也是可以做的，就是时间复杂度会有点高\n- 这里介绍两种方法，第一种就是类似上一题的解法，每次循环找到所有链表中最小的头结点，然后改变指针指向，并不新建节点，中间有个坑是测试用例中会有空的链表，要注意处理下。每次加一个节点，加的时候遍历所有链表，所以时间复杂度是$$ O(n \\times k) $$,n是节点总数，k是链表数\n- 第二种方法是使用优先级队列，先将所有链表加入队列中，每次从队列中找到最小的节点，然后也是找n个节点，相对上一种方法是在$$ O(n \\times k) $$的k这里进行了优化，因为优先级队列存取是log()级别，因此时间复杂度是$$ O(n \\times log(k)) $$\n- 还想到一种方法是迭代，用上一题的方法进行两两合并，没有实现这种方法，看了题解有分治法，使用递归进两两合并\n\n\n## C++ Codes\n\n### 方法一\n就地改变链表指针指向，时间复杂度$$ O(n \\times k) $$\n\n```C++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        if(lists.size()==0)return NULL;\n        ListNode *res = new ListNode(0);\n        ListNode *pre = res;\n        int min = 0;\n\n        while(lists.size()!=0){ \n            //确保lists[0]非NULL\n            while(lists.size()>0 && lists[min]==NULL){\n                lists.erase(lists.begin()+min);\n                min = 0;\n            }\n            if(lists.size()==0) return res->next;\n   \n            for(int i=0;i<lists.size();i++){\n                if(lists[i]==NULL) \n                    continue;\n                if(lists[i]->val<lists[min]->val)\n                    min = i;\n            }\n            pre->next = lists[min];\n            pre = pre->next;\n            lists[min] = lists[min]->next;\n        }\n        \n        return res->next;\n    }\n};\n```\n\n### 方法二\n使用优先级队列进行每轮插入最小的节点，时间复杂度为$$ O(n \\times log(k)) $$\n\n这里使用最小优先队列，最小的值优先级最大\n\n```C++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        //定义优先级队列比较结构\n        struct cmp{\n            bool operator ()(ListNode* a, ListNode* b){\n                return a->val > b->val;\n            }\n        };\n        ListNode *res = new ListNode(0);\n        ListNode *p = res;\n        \n        //建立优先级队列，这里是最小优先队列，最小的值优先级最大\n        priority_queue<ListNode*, vector<ListNode*>, cmp> pq;\n        for(ListNode* list : lists){\n            if(list!=NULL) pq.push(list);\n        }\n        \n        while(pq.size()>0){\n            p->next = pq.top();//获取优先级最高的元素，即数字最小的\n            pq.pop();//删除队首元素\n            p = p->next;\n            if(p->next != NULL) pq.push(p->next);\n        }\n        return res->next;\n    }\n};\n```\n\n###方法三\n分治法，使用递归两两合并，最终的链表等于合并好的前半部分加上合并好的后半部分，对前半部分在进行半部分和半部分的合并。\n\n下面贴一下题解的代码，Java\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n   public ListNode mergeKLists(ListNode[] lists) {\n        if (lists == null || lists.length == 0) return null;\n        return merge(lists, 0, lists.length - 1);\n    }\n\n    private ListNode merge(ListNode[] lists, int left, int right) {\n        if (left == right) return lists[left];\n        int mid = left + (right - left) / 2;\n        ListNode l1 = merge(lists, left, mid);\n        ListNode l2 = merge(lists, mid + 1, right);\n        return mergeTwoLists(l1, l2);\n    }\n\n    private ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        if (l1 == null) return l2;\n        if (l2 == null) return l1;\n        if (l1.val < l2.val) {\n            l1.next = mergeTwoLists(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeTwoLists(l1,l2.next);\n            return l2;\n        }\n    }\n}\n```\n\n\n## Python Codes\n这里使用方法二\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        import heapq\n        dummy = ListNode(0)\n        p = dummy\n        head = []\n        for i in range(len(lists)):\n            if lists[i] :\n                heapq.heappush(head, (lists[i].val, i))\n                lists[i] = lists[i].next\n        while head:\n            val, idx = heapq.heappop(head)\n            p.next = ListNode(val)\n            p = p.next\n            if lists[idx]:\n                heapq.heappush(head, (lists[idx].val, idx))\n                lists[idx] = lists[idx].next\n        return dummy.next\n```\n\n## 总结\n- 合并多个链表相对上一题就是链表数变多之后的处理，可以用优先级队列加快节点的查找，也可以使用分治法，合并症各部分就是先合并前半部分和后半部分，再将这两个部分合在一起 \n\n\n------\n","source":"_posts/LeetCode-023-Merge-k-Sorted-Lists.md","raw":"---\ntitle: LeetCode-023-Merge k Sorted Lists\ntags:\n  - LeetCode\n  - List\n  - LinkedList\n  - PriorityQueue\n  - Merge\n  - Hard\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-05-23 13:10:02\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode.com/problems/merge-k-sorted-lists/)   \nMerge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\n\n### Examples:\n**Input:**\n> [\n> 　　1->4->5,\n> 　　1->3->4,\n> 　　2->6\n> ]\n**Output:** 1->1->2->3->4->4->5->6\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 相对上一题难度加大了一点，但是如果按照上一题的思路也是可以做的，就是时间复杂度会有点高\n- 这里介绍两种方法，第一种就是类似上一题的解法，每次循环找到所有链表中最小的头结点，然后改变指针指向，并不新建节点，中间有个坑是测试用例中会有空的链表，要注意处理下。每次加一个节点，加的时候遍历所有链表，所以时间复杂度是$$ O(n \\times k) $$,n是节点总数，k是链表数\n- 第二种方法是使用优先级队列，先将所有链表加入队列中，每次从队列中找到最小的节点，然后也是找n个节点，相对上一种方法是在$$ O(n \\times k) $$的k这里进行了优化，因为优先级队列存取是log()级别，因此时间复杂度是$$ O(n \\times log(k)) $$\n- 还想到一种方法是迭代，用上一题的方法进行两两合并，没有实现这种方法，看了题解有分治法，使用递归进两两合并\n\n\n## C++ Codes\n\n### 方法一\n就地改变链表指针指向，时间复杂度$$ O(n \\times k) $$\n\n```C++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        if(lists.size()==0)return NULL;\n        ListNode *res = new ListNode(0);\n        ListNode *pre = res;\n        int min = 0;\n\n        while(lists.size()!=0){ \n            //确保lists[0]非NULL\n            while(lists.size()>0 && lists[min]==NULL){\n                lists.erase(lists.begin()+min);\n                min = 0;\n            }\n            if(lists.size()==0) return res->next;\n   \n            for(int i=0;i<lists.size();i++){\n                if(lists[i]==NULL) \n                    continue;\n                if(lists[i]->val<lists[min]->val)\n                    min = i;\n            }\n            pre->next = lists[min];\n            pre = pre->next;\n            lists[min] = lists[min]->next;\n        }\n        \n        return res->next;\n    }\n};\n```\n\n### 方法二\n使用优先级队列进行每轮插入最小的节点，时间复杂度为$$ O(n \\times log(k)) $$\n\n这里使用最小优先队列，最小的值优先级最大\n\n```C++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        //定义优先级队列比较结构\n        struct cmp{\n            bool operator ()(ListNode* a, ListNode* b){\n                return a->val > b->val;\n            }\n        };\n        ListNode *res = new ListNode(0);\n        ListNode *p = res;\n        \n        //建立优先级队列，这里是最小优先队列，最小的值优先级最大\n        priority_queue<ListNode*, vector<ListNode*>, cmp> pq;\n        for(ListNode* list : lists){\n            if(list!=NULL) pq.push(list);\n        }\n        \n        while(pq.size()>0){\n            p->next = pq.top();//获取优先级最高的元素，即数字最小的\n            pq.pop();//删除队首元素\n            p = p->next;\n            if(p->next != NULL) pq.push(p->next);\n        }\n        return res->next;\n    }\n};\n```\n\n###方法三\n分治法，使用递归两两合并，最终的链表等于合并好的前半部分加上合并好的后半部分，对前半部分在进行半部分和半部分的合并。\n\n下面贴一下题解的代码，Java\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n   public ListNode mergeKLists(ListNode[] lists) {\n        if (lists == null || lists.length == 0) return null;\n        return merge(lists, 0, lists.length - 1);\n    }\n\n    private ListNode merge(ListNode[] lists, int left, int right) {\n        if (left == right) return lists[left];\n        int mid = left + (right - left) / 2;\n        ListNode l1 = merge(lists, left, mid);\n        ListNode l2 = merge(lists, mid + 1, right);\n        return mergeTwoLists(l1, l2);\n    }\n\n    private ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        if (l1 == null) return l2;\n        if (l2 == null) return l1;\n        if (l1.val < l2.val) {\n            l1.next = mergeTwoLists(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeTwoLists(l1,l2.next);\n            return l2;\n        }\n    }\n}\n```\n\n\n## Python Codes\n这里使用方法二\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        import heapq\n        dummy = ListNode(0)\n        p = dummy\n        head = []\n        for i in range(len(lists)):\n            if lists[i] :\n                heapq.heappush(head, (lists[i].val, i))\n                lists[i] = lists[i].next\n        while head:\n            val, idx = heapq.heappop(head)\n            p.next = ListNode(val)\n            p = p.next\n            if lists[idx]:\n                heapq.heappush(head, (lists[idx].val, idx))\n                lists[idx] = lists[idx].next\n        return dummy.next\n```\n\n## 总结\n- 合并多个链表相对上一题就是链表数变多之后的处理，可以用优先级队列加快节点的查找，也可以使用分治法，合并症各部分就是先合并前半部分和后半部分，再将这两个部分合在一起 \n\n\n------\n","slug":"LeetCode-023-Merge-k-Sorted-Lists","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjuv002zussbs4jtmxc3","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/merge-k-sorted-lists/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong></p>\n<blockquote>\n<p>[<br>　　1-&gt;4-&gt;5,<br>　　1-&gt;3-&gt;4,<br>　　2-&gt;6<br>]<br><strong>Output:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p>\n</blockquote></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>相对上一题难度加大了一点，但是如果按照上一题的思路也是可以做的，就是时间复杂度会有点高</li>\n<li>这里介绍两种方法，第一种就是类似上一题的解法，每次循环找到所有链表中最小的头结点，然后改变指针指向，并不新建节点，中间有个坑是测试用例中会有空的链表，要注意处理下。每次加一个节点，加的时候遍历所有链表，所以时间复杂度是<script type=\"math/tex\">O(n \\times k)</script>,n是节点总数，k是链表数</li>\n<li>第二种方法是使用优先级队列，先将所有链表加入队列中，每次从队列中找到最小的节点，然后也是找n个节点，相对上一种方法是在<script type=\"math/tex\">O(n \\times k)</script>的k这里进行了优化，因为优先级队列存取是log()级别，因此时间复杂度是<script type=\"math/tex\">O(n \\times log(k))</script></li>\n<li>还想到一种方法是迭代，用上一题的方法进行两两合并，没有实现这种方法，看了题解有分治法，使用递归进两两合并</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>就地改变链表指针指向，时间复杂度<script type=\"math/tex\">O(n \\times k)</script></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">mergeKLists</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lists.size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        ListNode *res = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *pre = res;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(lists.size()!=<span class=\"number\">0</span>)&#123; </span><br><span class=\"line\">            <span class=\"comment\">//确保lists[0]非NULL</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(lists.size()&gt;<span class=\"number\">0</span> &amp;&amp; lists[min]==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                lists.erase(lists.begin()+min);</span><br><span class=\"line\">                min = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(lists.size()==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> res-&gt;next;</span><br><span class=\"line\">   </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;lists.size();i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(lists[i]==<span class=\"literal\">NULL</span>) </span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(lists[i]-&gt;val&lt;lists[min]-&gt;val)</span><br><span class=\"line\">                    min = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre-&gt;next = lists[min];</span><br><span class=\"line\">            pre = pre-&gt;next;</span><br><span class=\"line\">            lists[min] = lists[min]-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>使用优先级队列进行每轮插入最小的节点，时间复杂度为<script type=\"math/tex\">O(n \\times log(k))</script></p>\n<p>这里使用最小优先队列，最小的值优先级最大</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">mergeKLists</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义优先级队列比较结构</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span>&#123;</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span> <span class=\"params\">()</span><span class=\"params\">(ListNode* a, ListNode* b)</span></span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> a-&gt;val &gt; b-&gt;val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ListNode *res = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *p = res;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//建立优先级队列，这里是最小优先队列，最小的值优先级最大</span></span><br><span class=\"line\">        priority_queue&lt;ListNode*, <span class=\"built_in\">vector</span>&lt;ListNode*&gt;, cmp&gt; pq;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ListNode* <span class=\"built_in\">list</span> : lists)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">list</span>!=<span class=\"literal\">NULL</span>) pq.push(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(pq.size()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            p-&gt;next = pq.top();<span class=\"comment\">//获取优先级最高的元素，即数字最小的</span></span><br><span class=\"line\">            pq.pop();<span class=\"comment\">//删除队首元素</span></span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;next != <span class=\"literal\">NULL</span>) pq.push(p-&gt;next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><p>分治法，使用递归两两合并，最终的链表等于合并好的前半部分加上合并好的后半部分，对前半部分在进行半部分和半部分的合并。</p>\n<p>下面贴一下题解的代码，Java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lists == <span class=\"keyword\">null</span> || lists.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merge(lists, <span class=\"number\">0</span>, lists.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">merge</span><span class=\"params\">(ListNode[] lists, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left == right) <span class=\"keyword\">return</span> lists[left];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        ListNode l1 = merge(lists, left, mid);</span><br><span class=\"line\">        ListNode l2 = merge(lists, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mergeTwoLists(l1, l2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class=\"line\">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            l2.next = mergeTwoLists(l1,l2.next);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>这里使用方法二</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeKLists</span><span class=\"params\">(self, lists: List[ListNode])</span> -&gt; ListNode:</span></span><br><span class=\"line\">        <span class=\"keyword\">import</span> heapq</span><br><span class=\"line\">        dummy = ListNode(<span class=\"number\">0</span>)</span><br><span class=\"line\">        p = dummy</span><br><span class=\"line\">        head = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(lists)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> lists[i] :</span><br><span class=\"line\">                heapq.heappush(head, (lists[i].val, i))</span><br><span class=\"line\">                lists[i] = lists[i].next</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            val, idx = heapq.heappop(head)</span><br><span class=\"line\">            p.next = ListNode(val)</span><br><span class=\"line\">            p = p.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> lists[idx]:</span><br><span class=\"line\">                heapq.heappush(head, (lists[idx].val, idx))</span><br><span class=\"line\">                lists[idx] = lists[idx].next</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>合并多个链表相对上一题就是链表数变多之后的处理，可以用优先级队列加快节点的查找，也可以使用分治法，合并症各部分就是先合并前半部分和后半部分，再将这两个部分合在一起 </li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode.com/problems/merge-k-sorted-lists/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong></p>\n<blockquote>\n<p>[<br>　　1-&gt;4-&gt;5,<br>　　1-&gt;3-&gt;4,<br>　　2-&gt;6<br>]<br><strong>Output:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p>\n</blockquote></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>相对上一题难度加大了一点，但是如果按照上一题的思路也是可以做的，就是时间复杂度会有点高</li>\n<li>这里介绍两种方法，第一种就是类似上一题的解法，每次循环找到所有链表中最小的头结点，然后改变指针指向，并不新建节点，中间有个坑是测试用例中会有空的链表，要注意处理下。每次加一个节点，加的时候遍历所有链表，所以时间复杂度是<script type=\"math/tex\">O(n \\times k)</script>,n是节点总数，k是链表数</li>\n<li>第二种方法是使用优先级队列，先将所有链表加入队列中，每次从队列中找到最小的节点，然后也是找n个节点，相对上一种方法是在<script type=\"math/tex\">O(n \\times k)</script>的k这里进行了优化，因为优先级队列存取是log()级别，因此时间复杂度是<script type=\"math/tex\">O(n \\times log(k))</script></li>\n<li>还想到一种方法是迭代，用上一题的方法进行两两合并，没有实现这种方法，看了题解有分治法，使用递归进两两合并</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>就地改变链表指针指向，时间复杂度<script type=\"math/tex\">O(n \\times k)</script></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">mergeKLists</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lists.size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        ListNode *res = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *pre = res;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(lists.size()!=<span class=\"number\">0</span>)&#123; </span><br><span class=\"line\">            <span class=\"comment\">//确保lists[0]非NULL</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(lists.size()&gt;<span class=\"number\">0</span> &amp;&amp; lists[min]==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                lists.erase(lists.begin()+min);</span><br><span class=\"line\">                min = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(lists.size()==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> res-&gt;next;</span><br><span class=\"line\">   </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;lists.size();i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(lists[i]==<span class=\"literal\">NULL</span>) </span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(lists[i]-&gt;val&lt;lists[min]-&gt;val)</span><br><span class=\"line\">                    min = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre-&gt;next = lists[min];</span><br><span class=\"line\">            pre = pre-&gt;next;</span><br><span class=\"line\">            lists[min] = lists[min]-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>使用优先级队列进行每轮插入最小的节点，时间复杂度为<script type=\"math/tex\">O(n \\times log(k))</script></p>\n<p>这里使用最小优先队列，最小的值优先级最大</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">mergeKLists</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义优先级队列比较结构</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span>&#123;</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span> <span class=\"params\">()</span><span class=\"params\">(ListNode* a, ListNode* b)</span></span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> a-&gt;val &gt; b-&gt;val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ListNode *res = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *p = res;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//建立优先级队列，这里是最小优先队列，最小的值优先级最大</span></span><br><span class=\"line\">        priority_queue&lt;ListNode*, <span class=\"built_in\">vector</span>&lt;ListNode*&gt;, cmp&gt; pq;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ListNode* <span class=\"built_in\">list</span> : lists)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">list</span>!=<span class=\"literal\">NULL</span>) pq.push(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(pq.size()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            p-&gt;next = pq.top();<span class=\"comment\">//获取优先级最高的元素，即数字最小的</span></span><br><span class=\"line\">            pq.pop();<span class=\"comment\">//删除队首元素</span></span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;next != <span class=\"literal\">NULL</span>) pq.push(p-&gt;next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><p>分治法，使用递归两两合并，最终的链表等于合并好的前半部分加上合并好的后半部分，对前半部分在进行半部分和半部分的合并。</p>\n<p>下面贴一下题解的代码，Java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lists == <span class=\"keyword\">null</span> || lists.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merge(lists, <span class=\"number\">0</span>, lists.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">merge</span><span class=\"params\">(ListNode[] lists, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left == right) <span class=\"keyword\">return</span> lists[left];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        ListNode l1 = merge(lists, left, mid);</span><br><span class=\"line\">        ListNode l2 = merge(lists, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mergeTwoLists(l1, l2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class=\"line\">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            l2.next = mergeTwoLists(l1,l2.next);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>这里使用方法二</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeKLists</span><span class=\"params\">(self, lists: List[ListNode])</span> -&gt; ListNode:</span></span><br><span class=\"line\">        <span class=\"keyword\">import</span> heapq</span><br><span class=\"line\">        dummy = ListNode(<span class=\"number\">0</span>)</span><br><span class=\"line\">        p = dummy</span><br><span class=\"line\">        head = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(lists)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> lists[i] :</span><br><span class=\"line\">                heapq.heappush(head, (lists[i].val, i))</span><br><span class=\"line\">                lists[i] = lists[i].next</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            val, idx = heapq.heappop(head)</span><br><span class=\"line\">            p.next = ListNode(val)</span><br><span class=\"line\">            p = p.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> lists[idx]:</span><br><span class=\"line\">                heapq.heappush(head, (lists[idx].val, idx))</span><br><span class=\"line\">                lists[idx] = lists[idx].next</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>合并多个链表相对上一题就是链表数变多之后的处理，可以用优先级队列加快节点的查找，也可以使用分治法，合并症各部分就是先合并前半部分和后半部分，再将这两个部分合在一起 </li>\n</ul>\n<hr>"},{"title":"LeetCode-026-Remove Duplicates from Sorted Array","comments":1,"mathjax":false,"date":"2019-05-25T16:56:26.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/)   \nGiven a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\n### Examples:\n**Input:**[1,1,2]\n**Output:**Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the returned length.\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 简单说就是去掉**排好序的**重复元素的嘛，然后要求空间复杂度$$ O(1) $$\n- 利用双指针的思想，第一个指针指向排好序的最后一个元素，第二个指针指向当前的元素\n- 如果当前元素不等于第一个指针指向的元素，那第一个指针自增，并赋值当前元素值\n- 还有一种也能过的本办法，已经排序好了，所以遇到一个重复的删除一个就行，不过时间会花的很多\n\n## C++ Codes\n双指针法，时间复杂度是$$ O(n) $$，花了32ms\n\n```C++\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        if(nums.size()==0)return 0;\n        //pre指向无重复排好序的最后一个位置\n        int pre=0;\n        for(int i=1;i<nums.size();i++){\n            if(nums[i]!=nums[pre]){\n                pre++;\n                nums[pre]=nums[i];\n            }\n                \n        }\n        return pre+1;\n    }\n};\n\n```\n\n## C++ Codes\n暴力删除法，时间复杂度$$ O(n) $$，用时252ms\n```C++\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        if(nums.size()==0)return 0;\n        for(int i=1;i<nums.size();){\n            if(nums[i]==nums[i-1]){\n                nums.erase(nums.begin()+i);\n            }else{\n                i++;\n            }\n        }\n        return nums.size();\n    }\n};\n```\n\n## 总结\n- 双指针很多时候都是能用上的，特别是就地算法，或者查找、排序等算法 \n- 简单题就不写Py的版本了\n\n\n------\n","source":"_posts/LeetCode-026-Remove-Duplicates-from-Sorted-Array.md","raw":"---\ntitle: LeetCode-026-Remove Duplicates from Sorted Array\ntags:\n  - LeetCode\n  - Duplicates\n  - Array\n  - Sort\n  - Easy\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-05-26 00:56:26\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/)   \nGiven a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\n### Examples:\n**Input:**[1,1,2]\n**Output:**Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the returned length.\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 简单说就是去掉**排好序的**重复元素的嘛，然后要求空间复杂度$$ O(1) $$\n- 利用双指针的思想，第一个指针指向排好序的最后一个元素，第二个指针指向当前的元素\n- 如果当前元素不等于第一个指针指向的元素，那第一个指针自增，并赋值当前元素值\n- 还有一种也能过的本办法，已经排序好了，所以遇到一个重复的删除一个就行，不过时间会花的很多\n\n## C++ Codes\n双指针法，时间复杂度是$$ O(n) $$，花了32ms\n\n```C++\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        if(nums.size()==0)return 0;\n        //pre指向无重复排好序的最后一个位置\n        int pre=0;\n        for(int i=1;i<nums.size();i++){\n            if(nums[i]!=nums[pre]){\n                pre++;\n                nums[pre]=nums[i];\n            }\n                \n        }\n        return pre+1;\n    }\n};\n\n```\n\n## C++ Codes\n暴力删除法，时间复杂度$$ O(n) $$，用时252ms\n```C++\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        if(nums.size()==0)return 0;\n        for(int i=1;i<nums.size();){\n            if(nums[i]==nums[i-1]){\n                nums.erase(nums.begin()+i);\n            }else{\n                i++;\n            }\n        }\n        return nums.size();\n    }\n};\n```\n\n## 总结\n- 双指针很多时候都是能用上的，特别是就地算法，或者查找、排序等算法 \n- 简单题就不写Py的版本了\n\n\n------\n","slug":"LeetCode-026-Remove-Duplicates-from-Sorted-Array","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjv10032ussbh4uz7qox","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>[1,1,2]<br><strong>Output:</strong>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the returned length.</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>简单说就是去掉<strong>排好序的</strong>重复元素的嘛，然后要求空间复杂度<script type=\"math/tex\">O(1)</script></li>\n<li>利用双指针的思想，第一个指针指向排好序的最后一个元素，第二个指针指向当前的元素</li>\n<li>如果当前元素不等于第一个指针指向的元素，那第一个指针自增，并赋值当前元素值</li>\n<li>还有一种也能过的本办法，已经排序好了，所以遇到一个重复的删除一个就行，不过时间会花的很多</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>双指针法，时间复杂度是<script type=\"math/tex\">O(n)</script>，花了32ms</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//pre指向无重复排好序的最后一个位置</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]!=nums[pre])&#123;</span><br><span class=\"line\">                pre++;</span><br><span class=\"line\">                nums[pre]=nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-Codes-1\"><a href=\"#C-Codes-1\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>暴力删除法，时间复杂度<script type=\"math/tex\">O(n)</script>，用时252ms<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.size();)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]==nums[i<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                nums.erase(nums.begin()+i);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>双指针很多时候都是能用上的，特别是就地算法，或者查找、排序等算法 </li>\n<li>简单题就不写Py的版本了</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>[1,1,2]<br><strong>Output:</strong>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the returned length.</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>简单说就是去掉<strong>排好序的</strong>重复元素的嘛，然后要求空间复杂度<script type=\"math/tex\">O(1)</script></li>\n<li>利用双指针的思想，第一个指针指向排好序的最后一个元素，第二个指针指向当前的元素</li>\n<li>如果当前元素不等于第一个指针指向的元素，那第一个指针自增，并赋值当前元素值</li>\n<li>还有一种也能过的本办法，已经排序好了，所以遇到一个重复的删除一个就行，不过时间会花的很多</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>双指针法，时间复杂度是<script type=\"math/tex\">O(n)</script>，花了32ms</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//pre指向无重复排好序的最后一个位置</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]!=nums[pre])&#123;</span><br><span class=\"line\">                pre++;</span><br><span class=\"line\">                nums[pre]=nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-Codes-1\"><a href=\"#C-Codes-1\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>暴力删除法，时间复杂度<script type=\"math/tex\">O(n)</script>，用时252ms<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.size();)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]==nums[i<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                nums.erase(nums.begin()+i);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>双指针很多时候都是能用上的，特别是就地算法，或者查找、排序等算法 </li>\n<li>简单题就不写Py的版本了</li>\n</ul>\n<hr>"},{"title":"LeetCode-088-Merge Sorted Array","comments":1,"mathjax":false,"date":"2019-06-01T16:40:13.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode-cn.com/problems/merge-sorted-array/)   \nGiven two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\n\n**Note:** \n\n- The number of elements initialized in nums1 and nums2 are m and n respectively.\n- You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.\n\n合并两个有序数组，合并到第一个数组里\n\n### Examples:\n**Input:**\n> nums1 = [1,2,3,0,0,0], m = 3\n> nums2 = [2,5,6],       n = 3\n**Output:**\n> [1,2,2,3,5,6]\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 简单题，所以可以直接暴力求解\n- 先把第一个数组备份到tmp，然后对tmp和第二个数组进行合并，结果放到nums1里面就行\n\n\n## C++ Codes\n12ms，超90%，大部分人都是这个时间\n\n```C++\nclass Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        vector<int> tmp;\n        for(int i=0;i<m;i++)\n            tmp.push_back(nums1[i]);\n        \n        int cnt=0, i, j;\n        for(i=0,j=0;i<m && j<n;cnt++){\n            if(tmp[i]<nums2[j]){\n                nums1[cnt]=tmp[i++];\n            }else{\n                nums1[cnt]=nums2[j++];\n            }\n        }\n        while(i<m) nums1[cnt++]=tmp[i++];\n        while(j<n) nums1[cnt++]=nums2[j++];\n    }\n};\n```\n\n## 总结\n- 如果是多个链表合并，不是这种有序数组两个合并的，可以看另一个题目，网站搜索合并多个链表\n\n\n------\n","source":"_posts/LeetCode-088-Merge-Sorted-Array.md","raw":"---\ntitle: LeetCode-088-Merge Sorted Array\ntags:\n  - LeetCode\n  - Array\n  - Merge\n  - Easy\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-06-02 00:40:13\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode-cn.com/problems/merge-sorted-array/)   \nGiven two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\n\n**Note:** \n\n- The number of elements initialized in nums1 and nums2 are m and n respectively.\n- You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.\n\n合并两个有序数组，合并到第一个数组里\n\n### Examples:\n**Input:**\n> nums1 = [1,2,3,0,0,0], m = 3\n> nums2 = [2,5,6],       n = 3\n**Output:**\n> [1,2,2,3,5,6]\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 简单题，所以可以直接暴力求解\n- 先把第一个数组备份到tmp，然后对tmp和第二个数组进行合并，结果放到nums1里面就行\n\n\n## C++ Codes\n12ms，超90%，大部分人都是这个时间\n\n```C++\nclass Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        vector<int> tmp;\n        for(int i=0;i<m;i++)\n            tmp.push_back(nums1[i]);\n        \n        int cnt=0, i, j;\n        for(i=0,j=0;i<m && j<n;cnt++){\n            if(tmp[i]<nums2[j]){\n                nums1[cnt]=tmp[i++];\n            }else{\n                nums1[cnt]=nums2[j++];\n            }\n        }\n        while(i<m) nums1[cnt++]=tmp[i++];\n        while(j<n) nums1[cnt++]=nums2[j++];\n    }\n};\n```\n\n## 总结\n- 如果是多个链表合并，不是这种有序数组两个合并的，可以看另一个题目，网站搜索合并多个链表\n\n\n------\n","slug":"LeetCode-088-Merge-Sorted-Array","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjva0035ussb0ccyibf7","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/merge-sorted-array/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p>\n<p><strong>Note:</strong> </p>\n<ul>\n<li>The number of elements initialized in nums1 and nums2 are m and n respectively.</li>\n<li>You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.</li>\n</ul>\n<p>合并两个有序数组，合并到第一个数组里</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong></p>\n<blockquote>\n<p>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3<br><strong>Output:</strong><br>[1,2,2,3,5,6]</p>\n</blockquote></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>简单题，所以可以直接暴力求解</li>\n<li>先把第一个数组备份到tmp，然后对tmp和第二个数组进行合并，结果放到nums1里面就行</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>12ms，超90%，大部分人都是这个时间</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums1, <span class=\"keyword\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums2, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; tmp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">            tmp.push_back(nums1[i]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>, i, j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;m &amp;&amp; j&lt;n;cnt++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp[i]&lt;nums2[j])&#123;</span><br><span class=\"line\">                nums1[cnt]=tmp[i++];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                nums1[cnt]=nums2[j++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;m) nums1[cnt++]=tmp[i++];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&lt;n) nums1[cnt++]=nums2[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>如果是多个链表合并，不是这种有序数组两个合并的，可以看另一个题目，网站搜索合并多个链表</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/merge-sorted-array/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p>\n<p><strong>Note:</strong> </p>\n<ul>\n<li>The number of elements initialized in nums1 and nums2 are m and n respectively.</li>\n<li>You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.</li>\n</ul>\n<p>合并两个有序数组，合并到第一个数组里</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong></p>\n<blockquote>\n<p>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3<br><strong>Output:</strong><br>[1,2,2,3,5,6]</p>\n</blockquote></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>简单题，所以可以直接暴力求解</li>\n<li>先把第一个数组备份到tmp，然后对tmp和第二个数组进行合并，结果放到nums1里面就行</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>12ms，超90%，大部分人都是这个时间</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums1, <span class=\"keyword\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums2, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; tmp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">            tmp.push_back(nums1[i]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>, i, j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;m &amp;&amp; j&lt;n;cnt++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp[i]&lt;nums2[j])&#123;</span><br><span class=\"line\">                nums1[cnt]=tmp[i++];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                nums1[cnt]=nums2[j++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;m) nums1[cnt++]=tmp[i++];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&lt;n) nums1[cnt++]=nums2[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>如果是多个链表合并，不是这种有序数组两个合并的，可以看另一个题目，网站搜索合并多个链表</li>\n</ul>\n<hr>"},{"title":"LeetCode-124-Binary Tree Maximum Path Sum","comments":1,"mathjax":false,"date":"2019-06-13T15:41:23.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n落了好多题没记录了，而且因为刷的是专项，没有按照顺序了，所以....顺序很乱，这阵子就先这样把，后面夏令营结束再按照顺序来，把以前的慢慢补上。\n\nLeetCode中国还是挺方便的，加载速度比原版的快很多，而且可以中英文切换。\n\n## [Problem](https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/submissions/)   \nGiven a non-empty binary tree, find the maximum path sum.\n\nFor this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.\n\n求二叉树最大的路径和，任意节点到任意节点的最大路径和\n\n### Examples:\n**Input:**[1,2,3]\n**Output:**6\n**Input:**[-10,9,20,null,null,15,7]\n**Output:**42\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 二叉树一般就是递归，这道题也很明显用递归，找到左子树、右子树的最大路径和，一共算了下，大概有一下几种情况\n\n1. 左子树路径和加根节点值最大\n2. 右子树路径和加根节点值最大\n3. 左右子树路径和都是负数，所以单独的根节点值最大\n4. 左右子树路径和加上根节点值最大，$$ 如果左右子树路径和都非负，那肯定就得加上嘛 $$\n\n这里之所以不把左子树路径和与右子树路径和单独列出来，是因为递归到左右子树的时候就相当于判断过来\n\n按照这样的思路，就可以想到办法了，求左右子树路径和，然后找到最大的一边，加上根节点值，这是前三种情况，再和第四种情况：三者之和 比较，就可以得到最后的结果resSum，然后和全局遍历maxSum比较：$$ maxSum = max(maxSum, resSum) $$\n\n- 改进的方法是，判断左右子树的路径和是否小于0，如果小于0，那肯定就不走这边，所以令其为0，最后就变成了一种情况，就是上面的第四种，只要把三者相加，再和全局变量maxSum比较就可以\n\n解释下，如果某一边大于0，那肯定要加上，如果小于0，不走那边就相当于加上0，就可以\n\n但是最后的结果发现，虽然第二种办法，将四种情况缩成了一种情况，但是似乎时间会花的更多。第一种情况是32ms，第二种是40ms+。\n\n\n## C++ Codes\n递归，第一种解法，判断四种情况的，32ms\n\n```C++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxSum;\n    int maxPathSum(TreeNode* root) {\n        maxSum = root->val;\n        int rootGain = maxGain(root);\n        return maxSum;\n    }\n    int maxGain(TreeNode *root){\n        if(root==NULL) return 0;\n        int leftGain = maxGain(root->left);\n        int rightGain = maxGain(root->right);\n        int rootGain = max(leftGain, rightGain)+root->val;\n        int newPathGain = leftGain + rightGain + root->val;\n        int resGain = max(newPathGain, rootGain);\n        if(resGain > maxSum)\n            maxSum = resGain;\n        if(rootGain<=0) return 0;\n        return rootGain;\n    }\n};\n```\n\n## C++ Codes\n第二种解法，合并成一种情况的，44ms\n\n```C++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxSum;\n    int maxPathSum(TreeNode* root) {\n        maxSum = root->val;\n        int rootGain = maxGain(root);\n        return maxSum;\n    }\n    int maxGain(TreeNode *root){\n        if(root==NULL) return 0;\n        int leftGain = max(maxGain(root->left), 0);\n        int rightGain = max(maxGain(root->right), 0);\n        int newPathGain = leftGain + rightGain + root->val;\n        maxSum = max(newPathGain, maxSum);\n        return max(leftGain, rightGain)+root->val;\n    }\n};\n```\n\n\n## 总结\n- 二叉树一般用递归就好了，查找还是啥操作的，一般递归+剪枝就可以，往这方向想 \n\n\n------\n","source":"_posts/LeetCode-124-Binary-Tree-Maximum-Path-Sum.md","raw":"---\ntitle: LeetCode-124-Binary Tree Maximum Path Sum\ntags:\n  - LeetCode\n  - Hard\n  - BinaryTree\n  - Recursive\n  - DP\n  - Hard\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-06-13 23:41:23\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n落了好多题没记录了，而且因为刷的是专项，没有按照顺序了，所以....顺序很乱，这阵子就先这样把，后面夏令营结束再按照顺序来，把以前的慢慢补上。\n\nLeetCode中国还是挺方便的，加载速度比原版的快很多，而且可以中英文切换。\n\n## [Problem](https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/submissions/)   \nGiven a non-empty binary tree, find the maximum path sum.\n\nFor this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.\n\n求二叉树最大的路径和，任意节点到任意节点的最大路径和\n\n### Examples:\n**Input:**[1,2,3]\n**Output:**6\n**Input:**[-10,9,20,null,null,15,7]\n**Output:**42\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 二叉树一般就是递归，这道题也很明显用递归，找到左子树、右子树的最大路径和，一共算了下，大概有一下几种情况\n\n1. 左子树路径和加根节点值最大\n2. 右子树路径和加根节点值最大\n3. 左右子树路径和都是负数，所以单独的根节点值最大\n4. 左右子树路径和加上根节点值最大，$$ 如果左右子树路径和都非负，那肯定就得加上嘛 $$\n\n这里之所以不把左子树路径和与右子树路径和单独列出来，是因为递归到左右子树的时候就相当于判断过来\n\n按照这样的思路，就可以想到办法了，求左右子树路径和，然后找到最大的一边，加上根节点值，这是前三种情况，再和第四种情况：三者之和 比较，就可以得到最后的结果resSum，然后和全局遍历maxSum比较：$$ maxSum = max(maxSum, resSum) $$\n\n- 改进的方法是，判断左右子树的路径和是否小于0，如果小于0，那肯定就不走这边，所以令其为0，最后就变成了一种情况，就是上面的第四种，只要把三者相加，再和全局变量maxSum比较就可以\n\n解释下，如果某一边大于0，那肯定要加上，如果小于0，不走那边就相当于加上0，就可以\n\n但是最后的结果发现，虽然第二种办法，将四种情况缩成了一种情况，但是似乎时间会花的更多。第一种情况是32ms，第二种是40ms+。\n\n\n## C++ Codes\n递归，第一种解法，判断四种情况的，32ms\n\n```C++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxSum;\n    int maxPathSum(TreeNode* root) {\n        maxSum = root->val;\n        int rootGain = maxGain(root);\n        return maxSum;\n    }\n    int maxGain(TreeNode *root){\n        if(root==NULL) return 0;\n        int leftGain = maxGain(root->left);\n        int rightGain = maxGain(root->right);\n        int rootGain = max(leftGain, rightGain)+root->val;\n        int newPathGain = leftGain + rightGain + root->val;\n        int resGain = max(newPathGain, rootGain);\n        if(resGain > maxSum)\n            maxSum = resGain;\n        if(rootGain<=0) return 0;\n        return rootGain;\n    }\n};\n```\n\n## C++ Codes\n第二种解法，合并成一种情况的，44ms\n\n```C++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxSum;\n    int maxPathSum(TreeNode* root) {\n        maxSum = root->val;\n        int rootGain = maxGain(root);\n        return maxSum;\n    }\n    int maxGain(TreeNode *root){\n        if(root==NULL) return 0;\n        int leftGain = max(maxGain(root->left), 0);\n        int rightGain = max(maxGain(root->right), 0);\n        int newPathGain = leftGain + rightGain + root->val;\n        maxSum = max(newPathGain, maxSum);\n        return max(leftGain, rightGain)+root->val;\n    }\n};\n```\n\n\n## 总结\n- 二叉树一般用递归就好了，查找还是啥操作的，一般递归+剪枝就可以，往这方向想 \n\n\n------\n","slug":"LeetCode-124-Binary-Tree-Maximum-Path-Sum","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjve0038ussbaicqj2si","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>落了好多题没记录了，而且因为刷的是专项，没有按照顺序了，所以….顺序很乱，这阵子就先这样把，后面夏令营结束再按照顺序来，把以前的慢慢补上。</p>\n<p>LeetCode中国还是挺方便的，加载速度比原版的快很多，而且可以中英文切换。</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/submissions/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a non-empty binary tree, find the maximum path sum.</p>\n<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.</p>\n<p>求二叉树最大的路径和，任意节点到任意节点的最大路径和</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>[1,2,3]<br><strong>Output:</strong>6<br><strong>Input:</strong>[-10,9,20,null,null,15,7]<br><strong>Output:</strong>42</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>二叉树一般就是递归，这道题也很明显用递归，找到左子树、右子树的最大路径和，一共算了下，大概有一下几种情况</li>\n</ul>\n<ol>\n<li>左子树路径和加根节点值最大</li>\n<li>右子树路径和加根节点值最大</li>\n<li>左右子树路径和都是负数，所以单独的根节点值最大</li>\n<li>左右子树路径和加上根节点值最大，<script type=\"math/tex\">如果左右子树路径和都非负，那肯定就得加上嘛</script></li>\n</ol>\n<p>这里之所以不把左子树路径和与右子树路径和单独列出来，是因为递归到左右子树的时候就相当于判断过来</p>\n<p>按照这样的思路，就可以想到办法了，求左右子树路径和，然后找到最大的一边，加上根节点值，这是前三种情况，再和第四种情况：三者之和 比较，就可以得到最后的结果resSum，然后和全局遍历maxSum比较：<script type=\"math/tex\">maxSum = max(maxSum, resSum)</script></p>\n<ul>\n<li>改进的方法是，判断左右子树的路径和是否小于0，如果小于0，那肯定就不走这边，所以令其为0，最后就变成了一种情况，就是上面的第四种，只要把三者相加，再和全局变量maxSum比较就可以</li>\n</ul>\n<p>解释下，如果某一边大于0，那肯定要加上，如果小于0，不走那边就相当于加上0，就可以</p>\n<p>但是最后的结果发现，虽然第二种办法，将四种情况缩成了一种情况，但是似乎时间会花的更多。第一种情况是32ms，第二种是40ms+。</p>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>递归，第一种解法，判断四种情况的，32ms</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxSum;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxPathSum</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        maxSum = root-&gt;val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rootGain = maxGain(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxGain</span><span class=\"params\">(TreeNode *root)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftGain = maxGain(root-&gt;left);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rightGain = maxGain(root-&gt;right);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rootGain = max(leftGain, rightGain)+root-&gt;val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newPathGain = leftGain + rightGain + root-&gt;val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> resGain = max(newPathGain, rootGain);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resGain &gt; maxSum)</span><br><span class=\"line\">            maxSum = resGain;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rootGain&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rootGain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-Codes-1\"><a href=\"#C-Codes-1\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>第二种解法，合并成一种情况的，44ms</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxSum;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxPathSum</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        maxSum = root-&gt;val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rootGain = maxGain(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxGain</span><span class=\"params\">(TreeNode *root)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftGain = max(maxGain(root-&gt;left), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rightGain = max(maxGain(root-&gt;right), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newPathGain = leftGain + rightGain + root-&gt;val;</span><br><span class=\"line\">        maxSum = max(newPathGain, maxSum);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(leftGain, rightGain)+root-&gt;val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>二叉树一般用递归就好了，查找还是啥操作的，一般递归+剪枝就可以，往这方向想 </li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>落了好多题没记录了，而且因为刷的是专项，没有按照顺序了，所以….顺序很乱，这阵子就先这样把，后面夏令营结束再按照顺序来，把以前的慢慢补上。</p>\n<p>LeetCode中国还是挺方便的，加载速度比原版的快很多，而且可以中英文切换。</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/submissions/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a non-empty binary tree, find the maximum path sum.</p>\n<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.</p>\n<p>求二叉树最大的路径和，任意节点到任意节点的最大路径和</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>[1,2,3]<br><strong>Output:</strong>6<br><strong>Input:</strong>[-10,9,20,null,null,15,7]<br><strong>Output:</strong>42</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>二叉树一般就是递归，这道题也很明显用递归，找到左子树、右子树的最大路径和，一共算了下，大概有一下几种情况</li>\n</ul>\n<ol>\n<li>左子树路径和加根节点值最大</li>\n<li>右子树路径和加根节点值最大</li>\n<li>左右子树路径和都是负数，所以单独的根节点值最大</li>\n<li>左右子树路径和加上根节点值最大，<script type=\"math/tex\">如果左右子树路径和都非负，那肯定就得加上嘛</script></li>\n</ol>\n<p>这里之所以不把左子树路径和与右子树路径和单独列出来，是因为递归到左右子树的时候就相当于判断过来</p>\n<p>按照这样的思路，就可以想到办法了，求左右子树路径和，然后找到最大的一边，加上根节点值，这是前三种情况，再和第四种情况：三者之和 比较，就可以得到最后的结果resSum，然后和全局遍历maxSum比较：<script type=\"math/tex\">maxSum = max(maxSum, resSum)</script></p>\n<ul>\n<li>改进的方法是，判断左右子树的路径和是否小于0，如果小于0，那肯定就不走这边，所以令其为0，最后就变成了一种情况，就是上面的第四种，只要把三者相加，再和全局变量maxSum比较就可以</li>\n</ul>\n<p>解释下，如果某一边大于0，那肯定要加上，如果小于0，不走那边就相当于加上0，就可以</p>\n<p>但是最后的结果发现，虽然第二种办法，将四种情况缩成了一种情况，但是似乎时间会花的更多。第一种情况是32ms，第二种是40ms+。</p>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>递归，第一种解法，判断四种情况的，32ms</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxSum;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxPathSum</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        maxSum = root-&gt;val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rootGain = maxGain(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxGain</span><span class=\"params\">(TreeNode *root)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftGain = maxGain(root-&gt;left);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rightGain = maxGain(root-&gt;right);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rootGain = max(leftGain, rightGain)+root-&gt;val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newPathGain = leftGain + rightGain + root-&gt;val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> resGain = max(newPathGain, rootGain);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resGain &gt; maxSum)</span><br><span class=\"line\">            maxSum = resGain;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rootGain&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rootGain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-Codes-1\"><a href=\"#C-Codes-1\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>第二种解法，合并成一种情况的，44ms</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxSum;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxPathSum</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        maxSum = root-&gt;val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rootGain = maxGain(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxGain</span><span class=\"params\">(TreeNode *root)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftGain = max(maxGain(root-&gt;left), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rightGain = max(maxGain(root-&gt;right), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newPathGain = leftGain + rightGain + root-&gt;val;</span><br><span class=\"line\">        maxSum = max(newPathGain, maxSum);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(leftGain, rightGain)+root-&gt;val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>二叉树一般用递归就好了，查找还是啥操作的，一般递归+剪枝就可以，往这方向想 </li>\n</ul>\n<hr>"},{"title":"LeetCode-125-Valid Palindrome","comments":1,"mathjax":false,"date":"2019-06-01T16:55:08.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode-cn.com/problems/valid-palindrome/)   \nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\n### Examples:\n**Input:**\"A man, a plan, a canal: Panama\"\n**Output:**true\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 如果是单纯的回文串验证，那很简单，很多种方法\n- 可以直接用函数将字符串逆序作比较\n- 可以用两个指针指向头和尾，逐个字符比较\n- 这道题因为还有空格，标点符号，大小写的问题，需要简单的处理下\n\n\n## C++ Codes\n8ms，超99%\n\n```C++\nclass Solution {\npublic:\n    bool isPalindrome(string s) {\n        //全部变成小写并去掉非数字和字符的\n        transform(s.begin(),s.end(),s.begin(),::tolower);\n        string res;\n        for(int i=0;i<s.length();i++){\n            if((s[i]>='0' && s[i]<='9') || (s[i]>='a' && s[i]<='z')) \n                res+=s[i];\n        }\n        cout<<res<<endl;\n        if(res.empty()) return true;  \n        int l=0, r=res.length()-1;\n        while(l<res.length() && r>=0 && l<=r){\n            if(res[l]==res[r]){\n                l++;\n                r--;\n            }else{\n                return false;\n            }\n        }\n        return true;\n    }\n};\n```\n\n{% note info %}\nC++里面没有直接对字符串进行全部转换大写或者小写的方法\n可以用`transform(s.begin(),s.end(),s.begin(),::tolower)`\n更多方法可以进行百度，如果懒得找也可以自己遍历字符修改大小写\n{% endnote %}\n\n\n## 总结\n- 要注意的就是字符串的预处理，并且处理之后如果是空串要返回true \n\n\n------\n","source":"_posts/LeetCode-125-Valid-Palindrome.md","raw":"---\ntitle: LeetCode-125-Valid Palindrome\ntags:\n  - LeetCode\n  - Palindrome\n  - String\n  - Easy\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-06-02 00:55:08\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode-cn.com/problems/valid-palindrome/)   \nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\n### Examples:\n**Input:**\"A man, a plan, a canal: Panama\"\n**Output:**true\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 如果是单纯的回文串验证，那很简单，很多种方法\n- 可以直接用函数将字符串逆序作比较\n- 可以用两个指针指向头和尾，逐个字符比较\n- 这道题因为还有空格，标点符号，大小写的问题，需要简单的处理下\n\n\n## C++ Codes\n8ms，超99%\n\n```C++\nclass Solution {\npublic:\n    bool isPalindrome(string s) {\n        //全部变成小写并去掉非数字和字符的\n        transform(s.begin(),s.end(),s.begin(),::tolower);\n        string res;\n        for(int i=0;i<s.length();i++){\n            if((s[i]>='0' && s[i]<='9') || (s[i]>='a' && s[i]<='z')) \n                res+=s[i];\n        }\n        cout<<res<<endl;\n        if(res.empty()) return true;  \n        int l=0, r=res.length()-1;\n        while(l<res.length() && r>=0 && l<=r){\n            if(res[l]==res[r]){\n                l++;\n                r--;\n            }else{\n                return false;\n            }\n        }\n        return true;\n    }\n};\n```\n\n{% note info %}\nC++里面没有直接对字符串进行全部转换大写或者小写的方法\n可以用`transform(s.begin(),s.end(),s.begin(),::tolower)`\n更多方法可以进行百度，如果懒得找也可以自己遍历字符修改大小写\n{% endnote %}\n\n\n## 总结\n- 要注意的就是字符串的预处理，并且处理之后如果是空串要返回true \n\n\n------\n","slug":"LeetCode-125-Valid-Palindrome","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjvg003bussbmvz22fci","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/valid-palindrome/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>\n<p>Note: For the purpose of this problem, we define empty string as valid palindrome.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>“A man, a plan, a canal: Panama”<br><strong>Output:</strong>true</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>如果是单纯的回文串验证，那很简单，很多种方法</li>\n<li>可以直接用函数将字符串逆序作比较</li>\n<li>可以用两个指针指向头和尾，逐个字符比较</li>\n<li>这道题因为还有空格，标点符号，大小写的问题，需要简单的处理下</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>8ms，超99%</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//全部变成小写并去掉非数字和字符的</span></span><br><span class=\"line\">        transform(s.begin(),s.end(),s.begin(),::<span class=\"built_in\">tolower</span>);</span><br><span class=\"line\">        <span class=\"built_in\">string</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((s[i]&gt;=<span class=\"string\">'0'</span> &amp;&amp; s[i]&lt;=<span class=\"string\">'9'</span>) || (s[i]&gt;=<span class=\"string\">'a'</span> &amp;&amp; s[i]&lt;=<span class=\"string\">'z'</span>)) </span><br><span class=\"line\">                res+=s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;res&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res.empty()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>, r=res.length()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;res.length() &amp;&amp; r&gt;=<span class=\"number\">0</span> &amp;&amp; l&lt;=r)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(res[l]==res[r])&#123;</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">                r--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div class=\"note info\"><p>C++里面没有直接对字符串进行全部转换大写或者小写的方法<br>可以用<code>transform(s.begin(),s.end(),s.begin(),::tolower)</code><br>更多方法可以进行百度，如果懒得找也可以自己遍历字符修改大小写</p></div>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>要注意的就是字符串的预处理，并且处理之后如果是空串要返回true </li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/valid-palindrome/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>\n<p>Note: For the purpose of this problem, we define empty string as valid palindrome.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>“A man, a plan, a canal: Panama”<br><strong>Output:</strong>true</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>如果是单纯的回文串验证，那很简单，很多种方法</li>\n<li>可以直接用函数将字符串逆序作比较</li>\n<li>可以用两个指针指向头和尾，逐个字符比较</li>\n<li>这道题因为还有空格，标点符号，大小写的问题，需要简单的处理下</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>8ms，超99%</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//全部变成小写并去掉非数字和字符的</span></span><br><span class=\"line\">        transform(s.begin(),s.end(),s.begin(),::<span class=\"built_in\">tolower</span>);</span><br><span class=\"line\">        <span class=\"built_in\">string</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((s[i]&gt;=<span class=\"string\">'0'</span> &amp;&amp; s[i]&lt;=<span class=\"string\">'9'</span>) || (s[i]&gt;=<span class=\"string\">'a'</span> &amp;&amp; s[i]&lt;=<span class=\"string\">'z'</span>)) </span><br><span class=\"line\">                res+=s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;res&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res.empty()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>, r=res.length()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;res.length() &amp;&amp; r&gt;=<span class=\"number\">0</span> &amp;&amp; l&lt;=r)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(res[l]==res[r])&#123;</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">                r--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div class=\"note info\"><p>C++里面没有直接对字符串进行全部转换大写或者小写的方法<br>可以用<code>transform(s.begin(),s.end(),s.begin(),::tolower)</code><br>更多方法可以进行百度，如果懒得找也可以自己遍历字符修改大小写</p></div>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>要注意的就是字符串的预处理，并且处理之后如果是空串要返回true </li>\n</ul>\n<hr>"},{"title":"LeetCode-136-Single Number","comments":1,"mathjax":false,"date":"2019-05-25T16:57:09.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n看到有算法面试集锦，刷点题，刚开始刷，前面都是简单题，随便看看了\n\n## [Problem](https://leetcode-cn.com/problems/single-number/)   \nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\n**Note:**\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\n### Examples:\n**Input:**[2,2,1]\n**Output:**1\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 刚开始就是向简单的遍历一遍，用map存出现次数，但是要$$ O(1) $$ 的空间复杂度，所以不可以\n- 然后想到排序，排序完找，但是要线性时间复杂度。。。\n- 最后是用异或的方法，因为题目说的是，只有一个出现一次，其他的全部出现两次\n- 两个相同的数异或（XOR），结果为0，0和0异或当然还是0，然后就剩下了单独的一个数字，0和非0数异或等于非0数本身\n\n\n## C++ Codes\n时间复杂度$$ O(n) $$，空间复杂度$$ O(1) $$\n\n```C++\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        if(nums.size()==0)return 0;\n        int res = 0;\n        for(int i=0;i<nums.size();i++){\n            res = res^nums[i];\n        }\n        return res;\n    }\n};\n```\n\n\n## 总结\n- 注意题目细节，每个重复的数字都是出现两次 \n\n\n------\n","source":"_posts/LeetCode-136-Single-Number.md","raw":"---\ntitle: LeetCode-136-Single Number\ntags:\n  - LeetCode\n  - Xor\n  - Math\n  - Linear\n  - Easy\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-05-26 00:57:09\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n看到有算法面试集锦，刷点题，刚开始刷，前面都是简单题，随便看看了\n\n## [Problem](https://leetcode-cn.com/problems/single-number/)   \nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\n**Note:**\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\n### Examples:\n**Input:**[2,2,1]\n**Output:**1\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 刚开始就是向简单的遍历一遍，用map存出现次数，但是要$$ O(1) $$ 的空间复杂度，所以不可以\n- 然后想到排序，排序完找，但是要线性时间复杂度。。。\n- 最后是用异或的方法，因为题目说的是，只有一个出现一次，其他的全部出现两次\n- 两个相同的数异或（XOR），结果为0，0和0异或当然还是0，然后就剩下了单独的一个数字，0和非0数异或等于非0数本身\n\n\n## C++ Codes\n时间复杂度$$ O(n) $$，空间复杂度$$ O(1) $$\n\n```C++\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        if(nums.size()==0)return 0;\n        int res = 0;\n        for(int i=0;i<nums.size();i++){\n            res = res^nums[i];\n        }\n        return res;\n    }\n};\n```\n\n\n## 总结\n- 注意题目细节，每个重复的数字都是出现两次 \n\n\n------\n","slug":"LeetCode-136-Single-Number","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjvn003eussbvz70c1le","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>看到有算法面试集锦，刷点题，刚开始刷，前面都是简单题，随便看看了</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/single-number/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a non-empty array of integers, every element appears twice except for one. Find that single one.</p>\n<p><strong>Note:</strong><br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>[2,2,1]<br><strong>Output:</strong>1</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>刚开始就是向简单的遍历一遍，用map存出现次数，但是要<script type=\"math/tex\">O(1)</script> 的空间复杂度，所以不可以</li>\n<li>然后想到排序，排序完找，但是要线性时间复杂度。。。</li>\n<li>最后是用异或的方法，因为题目说的是，只有一个出现一次，其他的全部出现两次</li>\n<li>两个相同的数异或（XOR），结果为0，0和0异或当然还是0，然后就剩下了单独的一个数字，0和非0数异或等于非0数本身</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>时间复杂度<script type=\"math/tex\">O(n)</script>，空间复杂度<script type=\"math/tex\">O(1)</script></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            res = res^nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>注意题目细节，每个重复的数字都是出现两次 </li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>看到有算法面试集锦，刷点题，刚开始刷，前面都是简单题，随便看看了</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/single-number/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given a non-empty array of integers, every element appears twice except for one. Find that single one.</p>\n<p><strong>Note:</strong><br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>[2,2,1]<br><strong>Output:</strong>1</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>刚开始就是向简单的遍历一遍，用map存出现次数，但是要<script type=\"math/tex\">O(1)</script> 的空间复杂度，所以不可以</li>\n<li>然后想到排序，排序完找，但是要线性时间复杂度。。。</li>\n<li>最后是用异或的方法，因为题目说的是，只有一个出现一次，其他的全部出现两次</li>\n<li>两个相同的数异或（XOR），结果为0，0和0异或当然还是0，然后就剩下了单独的一个数字，0和非0数异或等于非0数本身</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>时间复杂度<script type=\"math/tex\">O(n)</script>，空间复杂度<script type=\"math/tex\">O(1)</script></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            res = res^nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>注意题目细节，每个重复的数字都是出现两次 </li>\n</ul>\n<hr>"},{"title":"LeetCode-169-Majority Element","comments":1,"mathjax":false,"date":"2019-05-25T16:55:31.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode-cn.com/problems/majority-element/)   \nGiven an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.\n\nYou may assume that the array is non-empty and the majority element always exist in the array.\n\n### Examples:\n**Input:**[3,2,3]\n**Output:**3\n**Input:**[2,2,1,1,1,2,2]\n**Output:**2\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 找众数嘛，只要记录下来他们每个出现的次数就好了啊\n- 用map存放每个数字出现的次数，然后遇到比n/2.0大的就return\n\n\n## C++ Codes\n时间复杂度$$ O(n) $$,用时32ms\n\n```C++\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        map<int, int> mymap;\n        int n = nums.size();\n        int res = 0;\n        for(int i=0;i<n;i++){\n            if(mymap.count(nums[i])==1)\n                mymap[nums[i]] = mymap[nums[i]]+1;\n            else\n                mymap[nums[i]] = 1;\n\n            if(mymap[nums[i]]>n/2.0){\n                res = nums[i];\n                break;\n            }\n\n        }\n        return res;\n    }\n};\n\n```\n\n## Python Codes\n简单题就不写py版本了\n\n## 总结\n- map真好用。。真香\n- 数据量特别大的时候，可以用hash_map\n- map的查找方式是二分查找，如果是100万条记录，最多也只要20次的string.compare的比较，200万条记录，也只要用21次的比较\n- 如果想要在如此大的记录量下，只用一两次的string.compare就找到记录，那就要用hash_map\n\n\n------\n","source":"_posts/LeetCode-169-Majority-Element.md","raw":"---\ntitle: LeetCode-169-Majority Element\ntags:\n  - LeetCode\n  - Math\n  - Map\n  - Majority\n  - Easy\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-05-26 00:55:31\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode-cn.com/problems/majority-element/)   \nGiven an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.\n\nYou may assume that the array is non-empty and the majority element always exist in the array.\n\n### Examples:\n**Input:**[3,2,3]\n**Output:**3\n**Input:**[2,2,1,1,1,2,2]\n**Output:**2\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 找众数嘛，只要记录下来他们每个出现的次数就好了啊\n- 用map存放每个数字出现的次数，然后遇到比n/2.0大的就return\n\n\n## C++ Codes\n时间复杂度$$ O(n) $$,用时32ms\n\n```C++\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        map<int, int> mymap;\n        int n = nums.size();\n        int res = 0;\n        for(int i=0;i<n;i++){\n            if(mymap.count(nums[i])==1)\n                mymap[nums[i]] = mymap[nums[i]]+1;\n            else\n                mymap[nums[i]] = 1;\n\n            if(mymap[nums[i]]>n/2.0){\n                res = nums[i];\n                break;\n            }\n\n        }\n        return res;\n    }\n};\n\n```\n\n## Python Codes\n简单题就不写py版本了\n\n## 总结\n- map真好用。。真香\n- 数据量特别大的时候，可以用hash_map\n- map的查找方式是二分查找，如果是100万条记录，最多也只要20次的string.compare的比较，200万条记录，也只要用21次的比较\n- 如果想要在如此大的记录量下，只用一两次的string.compare就找到记录，那就要用hash_map\n\n\n------\n","slug":"LeetCode-169-Majority-Element","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjvu003hussbmvip7s71","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/majority-element/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.</p>\n<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>[3,2,3]<br><strong>Output:</strong>3<br><strong>Input:</strong>[2,2,1,1,1,2,2]<br><strong>Output:</strong>2</p></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>找众数嘛，只要记录下来他们每个出现的次数就好了啊</li>\n<li>用map存放每个数字出现的次数，然后遇到比n/2.0大的就return</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>时间复杂度<script type=\"math/tex\">O(n)</script>,用时32ms</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mymap.count(nums[i])==<span class=\"number\">1</span>)</span><br><span class=\"line\">                mymap[nums[i]] = mymap[nums[i]]+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                mymap[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mymap[nums[i]]&gt;n/<span class=\"number\">2.0</span>)&#123;</span><br><span class=\"line\">                res = nums[i];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>简单题就不写py版本了</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>map真好用。。真香</li>\n<li>数据量特别大的时候，可以用hash_map</li>\n<li>map的查找方式是二分查找，如果是100万条记录，最多也只要20次的string.compare的比较，200万条记录，也只要用21次的比较</li>\n<li>如果想要在如此大的记录量下，只用一两次的string.compare就找到记录，那就要用hash_map</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/majority-element/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.</p>\n<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong>[3,2,3]<br><strong>Output:</strong>3<br><strong>Input:</strong>[2,2,1,1,1,2,2]<br><strong>Output:</strong>2</p></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>找众数嘛，只要记录下来他们每个出现的次数就好了啊</li>\n<li>用map存放每个数字出现的次数，然后遇到比n/2.0大的就return</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>时间复杂度<script type=\"math/tex\">O(n)</script>,用时32ms</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mymap.count(nums[i])==<span class=\"number\">1</span>)</span><br><span class=\"line\">                mymap[nums[i]] = mymap[nums[i]]+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                mymap[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mymap[nums[i]]&gt;n/<span class=\"number\">2.0</span>)&#123;</span><br><span class=\"line\">                res = nums[i];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-Codes\"><a href=\"#Python-Codes\" class=\"headerlink\" title=\"Python Codes\"></a>Python Codes</h2><p>简单题就不写py版本了</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>map真好用。。真香</li>\n<li>数据量特别大的时候，可以用hash_map</li>\n<li>map的查找方式是二分查找，如果是100万条记录，最多也只要20次的string.compare的比较，200万条记录，也只要用21次的比较</li>\n<li>如果想要在如此大的记录量下，只用一两次的string.compare就找到记录，那就要用hash_map</li>\n</ul>\n<hr>"},{"title":"LeetCode-240-Search a 2D Matrix II","comments":1,"mathjax":false,"date":"2019-06-01T16:29:32.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode-cn.com/problems/search-a-2d-matrix-ii/)   \nWrite an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\n- Integers in each row are sorted in ascending from left to right.\n- Integers in each column are sorted in ascending from top to bottom.\n\n简单点说就是二维数组，从左向右递增，从上向下递增，然后查找输入的数组，要求高效\n\n### Examples:\n**Input:**\n> [\n>   [1,   4,  7, 11, 15],\n>   [2,   5,  8, 12, 19],\n>   [3,   6,  9, 16, 22],\n>   [10, 13, 14, 17, 24],\n>   [18, 21, 23, 26, 30]\n> ]\n**Output:**\n> Given target = 5, return true.\n> Given target = 20, return false.\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 如果是$$ O(n) $$可能不行，毕竟要高效的算法，这里从数组的结构入手\n- 以右上角为起点进行查找，如果比它大，就向下，如果比它小，就向左，一直找到边界位置\n\n\n## C++ Codes\n用时108ms\n\n```C++\nclass Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        if(matrix.size()==0 || matrix[0].size()==0)return false;\n        int col = matrix[0].size()-1;\n        int row = 0;\n        int n = matrix.size();\n        //边界条件就是col>=0 && row<n\n        while(col>=0 && row<n){\n            if(matrix[row][col]>target)\n                col--;\n            else if(matrix[row][col]<target)\n                row++;\n            else return true;\n        }\n        return false;\n    }\n};\n```\n\n\n## 总结\n- 对于这种排序好结构很明显的，尽量从结构上入手，找特点，而不是暴力解\n\n\n------\n","source":"_posts/LeetCode-240-Search-a-2D-Matrix-II.md","raw":"---\ntitle: LeetCode-240-Search a 2D Matrix II\ntags:\n  - LeetCode\n  - Matrix\n  - Search\n  - Medium\ncategories:\n  - LeetCode\ncomments: true\nmathjax: false\ndate: 2019-06-02 00:29:32\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## [Problem](https://leetcode-cn.com/problems/search-a-2d-matrix-ii/)   \nWrite an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\n- Integers in each row are sorted in ascending from left to right.\n- Integers in each column are sorted in ascending from top to bottom.\n\n简单点说就是二维数组，从左向右递增，从上向下递增，然后查找输入的数组，要求高效\n\n### Examples:\n**Input:**\n> [\n>   [1,   4,  7, 11, 15],\n>   [2,   5,  8, 12, 19],\n>   [3,   6,  9, 16, 22],\n>   [10, 13, 14, 17, 24],\n>   [18, 21, 23, 26, 30]\n> ]\n**Output:**\n> Given target = 5, return true.\n> Given target = 20, return false.\n\n{% endnote %}\n<!--more-->\n\n## Solutions\n- 如果是$$ O(n) $$可能不行，毕竟要高效的算法，这里从数组的结构入手\n- 以右上角为起点进行查找，如果比它大，就向下，如果比它小，就向左，一直找到边界位置\n\n\n## C++ Codes\n用时108ms\n\n```C++\nclass Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        if(matrix.size()==0 || matrix[0].size()==0)return false;\n        int col = matrix[0].size()-1;\n        int row = 0;\n        int n = matrix.size();\n        //边界条件就是col>=0 && row<n\n        while(col>=0 && row<n){\n            if(matrix[row][col]>target)\n                col--;\n            else if(matrix[row][col]<target)\n                row++;\n            else return true;\n        }\n        return false;\n    }\n};\n```\n\n\n## 总结\n- 对于这种排序好结构很明显的，尽量从结构上入手，找特点，而不是暴力解\n\n\n------\n","slug":"LeetCode-240-Search-a-2D-Matrix-II","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjvx003kussb240jaicd","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix-ii/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:</p>\n<ul>\n<li>Integers in each row are sorted in ascending from left to right.</li>\n<li>Integers in each column are sorted in ascending from top to bottom.</li>\n</ul>\n<p>简单点说就是二维数组，从左向右递增，从上向下递增，然后查找输入的数组，要求高效</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong></p>\n<blockquote>\n<p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]<br><strong>Output:</strong><br>Given target = 5, return true.<br>Given target = 20, return false.</p>\n</blockquote></div>\n<a id=\"more\"></a>\n<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>如果是<script type=\"math/tex\">O(n)</script>可能不行，毕竟要高效的算法，这里从数组的结构入手</li>\n<li>以右上角为起点进行查找，如果比它大，就向下，如果比它小，就向左，一直找到边界位置</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>用时108ms</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(matrix.size()==<span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> col = matrix[<span class=\"number\">0</span>].size()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = matrix.size();</span><br><span class=\"line\">        <span class=\"comment\">//边界条件就是col&gt;=0 &amp;&amp; row&lt;n</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(col&gt;=<span class=\"number\">0</span> &amp;&amp; row&lt;n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[row][col]&gt;target)</span><br><span class=\"line\">                col--;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(matrix[row][col]&lt;target)</span><br><span class=\"line\">                row++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>对于这种排序好结构很明显的，尽量从结构上入手，找特点，而不是暴力解</li>\n</ul>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a><a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix-ii/\" target=\"_blank\" rel=\"noopener\">Problem</a></h2><p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:</p>\n<ul>\n<li>Integers in each row are sorted in ascending from left to right.</li>\n<li>Integers in each column are sorted in ascending from top to bottom.</li>\n</ul>\n<p>简单点说就是二维数组，从左向右递增，从上向下递增，然后查找输入的数组，要求高效</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples:\"></a>Examples:</h3><p><strong>Input:</strong></p>\n<blockquote>\n<p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]<br><strong>Output:</strong><br>Given target = 5, return true.<br>Given target = 20, return false.</p>\n</blockquote></div>","more":"<h2 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h2><ul>\n<li>如果是<script type=\"math/tex\">O(n)</script>可能不行，毕竟要高效的算法，这里从数组的结构入手</li>\n<li>以右上角为起点进行查找，如果比它大，就向下，如果比它小，就向左，一直找到边界位置</li>\n</ul>\n<h2 id=\"C-Codes\"><a href=\"#C-Codes\" class=\"headerlink\" title=\"C++ Codes\"></a>C++ Codes</h2><p>用时108ms</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(matrix.size()==<span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> col = matrix[<span class=\"number\">0</span>].size()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = matrix.size();</span><br><span class=\"line\">        <span class=\"comment\">//边界条件就是col&gt;=0 &amp;&amp; row&lt;n</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(col&gt;=<span class=\"number\">0</span> &amp;&amp; row&lt;n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[row][col]&gt;target)</span><br><span class=\"line\">                col--;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(matrix[row][col]&lt;target)</span><br><span class=\"line\">                row++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>对于这种排序好结构很明显的，尽量从结构上入手，找特点，而不是暴力解</li>\n</ul>\n<hr>"},{"title":"Linux将deb包转为ArchLinux软件包","comments":1,"mathjax":false,"date":"2019-07-03T10:35:48.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n有时候可能找不到arch用的包，只有deb包或者rpm包。\n将deb包转换为ArchLinux的包比较方便，使用了debtap这个工具\ndebtap代表了 DEB T o A rch （Linux） P ackage的意思\n{% endnote %}\n<!--more-->\n\n## 安装debtap并更新数据\n### 安装\n**[依赖关系:]** 需要提前安装好** bash， binutils ，pkgfile 和 fakeroot 包**\n如果直接安装会帮你安装依赖.\n\n```bash\nyaourt -S debtap\n```\n遇到需要编辑的就默认enter跳过，需要安装的就确认，然后等就行了\n\n### 创建/更新 pkgfile 和 debtap 数据库。\n\n```bash\nsudo debtap -u\n```\n\n## 转化\n假如要转化name.deb\n\n```bash\ndebtap name.deb\n```\n\n中间可能要输入点东西，自己看情况输入就好\n\n**其他参数：**\n- 略过除了编辑元数据之外的所有问题\n\n```bash\ndebtap -q name.deb\n```\n\n- 略过所有的问题（不推荐）\n\n```bash\ndebtap -Q name.deb\n```\n\n- 查看帮助\n\n```bash\ndebtap -h\n```\n\n## 安装软件包\n使用pacman安装软件包\n\n```bash\nsudo pacman -U <package-name>\n```\n\n---------\n","source":"_posts/Linux将deb包转为ArchLinux软件包.md","raw":"---\ntitle: Linux将deb包转为ArchLinux软件包\ntags:\n  - Deb\n  - Debtap\n  - Daily\n  - ArchLinux\ncategories:\n  - Daily\ncomments: true\nmathjax: false\ndate: 2019-07-03 18:35:48\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n有时候可能找不到arch用的包，只有deb包或者rpm包。\n将deb包转换为ArchLinux的包比较方便，使用了debtap这个工具\ndebtap代表了 DEB T o A rch （Linux） P ackage的意思\n{% endnote %}\n<!--more-->\n\n## 安装debtap并更新数据\n### 安装\n**[依赖关系:]** 需要提前安装好** bash， binutils ，pkgfile 和 fakeroot 包**\n如果直接安装会帮你安装依赖.\n\n```bash\nyaourt -S debtap\n```\n遇到需要编辑的就默认enter跳过，需要安装的就确认，然后等就行了\n\n### 创建/更新 pkgfile 和 debtap 数据库。\n\n```bash\nsudo debtap -u\n```\n\n## 转化\n假如要转化name.deb\n\n```bash\ndebtap name.deb\n```\n\n中间可能要输入点东西，自己看情况输入就好\n\n**其他参数：**\n- 略过除了编辑元数据之外的所有问题\n\n```bash\ndebtap -q name.deb\n```\n\n- 略过所有的问题（不推荐）\n\n```bash\ndebtap -Q name.deb\n```\n\n- 查看帮助\n\n```bash\ndebtap -h\n```\n\n## 安装软件包\n使用pacman安装软件包\n\n```bash\nsudo pacman -U <package-name>\n```\n\n---------\n","slug":"Linux将deb包转为ArchLinux软件包","published":1,"updated":"2019-07-20T12:10:19.189Z","_id":"cjycjtjw8003nussbevh4a25h","layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有时候可能找不到arch用的包，只有deb包或者rpm包。<br>将deb包转换为ArchLinux的包比较方便，使用了debtap这个工具<br>debtap代表了 DEB T o A rch （Linux） P ackage的意思</p></div>\n<a id=\"more\"></a>\n<h2 id=\"安装debtap并更新数据\"><a href=\"#安装debtap并更新数据\" class=\"headerlink\" title=\"安装debtap并更新数据\"></a>安装debtap并更新数据</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><strong>[依赖关系:]</strong> 需要提前安装好<strong> bash， binutils ，pkgfile 和 fakeroot 包</strong><br>如果直接安装会帮你安装依赖.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S debtap</span><br></pre></td></tr></table></figure>\n<p>遇到需要编辑的就默认enter跳过，需要安装的就确认，然后等就行了</p>\n<h3 id=\"创建-更新-pkgfile-和-debtap-数据库。\"><a href=\"#创建-更新-pkgfile-和-debtap-数据库。\" class=\"headerlink\" title=\"创建/更新 pkgfile 和 debtap 数据库。\"></a>创建/更新 pkgfile 和 debtap 数据库。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo debtap -u</span><br></pre></td></tr></table></figure>\n<h2 id=\"转化\"><a href=\"#转化\" class=\"headerlink\" title=\"转化\"></a>转化</h2><p>假如要转化name.deb</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debtap name.deb</span><br></pre></td></tr></table></figure>\n<p>中间可能要输入点东西，自己看情况输入就好</p>\n<p><strong>其他参数：</strong></p>\n<ul>\n<li>略过除了编辑元数据之外的所有问题</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debtap -q name.deb</span><br></pre></td></tr></table></figure>\n<ul>\n<li>略过所有的问题（不推荐）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debtap -Q name.deb</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看帮助</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debtap -h</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装软件包\"><a href=\"#安装软件包\" class=\"headerlink\" title=\"安装软件包\"></a>安装软件包</h2><p>使用pacman安装软件包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -U &lt;package-name&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有时候可能找不到arch用的包，只有deb包或者rpm包。<br>将deb包转换为ArchLinux的包比较方便，使用了debtap这个工具<br>debtap代表了 DEB T o A rch （Linux） P ackage的意思</p></div>","more":"<h2 id=\"安装debtap并更新数据\"><a href=\"#安装debtap并更新数据\" class=\"headerlink\" title=\"安装debtap并更新数据\"></a>安装debtap并更新数据</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><strong>[依赖关系:]</strong> 需要提前安装好<strong> bash， binutils ，pkgfile 和 fakeroot 包</strong><br>如果直接安装会帮你安装依赖.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S debtap</span><br></pre></td></tr></table></figure>\n<p>遇到需要编辑的就默认enter跳过，需要安装的就确认，然后等就行了</p>\n<h3 id=\"创建-更新-pkgfile-和-debtap-数据库。\"><a href=\"#创建-更新-pkgfile-和-debtap-数据库。\" class=\"headerlink\" title=\"创建/更新 pkgfile 和 debtap 数据库。\"></a>创建/更新 pkgfile 和 debtap 数据库。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo debtap -u</span><br></pre></td></tr></table></figure>\n<h2 id=\"转化\"><a href=\"#转化\" class=\"headerlink\" title=\"转化\"></a>转化</h2><p>假如要转化name.deb</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debtap name.deb</span><br></pre></td></tr></table></figure>\n<p>中间可能要输入点东西，自己看情况输入就好</p>\n<p><strong>其他参数：</strong></p>\n<ul>\n<li>略过除了编辑元数据之外的所有问题</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debtap -q name.deb</span><br></pre></td></tr></table></figure>\n<ul>\n<li>略过所有的问题（不推荐）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debtap -Q name.deb</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看帮助</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debtap -h</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装软件包\"><a href=\"#安装软件包\" class=\"headerlink\" title=\"安装软件包\"></a>安装软件包</h2><p>使用pacman安装软件包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -U &lt;package-name&gt;</span><br></pre></td></tr></table></figure>\n<hr>"},{"title":"MNIST入门-手写数字识别","comments":1,"mathjax":false,"date":"2019-04-02T02:11:01.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n**Target**  \n将训练一个机器学习模型用于预测图片里面的数字.  \n\n理解TensorFlow工作流程和机器学习的基本概念\n\n和官网不同的是只记录关键点\n{% endnote %}\n<!--more-->\n**关键词**\n\n[MNIST](http://yann.lecun.com/exdb/mnist/)\n[TensorFlow](http://www.tensorfly.cn/tfdoc/tutorials/mnist_beginners.html)\n[Softmax Regression](https://blog.csdn.net/google19890102/article/details/41594889)\n\n## 数据集\n- 数据集被分成两部分：60000行的训练数据集（mnist.train）和10000行的测试数据集（mnist.test）\n- 把这些图片设为“xs”，把这些标签设为“ys”\n  - 训练数据集的图片是 mnist.train.images ，训练数据集的标签是 mnist.train.labels\n- mnist.train.images 是一个形状为 [60000, 784] 的张量，第一个维度数字索引图片，第二个维度数字索引每张图片中的像素点\n  - 向量值表某个像素的强度值，值介于0和1之间\n- mnist.train.labels 是一个 [60000, 10] 的数字矩阵\n  - 标签数据是\"one-hot vectors\"\n  - 10维，只有一个维度非0\n  - 标签0将表示成([1,0,0,0,0,0,0,0,0,0,0])\n\n## Softmax\nsoftmax模型可以用来给不同的对象分配概率。即使在之后，我们训练更加精细的模型时，最后一步也需要用softmax来分配概率。\n\n### 第一步\n- 对数据进行加权求和，在手写数字识别的例子里就是丢每个像素值加权求和\n- 在每个像素值求和的后面加上一个偏置量$$ b_i $$，这是由于输入会有一些干扰量\n\n可以得到输入图片 x ，[784]的向量，它代表的是数字 i 的证据可以表示:\n$$ evidence_i = \\sum_jW_{i,j}x_j+b_i $$\n其中$$ W_i $$维度是[784,10]，代表权重，$$ b_i $$维度是[10]代表是数字i类的偏置量，j代表图片x的像素索引用于求和\n\n### 第二步\n再使用softmax函数将evidence转换成概率y\n$$ y=softmax(evidence) $$\nsoftmax函数可以看成是激励函数(activation)，把线性函数输出转换成想要的格式:关于10个数字的概率分布。\n$$ softmax(x) = normalize(exp(x)) $$\n$$ softmax(x)_i = {exp(x_i) \\over \\sum_jexp(x_j)} $$\n{% note %}\n即：把输入值当成幂指数求值，再正则化这些结果值\n{% endnote %}\n\n结合上面的evidence可以知道，evidence越大，正则化后的结果更大，就是权重更大。\n{% asset_img sof1.png %}\n进一步写成:\n$$ y = softmax(W_x + b) $$\n\n## 实现模型\n\n\n","source":"_posts/MNIST入门-手写数字识别.md","raw":"---\ntitle: MNIST入门-手写数字识别\ncomments: true\nmathjax: false\ndate: 2019-04-02 10:11:01\ntags: [TensorFlow, ML, MNIST]\ncategories: MachineLearning\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n**Target**  \n将训练一个机器学习模型用于预测图片里面的数字.  \n\n理解TensorFlow工作流程和机器学习的基本概念\n\n和官网不同的是只记录关键点\n{% endnote %}\n<!--more-->\n**关键词**\n\n[MNIST](http://yann.lecun.com/exdb/mnist/)\n[TensorFlow](http://www.tensorfly.cn/tfdoc/tutorials/mnist_beginners.html)\n[Softmax Regression](https://blog.csdn.net/google19890102/article/details/41594889)\n\n## 数据集\n- 数据集被分成两部分：60000行的训练数据集（mnist.train）和10000行的测试数据集（mnist.test）\n- 把这些图片设为“xs”，把这些标签设为“ys”\n  - 训练数据集的图片是 mnist.train.images ，训练数据集的标签是 mnist.train.labels\n- mnist.train.images 是一个形状为 [60000, 784] 的张量，第一个维度数字索引图片，第二个维度数字索引每张图片中的像素点\n  - 向量值表某个像素的强度值，值介于0和1之间\n- mnist.train.labels 是一个 [60000, 10] 的数字矩阵\n  - 标签数据是\"one-hot vectors\"\n  - 10维，只有一个维度非0\n  - 标签0将表示成([1,0,0,0,0,0,0,0,0,0,0])\n\n## Softmax\nsoftmax模型可以用来给不同的对象分配概率。即使在之后，我们训练更加精细的模型时，最后一步也需要用softmax来分配概率。\n\n### 第一步\n- 对数据进行加权求和，在手写数字识别的例子里就是丢每个像素值加权求和\n- 在每个像素值求和的后面加上一个偏置量$$ b_i $$，这是由于输入会有一些干扰量\n\n可以得到输入图片 x ，[784]的向量，它代表的是数字 i 的证据可以表示:\n$$ evidence_i = \\sum_jW_{i,j}x_j+b_i $$\n其中$$ W_i $$维度是[784,10]，代表权重，$$ b_i $$维度是[10]代表是数字i类的偏置量，j代表图片x的像素索引用于求和\n\n### 第二步\n再使用softmax函数将evidence转换成概率y\n$$ y=softmax(evidence) $$\nsoftmax函数可以看成是激励函数(activation)，把线性函数输出转换成想要的格式:关于10个数字的概率分布。\n$$ softmax(x) = normalize(exp(x)) $$\n$$ softmax(x)_i = {exp(x_i) \\over \\sum_jexp(x_j)} $$\n{% note %}\n即：把输入值当成幂指数求值，再正则化这些结果值\n{% endnote %}\n\n结合上面的evidence可以知道，evidence越大，正则化后的结果更大，就是权重更大。\n{% asset_img sof1.png %}\n进一步写成:\n$$ y = softmax(W_x + b) $$\n\n## 实现模型\n\n\n","slug":"MNIST入门-手写数字识别","published":1,"updated":"2019-07-20T12:10:19.189Z","layout":"post","photos":[],"link":"","_id":"cjycjtjwe003qussbf1x9c395","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><p><strong>Target</strong><br>将训练一个机器学习模型用于预测图片里面的数字.  </p>\n<p>理解TensorFlow工作流程和机器学习的基本概念</p>\n<p>和官网不同的是只记录关键点</p></div>\n<a id=\"more\"></a>\n<p><strong>关键词</strong></p>\n<p><a href=\"http://yann.lecun.com/exdb/mnist/\" target=\"_blank\" rel=\"noopener\">MNIST</a><br><a href=\"http://www.tensorfly.cn/tfdoc/tutorials/mnist_beginners.html\" target=\"_blank\" rel=\"noopener\">TensorFlow</a><br><a href=\"https://blog.csdn.net/google19890102/article/details/41594889\" target=\"_blank\" rel=\"noopener\">Softmax Regression</a></p>\n<h2 id=\"数据集\"><a href=\"#数据集\" class=\"headerlink\" title=\"数据集\"></a>数据集</h2><ul>\n<li>数据集被分成两部分：60000行的训练数据集（mnist.train）和10000行的测试数据集（mnist.test）</li>\n<li>把这些图片设为“xs”，把这些标签设为“ys”<ul>\n<li>训练数据集的图片是 mnist.train.images ，训练数据集的标签是 mnist.train.labels</li>\n</ul>\n</li>\n<li>mnist.train.images 是一个形状为 [60000, 784] 的张量，第一个维度数字索引图片，第二个维度数字索引每张图片中的像素点<ul>\n<li>向量值表某个像素的强度值，值介于0和1之间</li>\n</ul>\n</li>\n<li>mnist.train.labels 是一个 [60000, 10] 的数字矩阵<ul>\n<li>标签数据是”one-hot vectors”</li>\n<li>10维，只有一个维度非0</li>\n<li>标签0将表示成([1,0,0,0,0,0,0,0,0,0,0])</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Softmax\"><a href=\"#Softmax\" class=\"headerlink\" title=\"Softmax\"></a>Softmax</h2><p>softmax模型可以用来给不同的对象分配概率。即使在之后，我们训练更加精细的模型时，最后一步也需要用softmax来分配概率。</p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><ul>\n<li>对数据进行加权求和，在手写数字识别的例子里就是丢每个像素值加权求和</li>\n<li>在每个像素值求和的后面加上一个偏置量<script type=\"math/tex\">b_i</script>，这是由于输入会有一些干扰量</li>\n</ul>\n<p>可以得到输入图片 x ，[784]的向量，它代表的是数字 i 的证据可以表示:</p>\n<script type=\"math/tex; mode=display\">evidence_i = \\sum_jW_{i,j}x_j+b_i</script><p>其中<script type=\"math/tex\">W_i</script>维度是[784,10]，代表权重，<script type=\"math/tex\">b_i</script>维度是[10]代表是数字i类的偏置量，j代表图片x的像素索引用于求和</p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>再使用softmax函数将evidence转换成概率y</p>\n<script type=\"math/tex; mode=display\">y=softmax(evidence)</script><p>softmax函数可以看成是激励函数(activation)，把线性函数输出转换成想要的格式:关于10个数字的概率分布。</p>\n<script type=\"math/tex; mode=display\">softmax(x) = normalize(exp(x))</script><script type=\"math/tex; mode=display\">softmax(x)_i = {exp(x_i) \\over \\sum_jexp(x_j)}</script><div class=\"note \"><p>即：把输入值当成幂指数求值，再正则化这些结果值</p></div>\n<p>结合上面的evidence可以知道，evidence越大，正则化后的结果更大，就是权重更大。<br><br>进一步写成:</p>\n<script type=\"math/tex; mode=display\">y = softmax(W_x + b)</script><h2 id=\"实现模型\"><a href=\"#实现模型\" class=\"headerlink\" title=\"实现模型\"></a>实现模型</h2>","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><p><strong>Target</strong><br>将训练一个机器学习模型用于预测图片里面的数字.  </p>\n<p>理解TensorFlow工作流程和机器学习的基本概念</p>\n<p>和官网不同的是只记录关键点</p></div>","more":"<p><strong>关键词</strong></p>\n<p><a href=\"http://yann.lecun.com/exdb/mnist/\" target=\"_blank\" rel=\"noopener\">MNIST</a><br><a href=\"http://www.tensorfly.cn/tfdoc/tutorials/mnist_beginners.html\" target=\"_blank\" rel=\"noopener\">TensorFlow</a><br><a href=\"https://blog.csdn.net/google19890102/article/details/41594889\" target=\"_blank\" rel=\"noopener\">Softmax Regression</a></p>\n<h2 id=\"数据集\"><a href=\"#数据集\" class=\"headerlink\" title=\"数据集\"></a>数据集</h2><ul>\n<li>数据集被分成两部分：60000行的训练数据集（mnist.train）和10000行的测试数据集（mnist.test）</li>\n<li>把这些图片设为“xs”，把这些标签设为“ys”<ul>\n<li>训练数据集的图片是 mnist.train.images ，训练数据集的标签是 mnist.train.labels</li>\n</ul>\n</li>\n<li>mnist.train.images 是一个形状为 [60000, 784] 的张量，第一个维度数字索引图片，第二个维度数字索引每张图片中的像素点<ul>\n<li>向量值表某个像素的强度值，值介于0和1之间</li>\n</ul>\n</li>\n<li>mnist.train.labels 是一个 [60000, 10] 的数字矩阵<ul>\n<li>标签数据是”one-hot vectors”</li>\n<li>10维，只有一个维度非0</li>\n<li>标签0将表示成([1,0,0,0,0,0,0,0,0,0,0])</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Softmax\"><a href=\"#Softmax\" class=\"headerlink\" title=\"Softmax\"></a>Softmax</h2><p>softmax模型可以用来给不同的对象分配概率。即使在之后，我们训练更加精细的模型时，最后一步也需要用softmax来分配概率。</p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><ul>\n<li>对数据进行加权求和，在手写数字识别的例子里就是丢每个像素值加权求和</li>\n<li>在每个像素值求和的后面加上一个偏置量<script type=\"math/tex\">b_i</script>，这是由于输入会有一些干扰量</li>\n</ul>\n<p>可以得到输入图片 x ，[784]的向量，它代表的是数字 i 的证据可以表示:</p>\n<script type=\"math/tex; mode=display\">evidence_i = \\sum_jW_{i,j}x_j+b_i</script><p>其中<script type=\"math/tex\">W_i</script>维度是[784,10]，代表权重，<script type=\"math/tex\">b_i</script>维度是[10]代表是数字i类的偏置量，j代表图片x的像素索引用于求和</p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>再使用softmax函数将evidence转换成概率y</p>\n<script type=\"math/tex; mode=display\">y=softmax(evidence)</script><p>softmax函数可以看成是激励函数(activation)，把线性函数输出转换成想要的格式:关于10个数字的概率分布。</p>\n<script type=\"math/tex; mode=display\">softmax(x) = normalize(exp(x))</script><script type=\"math/tex; mode=display\">softmax(x)_i = {exp(x_i) \\over \\sum_jexp(x_j)}</script><div class=\"note \"><p>即：把输入值当成幂指数求值，再正则化这些结果值</p></div>\n<p>结合上面的evidence可以知道，evidence越大，正则化后的结果更大，就是权重更大。<br><br>进一步写成:</p>\n<script type=\"math/tex; mode=display\">y = softmax(W_x + b)</script><h2 id=\"实现模型\"><a href=\"#实现模型\" class=\"headerlink\" title=\"实现模型\"></a>实现模型</h2>"},{"title":"Python中的异步","comments":1,"mathjax":false,"date":"2019-03-17T12:28:26.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n学Tornado的异步之前学了下Python的同步和异步机制，下面是三种实现Python中同步的方法。主要是用yield和装饰器以及threading模块实现。\n\n<!--more-->\n# python中异步的理解\n\n## 同步\n\n> 按部就班的依次执行\n> 如果在请求中添加一个耗时操作，则必须等耗时操作结束才继续下去\n> 一般不会用同步\n\n## 异步\n\n### 概述\n\n对于耗时的操作，一般会交给另一个线程处理，我们继续向下执行，当别人结束耗时操作后再将结果返回给我们\n\n### 回调函数实现异步\n\n```python\nimport time\nimport threading\n\n# Tornado中不用我们写这个函数\n# handler获取数据（数据库、其他服务器、循环耗时）\ndef longIo(callback):\n  def run(cb):\n    print(\"开始耗时操作\")\n    time.sleep(5)\n    print(\"结束耗时操作\")\n    #耗时操作结束执行回调函数\n    cb(\" 我是返回的数据\")\n  #创建一个线程，处理耗时操作threading传参args=()\n  threading.Thread(target=run,args=(callback,)).start()\n\n# 函数（回调函数）\ndef finish(data):\n  print(\"开始处理回调函数\")\n  print(\"接收到longIo的相应数据:\",data)\n  print(\"结束处理回调函数\")\n\n# 一个客户的请求\ndef reqA():\n  print(\"开始处理reqA\")\n  longIo(finish)\n  print(\"结束处理reqA\")\n\ndef reqB():\n  print(\"开始处理reqB\")\n  longIo(finish)\n  print(\"结束处理reqB\")\n\n#Tornado服务\ndef main():\n  reqA()\n  reqB()\n  while 1:\n    time.sleep(0.1)\n    pass\n\nif __name__=='__main__':\n  main()\n\n```\n\n### 协程实现异步\n\n#### 版本1\n```python\nimport time\n\n# 全局变量生成器\ngen = None\n\ndef longIo(callback):\n  def run(cb):\n    print(\"开始耗时操作\")\n    time.sleep(5)\n    try:\n      引进全局变量并且用生成器回发数据\n      global gen\n      gen.send(\"我是返回的数据\")\n    except StopIteration as e:\n      pass\n    print(\"结束耗时操作\")\n  #创建一个线程，处理耗时操作,不会影响A和B\n  threading.Thread(target=run).start()\n\n# 一个客户的请求\ndef reqA():\n  print(\"开始处理reqA\")\n  # 接受返回结果\n  # 此处相当于挂起,执行longIo,不影响执行reqB\n  res = yield longIo()\n  print(\"接收longIo的相应数据:\",res)\n  print(\"结束处理reqA\")\n\ndef reqB():\n  print(\"开始处理reqB\")\n  time.sleep(2)\n  print(\"结束处理reqB\")\n\n#Tornado服务\ndef main():\n  # 创建一个reqA的生成器\n  global gen\n  gen = reqA()\n  # 在这里真正执行reqA\n  next(gen)\n\n  reqB()\n  while 1:\n    time.sleep(0.1)\n    pass\n\nif __name__=='__main__':\n  main()\n\n```\n\n#### 版本2\n**问题**    \n> 版本1中调用reqA的时候不能将其视为一个简单的函数，而是要作为生成器来对待\n> 很明显要在主函数中要用三行调用reqA，只要用一行调用reqB。\n\n**解决办法**\n> 给reqA添加一个装饰器\n\n```python\nimport time\n\n# 全局变量生成器\ngen\n\ndef longIo(callback):\n  def run(cb):\n    print(\"开始耗时操作\")\n    time.sleep(5)\n    try:\n      引进全局变量并且用生成器回发数据\n      global gen\n      gen.send(\"我是返回的数据\")\n    except StopIteration as e:\n      pass\n    print(\"结束耗时操作\")\n  #创建一个线程，处理耗时操作,不会影响A和B\n  threading.Thread(target=run).start()\n\n# 装饰器\ndef genCoroutine(func):\n  def wrapper(*args, **kwargs):\n    global gen\n    gen = func(*args, **kwargs)\n    next(gen)\n  # 返回内部函数的时候不可以加括号，这里不可以加括号\n  return wrapper\n  \n\n# 一个客户的请求\n@genCoroutine\ndef reqA():\n  print(\"开始处理reqA\")\n  # 接受返回结果\n  # 此处相当于挂起,执行longIo,不影响执行reqB\n  res = yield longIo()\n  print(\"接收longIo的相应数据:\",res)\n  print(\"结束处理reqA\")\n\ndef reqB():\n  print(\"开始处理reqB\")\n  time.sleep(2)\n  print(\"结束处理reqB\")\n\n#Tornado服务\ndef main():\n  reqA()\n  reqB()\n  while 1:\n    time.sleep(0.1)\n    pass\n\nif __name__=='__main__':\n  main()\n```\n\n#### 版本3\n**问题**\n> 版本2中存在一个全局变量gen，需要消除\n**解决办法**\n\n```python\nimport time\n\n# 装饰器\ndef genCoroutine(func):\n  def wrapper(*args, **kwargs):\n    #reqA的生成器\n    gen1 = func()\n    #longIo的生成器\n    gen2 = next(gen1)\n    def run(g):\n      #gen2,即longIo的返回数据\n      res = next(g) \n      try:\n        gen1.send(res)#返回给reqA数据\n      except StopIteration as e:\n        pass\n    threading.Thread(target=run,args=(gen2,)).start()\n\n  # 返回内部函数的时候不可以加括号，这里不可以加括号\n  return wrapper\n  \n#这次在这里不管线程了\ndef longIo(callback):\n    print(\"开始耗时操作\")\n    time.sleep(5)\n    print(\"结束耗时操作\")\n    #要返回数据，挂起\n    yield \"我是返回的数据\"\n\n# 一个客户的请求\n@genCoroutine\ndef reqA():\n  print(\"开始处理reqA\")\n  # 接受返回结果\n  # 此处相当于挂起,执行longIo,不影响执行reqB\n  res = yield longIo()\n  print(\"接收longIo的相应数据:\",res)\n  print(\"结束处理reqA\")\n\ndef reqB():\n  print(\"开始处理reqB\")\n  time.sleep(2)\n  print(\"结束处理reqB\")\n\n#Tornado服务\ndef main():\n  reqA()\n  reqB()\n  while 1:\n    time.sleep(0.1)\n    pass\n\nif __name__=='__main__':\n  main()\n```\n-----------------------------\n","source":"_posts/Python中的异步.md","raw":"---\ntitle: Python中的异步\ncomments: true\nmathjax: false\ndate: 2019-03-17 20:28:26\ntags: Python\ncategories: Python\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n学Tornado的异步之前学了下Python的同步和异步机制，下面是三种实现Python中同步的方法。主要是用yield和装饰器以及threading模块实现。\n\n<!--more-->\n# python中异步的理解\n\n## 同步\n\n> 按部就班的依次执行\n> 如果在请求中添加一个耗时操作，则必须等耗时操作结束才继续下去\n> 一般不会用同步\n\n## 异步\n\n### 概述\n\n对于耗时的操作，一般会交给另一个线程处理，我们继续向下执行，当别人结束耗时操作后再将结果返回给我们\n\n### 回调函数实现异步\n\n```python\nimport time\nimport threading\n\n# Tornado中不用我们写这个函数\n# handler获取数据（数据库、其他服务器、循环耗时）\ndef longIo(callback):\n  def run(cb):\n    print(\"开始耗时操作\")\n    time.sleep(5)\n    print(\"结束耗时操作\")\n    #耗时操作结束执行回调函数\n    cb(\" 我是返回的数据\")\n  #创建一个线程，处理耗时操作threading传参args=()\n  threading.Thread(target=run,args=(callback,)).start()\n\n# 函数（回调函数）\ndef finish(data):\n  print(\"开始处理回调函数\")\n  print(\"接收到longIo的相应数据:\",data)\n  print(\"结束处理回调函数\")\n\n# 一个客户的请求\ndef reqA():\n  print(\"开始处理reqA\")\n  longIo(finish)\n  print(\"结束处理reqA\")\n\ndef reqB():\n  print(\"开始处理reqB\")\n  longIo(finish)\n  print(\"结束处理reqB\")\n\n#Tornado服务\ndef main():\n  reqA()\n  reqB()\n  while 1:\n    time.sleep(0.1)\n    pass\n\nif __name__=='__main__':\n  main()\n\n```\n\n### 协程实现异步\n\n#### 版本1\n```python\nimport time\n\n# 全局变量生成器\ngen = None\n\ndef longIo(callback):\n  def run(cb):\n    print(\"开始耗时操作\")\n    time.sleep(5)\n    try:\n      引进全局变量并且用生成器回发数据\n      global gen\n      gen.send(\"我是返回的数据\")\n    except StopIteration as e:\n      pass\n    print(\"结束耗时操作\")\n  #创建一个线程，处理耗时操作,不会影响A和B\n  threading.Thread(target=run).start()\n\n# 一个客户的请求\ndef reqA():\n  print(\"开始处理reqA\")\n  # 接受返回结果\n  # 此处相当于挂起,执行longIo,不影响执行reqB\n  res = yield longIo()\n  print(\"接收longIo的相应数据:\",res)\n  print(\"结束处理reqA\")\n\ndef reqB():\n  print(\"开始处理reqB\")\n  time.sleep(2)\n  print(\"结束处理reqB\")\n\n#Tornado服务\ndef main():\n  # 创建一个reqA的生成器\n  global gen\n  gen = reqA()\n  # 在这里真正执行reqA\n  next(gen)\n\n  reqB()\n  while 1:\n    time.sleep(0.1)\n    pass\n\nif __name__=='__main__':\n  main()\n\n```\n\n#### 版本2\n**问题**    \n> 版本1中调用reqA的时候不能将其视为一个简单的函数，而是要作为生成器来对待\n> 很明显要在主函数中要用三行调用reqA，只要用一行调用reqB。\n\n**解决办法**\n> 给reqA添加一个装饰器\n\n```python\nimport time\n\n# 全局变量生成器\ngen\n\ndef longIo(callback):\n  def run(cb):\n    print(\"开始耗时操作\")\n    time.sleep(5)\n    try:\n      引进全局变量并且用生成器回发数据\n      global gen\n      gen.send(\"我是返回的数据\")\n    except StopIteration as e:\n      pass\n    print(\"结束耗时操作\")\n  #创建一个线程，处理耗时操作,不会影响A和B\n  threading.Thread(target=run).start()\n\n# 装饰器\ndef genCoroutine(func):\n  def wrapper(*args, **kwargs):\n    global gen\n    gen = func(*args, **kwargs)\n    next(gen)\n  # 返回内部函数的时候不可以加括号，这里不可以加括号\n  return wrapper\n  \n\n# 一个客户的请求\n@genCoroutine\ndef reqA():\n  print(\"开始处理reqA\")\n  # 接受返回结果\n  # 此处相当于挂起,执行longIo,不影响执行reqB\n  res = yield longIo()\n  print(\"接收longIo的相应数据:\",res)\n  print(\"结束处理reqA\")\n\ndef reqB():\n  print(\"开始处理reqB\")\n  time.sleep(2)\n  print(\"结束处理reqB\")\n\n#Tornado服务\ndef main():\n  reqA()\n  reqB()\n  while 1:\n    time.sleep(0.1)\n    pass\n\nif __name__=='__main__':\n  main()\n```\n\n#### 版本3\n**问题**\n> 版本2中存在一个全局变量gen，需要消除\n**解决办法**\n\n```python\nimport time\n\n# 装饰器\ndef genCoroutine(func):\n  def wrapper(*args, **kwargs):\n    #reqA的生成器\n    gen1 = func()\n    #longIo的生成器\n    gen2 = next(gen1)\n    def run(g):\n      #gen2,即longIo的返回数据\n      res = next(g) \n      try:\n        gen1.send(res)#返回给reqA数据\n      except StopIteration as e:\n        pass\n    threading.Thread(target=run,args=(gen2,)).start()\n\n  # 返回内部函数的时候不可以加括号，这里不可以加括号\n  return wrapper\n  \n#这次在这里不管线程了\ndef longIo(callback):\n    print(\"开始耗时操作\")\n    time.sleep(5)\n    print(\"结束耗时操作\")\n    #要返回数据，挂起\n    yield \"我是返回的数据\"\n\n# 一个客户的请求\n@genCoroutine\ndef reqA():\n  print(\"开始处理reqA\")\n  # 接受返回结果\n  # 此处相当于挂起,执行longIo,不影响执行reqB\n  res = yield longIo()\n  print(\"接收longIo的相应数据:\",res)\n  print(\"结束处理reqA\")\n\ndef reqB():\n  print(\"开始处理reqB\")\n  time.sleep(2)\n  print(\"结束处理reqB\")\n\n#Tornado服务\ndef main():\n  reqA()\n  reqB()\n  while 1:\n    time.sleep(0.1)\n    pass\n\nif __name__=='__main__':\n  main()\n```\n-----------------------------\n","slug":"Python中的异步","published":1,"updated":"2019-07-20T12:10:19.195Z","layout":"post","photos":[],"link":"","_id":"cjycjtjwi003uussblrqq7p53","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>学Tornado的异步之前学了下Python的同步和异步机制，下面是三种实现Python中同步的方法。主要是用yield和装饰器以及threading模块实现。</p>\n<a id=\"more\"></a>\n<h1 id=\"python中异步的理解\"><a href=\"#python中异步的理解\" class=\"headerlink\" title=\"python中异步的理解\"></a>python中异步的理解</h1><h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><blockquote>\n<p>按部就班的依次执行<br>如果在请求中添加一个耗时操作，则必须等耗时操作结束才继续下去<br>一般不会用同步</p>\n</blockquote>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>对于耗时的操作，一般会交给另一个线程处理，我们继续向下执行，当别人结束耗时操作后再将结果返回给我们</p>\n<h3 id=\"回调函数实现异步\"><a href=\"#回调函数实现异步\" class=\"headerlink\" title=\"回调函数实现异步\"></a>回调函数实现异步</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tornado中不用我们写这个函数</span></span><br><span class=\"line\"><span class=\"comment\"># handler获取数据（数据库、其他服务器、循环耗时）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longIo</span><span class=\"params\">(callback)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(cb)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"开始耗时操作\"</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"结束耗时操作\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">#耗时操作结束执行回调函数</span></span><br><span class=\"line\">    cb(<span class=\"string\">\" 我是返回的数据\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">#创建一个线程，处理耗时操作threading传参args=()</span></span><br><span class=\"line\">  threading.Thread(target=run,args=(callback,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 函数（回调函数）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">finish</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理回调函数\"</span>)</span><br><span class=\"line\">  print(<span class=\"string\">\"接收到longIo的相应数据:\"</span>,data)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理回调函数\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个客户的请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqA</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqA\"</span>)</span><br><span class=\"line\">  longIo(finish)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqA\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqB</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqB\"</span>)</span><br><span class=\"line\">  longIo(finish)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqB\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Tornado服务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  reqA()</span><br><span class=\"line\">  reqB()</span><br><span class=\"line\">  <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"协程实现异步\"><a href=\"#协程实现异步\" class=\"headerlink\" title=\"协程实现异步\"></a>协程实现异步</h3><h4 id=\"版本1\"><a href=\"#版本1\" class=\"headerlink\" title=\"版本1\"></a>版本1</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局变量生成器</span></span><br><span class=\"line\">gen = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longIo</span><span class=\"params\">(callback)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(cb)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"开始耗时操作\"</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">      引进全局变量并且用生成器回发数据</span><br><span class=\"line\">      <span class=\"keyword\">global</span> gen</span><br><span class=\"line\">      gen.send(<span class=\"string\">\"我是返回的数据\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">      <span class=\"keyword\">pass</span></span><br><span class=\"line\">    print(<span class=\"string\">\"结束耗时操作\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">#创建一个线程，处理耗时操作,不会影响A和B</span></span><br><span class=\"line\">  threading.Thread(target=run).start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个客户的请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqA</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqA\"</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 接受返回结果</span></span><br><span class=\"line\">  <span class=\"comment\"># 此处相当于挂起,执行longIo,不影响执行reqB</span></span><br><span class=\"line\">  res = <span class=\"keyword\">yield</span> longIo()</span><br><span class=\"line\">  print(<span class=\"string\">\"接收longIo的相应数据:\"</span>,res)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqA\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqB</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqB\"</span>)</span><br><span class=\"line\">  time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqB\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Tornado服务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 创建一个reqA的生成器</span></span><br><span class=\"line\">  <span class=\"keyword\">global</span> gen</span><br><span class=\"line\">  gen = reqA()</span><br><span class=\"line\">  <span class=\"comment\"># 在这里真正执行reqA</span></span><br><span class=\"line\">  next(gen)</span><br><span class=\"line\"></span><br><span class=\"line\">  reqB()</span><br><span class=\"line\">  <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  main()</span><br></pre></td></tr></table></figure>\n<h4 id=\"版本2\"><a href=\"#版本2\" class=\"headerlink\" title=\"版本2\"></a>版本2</h4><p><strong>问题</strong>    </p>\n<blockquote>\n<p>版本1中调用reqA的时候不能将其视为一个简单的函数，而是要作为生成器来对待<br>很明显要在主函数中要用三行调用reqA，只要用一行调用reqB。</p>\n</blockquote>\n<p><strong>解决办法</strong></p>\n<blockquote>\n<p>给reqA添加一个装饰器</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局变量生成器</span></span><br><span class=\"line\">gen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longIo</span><span class=\"params\">(callback)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(cb)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"开始耗时操作\"</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">      引进全局变量并且用生成器回发数据</span><br><span class=\"line\">      <span class=\"keyword\">global</span> gen</span><br><span class=\"line\">      gen.send(<span class=\"string\">\"我是返回的数据\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">      <span class=\"keyword\">pass</span></span><br><span class=\"line\">    print(<span class=\"string\">\"结束耗时操作\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">#创建一个线程，处理耗时操作,不会影响A和B</span></span><br><span class=\"line\">  threading.Thread(target=run).start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">genCoroutine</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> gen</span><br><span class=\"line\">    gen = func(*args, **kwargs)</span><br><span class=\"line\">    next(gen)</span><br><span class=\"line\">  <span class=\"comment\"># 返回内部函数的时候不可以加括号，这里不可以加括号</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个客户的请求</span></span><br><span class=\"line\"><span class=\"meta\">@genCoroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqA</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqA\"</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 接受返回结果</span></span><br><span class=\"line\">  <span class=\"comment\"># 此处相当于挂起,执行longIo,不影响执行reqB</span></span><br><span class=\"line\">  res = <span class=\"keyword\">yield</span> longIo()</span><br><span class=\"line\">  print(<span class=\"string\">\"接收longIo的相应数据:\"</span>,res)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqA\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqB</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqB\"</span>)</span><br><span class=\"line\">  time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqB\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Tornado服务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  reqA()</span><br><span class=\"line\">  reqB()</span><br><span class=\"line\">  <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  main()</span><br></pre></td></tr></table></figure>\n<h4 id=\"版本3\"><a href=\"#版本3\" class=\"headerlink\" title=\"版本3\"></a>版本3</h4><p><strong>问题</strong></p>\n<blockquote>\n<p>版本2中存在一个全局变量gen，需要消除<br><strong>解决办法</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">genCoroutine</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#reqA的生成器</span></span><br><span class=\"line\">    gen1 = func()</span><br><span class=\"line\">    <span class=\"comment\">#longIo的生成器</span></span><br><span class=\"line\">    gen2 = next(gen1)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(g)</span>:</span></span><br><span class=\"line\">      <span class=\"comment\">#gen2,即longIo的返回数据</span></span><br><span class=\"line\">      res = next(g) </span><br><span class=\"line\">      <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        gen1.send(res)<span class=\"comment\">#返回给reqA数据</span></span><br><span class=\"line\">      <span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    threading.Thread(target=run,args=(gen2,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 返回内部函数的时候不可以加括号，这里不可以加括号</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#这次在这里不管线程了</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longIo</span><span class=\"params\">(callback)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"开始耗时操作\"</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"结束耗时操作\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">#要返回数据，挂起</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">\"我是返回的数据\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个客户的请求</span></span><br><span class=\"line\"><span class=\"meta\">@genCoroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqA</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqA\"</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 接受返回结果</span></span><br><span class=\"line\">  <span class=\"comment\"># 此处相当于挂起,执行longIo,不影响执行reqB</span></span><br><span class=\"line\">  res = <span class=\"keyword\">yield</span> longIo()</span><br><span class=\"line\">  print(<span class=\"string\">\"接收longIo的相应数据:\"</span>,res)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqA\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqB</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqB\"</span>)</span><br><span class=\"line\">  time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqB\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Tornado服务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  reqA()</span><br><span class=\"line\">  reqB()</span><br><span class=\"line\">  <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  main()</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>学Tornado的异步之前学了下Python的同步和异步机制，下面是三种实现Python中同步的方法。主要是用yield和装饰器以及threading模块实现。</p>","more":"<h1 id=\"python中异步的理解\"><a href=\"#python中异步的理解\" class=\"headerlink\" title=\"python中异步的理解\"></a>python中异步的理解</h1><h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><blockquote>\n<p>按部就班的依次执行<br>如果在请求中添加一个耗时操作，则必须等耗时操作结束才继续下去<br>一般不会用同步</p>\n</blockquote>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>对于耗时的操作，一般会交给另一个线程处理，我们继续向下执行，当别人结束耗时操作后再将结果返回给我们</p>\n<h3 id=\"回调函数实现异步\"><a href=\"#回调函数实现异步\" class=\"headerlink\" title=\"回调函数实现异步\"></a>回调函数实现异步</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tornado中不用我们写这个函数</span></span><br><span class=\"line\"><span class=\"comment\"># handler获取数据（数据库、其他服务器、循环耗时）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longIo</span><span class=\"params\">(callback)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(cb)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"开始耗时操作\"</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"结束耗时操作\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">#耗时操作结束执行回调函数</span></span><br><span class=\"line\">    cb(<span class=\"string\">\" 我是返回的数据\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">#创建一个线程，处理耗时操作threading传参args=()</span></span><br><span class=\"line\">  threading.Thread(target=run,args=(callback,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 函数（回调函数）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">finish</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理回调函数\"</span>)</span><br><span class=\"line\">  print(<span class=\"string\">\"接收到longIo的相应数据:\"</span>,data)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理回调函数\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个客户的请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqA</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqA\"</span>)</span><br><span class=\"line\">  longIo(finish)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqA\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqB</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqB\"</span>)</span><br><span class=\"line\">  longIo(finish)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqB\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Tornado服务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  reqA()</span><br><span class=\"line\">  reqB()</span><br><span class=\"line\">  <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"协程实现异步\"><a href=\"#协程实现异步\" class=\"headerlink\" title=\"协程实现异步\"></a>协程实现异步</h3><h4 id=\"版本1\"><a href=\"#版本1\" class=\"headerlink\" title=\"版本1\"></a>版本1</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局变量生成器</span></span><br><span class=\"line\">gen = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longIo</span><span class=\"params\">(callback)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(cb)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"开始耗时操作\"</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">      引进全局变量并且用生成器回发数据</span><br><span class=\"line\">      <span class=\"keyword\">global</span> gen</span><br><span class=\"line\">      gen.send(<span class=\"string\">\"我是返回的数据\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">      <span class=\"keyword\">pass</span></span><br><span class=\"line\">    print(<span class=\"string\">\"结束耗时操作\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">#创建一个线程，处理耗时操作,不会影响A和B</span></span><br><span class=\"line\">  threading.Thread(target=run).start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个客户的请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqA</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqA\"</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 接受返回结果</span></span><br><span class=\"line\">  <span class=\"comment\"># 此处相当于挂起,执行longIo,不影响执行reqB</span></span><br><span class=\"line\">  res = <span class=\"keyword\">yield</span> longIo()</span><br><span class=\"line\">  print(<span class=\"string\">\"接收longIo的相应数据:\"</span>,res)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqA\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqB</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqB\"</span>)</span><br><span class=\"line\">  time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqB\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Tornado服务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 创建一个reqA的生成器</span></span><br><span class=\"line\">  <span class=\"keyword\">global</span> gen</span><br><span class=\"line\">  gen = reqA()</span><br><span class=\"line\">  <span class=\"comment\"># 在这里真正执行reqA</span></span><br><span class=\"line\">  next(gen)</span><br><span class=\"line\"></span><br><span class=\"line\">  reqB()</span><br><span class=\"line\">  <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  main()</span><br></pre></td></tr></table></figure>\n<h4 id=\"版本2\"><a href=\"#版本2\" class=\"headerlink\" title=\"版本2\"></a>版本2</h4><p><strong>问题</strong>    </p>\n<blockquote>\n<p>版本1中调用reqA的时候不能将其视为一个简单的函数，而是要作为生成器来对待<br>很明显要在主函数中要用三行调用reqA，只要用一行调用reqB。</p>\n</blockquote>\n<p><strong>解决办法</strong></p>\n<blockquote>\n<p>给reqA添加一个装饰器</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局变量生成器</span></span><br><span class=\"line\">gen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longIo</span><span class=\"params\">(callback)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(cb)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"开始耗时操作\"</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">      引进全局变量并且用生成器回发数据</span><br><span class=\"line\">      <span class=\"keyword\">global</span> gen</span><br><span class=\"line\">      gen.send(<span class=\"string\">\"我是返回的数据\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">      <span class=\"keyword\">pass</span></span><br><span class=\"line\">    print(<span class=\"string\">\"结束耗时操作\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">#创建一个线程，处理耗时操作,不会影响A和B</span></span><br><span class=\"line\">  threading.Thread(target=run).start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">genCoroutine</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> gen</span><br><span class=\"line\">    gen = func(*args, **kwargs)</span><br><span class=\"line\">    next(gen)</span><br><span class=\"line\">  <span class=\"comment\"># 返回内部函数的时候不可以加括号，这里不可以加括号</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个客户的请求</span></span><br><span class=\"line\"><span class=\"meta\">@genCoroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqA</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqA\"</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 接受返回结果</span></span><br><span class=\"line\">  <span class=\"comment\"># 此处相当于挂起,执行longIo,不影响执行reqB</span></span><br><span class=\"line\">  res = <span class=\"keyword\">yield</span> longIo()</span><br><span class=\"line\">  print(<span class=\"string\">\"接收longIo的相应数据:\"</span>,res)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqA\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqB</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqB\"</span>)</span><br><span class=\"line\">  time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqB\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Tornado服务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  reqA()</span><br><span class=\"line\">  reqB()</span><br><span class=\"line\">  <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  main()</span><br></pre></td></tr></table></figure>\n<h4 id=\"版本3\"><a href=\"#版本3\" class=\"headerlink\" title=\"版本3\"></a>版本3</h4><p><strong>问题</strong></p>\n<blockquote>\n<p>版本2中存在一个全局变量gen，需要消除<br><strong>解决办法</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">genCoroutine</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#reqA的生成器</span></span><br><span class=\"line\">    gen1 = func()</span><br><span class=\"line\">    <span class=\"comment\">#longIo的生成器</span></span><br><span class=\"line\">    gen2 = next(gen1)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(g)</span>:</span></span><br><span class=\"line\">      <span class=\"comment\">#gen2,即longIo的返回数据</span></span><br><span class=\"line\">      res = next(g) </span><br><span class=\"line\">      <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        gen1.send(res)<span class=\"comment\">#返回给reqA数据</span></span><br><span class=\"line\">      <span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    threading.Thread(target=run,args=(gen2,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 返回内部函数的时候不可以加括号，这里不可以加括号</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#这次在这里不管线程了</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longIo</span><span class=\"params\">(callback)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"开始耗时操作\"</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"结束耗时操作\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">#要返回数据，挂起</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">\"我是返回的数据\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个客户的请求</span></span><br><span class=\"line\"><span class=\"meta\">@genCoroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqA</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqA\"</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 接受返回结果</span></span><br><span class=\"line\">  <span class=\"comment\"># 此处相当于挂起,执行longIo,不影响执行reqB</span></span><br><span class=\"line\">  res = <span class=\"keyword\">yield</span> longIo()</span><br><span class=\"line\">  print(<span class=\"string\">\"接收longIo的相应数据:\"</span>,res)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqA\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reqB</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"开始处理reqB\"</span>)</span><br><span class=\"line\">  time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">  print(<span class=\"string\">\"结束处理reqB\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Tornado服务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  reqA()</span><br><span class=\"line\">  reqB()</span><br><span class=\"line\">  <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  main()</span><br></pre></td></tr></table></figure>\n<hr>"},{"title":"SpaceVim中自定义Markdown相关快捷键","comments":1,"mathjax":false,"date":"2019-03-18T15:14:48.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n  SpaceVim对Markdown的注释居然是html版本的，预览的时候还是可以显示，百度了才知道用[[//]]:#()的方法，就想着弄了快捷键，又是挖坑踩坑...\n  <!--more-->\n# Markdown注释方法\n\n## html标签 \n注意：需要在前面空一行\n```\n<div style='display: none'>\n哈哈我是注释，不会在浏览器中显示。\n我也是注释。\n</div>\n```\n\n## html注释\n```\n<!--哈哈我是注释，不会在浏览器中显示。-->\n\n<!--\n哈哈我是多段\n注释，\n不会在浏览器中显示。\n-->\n```\n\n## 利用Markdown原理\n利用markdown的解析原理来实现注释的。一般有的markdown解析器不支持上面的注释方法，这个时候就可以用此方法。\n\n```\n[comment]: <> (哈哈我是注释，不会在浏览器中显示。)\n[comment]: <> (哈哈我是注释，不会在浏览器中显示。)\n[comment]: <> (哈哈我是注释，不会在浏览器中显示。)\n[//]: <> (哈哈我是注释，不会在浏览器中显示。)\n[//]: # (哈哈我是注释，不会在浏览器中显示。)\n```\n\n其中，这种方法最稳定，适用性最强：\n```\n[//]: # (哈哈我是注释，不会在浏览器中显示。)\n```\n\n还看到这种最可爱，超级无敌萌的：\n```\n[^_^]: # (哈哈我是注释，不会在浏览器中显示。)\n```\n\n# SpaceVim中自定义快捷键\n**下面是[SpaceVim官网](https://spacevim.org/cn)的说明**\n> 启动函数   \n> 由于 toml 配置的局限性，SpaceVim 提供了两种启动函数 bootstrap_before 和 bootstrap_after，在该函数内可以使用 Vim script。 \n> 可通过 ~/.SpaceVim.d/init.toml 的 [options] 片段中的这两个选项 bootstrap_before 和 bootstrap_after 来指定函数名称，例如：\n> \n> [options]  \n> 　　bootstrap_before = \"myspacevim#before\"  \n>  　　bootstrap_after  = \"myspacevim#after\"  \n> 启动函数文件应放置在 Vim &runtimepath 的 autoload 文件夹内。例如：\n> \n> 文件名：~/.SpaceVim.d/autoload/myspacevim.vim\n> \n> function! myspacevim#before() abort  \n> 　　let g:neomake_enabled_c_makers = ['clang']  \n> 　　nnoremap jk <esc>  \n> endfunction\n> \n> function! myspacevim#after() abort  \n> 　　iunmap jk  \n> endfunction\n> 函数 bootstrap_before 将在读取用户配置后执行，而函数 bootstrap_after 将在 VimEnter autocmd 之后执行。\n> \n> 如果你需要添加自定义以 SPC 为前缀的快捷键，你需要使用 bootstrap function，在其中加入：\n> \n> function! myspacevim#before() abort  \n> 　　call SpaceVim#custom#SPCGroupName(['G'], '+TestGroup')  \n> 　　call SpaceVim#custom#SPC('nore', ['G', 't'], 'echom 1', 'echomessage 1', 1)  \n> endfunction\n\n# vim中定义快捷键相关说明\n\n## autocmd\n- autocmd是一个十分强大的命令，在.vimrc中配置以后在用vim创建文件的时候就会自动执行一些命令\n\n## 键盘映射\n具体参照[Vim中的键映射](https://www.cnblogs.com/softwaretesting/archive/2011/09/28/2194515.html)\n\n\n使用map命令，可以将键盘上的某个按键与Vim的命令绑定起来。例如使用以下命令，可以通过F5键将单词用花括号括起来：   \n\n　　:map <F5> i{e<Esc>a}<Esc>  \n\n其中：i{将插入字符{，然后使用Esc退回到命令状态；接着用e移到单词结尾，a}增加字符}，最后退至命令状态。\n\n在执行以上命令之后，光标定位在一个单词上（例如amount），按下F5键，这时字符就会变成{amount}的形式。   \n\n## 不同模式下的键盘映射\n使用下表中不同形式的map命令，可以针对特定的模式设置键盘映射：\n\n\n| Command  | Normal   | Visual    |Operator Pending |   插入模式  |命令行模式     |\n| \t:---:  |\t:---:   |\t:---:     |\t:---:           |\t:---:       |\t:---:         |\n|   命令 \t | 常规模式 |可视化模式 |运算符模式       |\tInsert Only | Command Line  |\n| :map\t   |     y\t  |      y    |       \ty       |             |               |    \n| :nmap\t   | y        |           |                 |             |               | \n| :vmap\t \t |          |       y   |                 |             |               |           \n| :omap\t \t |          |           |        y        |             |               |  \n| :map!\t \t |          |           |                 |       \ty\t  |     y         |         \n| :imap\t \t |          |           |                 |    \ty       |               |       \n| :cmap\t \t |          |           |                 |             |     \ty       |   \n\n# SpaceVim中进行自定义SPC开头的键映射\n下面是将SPC-v-c定义为Markdown文本中行注释，SPC-v-u对Markdown进行行取消注释，SPC-v-p进行Markdown文件样式预览.\n\n**~/.SpaceVim.d/autoload/myspacevim.vim**\n\n```\nfunction! myspacevim#before() abort\n　　set wrap\n\n    \"v开头为自定义快捷键\n　　call SpaceVim#custom#SPCGroupName(['v'], '+Personal Key Bindings')\n\n    \"使用v-p进行markdown网页预览\n　　autocmd BufRead,BufNewFile *.{md,mdown,mkd,mkdn,markdown,mdwn} call SpaceVim#custom#SPC('nore', ['v', 'p'], ':!google-chrome-stable \"%:p\"', 'Markdown-Previews',1)\n\n    \"对markdown进行行注释，在行首插入[//]:#(,在行尾插入右括号),命令是'I[//]:#(<Esc>A)<Esc>',注意这里的<Esc>要用Ctrl-Esc来完成 \n　　call SpaceVim#custom#SPC('nore', ['v', 'c'], 'I[//]:#(<Esc>A)<Esc>', 'Markdown-comment one line', 0)\n\n    \"对markdown取消行注释,在行首删除[//]:#(,在行尾删除右括号)\n　　call SpaceVim#custom#SPC('nore', ['v', 'u'], '07x$x', 'Markdown-uncomment one line', 0)\nendfunction\n\n```\n\n---------------\n---------------\n\n其实...我就想弄两个快捷键...\n","source":"_posts/SpaceVim中自定义Markdown相关快捷键.md","raw":"---\ntitle: SpaceVim中自定义Markdown相关快捷键\ncomments: true\nmathjax: false\ndate: 2019-03-18 23:14:48\ntags: [SpaceVim,Markdown]\ncategories: Learning\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n  SpaceVim对Markdown的注释居然是html版本的，预览的时候还是可以显示，百度了才知道用[[//]]:#()的方法，就想着弄了快捷键，又是挖坑踩坑...\n  <!--more-->\n# Markdown注释方法\n\n## html标签 \n注意：需要在前面空一行\n```\n<div style='display: none'>\n哈哈我是注释，不会在浏览器中显示。\n我也是注释。\n</div>\n```\n\n## html注释\n```\n<!--哈哈我是注释，不会在浏览器中显示。-->\n\n<!--\n哈哈我是多段\n注释，\n不会在浏览器中显示。\n-->\n```\n\n## 利用Markdown原理\n利用markdown的解析原理来实现注释的。一般有的markdown解析器不支持上面的注释方法，这个时候就可以用此方法。\n\n```\n[comment]: <> (哈哈我是注释，不会在浏览器中显示。)\n[comment]: <> (哈哈我是注释，不会在浏览器中显示。)\n[comment]: <> (哈哈我是注释，不会在浏览器中显示。)\n[//]: <> (哈哈我是注释，不会在浏览器中显示。)\n[//]: # (哈哈我是注释，不会在浏览器中显示。)\n```\n\n其中，这种方法最稳定，适用性最强：\n```\n[//]: # (哈哈我是注释，不会在浏览器中显示。)\n```\n\n还看到这种最可爱，超级无敌萌的：\n```\n[^_^]: # (哈哈我是注释，不会在浏览器中显示。)\n```\n\n# SpaceVim中自定义快捷键\n**下面是[SpaceVim官网](https://spacevim.org/cn)的说明**\n> 启动函数   \n> 由于 toml 配置的局限性，SpaceVim 提供了两种启动函数 bootstrap_before 和 bootstrap_after，在该函数内可以使用 Vim script。 \n> 可通过 ~/.SpaceVim.d/init.toml 的 [options] 片段中的这两个选项 bootstrap_before 和 bootstrap_after 来指定函数名称，例如：\n> \n> [options]  \n> 　　bootstrap_before = \"myspacevim#before\"  \n>  　　bootstrap_after  = \"myspacevim#after\"  \n> 启动函数文件应放置在 Vim &runtimepath 的 autoload 文件夹内。例如：\n> \n> 文件名：~/.SpaceVim.d/autoload/myspacevim.vim\n> \n> function! myspacevim#before() abort  \n> 　　let g:neomake_enabled_c_makers = ['clang']  \n> 　　nnoremap jk <esc>  \n> endfunction\n> \n> function! myspacevim#after() abort  \n> 　　iunmap jk  \n> endfunction\n> 函数 bootstrap_before 将在读取用户配置后执行，而函数 bootstrap_after 将在 VimEnter autocmd 之后执行。\n> \n> 如果你需要添加自定义以 SPC 为前缀的快捷键，你需要使用 bootstrap function，在其中加入：\n> \n> function! myspacevim#before() abort  \n> 　　call SpaceVim#custom#SPCGroupName(['G'], '+TestGroup')  \n> 　　call SpaceVim#custom#SPC('nore', ['G', 't'], 'echom 1', 'echomessage 1', 1)  \n> endfunction\n\n# vim中定义快捷键相关说明\n\n## autocmd\n- autocmd是一个十分强大的命令，在.vimrc中配置以后在用vim创建文件的时候就会自动执行一些命令\n\n## 键盘映射\n具体参照[Vim中的键映射](https://www.cnblogs.com/softwaretesting/archive/2011/09/28/2194515.html)\n\n\n使用map命令，可以将键盘上的某个按键与Vim的命令绑定起来。例如使用以下命令，可以通过F5键将单词用花括号括起来：   \n\n　　:map <F5> i{e<Esc>a}<Esc>  \n\n其中：i{将插入字符{，然后使用Esc退回到命令状态；接着用e移到单词结尾，a}增加字符}，最后退至命令状态。\n\n在执行以上命令之后，光标定位在一个单词上（例如amount），按下F5键，这时字符就会变成{amount}的形式。   \n\n## 不同模式下的键盘映射\n使用下表中不同形式的map命令，可以针对特定的模式设置键盘映射：\n\n\n| Command  | Normal   | Visual    |Operator Pending |   插入模式  |命令行模式     |\n| \t:---:  |\t:---:   |\t:---:     |\t:---:           |\t:---:       |\t:---:         |\n|   命令 \t | 常规模式 |可视化模式 |运算符模式       |\tInsert Only | Command Line  |\n| :map\t   |     y\t  |      y    |       \ty       |             |               |    \n| :nmap\t   | y        |           |                 |             |               | \n| :vmap\t \t |          |       y   |                 |             |               |           \n| :omap\t \t |          |           |        y        |             |               |  \n| :map!\t \t |          |           |                 |       \ty\t  |     y         |         \n| :imap\t \t |          |           |                 |    \ty       |               |       \n| :cmap\t \t |          |           |                 |             |     \ty       |   \n\n# SpaceVim中进行自定义SPC开头的键映射\n下面是将SPC-v-c定义为Markdown文本中行注释，SPC-v-u对Markdown进行行取消注释，SPC-v-p进行Markdown文件样式预览.\n\n**~/.SpaceVim.d/autoload/myspacevim.vim**\n\n```\nfunction! myspacevim#before() abort\n　　set wrap\n\n    \"v开头为自定义快捷键\n　　call SpaceVim#custom#SPCGroupName(['v'], '+Personal Key Bindings')\n\n    \"使用v-p进行markdown网页预览\n　　autocmd BufRead,BufNewFile *.{md,mdown,mkd,mkdn,markdown,mdwn} call SpaceVim#custom#SPC('nore', ['v', 'p'], ':!google-chrome-stable \"%:p\"', 'Markdown-Previews',1)\n\n    \"对markdown进行行注释，在行首插入[//]:#(,在行尾插入右括号),命令是'I[//]:#(<Esc>A)<Esc>',注意这里的<Esc>要用Ctrl-Esc来完成 \n　　call SpaceVim#custom#SPC('nore', ['v', 'c'], 'I[//]:#(<Esc>A)<Esc>', 'Markdown-comment one line', 0)\n\n    \"对markdown取消行注释,在行首删除[//]:#(,在行尾删除右括号)\n　　call SpaceVim#custom#SPC('nore', ['v', 'u'], '07x$x', 'Markdown-uncomment one line', 0)\nendfunction\n\n```\n\n---------------\n---------------\n\n其实...我就想弄两个快捷键...\n","slug":"SpaceVim中自定义Markdown相关快捷键","published":1,"updated":"2019-07-20T12:10:19.195Z","layout":"post","photos":[],"link":"","_id":"cjycjtjwp003xussb72fo2lsg","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>  SpaceVim对Markdown的注释居然是html版本的，预览的时候还是可以显示，百度了才知道用[[//]]:#()的方法，就想着弄了快捷键，又是挖坑踩坑…<br>  <a id=\"more\"></a></p>\n<h1 id=\"Markdown注释方法\"><a href=\"#Markdown注释方法\" class=\"headerlink\" title=\"Markdown注释方法\"></a>Markdown注释方法</h1><h2 id=\"html标签\"><a href=\"#html标签\" class=\"headerlink\" title=\"html标签\"></a>html标签</h2><p>注意：需要在前面空一行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&apos;display: none&apos;&gt;</span><br><span class=\"line\">哈哈我是注释，不会在浏览器中显示。</span><br><span class=\"line\">我也是注释。</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"html注释\"><a href=\"#html注释\" class=\"headerlink\" title=\"html注释\"></a>html注释</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--哈哈我是注释，不会在浏览器中显示。--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">哈哈我是多段</span><br><span class=\"line\">注释，</span><br><span class=\"line\">不会在浏览器中显示。</span><br><span class=\"line\">--&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"利用Markdown原理\"><a href=\"#利用Markdown原理\" class=\"headerlink\" title=\"利用Markdown原理\"></a>利用Markdown原理</h2><p>利用markdown的解析原理来实现注释的。一般有的markdown解析器不支持上面的注释方法，这个时候就可以用此方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[//]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[//]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure>\n<p>其中，这种方法最稳定，适用性最强：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[//]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure></p>\n<p>还看到这种最可爱，超级无敌萌的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[^_^]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"SpaceVim中自定义快捷键\"><a href=\"#SpaceVim中自定义快捷键\" class=\"headerlink\" title=\"SpaceVim中自定义快捷键\"></a>SpaceVim中自定义快捷键</h1><p><strong>下面是<a href=\"https://spacevim.org/cn\" target=\"_blank\" rel=\"noopener\">SpaceVim官网</a>的说明</strong></p>\n<blockquote>\n<p>启动函数<br>由于 toml 配置的局限性，SpaceVim 提供了两种启动函数 bootstrap_before 和 bootstrap_after，在该函数内可以使用 Vim script。<br>可通过 ~/.SpaceVim.d/init.toml 的 [options] 片段中的这两个选项 bootstrap_before 和 bootstrap_after 来指定函数名称，例如：</p>\n<p>[options]<br>　　bootstrap_before = “myspacevim#before”<br> 　　bootstrap_after  = “myspacevim#after”<br>启动函数文件应放置在 Vim &amp;runtimepath 的 autoload 文件夹内。例如：</p>\n<p>文件名：~/.SpaceVim.d/autoload/myspacevim.vim</p>\n<p>function! myspacevim#before() abort<br>　　let g:neomake_enabled_c_makers = [‘clang’]<br>　　nnoremap jk <esc><br>endfunction</esc></p>\n<p>function! myspacevim#after() abort<br>　　iunmap jk<br>endfunction<br>函数 bootstrap_before 将在读取用户配置后执行，而函数 bootstrap_after 将在 VimEnter autocmd 之后执行。</p>\n<p>如果你需要添加自定义以 SPC 为前缀的快捷键，你需要使用 bootstrap function，在其中加入：</p>\n<p>function! myspacevim#before() abort<br>　　call SpaceVim#custom#SPCGroupName([‘G’], ‘+TestGroup’)<br>　　call SpaceVim#custom#SPC(‘nore’, [‘G’, ‘t’], ‘echom 1’, ‘echomessage 1’, 1)<br>endfunction</p>\n</blockquote>\n<h1 id=\"vim中定义快捷键相关说明\"><a href=\"#vim中定义快捷键相关说明\" class=\"headerlink\" title=\"vim中定义快捷键相关说明\"></a>vim中定义快捷键相关说明</h1><h2 id=\"autocmd\"><a href=\"#autocmd\" class=\"headerlink\" title=\"autocmd\"></a>autocmd</h2><ul>\n<li>autocmd是一个十分强大的命令，在.vimrc中配置以后在用vim创建文件的时候就会自动执行一些命令</li>\n</ul>\n<h2 id=\"键盘映射\"><a href=\"#键盘映射\" class=\"headerlink\" title=\"键盘映射\"></a>键盘映射</h2><p>具体参照<a href=\"https://www.cnblogs.com/softwaretesting/archive/2011/09/28/2194515.html\" target=\"_blank\" rel=\"noopener\">Vim中的键映射</a></p>\n<p>使用map命令，可以将键盘上的某个按键与Vim的命令绑定起来。例如使用以下命令，可以通过F5键将单词用花括号括起来：   </p>\n<p>　　:map <f5> i{e<esc>a}<esc>  </esc></esc></f5></p>\n<p>其中：i{将插入字符{，然后使用Esc退回到命令状态；接着用e移到单词结尾，a}增加字符}，最后退至命令状态。</p>\n<p>在执行以上命令之后，光标定位在一个单词上（例如amount），按下F5键，这时字符就会变成{amount}的形式。   </p>\n<h2 id=\"不同模式下的键盘映射\"><a href=\"#不同模式下的键盘映射\" class=\"headerlink\" title=\"不同模式下的键盘映射\"></a>不同模式下的键盘映射</h2><p>使用下表中不同形式的map命令，可以针对特定的模式设置键盘映射：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Command</th>\n<th style=\"text-align:center\">Normal</th>\n<th style=\"text-align:center\">Visual</th>\n<th style=\"text-align:center\">Operator Pending</th>\n<th style=\"text-align:center\">插入模式</th>\n<th style=\"text-align:center\">命令行模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">命令</td>\n<td style=\"text-align:center\">常规模式</td>\n<td style=\"text-align:center\">可视化模式</td>\n<td style=\"text-align:center\">运算符模式</td>\n<td style=\"text-align:center\">Insert Only</td>\n<td style=\"text-align:center\">Command Line</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:map</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:nmap</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:vmap</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:omap</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:map!</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">y</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:imap</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:cmap</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">y</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"SpaceVim中进行自定义SPC开头的键映射\"><a href=\"#SpaceVim中进行自定义SPC开头的键映射\" class=\"headerlink\" title=\"SpaceVim中进行自定义SPC开头的键映射\"></a>SpaceVim中进行自定义SPC开头的键映射</h1><p>下面是将SPC-v-c定义为Markdown文本中行注释，SPC-v-u对Markdown进行行取消注释，SPC-v-p进行Markdown文件样式预览.</p>\n<p><strong>~/.SpaceVim.d/autoload/myspacevim.vim</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function! myspacevim#before() abort</span><br><span class=\"line\">　　set wrap</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;v开头为自定义快捷键</span><br><span class=\"line\">　　call SpaceVim#custom#SPCGroupName([&apos;v&apos;], &apos;+Personal Key Bindings&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;使用v-p进行markdown网页预览</span><br><span class=\"line\">　　autocmd BufRead,BufNewFile *.&#123;md,mdown,mkd,mkdn,markdown,mdwn&#125; call SpaceVim#custom#SPC(&apos;nore&apos;, [&apos;v&apos;, &apos;p&apos;], &apos;:!google-chrome-stable &quot;%:p&quot;&apos;, &apos;Markdown-Previews&apos;,1)</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;对markdown进行行注释，在行首插入[//]:#(,在行尾插入右括号),命令是&apos;I[//]:#(&lt;Esc&gt;A)&lt;Esc&gt;&apos;,注意这里的&lt;Esc&gt;要用Ctrl-Esc来完成 </span><br><span class=\"line\">　　call SpaceVim#custom#SPC(&apos;nore&apos;, [&apos;v&apos;, &apos;c&apos;], &apos;I[//]:#(&lt;Esc&gt;A)&lt;Esc&gt;&apos;, &apos;Markdown-comment one line&apos;, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;对markdown取消行注释,在行首删除[//]:#(,在行尾删除右括号)</span><br><span class=\"line\">　　call SpaceVim#custom#SPC(&apos;nore&apos;, [&apos;v&apos;, &apos;u&apos;], &apos;07x$x&apos;, &apos;Markdown-uncomment one line&apos;, 0)</span><br><span class=\"line\">endfunction</span><br></pre></td></tr></table></figure>\n<h2 id=\"———————\"><a href=\"#———————\" class=\"headerlink\" title=\"———————-\"></a>———————-</h2><p>其实…我就想弄两个快捷键…</p>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>  SpaceVim对Markdown的注释居然是html版本的，预览的时候还是可以显示，百度了才知道用[[//]]:#()的方法，就想着弄了快捷键，又是挖坑踩坑…<br>","more":"</p>\n<h1 id=\"Markdown注释方法\"><a href=\"#Markdown注释方法\" class=\"headerlink\" title=\"Markdown注释方法\"></a>Markdown注释方法</h1><h2 id=\"html标签\"><a href=\"#html标签\" class=\"headerlink\" title=\"html标签\"></a>html标签</h2><p>注意：需要在前面空一行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&apos;display: none&apos;&gt;</span><br><span class=\"line\">哈哈我是注释，不会在浏览器中显示。</span><br><span class=\"line\">我也是注释。</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"html注释\"><a href=\"#html注释\" class=\"headerlink\" title=\"html注释\"></a>html注释</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--哈哈我是注释，不会在浏览器中显示。--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">哈哈我是多段</span><br><span class=\"line\">注释，</span><br><span class=\"line\">不会在浏览器中显示。</span><br><span class=\"line\">--&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"利用Markdown原理\"><a href=\"#利用Markdown原理\" class=\"headerlink\" title=\"利用Markdown原理\"></a>利用Markdown原理</h2><p>利用markdown的解析原理来实现注释的。一般有的markdown解析器不支持上面的注释方法，这个时候就可以用此方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[//]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[//]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure>\n<p>其中，这种方法最稳定，适用性最强：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[//]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure></p>\n<p>还看到这种最可爱，超级无敌萌的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[^_^]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"SpaceVim中自定义快捷键\"><a href=\"#SpaceVim中自定义快捷键\" class=\"headerlink\" title=\"SpaceVim中自定义快捷键\"></a>SpaceVim中自定义快捷键</h1><p><strong>下面是<a href=\"https://spacevim.org/cn\" target=\"_blank\" rel=\"noopener\">SpaceVim官网</a>的说明</strong></p>\n<blockquote>\n<p>启动函数<br>由于 toml 配置的局限性，SpaceVim 提供了两种启动函数 bootstrap_before 和 bootstrap_after，在该函数内可以使用 Vim script。<br>可通过 ~/.SpaceVim.d/init.toml 的 [options] 片段中的这两个选项 bootstrap_before 和 bootstrap_after 来指定函数名称，例如：</p>\n<p>[options]<br>　　bootstrap_before = “myspacevim#before”<br> 　　bootstrap_after  = “myspacevim#after”<br>启动函数文件应放置在 Vim &amp;runtimepath 的 autoload 文件夹内。例如：</p>\n<p>文件名：~/.SpaceVim.d/autoload/myspacevim.vim</p>\n<p>function! myspacevim#before() abort<br>　　let g:neomake_enabled_c_makers = [‘clang’]<br>　　nnoremap jk <esc><br>endfunction</esc></p>\n<p>function! myspacevim#after() abort<br>　　iunmap jk<br>endfunction<br>函数 bootstrap_before 将在读取用户配置后执行，而函数 bootstrap_after 将在 VimEnter autocmd 之后执行。</p>\n<p>如果你需要添加自定义以 SPC 为前缀的快捷键，你需要使用 bootstrap function，在其中加入：</p>\n<p>function! myspacevim#before() abort<br>　　call SpaceVim#custom#SPCGroupName([‘G’], ‘+TestGroup’)<br>　　call SpaceVim#custom#SPC(‘nore’, [‘G’, ‘t’], ‘echom 1’, ‘echomessage 1’, 1)<br>endfunction</p>\n</blockquote>\n<h1 id=\"vim中定义快捷键相关说明\"><a href=\"#vim中定义快捷键相关说明\" class=\"headerlink\" title=\"vim中定义快捷键相关说明\"></a>vim中定义快捷键相关说明</h1><h2 id=\"autocmd\"><a href=\"#autocmd\" class=\"headerlink\" title=\"autocmd\"></a>autocmd</h2><ul>\n<li>autocmd是一个十分强大的命令，在.vimrc中配置以后在用vim创建文件的时候就会自动执行一些命令</li>\n</ul>\n<h2 id=\"键盘映射\"><a href=\"#键盘映射\" class=\"headerlink\" title=\"键盘映射\"></a>键盘映射</h2><p>具体参照<a href=\"https://www.cnblogs.com/softwaretesting/archive/2011/09/28/2194515.html\" target=\"_blank\" rel=\"noopener\">Vim中的键映射</a></p>\n<p>使用map命令，可以将键盘上的某个按键与Vim的命令绑定起来。例如使用以下命令，可以通过F5键将单词用花括号括起来：   </p>\n<p>　　:map <f5> i{e<esc>a}<esc>  </esc></esc></f5></p>\n<p>其中：i{将插入字符{，然后使用Esc退回到命令状态；接着用e移到单词结尾，a}增加字符}，最后退至命令状态。</p>\n<p>在执行以上命令之后，光标定位在一个单词上（例如amount），按下F5键，这时字符就会变成{amount}的形式。   </p>\n<h2 id=\"不同模式下的键盘映射\"><a href=\"#不同模式下的键盘映射\" class=\"headerlink\" title=\"不同模式下的键盘映射\"></a>不同模式下的键盘映射</h2><p>使用下表中不同形式的map命令，可以针对特定的模式设置键盘映射：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Command</th>\n<th style=\"text-align:center\">Normal</th>\n<th style=\"text-align:center\">Visual</th>\n<th style=\"text-align:center\">Operator Pending</th>\n<th style=\"text-align:center\">插入模式</th>\n<th style=\"text-align:center\">命令行模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">命令</td>\n<td style=\"text-align:center\">常规模式</td>\n<td style=\"text-align:center\">可视化模式</td>\n<td style=\"text-align:center\">运算符模式</td>\n<td style=\"text-align:center\">Insert Only</td>\n<td style=\"text-align:center\">Command Line</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:map</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:nmap</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:vmap</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:omap</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:map!</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">y</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:imap</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:cmap</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">y</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"SpaceVim中进行自定义SPC开头的键映射\"><a href=\"#SpaceVim中进行自定义SPC开头的键映射\" class=\"headerlink\" title=\"SpaceVim中进行自定义SPC开头的键映射\"></a>SpaceVim中进行自定义SPC开头的键映射</h1><p>下面是将SPC-v-c定义为Markdown文本中行注释，SPC-v-u对Markdown进行行取消注释，SPC-v-p进行Markdown文件样式预览.</p>\n<p><strong>~/.SpaceVim.d/autoload/myspacevim.vim</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function! myspacevim#before() abort</span><br><span class=\"line\">　　set wrap</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;v开头为自定义快捷键</span><br><span class=\"line\">　　call SpaceVim#custom#SPCGroupName([&apos;v&apos;], &apos;+Personal Key Bindings&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;使用v-p进行markdown网页预览</span><br><span class=\"line\">　　autocmd BufRead,BufNewFile *.&#123;md,mdown,mkd,mkdn,markdown,mdwn&#125; call SpaceVim#custom#SPC(&apos;nore&apos;, [&apos;v&apos;, &apos;p&apos;], &apos;:!google-chrome-stable &quot;%:p&quot;&apos;, &apos;Markdown-Previews&apos;,1)</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;对markdown进行行注释，在行首插入[//]:#(,在行尾插入右括号),命令是&apos;I[//]:#(&lt;Esc&gt;A)&lt;Esc&gt;&apos;,注意这里的&lt;Esc&gt;要用Ctrl-Esc来完成 </span><br><span class=\"line\">　　call SpaceVim#custom#SPC(&apos;nore&apos;, [&apos;v&apos;, &apos;c&apos;], &apos;I[//]:#(&lt;Esc&gt;A)&lt;Esc&gt;&apos;, &apos;Markdown-comment one line&apos;, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;对markdown取消行注释,在行首删除[//]:#(,在行尾删除右括号)</span><br><span class=\"line\">　　call SpaceVim#custom#SPC(&apos;nore&apos;, [&apos;v&apos;, &apos;u&apos;], &apos;07x$x&apos;, &apos;Markdown-uncomment one line&apos;, 0)</span><br><span class=\"line\">endfunction</span><br></pre></td></tr></table></figure>\n<h2 id=\"———————\"><a href=\"#———————\" class=\"headerlink\" title=\"———————-\"></a>———————-</h2><p>其实…我就想弄两个快捷键…</p>"},{"title":"Tornado中的异步","comments":1,"mathjax":false,"date":"2019-03-17T14:32:28.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# Tornado中的异步\n## 概述\n\n因为epoll主要用来解决网络IO的并发问题，所以Tornado中的异步也主要体现在网络的IO异步上，即异步web\n<!--more-->\n\n## tornado.httpclient.AsyncHttpClinet\n- 是Tornado提供的异步web请求客户端，用来进行异步web请求\n- from tornado.httpclient import AsyncHttpClinet\n\n## fetch(request, callback = None)\n- 此函数用于执行一个Web请求，并异步响应返回一个tornado.httpclient.HttpResponse\n- request可以是一个URL，也可以是一个Tornado.httpclient.HttpResponse对象,如果插入的是url，会自动生成一个request对象\n\n## HTTPRequest\n- HTTP请求类，该类的构造函数可以接收参数    \n- 参数:\n  - url: 字符串类型，要访问的网址，必传\n  - method：字符串类型，http请求方式\n  - headers：字典或者HTTPHeaders，附加的协议头\n  - body: HTTP请求体\n  \n## HTTPResponse\n- HTTP响应类\n- 属性\n  - code: 状态码\n  - reason： 状态码的描述\n  - body： 相应的数据\n  - error： 是否有异常\n\n## @tornado.web.asynchronous装饰器\n- 不关闭通信的通道\n- **实际操作发现无法使用这个装饰器**\n-------------------\n\n## 示例\n\n### 回调函数实现的异步\n**Handler代码**\n```\nclass StudentsHandler(RequestHandler):\n    def on_response(self, response):\n        if response.error:\n            self.send_error(500)\n        else:\n            data = json.loads(response.body)\n            # 这里本身无法write,要打开通道，用asynchronous装饰器\n            self.write(data)\n        self.finish()\n\n    # 不关闭通信的通道\n    #  @tornado.web.asynchronous\n    # 实操发现用不了这个装饰器\n    def get(self, *args, **kwargs):\n        url = \"http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&t=&market=360zhushou&client=android&appname=budejie&device=&jdk=1&ver=8.0.1&udid=&from=android\"\n        # 创建客户端\n        client = AsyncHTTPClient()\n        # on_response是回调函数,如果请求成功，就进行on_response回调函数\n        client.fetch(url, self.on_response)\n        #  self.write(\"OK\") \n```\n\n### 协程实现的异步\n**Handler代码**\n```\nclass Students2Handler(RequestHandler):\n    @tornado.gen.coroutine\n    def get(self, *args, **kwargs):\n        url = \"http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&t=&market=360zhushou&client=android&appname=budejie&device=&jdk=1&ver=8.0.1&udid=&from=android\"\n        client = AsyncHTTPClient()\n        # 耗时操作挂起\n        res = yield client.fetch(url)\n        if res.error:\n            self.send_error(500)\n        else:\n            data = json.loads(res.body)\n            self.write(data) \n```\n### 协程异步并将异步web请求单独出来\n\n**Handler代码**\n\n    class Students3Handler(RequestHandler):\n        # 简化get函数\n        @tornado.gen.coroutine\n        def get(self, *args, **kwargs):\n            res = yield self.getData()\n            self.write(res)\n    \n        # 这里也要加装饰器，这里也是耗时操作\n        @tornado.gen.coroutine\n        def getData(self):\n            url = \"http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&t=&market=360zhushou&client=android&appname=budejie&device=&jdk=1&ver=8.0.1&udid=&from=android\"\n            client = AsyncHTTPClient()\n            # 耗时操作\n            res = yield client.fetch(url)\n            if res.error:\n                #  表示没有结果\n                ret = {\"ret\": 0}\n            else:\n                ret = json.loads(res.body)\n            #  相当于gen.send()函数\n            raise tornado.gen.Return(ret)\n","source":"_posts/Tornado中的异步.md","raw":"---\ntitle: Tornado中的异步\ncomments: true\nmathjax: false\ndate: 2019-03-17 22:32:28\ntags: [Python,Tornado]\ncategories: Python\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# Tornado中的异步\n## 概述\n\n因为epoll主要用来解决网络IO的并发问题，所以Tornado中的异步也主要体现在网络的IO异步上，即异步web\n<!--more-->\n\n## tornado.httpclient.AsyncHttpClinet\n- 是Tornado提供的异步web请求客户端，用来进行异步web请求\n- from tornado.httpclient import AsyncHttpClinet\n\n## fetch(request, callback = None)\n- 此函数用于执行一个Web请求，并异步响应返回一个tornado.httpclient.HttpResponse\n- request可以是一个URL，也可以是一个Tornado.httpclient.HttpResponse对象,如果插入的是url，会自动生成一个request对象\n\n## HTTPRequest\n- HTTP请求类，该类的构造函数可以接收参数    \n- 参数:\n  - url: 字符串类型，要访问的网址，必传\n  - method：字符串类型，http请求方式\n  - headers：字典或者HTTPHeaders，附加的协议头\n  - body: HTTP请求体\n  \n## HTTPResponse\n- HTTP响应类\n- 属性\n  - code: 状态码\n  - reason： 状态码的描述\n  - body： 相应的数据\n  - error： 是否有异常\n\n## @tornado.web.asynchronous装饰器\n- 不关闭通信的通道\n- **实际操作发现无法使用这个装饰器**\n-------------------\n\n## 示例\n\n### 回调函数实现的异步\n**Handler代码**\n```\nclass StudentsHandler(RequestHandler):\n    def on_response(self, response):\n        if response.error:\n            self.send_error(500)\n        else:\n            data = json.loads(response.body)\n            # 这里本身无法write,要打开通道，用asynchronous装饰器\n            self.write(data)\n        self.finish()\n\n    # 不关闭通信的通道\n    #  @tornado.web.asynchronous\n    # 实操发现用不了这个装饰器\n    def get(self, *args, **kwargs):\n        url = \"http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&t=&market=360zhushou&client=android&appname=budejie&device=&jdk=1&ver=8.0.1&udid=&from=android\"\n        # 创建客户端\n        client = AsyncHTTPClient()\n        # on_response是回调函数,如果请求成功，就进行on_response回调函数\n        client.fetch(url, self.on_response)\n        #  self.write(\"OK\") \n```\n\n### 协程实现的异步\n**Handler代码**\n```\nclass Students2Handler(RequestHandler):\n    @tornado.gen.coroutine\n    def get(self, *args, **kwargs):\n        url = \"http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&t=&market=360zhushou&client=android&appname=budejie&device=&jdk=1&ver=8.0.1&udid=&from=android\"\n        client = AsyncHTTPClient()\n        # 耗时操作挂起\n        res = yield client.fetch(url)\n        if res.error:\n            self.send_error(500)\n        else:\n            data = json.loads(res.body)\n            self.write(data) \n```\n### 协程异步并将异步web请求单独出来\n\n**Handler代码**\n\n    class Students3Handler(RequestHandler):\n        # 简化get函数\n        @tornado.gen.coroutine\n        def get(self, *args, **kwargs):\n            res = yield self.getData()\n            self.write(res)\n    \n        # 这里也要加装饰器，这里也是耗时操作\n        @tornado.gen.coroutine\n        def getData(self):\n            url = \"http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&t=&market=360zhushou&client=android&appname=budejie&device=&jdk=1&ver=8.0.1&udid=&from=android\"\n            client = AsyncHTTPClient()\n            # 耗时操作\n            res = yield client.fetch(url)\n            if res.error:\n                #  表示没有结果\n                ret = {\"ret\": 0}\n            else:\n                ret = json.loads(res.body)\n            #  相当于gen.send()函数\n            raise tornado.gen.Return(ret)\n","slug":"Tornado中的异步","published":1,"updated":"2019-07-20T12:10:19.195Z","layout":"post","photos":[],"link":"","_id":"cjycjtjwt0040ussbpng4fjqh","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"Tornado中的异步\"><a href=\"#Tornado中的异步\" class=\"headerlink\" title=\"Tornado中的异步\"></a>Tornado中的异步</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>因为epoll主要用来解决网络IO的并发问题，所以Tornado中的异步也主要体现在网络的IO异步上，即异步web<br><a id=\"more\"></a></p>\n<h2 id=\"tornado-httpclient-AsyncHttpClinet\"><a href=\"#tornado-httpclient-AsyncHttpClinet\" class=\"headerlink\" title=\"tornado.httpclient.AsyncHttpClinet\"></a>tornado.httpclient.AsyncHttpClinet</h2><ul>\n<li>是Tornado提供的异步web请求客户端，用来进行异步web请求</li>\n<li>from tornado.httpclient import AsyncHttpClinet</li>\n</ul>\n<h2 id=\"fetch-request-callback-None\"><a href=\"#fetch-request-callback-None\" class=\"headerlink\" title=\"fetch(request, callback = None)\"></a>fetch(request, callback = None)</h2><ul>\n<li>此函数用于执行一个Web请求，并异步响应返回一个tornado.httpclient.HttpResponse</li>\n<li>request可以是一个URL，也可以是一个Tornado.httpclient.HttpResponse对象,如果插入的是url，会自动生成一个request对象</li>\n</ul>\n<h2 id=\"HTTPRequest\"><a href=\"#HTTPRequest\" class=\"headerlink\" title=\"HTTPRequest\"></a>HTTPRequest</h2><ul>\n<li>HTTP请求类，该类的构造函数可以接收参数    </li>\n<li>参数:<ul>\n<li>url: 字符串类型，要访问的网址，必传</li>\n<li>method：字符串类型，http请求方式</li>\n<li>headers：字典或者HTTPHeaders，附加的协议头</li>\n<li>body: HTTP请求体</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTTPResponse\"><a href=\"#HTTPResponse\" class=\"headerlink\" title=\"HTTPResponse\"></a>HTTPResponse</h2><ul>\n<li>HTTP响应类</li>\n<li>属性<ul>\n<li>code: 状态码</li>\n<li>reason： 状态码的描述</li>\n<li>body： 相应的数据</li>\n<li>error： 是否有异常</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"tornado-web-asynchronous装饰器\"><a href=\"#tornado-web-asynchronous装饰器\" class=\"headerlink\" title=\"@tornado.web.asynchronous装饰器\"></a>@tornado.web.asynchronous装饰器</h2><ul>\n<li>不关闭通信的通道</li>\n<li><strong>实际操作发现无法使用这个装饰器</strong></li>\n</ul>\n<hr>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"回调函数实现的异步\"><a href=\"#回调函数实现的异步\" class=\"headerlink\" title=\"回调函数实现的异步\"></a>回调函数实现的异步</h3><p><strong>Handler代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class StudentsHandler(RequestHandler):</span><br><span class=\"line\">    def on_response(self, response):</span><br><span class=\"line\">        if response.error:</span><br><span class=\"line\">            self.send_error(500)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            data = json.loads(response.body)</span><br><span class=\"line\">            # 这里本身无法write,要打开通道，用asynchronous装饰器</span><br><span class=\"line\">            self.write(data)</span><br><span class=\"line\">        self.finish()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 不关闭通信的通道</span><br><span class=\"line\">    #  @tornado.web.asynchronous</span><br><span class=\"line\">    # 实操发现用不了这个装饰器</span><br><span class=\"line\">    def get(self, *args, **kwargs):</span><br><span class=\"line\">        url = &quot;http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&amp;t=&amp;market=360zhushou&amp;client=android&amp;appname=budejie&amp;device=&amp;jdk=1&amp;ver=8.0.1&amp;udid=&amp;from=android&quot;</span><br><span class=\"line\">        # 创建客户端</span><br><span class=\"line\">        client = AsyncHTTPClient()</span><br><span class=\"line\">        # on_response是回调函数,如果请求成功，就进行on_response回调函数</span><br><span class=\"line\">        client.fetch(url, self.on_response)</span><br><span class=\"line\">        #  self.write(&quot;OK&quot;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"协程实现的异步\"><a href=\"#协程实现的异步\" class=\"headerlink\" title=\"协程实现的异步\"></a>协程实现的异步</h3><p><strong>Handler代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Students2Handler(RequestHandler):</span><br><span class=\"line\">    @tornado.gen.coroutine</span><br><span class=\"line\">    def get(self, *args, **kwargs):</span><br><span class=\"line\">        url = &quot;http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&amp;t=&amp;market=360zhushou&amp;client=android&amp;appname=budejie&amp;device=&amp;jdk=1&amp;ver=8.0.1&amp;udid=&amp;from=android&quot;</span><br><span class=\"line\">        client = AsyncHTTPClient()</span><br><span class=\"line\">        # 耗时操作挂起</span><br><span class=\"line\">        res = yield client.fetch(url)</span><br><span class=\"line\">        if res.error:</span><br><span class=\"line\">            self.send_error(500)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            data = json.loads(res.body)</span><br><span class=\"line\">            self.write(data)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"协程异步并将异步web请求单独出来\"><a href=\"#协程异步并将异步web请求单独出来\" class=\"headerlink\" title=\"协程异步并将异步web请求单独出来\"></a>协程异步并将异步web请求单独出来</h3><p><strong>Handler代码</strong></p>\n<pre><code>class Students3Handler(RequestHandler):\n    # 简化get函数\n    @tornado.gen.coroutine\n    def get(self, *args, **kwargs):\n        res = yield self.getData()\n        self.write(res)\n\n    # 这里也要加装饰器，这里也是耗时操作\n    @tornado.gen.coroutine\n    def getData(self):\n        url = &quot;http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&amp;t=&amp;market=360zhushou&amp;client=android&amp;appname=budejie&amp;device=&amp;jdk=1&amp;ver=8.0.1&amp;udid=&amp;from=android&quot;\n        client = AsyncHTTPClient()\n        # 耗时操作\n        res = yield client.fetch(url)\n        if res.error:\n            #  表示没有结果\n            ret = {&quot;ret&quot;: 0}\n        else:\n            ret = json.loads(res.body)\n        #  相当于gen.send()函数\n        raise tornado.gen.Return(ret)\n</code></pre>","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"Tornado中的异步\"><a href=\"#Tornado中的异步\" class=\"headerlink\" title=\"Tornado中的异步\"></a>Tornado中的异步</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>因为epoll主要用来解决网络IO的并发问题，所以Tornado中的异步也主要体现在网络的IO异步上，即异步web<br>","more":"</p>\n<h2 id=\"tornado-httpclient-AsyncHttpClinet\"><a href=\"#tornado-httpclient-AsyncHttpClinet\" class=\"headerlink\" title=\"tornado.httpclient.AsyncHttpClinet\"></a>tornado.httpclient.AsyncHttpClinet</h2><ul>\n<li>是Tornado提供的异步web请求客户端，用来进行异步web请求</li>\n<li>from tornado.httpclient import AsyncHttpClinet</li>\n</ul>\n<h2 id=\"fetch-request-callback-None\"><a href=\"#fetch-request-callback-None\" class=\"headerlink\" title=\"fetch(request, callback = None)\"></a>fetch(request, callback = None)</h2><ul>\n<li>此函数用于执行一个Web请求，并异步响应返回一个tornado.httpclient.HttpResponse</li>\n<li>request可以是一个URL，也可以是一个Tornado.httpclient.HttpResponse对象,如果插入的是url，会自动生成一个request对象</li>\n</ul>\n<h2 id=\"HTTPRequest\"><a href=\"#HTTPRequest\" class=\"headerlink\" title=\"HTTPRequest\"></a>HTTPRequest</h2><ul>\n<li>HTTP请求类，该类的构造函数可以接收参数    </li>\n<li>参数:<ul>\n<li>url: 字符串类型，要访问的网址，必传</li>\n<li>method：字符串类型，http请求方式</li>\n<li>headers：字典或者HTTPHeaders，附加的协议头</li>\n<li>body: HTTP请求体</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTTPResponse\"><a href=\"#HTTPResponse\" class=\"headerlink\" title=\"HTTPResponse\"></a>HTTPResponse</h2><ul>\n<li>HTTP响应类</li>\n<li>属性<ul>\n<li>code: 状态码</li>\n<li>reason： 状态码的描述</li>\n<li>body： 相应的数据</li>\n<li>error： 是否有异常</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"tornado-web-asynchronous装饰器\"><a href=\"#tornado-web-asynchronous装饰器\" class=\"headerlink\" title=\"@tornado.web.asynchronous装饰器\"></a>@tornado.web.asynchronous装饰器</h2><ul>\n<li>不关闭通信的通道</li>\n<li><strong>实际操作发现无法使用这个装饰器</strong></li>\n</ul>\n<hr>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"回调函数实现的异步\"><a href=\"#回调函数实现的异步\" class=\"headerlink\" title=\"回调函数实现的异步\"></a>回调函数实现的异步</h3><p><strong>Handler代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class StudentsHandler(RequestHandler):</span><br><span class=\"line\">    def on_response(self, response):</span><br><span class=\"line\">        if response.error:</span><br><span class=\"line\">            self.send_error(500)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            data = json.loads(response.body)</span><br><span class=\"line\">            # 这里本身无法write,要打开通道，用asynchronous装饰器</span><br><span class=\"line\">            self.write(data)</span><br><span class=\"line\">        self.finish()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 不关闭通信的通道</span><br><span class=\"line\">    #  @tornado.web.asynchronous</span><br><span class=\"line\">    # 实操发现用不了这个装饰器</span><br><span class=\"line\">    def get(self, *args, **kwargs):</span><br><span class=\"line\">        url = &quot;http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&amp;t=&amp;market=360zhushou&amp;client=android&amp;appname=budejie&amp;device=&amp;jdk=1&amp;ver=8.0.1&amp;udid=&amp;from=android&quot;</span><br><span class=\"line\">        # 创建客户端</span><br><span class=\"line\">        client = AsyncHTTPClient()</span><br><span class=\"line\">        # on_response是回调函数,如果请求成功，就进行on_response回调函数</span><br><span class=\"line\">        client.fetch(url, self.on_response)</span><br><span class=\"line\">        #  self.write(&quot;OK&quot;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"协程实现的异步\"><a href=\"#协程实现的异步\" class=\"headerlink\" title=\"协程实现的异步\"></a>协程实现的异步</h3><p><strong>Handler代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Students2Handler(RequestHandler):</span><br><span class=\"line\">    @tornado.gen.coroutine</span><br><span class=\"line\">    def get(self, *args, **kwargs):</span><br><span class=\"line\">        url = &quot;http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&amp;t=&amp;market=360zhushou&amp;client=android&amp;appname=budejie&amp;device=&amp;jdk=1&amp;ver=8.0.1&amp;udid=&amp;from=android&quot;</span><br><span class=\"line\">        client = AsyncHTTPClient()</span><br><span class=\"line\">        # 耗时操作挂起</span><br><span class=\"line\">        res = yield client.fetch(url)</span><br><span class=\"line\">        if res.error:</span><br><span class=\"line\">            self.send_error(500)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            data = json.loads(res.body)</span><br><span class=\"line\">            self.write(data)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"协程异步并将异步web请求单独出来\"><a href=\"#协程异步并将异步web请求单独出来\" class=\"headerlink\" title=\"协程异步并将异步web请求单独出来\"></a>协程异步并将异步web请求单独出来</h3><p><strong>Handler代码</strong></p>\n<pre><code>class Students3Handler(RequestHandler):\n    # 简化get函数\n    @tornado.gen.coroutine\n    def get(self, *args, **kwargs):\n        res = yield self.getData()\n        self.write(res)\n\n    # 这里也要加装饰器，这里也是耗时操作\n    @tornado.gen.coroutine\n    def getData(self):\n        url = &quot;http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&amp;t=&amp;market=360zhushou&amp;client=android&amp;appname=budejie&amp;device=&amp;jdk=1&amp;ver=8.0.1&amp;udid=&amp;from=android&quot;\n        client = AsyncHTTPClient()\n        # 耗时操作\n        res = yield client.fetch(url)\n        if res.error:\n            #  表示没有结果\n            ret = {&quot;ret&quot;: 0}\n        else:\n            ret = json.loads(res.body)\n        #  相当于gen.send()函数\n        raise tornado.gen.Return(ret)\n</code></pre>"},{"title":"numpy.dot()函数","comments":1,"mathjax":false,"date":"2018-09-10T17:08:32.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n#Numpy\n　　numpy(Numerical Python extensions)是一个第三方的Python包，用于科学计算。本文主要讲学习Numpy过程中遇到的一个问题，关于numpy.dot()是怎运算的。<!--more-->\n\n##Numpy中多维数组的轴\n　　多维数组可以用numpy包生成，关于多维数组的运算以及定义等自行百度,主要讲多维数组的轴,这也是我学习时不懂的地方。\n\n{% note default %}\n　　多维数组的轴(axis)和该数组的size(或者)shape元素对应 。轴数从0开始，如果是二维，０轴是竖行，１轴是横行。具体看代码\n{% endnote %}\n\n```python\nx = np.random.randint(0,5,[3,2,2])\nprint(x)\nOut:\n  [[[5 2]\n    [4 2]]\n\n   [[1 3]\n    [2 3]]\n\n   [[1 1]\n    [0 1]]]\n\nx.sum(axis=0)\nOut:\n  array([[7, 6],\n        [6, 6]])\n\nx.sum(axis=1)\nOut:\n  array([[9, 4],\n         [3, 6],\n         [1, 2]])\n\nx.sum(axis=2)\nOut:\n  array([[7, 6],\n       [4, 5],\n       [2, 1]])\n```\n\n{% note info %} \n　　如果将三维数组的每一个二维看做一个平面（plane，X[0, :, :], X[1, :, :], X[2, :, :]），三维数组即是这些二维平面层叠（stacked）出来的结果。则（axis=0）表示全部平面上的对应位置，（axis=1），每一个平面的每一列，（axis=2），每一个平面的每一行。\n{% endnote %}\n\n#numpy.dot()\n　　*numpy.dot(a,b,out=None)*\n\n- 如果a和b都是一维数组，则进行内积运算\n\n```python\nnp.dot(3, 4)\nOut:\n  12\n\nnp.dot([2j, 3+3j], [2j, 3j])\nOut:\n  (-13+9j)\n```\n\n- 如果都是二维数组，就进行矩阵乘法，推荐`a@b`\n\n```python\na = [[1, 0], [0, 1]]\nb = [[4, 1], [2, 2]]\nnp.dot(a, b)\nOut:\n  array([[4, 1],\n         [2, 2]])\n```\n\n- 如果其中一个矩阵０秩，即标量，就进行`a*b`的运算，相乘\n- 如果a是N-D矩阵且b是1-D矩阵,就进行a的最后一个轴上的数据和b相乘并求和\n\n```python\n  a = array([[[ 1.,  2.,  3.,  4.],\n       [ 5.,  6.,  7.,  8.],\n       [ 9., 10., 11., 12.]],\n\n      [[ 1.,  2.,  3.,  4.],\n       [ 5.,  6.,  7.,  8.],\n       [ 9., 10., 11., 12.]]])\n  b = np.array([1,2,3,4])\n  np.dot(a, b)\n  Out:\n    array([[ 30.,  70., 110.],\n         [ 30.,  70., 110.]])\n```\n- 如果都是多维矩阵，则_a的最后一个轴和b的倒数第二个轴上的数据乘积累加_,类似第四种情况\n  `dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])`\n\n```python\n  a = np.arange(3*4*5*6).reshape((3,4,5,6))\n  b = np.arange(3*4*5*6)[::-1].reshape((5,4,6,3))\n  np.dot(a, b)[2,3,2,1,2,2]\n  Out:\n    499128\n  sum(a[2,3,2,:] * b[1,2,:,2])\n  Out:\n    499128\n```\n\n&nbsp;&nbsp;\n\n","source":"_posts/numpy-dot-函数.md","raw":"---\ntitle: numpy.dot()函数\ncomments: true\nmathjax: false\ndate: 2018-09-11 01:08:32\ntags: [Python,Numpy,MachineLearning]\ncategories: MachineLearning\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n#Numpy\n　　numpy(Numerical Python extensions)是一个第三方的Python包，用于科学计算。本文主要讲学习Numpy过程中遇到的一个问题，关于numpy.dot()是怎运算的。<!--more-->\n\n##Numpy中多维数组的轴\n　　多维数组可以用numpy包生成，关于多维数组的运算以及定义等自行百度,主要讲多维数组的轴,这也是我学习时不懂的地方。\n\n{% note default %}\n　　多维数组的轴(axis)和该数组的size(或者)shape元素对应 。轴数从0开始，如果是二维，０轴是竖行，１轴是横行。具体看代码\n{% endnote %}\n\n```python\nx = np.random.randint(0,5,[3,2,2])\nprint(x)\nOut:\n  [[[5 2]\n    [4 2]]\n\n   [[1 3]\n    [2 3]]\n\n   [[1 1]\n    [0 1]]]\n\nx.sum(axis=0)\nOut:\n  array([[7, 6],\n        [6, 6]])\n\nx.sum(axis=1)\nOut:\n  array([[9, 4],\n         [3, 6],\n         [1, 2]])\n\nx.sum(axis=2)\nOut:\n  array([[7, 6],\n       [4, 5],\n       [2, 1]])\n```\n\n{% note info %} \n　　如果将三维数组的每一个二维看做一个平面（plane，X[0, :, :], X[1, :, :], X[2, :, :]），三维数组即是这些二维平面层叠（stacked）出来的结果。则（axis=0）表示全部平面上的对应位置，（axis=1），每一个平面的每一列，（axis=2），每一个平面的每一行。\n{% endnote %}\n\n#numpy.dot()\n　　*numpy.dot(a,b,out=None)*\n\n- 如果a和b都是一维数组，则进行内积运算\n\n```python\nnp.dot(3, 4)\nOut:\n  12\n\nnp.dot([2j, 3+3j], [2j, 3j])\nOut:\n  (-13+9j)\n```\n\n- 如果都是二维数组，就进行矩阵乘法，推荐`a@b`\n\n```python\na = [[1, 0], [0, 1]]\nb = [[4, 1], [2, 2]]\nnp.dot(a, b)\nOut:\n  array([[4, 1],\n         [2, 2]])\n```\n\n- 如果其中一个矩阵０秩，即标量，就进行`a*b`的运算，相乘\n- 如果a是N-D矩阵且b是1-D矩阵,就进行a的最后一个轴上的数据和b相乘并求和\n\n```python\n  a = array([[[ 1.,  2.,  3.,  4.],\n       [ 5.,  6.,  7.,  8.],\n       [ 9., 10., 11., 12.]],\n\n      [[ 1.,  2.,  3.,  4.],\n       [ 5.,  6.,  7.,  8.],\n       [ 9., 10., 11., 12.]]])\n  b = np.array([1,2,3,4])\n  np.dot(a, b)\n  Out:\n    array([[ 30.,  70., 110.],\n         [ 30.,  70., 110.]])\n```\n- 如果都是多维矩阵，则_a的最后一个轴和b的倒数第二个轴上的数据乘积累加_,类似第四种情况\n  `dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])`\n\n```python\n  a = np.arange(3*4*5*6).reshape((3,4,5,6))\n  b = np.arange(3*4*5*6)[::-1].reshape((5,4,6,3))\n  np.dot(a, b)[2,3,2,1,2,2]\n  Out:\n    499128\n  sum(a[2,3,2,:] * b[1,2,:,2])\n  Out:\n    499128\n```\n\n&nbsp;&nbsp;\n\n","slug":"numpy-dot-函数","published":1,"updated":"2019-07-20T12:10:19.195Z","layout":"post","photos":[],"link":"","_id":"cjycjtjx10044ussbrx38a1h4","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"Numpy\"><a href=\"#Numpy\" class=\"headerlink\" title=\"Numpy\"></a>Numpy</h1><p>　　numpy(Numerical Python extensions)是一个第三方的Python包，用于科学计算。本文主要讲学习Numpy过程中遇到的一个问题，关于numpy.dot()是怎运算的。<a id=\"more\"></a></p>\n<h2 id=\"Numpy中多维数组的轴\"><a href=\"#Numpy中多维数组的轴\" class=\"headerlink\" title=\"Numpy中多维数组的轴\"></a>Numpy中多维数组的轴</h2><p>　　多维数组可以用numpy包生成，关于多维数组的运算以及定义等自行百度,主要讲多维数组的轴,这也是我学习时不懂的地方。</p>\n<div class=\"note default\"><p>　　多维数组的轴(axis)和该数组的size(或者)shape元素对应 。轴数从0开始，如果是二维，０轴是竖行，１轴是横行。具体看代码</p></div>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">5</span>,[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>])</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  [[[<span class=\"number\">5</span> <span class=\"number\">2</span>]</span><br><span class=\"line\">    [<span class=\"number\">4</span> <span class=\"number\">2</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">   [[<span class=\"number\">1</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">    [<span class=\"number\">2</span> <span class=\"number\">3</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">   [[<span class=\"number\">1</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">    [<span class=\"number\">0</span> <span class=\"number\">1</span>]]]</span><br><span class=\"line\"></span><br><span class=\"line\">x.sum(axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  array([[<span class=\"number\">7</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">        [<span class=\"number\">6</span>, <span class=\"number\">6</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">x.sum(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  array([[<span class=\"number\">9</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">         [<span class=\"number\">3</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">         [<span class=\"number\">1</span>, <span class=\"number\">2</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">x.sum(axis=<span class=\"number\">2</span>)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  array([[<span class=\"number\">7</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">       [<span class=\"number\">4</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">       [<span class=\"number\">2</span>, <span class=\"number\">1</span>]])</span><br></pre></td></tr></table></figure>\n<div class=\"note info\"><p>　　如果将三维数组的每一个二维看做一个平面（plane，X[0, :, :], X[1, :, :], X[2, :, :]），三维数组即是这些二维平面层叠（stacked）出来的结果。则（axis=0）表示全部平面上的对应位置，（axis=1），每一个平面的每一列，（axis=2），每一个平面的每一行。</p></div>\n<h1 id=\"numpy-dot\"><a href=\"#numpy-dot\" class=\"headerlink\" title=\"numpy.dot()\"></a>numpy.dot()</h1><p>　　<em>numpy.dot(a,b,out=None)</em></p>\n<ul>\n<li>如果a和b都是一维数组，则进行内积运算</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">np.dot(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  <span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.dot([<span class=\"number\">2j</span>, <span class=\"number\">3</span>+<span class=\"number\">3j</span>], [<span class=\"number\">2j</span>, <span class=\"number\">3j</span>])</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  (<span class=\"number\">-13</span>+<span class=\"number\">9j</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果都是二维数组，就进行矩阵乘法，推荐<code>a@b</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [[<span class=\"number\">1</span>, <span class=\"number\">0</span>], [<span class=\"number\">0</span>, <span class=\"number\">1</span>]]</span><br><span class=\"line\">b = [[<span class=\"number\">4</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">2</span>]]</span><br><span class=\"line\">np.dot(a, b)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  array([[<span class=\"number\">4</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">         [<span class=\"number\">2</span>, <span class=\"number\">2</span>]])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果其中一个矩阵０秩，即标量，就进行<code>a*b</code>的运算，相乘</li>\n<li>如果a是N-D矩阵且b是1-D矩阵,就进行a的最后一个轴上的数据和b相乘并求和</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = array([[[ <span class=\"number\">1.</span>,  <span class=\"number\">2.</span>,  <span class=\"number\">3.</span>,  <span class=\"number\">4.</span>],</span><br><span class=\"line\">     [ <span class=\"number\">5.</span>,  <span class=\"number\">6.</span>,  <span class=\"number\">7.</span>,  <span class=\"number\">8.</span>],</span><br><span class=\"line\">     [ <span class=\"number\">9.</span>, <span class=\"number\">10.</span>, <span class=\"number\">11.</span>, <span class=\"number\">12.</span>]],</span><br><span class=\"line\"></span><br><span class=\"line\">    [[ <span class=\"number\">1.</span>,  <span class=\"number\">2.</span>,  <span class=\"number\">3.</span>,  <span class=\"number\">4.</span>],</span><br><span class=\"line\">     [ <span class=\"number\">5.</span>,  <span class=\"number\">6.</span>,  <span class=\"number\">7.</span>,  <span class=\"number\">8.</span>],</span><br><span class=\"line\">     [ <span class=\"number\">9.</span>, <span class=\"number\">10.</span>, <span class=\"number\">11.</span>, <span class=\"number\">12.</span>]]])</span><br><span class=\"line\">b = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\">np.dot(a, b)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  array([[ <span class=\"number\">30.</span>,  <span class=\"number\">70.</span>, <span class=\"number\">110.</span>],</span><br><span class=\"line\">       [ <span class=\"number\">30.</span>,  <span class=\"number\">70.</span>, <span class=\"number\">110.</span>]])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果都是多维矩阵，则_a的最后一个轴和b的倒数第二个轴上的数据乘积累加_,类似第四种情况<br><code>dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.arange(<span class=\"number\">3</span>*<span class=\"number\">4</span>*<span class=\"number\">5</span>*<span class=\"number\">6</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">b = np.arange(<span class=\"number\">3</span>*<span class=\"number\">4</span>*<span class=\"number\">5</span>*<span class=\"number\">6</span>)[::<span class=\"number\">-1</span>].reshape((<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">np.dot(a, b)[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  <span class=\"number\">499128</span></span><br><span class=\"line\">sum(a[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,:] * b[<span class=\"number\">1</span>,<span class=\"number\">2</span>,:,<span class=\"number\">2</span>])</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  <span class=\"number\">499128</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;</p>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"Numpy\"><a href=\"#Numpy\" class=\"headerlink\" title=\"Numpy\"></a>Numpy</h1><p>　　numpy(Numerical Python extensions)是一个第三方的Python包，用于科学计算。本文主要讲学习Numpy过程中遇到的一个问题，关于numpy.dot()是怎运算的。","more":"</p>\n<h2 id=\"Numpy中多维数组的轴\"><a href=\"#Numpy中多维数组的轴\" class=\"headerlink\" title=\"Numpy中多维数组的轴\"></a>Numpy中多维数组的轴</h2><p>　　多维数组可以用numpy包生成，关于多维数组的运算以及定义等自行百度,主要讲多维数组的轴,这也是我学习时不懂的地方。</p>\n<div class=\"note default\"><p>　　多维数组的轴(axis)和该数组的size(或者)shape元素对应 。轴数从0开始，如果是二维，０轴是竖行，１轴是横行。具体看代码</p></div>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">5</span>,[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>])</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  [[[<span class=\"number\">5</span> <span class=\"number\">2</span>]</span><br><span class=\"line\">    [<span class=\"number\">4</span> <span class=\"number\">2</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">   [[<span class=\"number\">1</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">    [<span class=\"number\">2</span> <span class=\"number\">3</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">   [[<span class=\"number\">1</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">    [<span class=\"number\">0</span> <span class=\"number\">1</span>]]]</span><br><span class=\"line\"></span><br><span class=\"line\">x.sum(axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  array([[<span class=\"number\">7</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">        [<span class=\"number\">6</span>, <span class=\"number\">6</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">x.sum(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  array([[<span class=\"number\">9</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">         [<span class=\"number\">3</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">         [<span class=\"number\">1</span>, <span class=\"number\">2</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">x.sum(axis=<span class=\"number\">2</span>)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  array([[<span class=\"number\">7</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">       [<span class=\"number\">4</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">       [<span class=\"number\">2</span>, <span class=\"number\">1</span>]])</span><br></pre></td></tr></table></figure>\n<div class=\"note info\"><p>　　如果将三维数组的每一个二维看做一个平面（plane，X[0, :, :], X[1, :, :], X[2, :, :]），三维数组即是这些二维平面层叠（stacked）出来的结果。则（axis=0）表示全部平面上的对应位置，（axis=1），每一个平面的每一列，（axis=2），每一个平面的每一行。</p></div>\n<h1 id=\"numpy-dot\"><a href=\"#numpy-dot\" class=\"headerlink\" title=\"numpy.dot()\"></a>numpy.dot()</h1><p>　　<em>numpy.dot(a,b,out=None)</em></p>\n<ul>\n<li>如果a和b都是一维数组，则进行内积运算</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">np.dot(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  <span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.dot([<span class=\"number\">2j</span>, <span class=\"number\">3</span>+<span class=\"number\">3j</span>], [<span class=\"number\">2j</span>, <span class=\"number\">3j</span>])</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  (<span class=\"number\">-13</span>+<span class=\"number\">9j</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果都是二维数组，就进行矩阵乘法，推荐<code>a@b</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [[<span class=\"number\">1</span>, <span class=\"number\">0</span>], [<span class=\"number\">0</span>, <span class=\"number\">1</span>]]</span><br><span class=\"line\">b = [[<span class=\"number\">4</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">2</span>]]</span><br><span class=\"line\">np.dot(a, b)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  array([[<span class=\"number\">4</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">         [<span class=\"number\">2</span>, <span class=\"number\">2</span>]])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果其中一个矩阵０秩，即标量，就进行<code>a*b</code>的运算，相乘</li>\n<li>如果a是N-D矩阵且b是1-D矩阵,就进行a的最后一个轴上的数据和b相乘并求和</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = array([[[ <span class=\"number\">1.</span>,  <span class=\"number\">2.</span>,  <span class=\"number\">3.</span>,  <span class=\"number\">4.</span>],</span><br><span class=\"line\">     [ <span class=\"number\">5.</span>,  <span class=\"number\">6.</span>,  <span class=\"number\">7.</span>,  <span class=\"number\">8.</span>],</span><br><span class=\"line\">     [ <span class=\"number\">9.</span>, <span class=\"number\">10.</span>, <span class=\"number\">11.</span>, <span class=\"number\">12.</span>]],</span><br><span class=\"line\"></span><br><span class=\"line\">    [[ <span class=\"number\">1.</span>,  <span class=\"number\">2.</span>,  <span class=\"number\">3.</span>,  <span class=\"number\">4.</span>],</span><br><span class=\"line\">     [ <span class=\"number\">5.</span>,  <span class=\"number\">6.</span>,  <span class=\"number\">7.</span>,  <span class=\"number\">8.</span>],</span><br><span class=\"line\">     [ <span class=\"number\">9.</span>, <span class=\"number\">10.</span>, <span class=\"number\">11.</span>, <span class=\"number\">12.</span>]]])</span><br><span class=\"line\">b = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\">np.dot(a, b)</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  array([[ <span class=\"number\">30.</span>,  <span class=\"number\">70.</span>, <span class=\"number\">110.</span>],</span><br><span class=\"line\">       [ <span class=\"number\">30.</span>,  <span class=\"number\">70.</span>, <span class=\"number\">110.</span>]])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果都是多维矩阵，则_a的最后一个轴和b的倒数第二个轴上的数据乘积累加_,类似第四种情况<br><code>dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.arange(<span class=\"number\">3</span>*<span class=\"number\">4</span>*<span class=\"number\">5</span>*<span class=\"number\">6</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">b = np.arange(<span class=\"number\">3</span>*<span class=\"number\">4</span>*<span class=\"number\">5</span>*<span class=\"number\">6</span>)[::<span class=\"number\">-1</span>].reshape((<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">np.dot(a, b)[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  <span class=\"number\">499128</span></span><br><span class=\"line\">sum(a[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,:] * b[<span class=\"number\">1</span>,<span class=\"number\">2</span>,:,<span class=\"number\">2</span>])</span><br><span class=\"line\">Out:</span><br><span class=\"line\">  <span class=\"number\">499128</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;</p>"},{"title":"MNIST入门-手写数字识别问题集锦","comments":1,"mathjax":false,"date":"2019-04-17T18:12:37.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n记录一下手写数字识别这个项目过程中遇到的问题，以及解决方法，还有一些图像处理方面的文章推荐\n{% endnote %}\n<!--more-->\n## canvas画笔位置有偏移\n- 使用`window.innerHeight || document.documentElement.clientHeight`语句获取视窗高度，同理获得宽度\n- 移动端获得视窗的高度和宽度后，根据高视窗的大小设置canvas大小，以及下方按钮文字等大小\n- PC端通过canvas的`mousedown、mousemove、mouseup`这三个事件绘图，画笔的起始点和新点用`event.clientX - canvas.offsetLeft`获取x，同理获取y,\n- 移动端用`touchstart、touchmove、touchend`这三个事件，画笔的起始点和终点都用`event.targetTouches[0].clientX - canvas.offsetLeft`获取x，`event.targetTouches[0].clientY - canvas.offsetTop`获取y\n\n## canvas用二次贝塞尔曲线绘图\n**PC端mousemove事件代码**\n\n```javascript\n//PC端鼠标移动\nfunction draw(event) {\n  if (onoff == true) {\n    //获取新点和中点\n    var newx = event.clientX - canvas.offsetLeft;\n    var newy = event.clientY - canvas.offsetTop;\n    midx = 0.5*(newx+oldx);\n    midy = 0.5*(newy+oldy);\n\n    //设置粗细和颜色\n    ctx.lineWidth = linew;\n    ctx.strokeStyle = linecolor;\n    ctx.lineCap = 'round';\n\n    //绘制二次贝塞尔\n    ctx.moveTo(oldx,oldy);\n    ctx.quadraticCurveTo( midx , midy , newx , newy );\n    ctx.stroke();\n\n    //转移新旧坐标\n    oldx = newx;\n    oldy = newy;\n  };\n}\n```\n\n**mobile端mousemove事件代码**\n\n```javascript\n//移动端手指移动\nfunction tMove(event){\n  //获取新点和中点\n  var touche = event.targetTouches[0];\n  var newx = touche.clientX - canvas.offsetLeft;\n  var newy = touche.clientY - canvas.offsetTop;\n  midx = 0.5*(newx+oldx);\n  midy = 0.5*(newy+oldy);\n\n  //设置粗细和颜色\n  ctx.lineWidth = linew;\n  ctx.strokeStyle = linecolor;\n  ctx.lineCap = 'round'\n\n  ctx.beginPath();\n  ctx.moveTo(oldx,oldy);\n  ctx.quadraticCurveTo(midx,midy,newx,newy);\n  ctx.stroke();\n\n  oldx = newx;\n  oldy = newy;\n}\n```\n\n## canvas的imageData像素级缩放\n想要获得canvas上的图像并且缩放到28\\*28，使用scale方法是不行的，必须获取所有的像素RGBA值，然后横向隔一段取一个点，竖向隔几行取一行，一共横向每行取28个像素点，竖向取28行\n\n代码如下：\n\n```javascript\n//缩放imageData,scale:倍数,返回:imageData\nfunction scaleImageData(imageData, scale) {\n  var scaled =\n      ctx.createImageData(imageData.width * scale, imageData.height * scale);\n  for (var row = 0; row < imageData.height; row++) {\n    for (var col = 0; col < imageData.width; col++) {\n      var sourcePixel = [\n        imageData.data[(row * imageData.width + col) * 4 + 0],\n        imageData.data[(row * imageData.width + col) * 4 + 1],\n        imageData.data[(row * imageData.width + col) * 4 + 2],\n        imageData.data[(row * imageData.width + col) * 4 + 3]\n      ];\n      for (var y = 0; y < scale; y++) {\n        var destRow = Math.floor(row * scale) + y;\n        for (var x = 0; x < scale; x++) {\n          var destCol = Math.floor(col * scale) + x;\n          for (var i = 0; i < 4; i++) {\n            scaled.data[(destRow * scaled.width + destCol) * 4 + i] = sourcePixel[i];\n          }\n        }\n      }\n    }\n  }\n//  alert(scaled.data.length);\n  return scaled;\n}\n```\n\n## 获取服务器的ip\n这里取巧了，直接从浏览器显示部分获取\n代码如下：\n\n```java\n//获取服务器ip，运行时urlPath为https://192.168.137.1:8000/\nfunction getRemoteIp(){\n  var urlPath = window.document.location.href;  //浏览器显示地址 http://10.15.5.83:5555/ISV/demo.aspx?a=1&b=2\n  // var docPath = window.document.location.pathname; //文件在服务器相对地址 /ISV/demo.aspx\n  // var index = urlPath.indexOf(docPath);\n  var serverPath = urlPath.substring(7, urlPath.length-1);//服务器ip 192.168.137.1\n  return serverPath;\n}\n```\n\n## UA检测\n因为要适配移动端和PC端，所以简单的UA检测还是必要的，这里没有做的很复杂   \n主要就是通过检测`navigator.platfowm`中的关键词来判断\n\n代码如下：\n\n```java\nvar ua = navigator.userAgent; \nvar system = {\n  win : false,\n  mac : false,\n  linux : false,\n  // mobile\n  iphone : false,\n  android : false,\n};\n\nvar p = navigator.platform;\nsystem.win = p.indexOf('Win') == 0;\nsystem.mac = p.indexOf('Mac') == 0;\nsystem.linux = p.indexOf('Linux') == 0;\nsystem.iphone = ua.indexOf('iPhone') > -1;\nsystem.android = ua.indexOf('Android') > -1\n\nif(system.win||system.mac){\n    ...\n} else if(system.android||system.iphone){\n    ...\n}\n```\n\n## python根据数组生成图片\ndtype一定要写的，不写生成错误\nimgData就是图片的RGBA数据数组，要转成np数组才可以用PIL的Image.fromarray()\n\n```python\narray = np.asarray(imgData, dtype=np.uint8)\nimage = Image.fromarray(array, 'RGBA') \nimage.save(outputImgPath + imgName +'.png')\n```\n\n## 将RGBA转换为RGB格式数组\n网上看了很多，有用PIL的，还有直接写算法转换的，用opencv的...很多  \n这里发现PIL的不好用，读出来还是RGBA的格式，而且没办法用函数在数组上转换\n\n最后解决办法是:\n- 从前端传过来的数据是字典类型，先获取values()\n- 将dict.vlues这个数组转换为ndarray数组\n- 转换完了,再把这个RGBA数组用 PIL 转换为图片\n- 用save()方法保存为临时图片\n- 用opencv读取临时图片的RGB通道的数据\n\n```java\n# 将图片数据转换为ndarray类型\nnpData = np.array(imageData,dtype=np.uint8).reshape(28,28,4)\n# 将RGBA格式数组转换为图片\nimage = Image.fromarray(npData, 'RGBA') \n# 保存临时图片\nimage.save('static/images/npimg.png')\n\n# 用opencv读取图片的RGB数据\nrgbImage = cv2.imread('static/images/npimg.png', cv2.IMREAD_COLOR) \n```\n\n## cv2.imread(path[, flags])\ncv2的imread函数的第二个参数这里说明下:\n> 如果不设置，读进来的是BGR格式的数据，值在0-255,flag一共有3个取值\n> cv2.IMREAD_COLOR : 读入彩色图片,任何与透明度相关通道的会被忽视,默认以这种方式读入.\n> cv2.IMREAD_GRAYSCALE : 以灰度图的形式读入图片\n> cv2.IMREAD_UNCHANGED : 保留读取图片原有的颜色通道.\n\n可以简单的用**-1,0,1**来分别表示这3个flag\n\n\n## Python图像处理\n### 图片的读写方式总结\n找到一个很全的博客，推荐一下：[Python各类图像库的图片读写方式总结](https://www.jb51.net/article/135307.htm)\n\n### opencv的基本操作\n推荐看看这篇文章：[点击跳转](https://www.jianshu.com/p/ed00179ede34)\n\n### tensorflow简单的图像处理\n推荐链接：[使用TensorFlow进行简单的图像处理](https://blog.csdn.net/jia20003/article/details/79118769)\n\n### PIL格式转换\n推荐链接：[Python图像处理库PIL中图像格式转换（一）](https://blog.csdn.net/icamera0/article/details/50843172)\n\n## 对图片灰度化\n如果只是灰度的话可以用PIL的convert函数，很方便，但是这里要用tensorflow，所以得用`tf.image_to_grayscale(imageData)`这个函数。注意事先要先将数据格式转换为`tf.float32`类型的\n\n```python\n# 将rgb图片转换为float32格式\nrgbImage = tf.image.convert_image_dtype(rgbImage, tf.float32)\n# 将图片灰度化得到(28,28,1)格式的tensor\nrgbImage = tf.image.rgb_to_grayscale(rgbImage\n```\n\n## 后端改变图片的背景和画笔颜色数据\n出于美观，前端并不是黑底白字，但是模型训练的是黑底白字的，虽然后面测试用了灰度数据，还是会不准确，所以在数据处理前，对imageData中的部分像素进行修改，将橙色变为黑色，黑色画笔变为白色\n\n```python\n# 将橙色的背景转换为黑色,将画笔的黑色转为白色\n# input: RGBA格式图片数据\n# output: 修改过的RGBA格式图片数据\ndef reveBlack(imageData):\n    for i in range(0,len(imageData),4):\n        # 如果画笔为白色\n        if imageData[i]==0 and imageData[i+1]==0 and imageData[i+2]==0:\n            imageData[i]=imageData[i+1]=imageData[i+2]=255\n        # 如果背景为橙色\n        if imageData[i]==255 and imageData[i+1]==165 and imageData[i+2]==0:\n            imageData[i]=imageData[i+1]=imageData[i+2]=0\n    return imageDat\n```\n\n## tensor和numpy数组转换\n### tensor转ndarray\n由于项目里面是模型恢复，所以没有初始化这步\n有两种方法：\n\n```python\n### 将tensor转换为ndarray\ninit = tf.initialize_all_variables()\nwith tf.Session() as sess:\n    sess.run(init)\n    # 第一种\n    ndName = tensorName1.eval(session=sess)\n    #第二种\n    ndName = sess.run(tensorName2)\n```\n\n\n## ndarray转tensor\n\n```python\n# 将ndarray转换为tensor\ntensorName =  tf.convert_to_tensor(ndName, dtype = tf.float32)\n```\n\n\n## 使用训练好的模型\n**参考链接：**[言初见的CSDN博客](https://blog.csdn.net/yanchujian88/article/details/80559936)\n\n训练用的算法是Lenet-5，下面的代码是部分调用模型代码，因为只有一张图片的数据，并不是用整个测试集，所以有些地方会有点不一样\n\n主要还是通过恢复模型，传入图片数据来获得预测结果\n\n注意点：\n1. x占位符的shape，要注意个train的一致，第一个shape要是1，因为只有一个图片\n2. 使用tf.argmax(y,1)函数获得最大预测的下标,这里就是结果了，因为是0-9正好对应了下标\n3. 输入的feed_dict测试数据必须是ndarray，不可以是tensor，因此要转换以下\n\n代码如下：\n\n```python\n# 定义输入格式(1,28,28,1)\nx = tf.placeholder(tf.float32, [1, \n                                mnist_inference.IMAGE_SIZE, \n                                mnist_inference.IMAGE_SIZE, \n                                mnist_inference.NUM_CHANNEL], \n                                name='x-input')\n#直接通过调用封装好的函数来计算前向传播的结果 \ny = mnist_inference.interence(x,None, None)\n\n#使用tf.argmax(y, 1)就可以得到输入样例的预测类别 \nprediction = tf.argmax(y, 1)\n\n# 通过变量重命名的方式来加载模型\n# 所有滑动平均的值组成的字典,处在/ExponentialMovingAverage下的值  \n# 为了方便加载时重命名滑动平均量，tf.train.ExponentialMovingAverage类  \n# 提供了variables_to_store函数来生成tf.train.Saver类所需要的变量  \n# 这些值要从模型中提取\nvariable_averages = tf.train.ExponentialMovingAverage(mnist_train.MOVING_AVERAGE_DECAY)\nvariable_to_restore = variable_averages.variables_to_restore()\nsaver = tf.train.Saver(variable_to_restore)\n\n# 用数据测试模型\nwith tf.Session() as sess: \n    # get_checkoutpoint_state()会通过checkoutpoint文件自动找到目录中最新模型的文件名\n    ckpt = tf.train.get_checkpoint_state(mnist_train.MODEL_PATH)\n    if ckpt and ckpt.model_checkpoint_path:\n        # 加载模型\n        saver.restore(sess, ckpt.model_checkpoint_path)\n\n        # 将tensor转换为np数组,这里也可以用np的reshape方法\n        rgbNpData = tf.reshape(rgbImage,[1,\n                                            mnist_inference.IMAGE_SIZE, \n                                            mnist_inference.IMAGE_SIZE, \n                                            mnist_inference.NUM_CHANNEL])\n        # 将tensor转换为ndarray\n        reshaped_data = rgbNpData.eval()\n        # 将输入的测试数据格式调整为一个四维矩阵\n        validate_feed = {x: reshaped_data}\n\n        # 获得预测的结果数组\n        predictionNum = sess.run(prediction, feed_dict = validate_feed)\n        print(\"Number is %d\" %(predictionNum[0]))\n\ntf.reset_default_graph()\n```\n\n## 报错：Error: the tensor's graph is different from the session's graph\n这是因为session里面的图和使用的图不一样导致的，刚开始不清楚，把参考的博客上面的那句： with tf.Graph().as_default() as g:写上去了，导致默认图被设置成了g，但是用的又是恢复的图，所以不一样了\n\n解决办法炒鸡简单...但是debug的过程里就一直没意识到就是了...就是把那句话去掉就行了哇\n\n## 报错：List of Tensors when single Tensor expected\n使用tf.constant()函数的时候可能会报这个错误\n\n看看这个函数的定义：\n> def constant(value, dtype=None, shape=None, name=\"Const\", verify_shape=False)\n> value: A constant value (or list) of output type dtype.\n> Returns: A Constant Tensor.\n\n问题也应该清楚了，constant要求输入的是list，用的时候如果传入了tensor类型的，当然就不可以了\n\n## 总结\n遇到的问题还是很多的，好几个bug都折磨了我几个小时，找不到bug在哪太艰难了，深深的感受到要学了点基础再来做项目，就说这个tensorflow，没有大致的学一遍，遇到问题完全就是无头苍蝇，不好排错\n\n一个项目学到的东西还是挺多的，实战真的很重要啊\n","source":"_posts/MNIST入门-手写数字识别问题集锦.md","raw":"---\ntitle: MNIST入门-手写数字识别问题集锦\ncomments: true\nmathjax: false\ndate: 2019-04-18 02:12:37\ntags: [Daily, MNIST, Tensorflow, LeNet-5, Problems,ML]\ncategories: MachineLearning\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n记录一下手写数字识别这个项目过程中遇到的问题，以及解决方法，还有一些图像处理方面的文章推荐\n{% endnote %}\n<!--more-->\n## canvas画笔位置有偏移\n- 使用`window.innerHeight || document.documentElement.clientHeight`语句获取视窗高度，同理获得宽度\n- 移动端获得视窗的高度和宽度后，根据高视窗的大小设置canvas大小，以及下方按钮文字等大小\n- PC端通过canvas的`mousedown、mousemove、mouseup`这三个事件绘图，画笔的起始点和新点用`event.clientX - canvas.offsetLeft`获取x，同理获取y,\n- 移动端用`touchstart、touchmove、touchend`这三个事件，画笔的起始点和终点都用`event.targetTouches[0].clientX - canvas.offsetLeft`获取x，`event.targetTouches[0].clientY - canvas.offsetTop`获取y\n\n## canvas用二次贝塞尔曲线绘图\n**PC端mousemove事件代码**\n\n```javascript\n//PC端鼠标移动\nfunction draw(event) {\n  if (onoff == true) {\n    //获取新点和中点\n    var newx = event.clientX - canvas.offsetLeft;\n    var newy = event.clientY - canvas.offsetTop;\n    midx = 0.5*(newx+oldx);\n    midy = 0.5*(newy+oldy);\n\n    //设置粗细和颜色\n    ctx.lineWidth = linew;\n    ctx.strokeStyle = linecolor;\n    ctx.lineCap = 'round';\n\n    //绘制二次贝塞尔\n    ctx.moveTo(oldx,oldy);\n    ctx.quadraticCurveTo( midx , midy , newx , newy );\n    ctx.stroke();\n\n    //转移新旧坐标\n    oldx = newx;\n    oldy = newy;\n  };\n}\n```\n\n**mobile端mousemove事件代码**\n\n```javascript\n//移动端手指移动\nfunction tMove(event){\n  //获取新点和中点\n  var touche = event.targetTouches[0];\n  var newx = touche.clientX - canvas.offsetLeft;\n  var newy = touche.clientY - canvas.offsetTop;\n  midx = 0.5*(newx+oldx);\n  midy = 0.5*(newy+oldy);\n\n  //设置粗细和颜色\n  ctx.lineWidth = linew;\n  ctx.strokeStyle = linecolor;\n  ctx.lineCap = 'round'\n\n  ctx.beginPath();\n  ctx.moveTo(oldx,oldy);\n  ctx.quadraticCurveTo(midx,midy,newx,newy);\n  ctx.stroke();\n\n  oldx = newx;\n  oldy = newy;\n}\n```\n\n## canvas的imageData像素级缩放\n想要获得canvas上的图像并且缩放到28\\*28，使用scale方法是不行的，必须获取所有的像素RGBA值，然后横向隔一段取一个点，竖向隔几行取一行，一共横向每行取28个像素点，竖向取28行\n\n代码如下：\n\n```javascript\n//缩放imageData,scale:倍数,返回:imageData\nfunction scaleImageData(imageData, scale) {\n  var scaled =\n      ctx.createImageData(imageData.width * scale, imageData.height * scale);\n  for (var row = 0; row < imageData.height; row++) {\n    for (var col = 0; col < imageData.width; col++) {\n      var sourcePixel = [\n        imageData.data[(row * imageData.width + col) * 4 + 0],\n        imageData.data[(row * imageData.width + col) * 4 + 1],\n        imageData.data[(row * imageData.width + col) * 4 + 2],\n        imageData.data[(row * imageData.width + col) * 4 + 3]\n      ];\n      for (var y = 0; y < scale; y++) {\n        var destRow = Math.floor(row * scale) + y;\n        for (var x = 0; x < scale; x++) {\n          var destCol = Math.floor(col * scale) + x;\n          for (var i = 0; i < 4; i++) {\n            scaled.data[(destRow * scaled.width + destCol) * 4 + i] = sourcePixel[i];\n          }\n        }\n      }\n    }\n  }\n//  alert(scaled.data.length);\n  return scaled;\n}\n```\n\n## 获取服务器的ip\n这里取巧了，直接从浏览器显示部分获取\n代码如下：\n\n```java\n//获取服务器ip，运行时urlPath为https://192.168.137.1:8000/\nfunction getRemoteIp(){\n  var urlPath = window.document.location.href;  //浏览器显示地址 http://10.15.5.83:5555/ISV/demo.aspx?a=1&b=2\n  // var docPath = window.document.location.pathname; //文件在服务器相对地址 /ISV/demo.aspx\n  // var index = urlPath.indexOf(docPath);\n  var serverPath = urlPath.substring(7, urlPath.length-1);//服务器ip 192.168.137.1\n  return serverPath;\n}\n```\n\n## UA检测\n因为要适配移动端和PC端，所以简单的UA检测还是必要的，这里没有做的很复杂   \n主要就是通过检测`navigator.platfowm`中的关键词来判断\n\n代码如下：\n\n```java\nvar ua = navigator.userAgent; \nvar system = {\n  win : false,\n  mac : false,\n  linux : false,\n  // mobile\n  iphone : false,\n  android : false,\n};\n\nvar p = navigator.platform;\nsystem.win = p.indexOf('Win') == 0;\nsystem.mac = p.indexOf('Mac') == 0;\nsystem.linux = p.indexOf('Linux') == 0;\nsystem.iphone = ua.indexOf('iPhone') > -1;\nsystem.android = ua.indexOf('Android') > -1\n\nif(system.win||system.mac){\n    ...\n} else if(system.android||system.iphone){\n    ...\n}\n```\n\n## python根据数组生成图片\ndtype一定要写的，不写生成错误\nimgData就是图片的RGBA数据数组，要转成np数组才可以用PIL的Image.fromarray()\n\n```python\narray = np.asarray(imgData, dtype=np.uint8)\nimage = Image.fromarray(array, 'RGBA') \nimage.save(outputImgPath + imgName +'.png')\n```\n\n## 将RGBA转换为RGB格式数组\n网上看了很多，有用PIL的，还有直接写算法转换的，用opencv的...很多  \n这里发现PIL的不好用，读出来还是RGBA的格式，而且没办法用函数在数组上转换\n\n最后解决办法是:\n- 从前端传过来的数据是字典类型，先获取values()\n- 将dict.vlues这个数组转换为ndarray数组\n- 转换完了,再把这个RGBA数组用 PIL 转换为图片\n- 用save()方法保存为临时图片\n- 用opencv读取临时图片的RGB通道的数据\n\n```java\n# 将图片数据转换为ndarray类型\nnpData = np.array(imageData,dtype=np.uint8).reshape(28,28,4)\n# 将RGBA格式数组转换为图片\nimage = Image.fromarray(npData, 'RGBA') \n# 保存临时图片\nimage.save('static/images/npimg.png')\n\n# 用opencv读取图片的RGB数据\nrgbImage = cv2.imread('static/images/npimg.png', cv2.IMREAD_COLOR) \n```\n\n## cv2.imread(path[, flags])\ncv2的imread函数的第二个参数这里说明下:\n> 如果不设置，读进来的是BGR格式的数据，值在0-255,flag一共有3个取值\n> cv2.IMREAD_COLOR : 读入彩色图片,任何与透明度相关通道的会被忽视,默认以这种方式读入.\n> cv2.IMREAD_GRAYSCALE : 以灰度图的形式读入图片\n> cv2.IMREAD_UNCHANGED : 保留读取图片原有的颜色通道.\n\n可以简单的用**-1,0,1**来分别表示这3个flag\n\n\n## Python图像处理\n### 图片的读写方式总结\n找到一个很全的博客，推荐一下：[Python各类图像库的图片读写方式总结](https://www.jb51.net/article/135307.htm)\n\n### opencv的基本操作\n推荐看看这篇文章：[点击跳转](https://www.jianshu.com/p/ed00179ede34)\n\n### tensorflow简单的图像处理\n推荐链接：[使用TensorFlow进行简单的图像处理](https://blog.csdn.net/jia20003/article/details/79118769)\n\n### PIL格式转换\n推荐链接：[Python图像处理库PIL中图像格式转换（一）](https://blog.csdn.net/icamera0/article/details/50843172)\n\n## 对图片灰度化\n如果只是灰度的话可以用PIL的convert函数，很方便，但是这里要用tensorflow，所以得用`tf.image_to_grayscale(imageData)`这个函数。注意事先要先将数据格式转换为`tf.float32`类型的\n\n```python\n# 将rgb图片转换为float32格式\nrgbImage = tf.image.convert_image_dtype(rgbImage, tf.float32)\n# 将图片灰度化得到(28,28,1)格式的tensor\nrgbImage = tf.image.rgb_to_grayscale(rgbImage\n```\n\n## 后端改变图片的背景和画笔颜色数据\n出于美观，前端并不是黑底白字，但是模型训练的是黑底白字的，虽然后面测试用了灰度数据，还是会不准确，所以在数据处理前，对imageData中的部分像素进行修改，将橙色变为黑色，黑色画笔变为白色\n\n```python\n# 将橙色的背景转换为黑色,将画笔的黑色转为白色\n# input: RGBA格式图片数据\n# output: 修改过的RGBA格式图片数据\ndef reveBlack(imageData):\n    for i in range(0,len(imageData),4):\n        # 如果画笔为白色\n        if imageData[i]==0 and imageData[i+1]==0 and imageData[i+2]==0:\n            imageData[i]=imageData[i+1]=imageData[i+2]=255\n        # 如果背景为橙色\n        if imageData[i]==255 and imageData[i+1]==165 and imageData[i+2]==0:\n            imageData[i]=imageData[i+1]=imageData[i+2]=0\n    return imageDat\n```\n\n## tensor和numpy数组转换\n### tensor转ndarray\n由于项目里面是模型恢复，所以没有初始化这步\n有两种方法：\n\n```python\n### 将tensor转换为ndarray\ninit = tf.initialize_all_variables()\nwith tf.Session() as sess:\n    sess.run(init)\n    # 第一种\n    ndName = tensorName1.eval(session=sess)\n    #第二种\n    ndName = sess.run(tensorName2)\n```\n\n\n## ndarray转tensor\n\n```python\n# 将ndarray转换为tensor\ntensorName =  tf.convert_to_tensor(ndName, dtype = tf.float32)\n```\n\n\n## 使用训练好的模型\n**参考链接：**[言初见的CSDN博客](https://blog.csdn.net/yanchujian88/article/details/80559936)\n\n训练用的算法是Lenet-5，下面的代码是部分调用模型代码，因为只有一张图片的数据，并不是用整个测试集，所以有些地方会有点不一样\n\n主要还是通过恢复模型，传入图片数据来获得预测结果\n\n注意点：\n1. x占位符的shape，要注意个train的一致，第一个shape要是1，因为只有一个图片\n2. 使用tf.argmax(y,1)函数获得最大预测的下标,这里就是结果了，因为是0-9正好对应了下标\n3. 输入的feed_dict测试数据必须是ndarray，不可以是tensor，因此要转换以下\n\n代码如下：\n\n```python\n# 定义输入格式(1,28,28,1)\nx = tf.placeholder(tf.float32, [1, \n                                mnist_inference.IMAGE_SIZE, \n                                mnist_inference.IMAGE_SIZE, \n                                mnist_inference.NUM_CHANNEL], \n                                name='x-input')\n#直接通过调用封装好的函数来计算前向传播的结果 \ny = mnist_inference.interence(x,None, None)\n\n#使用tf.argmax(y, 1)就可以得到输入样例的预测类别 \nprediction = tf.argmax(y, 1)\n\n# 通过变量重命名的方式来加载模型\n# 所有滑动平均的值组成的字典,处在/ExponentialMovingAverage下的值  \n# 为了方便加载时重命名滑动平均量，tf.train.ExponentialMovingAverage类  \n# 提供了variables_to_store函数来生成tf.train.Saver类所需要的变量  \n# 这些值要从模型中提取\nvariable_averages = tf.train.ExponentialMovingAverage(mnist_train.MOVING_AVERAGE_DECAY)\nvariable_to_restore = variable_averages.variables_to_restore()\nsaver = tf.train.Saver(variable_to_restore)\n\n# 用数据测试模型\nwith tf.Session() as sess: \n    # get_checkoutpoint_state()会通过checkoutpoint文件自动找到目录中最新模型的文件名\n    ckpt = tf.train.get_checkpoint_state(mnist_train.MODEL_PATH)\n    if ckpt and ckpt.model_checkpoint_path:\n        # 加载模型\n        saver.restore(sess, ckpt.model_checkpoint_path)\n\n        # 将tensor转换为np数组,这里也可以用np的reshape方法\n        rgbNpData = tf.reshape(rgbImage,[1,\n                                            mnist_inference.IMAGE_SIZE, \n                                            mnist_inference.IMAGE_SIZE, \n                                            mnist_inference.NUM_CHANNEL])\n        # 将tensor转换为ndarray\n        reshaped_data = rgbNpData.eval()\n        # 将输入的测试数据格式调整为一个四维矩阵\n        validate_feed = {x: reshaped_data}\n\n        # 获得预测的结果数组\n        predictionNum = sess.run(prediction, feed_dict = validate_feed)\n        print(\"Number is %d\" %(predictionNum[0]))\n\ntf.reset_default_graph()\n```\n\n## 报错：Error: the tensor's graph is different from the session's graph\n这是因为session里面的图和使用的图不一样导致的，刚开始不清楚，把参考的博客上面的那句： with tf.Graph().as_default() as g:写上去了，导致默认图被设置成了g，但是用的又是恢复的图，所以不一样了\n\n解决办法炒鸡简单...但是debug的过程里就一直没意识到就是了...就是把那句话去掉就行了哇\n\n## 报错：List of Tensors when single Tensor expected\n使用tf.constant()函数的时候可能会报这个错误\n\n看看这个函数的定义：\n> def constant(value, dtype=None, shape=None, name=\"Const\", verify_shape=False)\n> value: A constant value (or list) of output type dtype.\n> Returns: A Constant Tensor.\n\n问题也应该清楚了，constant要求输入的是list，用的时候如果传入了tensor类型的，当然就不可以了\n\n## 总结\n遇到的问题还是很多的，好几个bug都折磨了我几个小时，找不到bug在哪太艰难了，深深的感受到要学了点基础再来做项目，就说这个tensorflow，没有大致的学一遍，遇到问题完全就是无头苍蝇，不好排错\n\n一个项目学到的东西还是挺多的，实战真的很重要啊\n","slug":"MNIST入门-手写数字识别问题集锦","published":1,"updated":"2019-07-20T12:10:19.195Z","layout":"post","photos":[],"link":"","_id":"cjycjtjy80071ussbh04fivcd","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><p>记录一下手写数字识别这个项目过程中遇到的问题，以及解决方法，还有一些图像处理方面的文章推荐</p></div>\n<a id=\"more\"></a>\n<h2 id=\"canvas画笔位置有偏移\"><a href=\"#canvas画笔位置有偏移\" class=\"headerlink\" title=\"canvas画笔位置有偏移\"></a>canvas画笔位置有偏移</h2><ul>\n<li>使用<code>window.innerHeight || document.documentElement.clientHeight</code>语句获取视窗高度，同理获得宽度</li>\n<li>移动端获得视窗的高度和宽度后，根据高视窗的大小设置canvas大小，以及下方按钮文字等大小</li>\n<li>PC端通过canvas的<code>mousedown、mousemove、mouseup</code>这三个事件绘图，画笔的起始点和新点用<code>event.clientX - canvas.offsetLeft</code>获取x，同理获取y,</li>\n<li>移动端用<code>touchstart、touchmove、touchend</code>这三个事件，画笔的起始点和终点都用<code>event.targetTouches[0].clientX - canvas.offsetLeft</code>获取x，<code>event.targetTouches[0].clientY - canvas.offsetTop</code>获取y</li>\n</ul>\n<h2 id=\"canvas用二次贝塞尔曲线绘图\"><a href=\"#canvas用二次贝塞尔曲线绘图\" class=\"headerlink\" title=\"canvas用二次贝塞尔曲线绘图\"></a>canvas用二次贝塞尔曲线绘图</h2><p><strong>PC端mousemove事件代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//PC端鼠标移动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (onoff == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取新点和中点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newx = event.clientX - canvas.offsetLeft;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newy = event.clientY - canvas.offsetTop;</span><br><span class=\"line\">    midx = <span class=\"number\">0.5</span>*(newx+oldx);</span><br><span class=\"line\">    midy = <span class=\"number\">0.5</span>*(newy+oldy);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置粗细和颜色</span></span><br><span class=\"line\">    ctx.lineWidth = linew;</span><br><span class=\"line\">    ctx.strokeStyle = linecolor;</span><br><span class=\"line\">    ctx.lineCap = <span class=\"string\">'round'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制二次贝塞尔</span></span><br><span class=\"line\">    ctx.moveTo(oldx,oldy);</span><br><span class=\"line\">    ctx.quadraticCurveTo( midx , midy , newx , newy );</span><br><span class=\"line\">    ctx.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//转移新旧坐标</span></span><br><span class=\"line\">    oldx = newx;</span><br><span class=\"line\">    oldy = newy;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>mobile端mousemove事件代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//移动端手指移动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tMove</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//获取新点和中点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> touche = event.targetTouches[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newx = touche.clientX - canvas.offsetLeft;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newy = touche.clientY - canvas.offsetTop;</span><br><span class=\"line\">  midx = <span class=\"number\">0.5</span>*(newx+oldx);</span><br><span class=\"line\">  midy = <span class=\"number\">0.5</span>*(newy+oldy);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//设置粗细和颜色</span></span><br><span class=\"line\">  ctx.lineWidth = linew;</span><br><span class=\"line\">  ctx.strokeStyle = linecolor;</span><br><span class=\"line\">  ctx.lineCap = <span class=\"string\">'round'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\">  ctx.moveTo(oldx,oldy);</span><br><span class=\"line\">  ctx.quadraticCurveTo(midx,midy,newx,newy);</span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">  oldx = newx;</span><br><span class=\"line\">  oldy = newy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"canvas的imageData像素级缩放\"><a href=\"#canvas的imageData像素级缩放\" class=\"headerlink\" title=\"canvas的imageData像素级缩放\"></a>canvas的imageData像素级缩放</h2><p>想要获得canvas上的图像并且缩放到28*28，使用scale方法是不行的，必须获取所有的像素RGBA值，然后横向隔一段取一个点，竖向隔几行取一行，一共横向每行取28个像素点，竖向取28行</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//缩放imageData,scale:倍数,返回:imageData</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scaleImageData</span>(<span class=\"params\">imageData, scale</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scaled =</span><br><span class=\"line\">      ctx.createImageData(imageData.width * scale, imageData.height * scale);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> row = <span class=\"number\">0</span>; row &lt; imageData.height; row++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> col = <span class=\"number\">0</span>; col &lt; imageData.width; col++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> sourcePixel = [</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">0</span>],</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">1</span>],</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">2</span>],</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">3</span>]</span><br><span class=\"line\">      ];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> y = <span class=\"number\">0</span>; y &lt; scale; y++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> destRow = <span class=\"built_in\">Math</span>.floor(row * scale) + y;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; scale; x++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> destCol = <span class=\"built_in\">Math</span>.floor(col * scale) + x;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            scaled.data[(destRow * scaled.width + destCol) * <span class=\"number\">4</span> + i] = sourcePixel[i];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//  alert(scaled.data.length);</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> scaled;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取服务器的ip\"><a href=\"#获取服务器的ip\" class=\"headerlink\" title=\"获取服务器的ip\"></a>获取服务器的ip</h2><p>这里取巧了，直接从浏览器显示部分获取<br>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取服务器ip，运行时urlPath为https://192.168.137.1:8000/</span></span><br><span class=\"line\"><span class=\"function\">function <span class=\"title\">getRemoteIp</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  var urlPath = window.document.location.href;  <span class=\"comment\">//浏览器显示地址 http://10.15.5.83:5555/ISV/demo.aspx?a=1&amp;b=2</span></span><br><span class=\"line\">  <span class=\"comment\">// var docPath = window.document.location.pathname; //文件在服务器相对地址 /ISV/demo.aspx</span></span><br><span class=\"line\">  <span class=\"comment\">// var index = urlPath.indexOf(docPath);</span></span><br><span class=\"line\">  var serverPath = urlPath.substring(<span class=\"number\">7</span>, urlPath.length-<span class=\"number\">1</span>);<span class=\"comment\">//服务器ip 192.168.137.1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> serverPath;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"UA检测\"><a href=\"#UA检测\" class=\"headerlink\" title=\"UA检测\"></a>UA检测</h2><p>因为要适配移动端和PC端，所以简单的UA检测还是必要的，这里没有做的很复杂<br>主要就是通过检测<code>navigator.platfowm</code>中的关键词来判断</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var ua = navigator.userAgent; </span><br><span class=\"line\">var system = &#123;</span><br><span class=\"line\">  win : <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  mac : <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  linux : <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// mobile</span></span><br><span class=\"line\">  iphone : <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  android : <span class=\"keyword\">false</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var p = navigator.platform;</span><br><span class=\"line\">system.win = p.indexOf(<span class=\"string\">'Win'</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">system.mac = p.indexOf(<span class=\"string\">'Mac'</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">system.linux = p.indexOf(<span class=\"string\">'Linux'</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">system.iphone = ua.indexOf(<span class=\"string\">'iPhone'</span>) &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\">system.android = ua.indexOf(<span class=\"string\">'Android'</span>) &gt; -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(system.win||system.mac)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(system.android||system.iphone)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"python根据数组生成图片\"><a href=\"#python根据数组生成图片\" class=\"headerlink\" title=\"python根据数组生成图片\"></a>python根据数组生成图片</h2><p>dtype一定要写的，不写生成错误<br>imgData就是图片的RGBA数据数组，要转成np数组才可以用PIL的Image.fromarray()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = np.asarray(imgData, dtype=np.uint8)</span><br><span class=\"line\">image = Image.fromarray(array, <span class=\"string\">'RGBA'</span>) </span><br><span class=\"line\">image.save(outputImgPath + imgName +<span class=\"string\">'.png'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"将RGBA转换为RGB格式数组\"><a href=\"#将RGBA转换为RGB格式数组\" class=\"headerlink\" title=\"将RGBA转换为RGB格式数组\"></a>将RGBA转换为RGB格式数组</h2><p>网上看了很多，有用PIL的，还有直接写算法转换的，用opencv的…很多<br>这里发现PIL的不好用，读出来还是RGBA的格式，而且没办法用函数在数组上转换</p>\n<p>最后解决办法是:</p>\n<ul>\n<li>从前端传过来的数据是字典类型，先获取values()</li>\n<li>将dict.vlues这个数组转换为ndarray数组</li>\n<li>转换完了,再把这个RGBA数组用 PIL 转换为图片</li>\n<li>用save()方法保存为临时图片</li>\n<li>用opencv读取临时图片的RGB通道的数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将图片数据转换为ndarray类型</span><br><span class=\"line\">npData = np.array(imageData,dtype=np.uint8).reshape(<span class=\"number\">28</span>,<span class=\"number\">28</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"># 将RGBA格式数组转换为图片</span><br><span class=\"line\">image = Image.fromarray(npData, <span class=\"string\">'RGBA'</span>) </span><br><span class=\"line\"># 保存临时图片</span><br><span class=\"line\">image.save(<span class=\"string\">'static/images/npimg.png'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"># 用opencv读取图片的RGB数据</span><br><span class=\"line\">rgbImage = cv2.imread(<span class=\"string\">'static/images/npimg.png'</span>, cv2.IMREAD_COLOR)</span><br></pre></td></tr></table></figure>\n<h2 id=\"cv2-imread-path-flags\"><a href=\"#cv2-imread-path-flags\" class=\"headerlink\" title=\"cv2.imread(path[, flags])\"></a>cv2.imread(path[, flags])</h2><p>cv2的imread函数的第二个参数这里说明下:</p>\n<blockquote>\n<p>如果不设置，读进来的是BGR格式的数据，值在0-255,flag一共有3个取值<br>cv2.IMREAD_COLOR : 读入彩色图片,任何与透明度相关通道的会被忽视,默认以这种方式读入.<br>cv2.IMREAD_GRAYSCALE : 以灰度图的形式读入图片<br>cv2.IMREAD_UNCHANGED : 保留读取图片原有的颜色通道.</p>\n</blockquote>\n<p>可以简单的用<strong>-1,0,1</strong>来分别表示这3个flag</p>\n<h2 id=\"Python图像处理\"><a href=\"#Python图像处理\" class=\"headerlink\" title=\"Python图像处理\"></a>Python图像处理</h2><h3 id=\"图片的读写方式总结\"><a href=\"#图片的读写方式总结\" class=\"headerlink\" title=\"图片的读写方式总结\"></a>图片的读写方式总结</h3><p>找到一个很全的博客，推荐一下：<a href=\"https://www.jb51.net/article/135307.htm\" target=\"_blank\" rel=\"noopener\">Python各类图像库的图片读写方式总结</a></p>\n<h3 id=\"opencv的基本操作\"><a href=\"#opencv的基本操作\" class=\"headerlink\" title=\"opencv的基本操作\"></a>opencv的基本操作</h3><p>推荐看看这篇文章：<a href=\"https://www.jianshu.com/p/ed00179ede34\" target=\"_blank\" rel=\"noopener\">点击跳转</a></p>\n<h3 id=\"tensorflow简单的图像处理\"><a href=\"#tensorflow简单的图像处理\" class=\"headerlink\" title=\"tensorflow简单的图像处理\"></a>tensorflow简单的图像处理</h3><p>推荐链接：<a href=\"https://blog.csdn.net/jia20003/article/details/79118769\" target=\"_blank\" rel=\"noopener\">使用TensorFlow进行简单的图像处理</a></p>\n<h3 id=\"PIL格式转换\"><a href=\"#PIL格式转换\" class=\"headerlink\" title=\"PIL格式转换\"></a>PIL格式转换</h3><p>推荐链接：<a href=\"https://blog.csdn.net/icamera0/article/details/50843172\" target=\"_blank\" rel=\"noopener\">Python图像处理库PIL中图像格式转换（一）</a></p>\n<h2 id=\"对图片灰度化\"><a href=\"#对图片灰度化\" class=\"headerlink\" title=\"对图片灰度化\"></a>对图片灰度化</h2><p>如果只是灰度的话可以用PIL的convert函数，很方便，但是这里要用tensorflow，所以得用<code>tf.image_to_grayscale(imageData)</code>这个函数。注意事先要先将数据格式转换为<code>tf.float32</code>类型的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将rgb图片转换为float32格式</span></span><br><span class=\"line\">rgbImage = tf.image.convert_image_dtype(rgbImage, tf.float32)</span><br><span class=\"line\"><span class=\"comment\"># 将图片灰度化得到(28,28,1)格式的tensor</span></span><br><span class=\"line\">rgbImage = tf.image.rgb_to_grayscale(rgbImage</span><br></pre></td></tr></table></figure>\n<h2 id=\"后端改变图片的背景和画笔颜色数据\"><a href=\"#后端改变图片的背景和画笔颜色数据\" class=\"headerlink\" title=\"后端改变图片的背景和画笔颜色数据\"></a>后端改变图片的背景和画笔颜色数据</h2><p>出于美观，前端并不是黑底白字，但是模型训练的是黑底白字的，虽然后面测试用了灰度数据，还是会不准确，所以在数据处理前，对imageData中的部分像素进行修改，将橙色变为黑色，黑色画笔变为白色</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将橙色的背景转换为黑色,将画笔的黑色转为白色</span></span><br><span class=\"line\"><span class=\"comment\"># input: RGBA格式图片数据</span></span><br><span class=\"line\"><span class=\"comment\"># output: 修改过的RGBA格式图片数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reveBlack</span><span class=\"params\">(imageData)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,len(imageData),<span class=\"number\">4</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 如果画笔为白色</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> imageData[i]==<span class=\"number\">0</span> <span class=\"keyword\">and</span> imageData[i+<span class=\"number\">1</span>]==<span class=\"number\">0</span> <span class=\"keyword\">and</span> imageData[i+<span class=\"number\">2</span>]==<span class=\"number\">0</span>:</span><br><span class=\"line\">            imageData[i]=imageData[i+<span class=\"number\">1</span>]=imageData[i+<span class=\"number\">2</span>]=<span class=\"number\">255</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果背景为橙色</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> imageData[i]==<span class=\"number\">255</span> <span class=\"keyword\">and</span> imageData[i+<span class=\"number\">1</span>]==<span class=\"number\">165</span> <span class=\"keyword\">and</span> imageData[i+<span class=\"number\">2</span>]==<span class=\"number\">0</span>:</span><br><span class=\"line\">            imageData[i]=imageData[i+<span class=\"number\">1</span>]=imageData[i+<span class=\"number\">2</span>]=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> imageDat</span><br></pre></td></tr></table></figure>\n<h2 id=\"tensor和numpy数组转换\"><a href=\"#tensor和numpy数组转换\" class=\"headerlink\" title=\"tensor和numpy数组转换\"></a>tensor和numpy数组转换</h2><h3 id=\"tensor转ndarray\"><a href=\"#tensor转ndarray\" class=\"headerlink\" title=\"tensor转ndarray\"></a>tensor转ndarray</h3><p>由于项目里面是模型恢复，所以没有初始化这步<br>有两种方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 将tensor转换为ndarray</span></span><br><span class=\"line\">init = tf.initialize_all_variables()</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(init)</span><br><span class=\"line\">    <span class=\"comment\"># 第一种</span></span><br><span class=\"line\">    ndName = tensorName1.eval(session=sess)</span><br><span class=\"line\">    <span class=\"comment\">#第二种</span></span><br><span class=\"line\">    ndName = sess.run(tensorName2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ndarray转tensor\"><a href=\"#ndarray转tensor\" class=\"headerlink\" title=\"ndarray转tensor\"></a>ndarray转tensor</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将ndarray转换为tensor</span></span><br><span class=\"line\">tensorName =  tf.convert_to_tensor(ndName, dtype = tf.float32)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用训练好的模型\"><a href=\"#使用训练好的模型\" class=\"headerlink\" title=\"使用训练好的模型\"></a>使用训练好的模型</h2><p><strong>参考链接：</strong><a href=\"https://blog.csdn.net/yanchujian88/article/details/80559936\" target=\"_blank\" rel=\"noopener\">言初见的CSDN博客</a></p>\n<p>训练用的算法是Lenet-5，下面的代码是部分调用模型代码，因为只有一张图片的数据，并不是用整个测试集，所以有些地方会有点不一样</p>\n<p>主要还是通过恢复模型，传入图片数据来获得预测结果</p>\n<p>注意点：</p>\n<ol>\n<li>x占位符的shape，要注意个train的一致，第一个shape要是1，因为只有一个图片</li>\n<li>使用tf.argmax(y,1)函数获得最大预测的下标,这里就是结果了，因为是0-9正好对应了下标</li>\n<li>输入的feed_dict测试数据必须是ndarray，不可以是tensor，因此要转换以下</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义输入格式(1,28,28,1)</span></span><br><span class=\"line\">x = tf.placeholder(tf.float32, [<span class=\"number\">1</span>, </span><br><span class=\"line\">                                mnist_inference.IMAGE_SIZE, </span><br><span class=\"line\">                                mnist_inference.IMAGE_SIZE, </span><br><span class=\"line\">                                mnist_inference.NUM_CHANNEL], </span><br><span class=\"line\">                                name=<span class=\"string\">'x-input'</span>)</span><br><span class=\"line\"><span class=\"comment\">#直接通过调用封装好的函数来计算前向传播的结果 </span></span><br><span class=\"line\">y = mnist_inference.interence(x,<span class=\"keyword\">None</span>, <span class=\"keyword\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用tf.argmax(y, 1)就可以得到输入样例的预测类别 </span></span><br><span class=\"line\">prediction = tf.argmax(y, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过变量重命名的方式来加载模型</span></span><br><span class=\"line\"><span class=\"comment\"># 所有滑动平均的值组成的字典,处在/ExponentialMovingAverage下的值  </span></span><br><span class=\"line\"><span class=\"comment\"># 为了方便加载时重命名滑动平均量，tf.train.ExponentialMovingAverage类  </span></span><br><span class=\"line\"><span class=\"comment\"># 提供了variables_to_store函数来生成tf.train.Saver类所需要的变量  </span></span><br><span class=\"line\"><span class=\"comment\"># 这些值要从模型中提取</span></span><br><span class=\"line\">variable_averages = tf.train.ExponentialMovingAverage(mnist_train.MOVING_AVERAGE_DECAY)</span><br><span class=\"line\">variable_to_restore = variable_averages.variables_to_restore()</span><br><span class=\"line\">saver = tf.train.Saver(variable_to_restore)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用数据测试模型</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess: </span><br><span class=\"line\">    <span class=\"comment\"># get_checkoutpoint_state()会通过checkoutpoint文件自动找到目录中最新模型的文件名</span></span><br><span class=\"line\">    ckpt = tf.train.get_checkpoint_state(mnist_train.MODEL_PATH)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ckpt <span class=\"keyword\">and</span> ckpt.model_checkpoint_path:</span><br><span class=\"line\">        <span class=\"comment\"># 加载模型</span></span><br><span class=\"line\">        saver.restore(sess, ckpt.model_checkpoint_path)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 将tensor转换为np数组,这里也可以用np的reshape方法</span></span><br><span class=\"line\">        rgbNpData = tf.reshape(rgbImage,[<span class=\"number\">1</span>,</span><br><span class=\"line\">                                            mnist_inference.IMAGE_SIZE, </span><br><span class=\"line\">                                            mnist_inference.IMAGE_SIZE, </span><br><span class=\"line\">                                            mnist_inference.NUM_CHANNEL])</span><br><span class=\"line\">        <span class=\"comment\"># 将tensor转换为ndarray</span></span><br><span class=\"line\">        reshaped_data = rgbNpData.eval()</span><br><span class=\"line\">        <span class=\"comment\"># 将输入的测试数据格式调整为一个四维矩阵</span></span><br><span class=\"line\">        validate_feed = &#123;x: reshaped_data&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 获得预测的结果数组</span></span><br><span class=\"line\">        predictionNum = sess.run(prediction, feed_dict = validate_feed)</span><br><span class=\"line\">        print(<span class=\"string\">\"Number is %d\"</span> %(predictionNum[<span class=\"number\">0</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">tf.reset_default_graph()</span><br></pre></td></tr></table></figure>\n<h2 id=\"报错：Error-the-tensor’s-graph-is-different-from-the-session’s-graph\"><a href=\"#报错：Error-the-tensor’s-graph-is-different-from-the-session’s-graph\" class=\"headerlink\" title=\"报错：Error: the tensor’s graph is different from the session’s graph\"></a>报错：Error: the tensor’s graph is different from the session’s graph</h2><p>这是因为session里面的图和使用的图不一样导致的，刚开始不清楚，把参考的博客上面的那句： with tf.Graph().as_default() as g:写上去了，导致默认图被设置成了g，但是用的又是恢复的图，所以不一样了</p>\n<p>解决办法炒鸡简单…但是debug的过程里就一直没意识到就是了…就是把那句话去掉就行了哇</p>\n<h2 id=\"报错：List-of-Tensors-when-single-Tensor-expected\"><a href=\"#报错：List-of-Tensors-when-single-Tensor-expected\" class=\"headerlink\" title=\"报错：List of Tensors when single Tensor expected\"></a>报错：List of Tensors when single Tensor expected</h2><p>使用tf.constant()函数的时候可能会报这个错误</p>\n<p>看看这个函数的定义：</p>\n<blockquote>\n<p>def constant(value, dtype=None, shape=None, name=”Const”, verify_shape=False)<br>value: A constant value (or list) of output type dtype.<br>Returns: A Constant Tensor.</p>\n</blockquote>\n<p>问题也应该清楚了，constant要求输入的是list，用的时候如果传入了tensor类型的，当然就不可以了</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>遇到的问题还是很多的，好几个bug都折磨了我几个小时，找不到bug在哪太艰难了，深深的感受到要学了点基础再来做项目，就说这个tensorflow，没有大致的学一遍，遇到问题完全就是无头苍蝇，不好排错</p>\n<p>一个项目学到的东西还是挺多的，实战真的很重要啊</p>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><p>记录一下手写数字识别这个项目过程中遇到的问题，以及解决方法，还有一些图像处理方面的文章推荐</p></div>","more":"<h2 id=\"canvas画笔位置有偏移\"><a href=\"#canvas画笔位置有偏移\" class=\"headerlink\" title=\"canvas画笔位置有偏移\"></a>canvas画笔位置有偏移</h2><ul>\n<li>使用<code>window.innerHeight || document.documentElement.clientHeight</code>语句获取视窗高度，同理获得宽度</li>\n<li>移动端获得视窗的高度和宽度后，根据高视窗的大小设置canvas大小，以及下方按钮文字等大小</li>\n<li>PC端通过canvas的<code>mousedown、mousemove、mouseup</code>这三个事件绘图，画笔的起始点和新点用<code>event.clientX - canvas.offsetLeft</code>获取x，同理获取y,</li>\n<li>移动端用<code>touchstart、touchmove、touchend</code>这三个事件，画笔的起始点和终点都用<code>event.targetTouches[0].clientX - canvas.offsetLeft</code>获取x，<code>event.targetTouches[0].clientY - canvas.offsetTop</code>获取y</li>\n</ul>\n<h2 id=\"canvas用二次贝塞尔曲线绘图\"><a href=\"#canvas用二次贝塞尔曲线绘图\" class=\"headerlink\" title=\"canvas用二次贝塞尔曲线绘图\"></a>canvas用二次贝塞尔曲线绘图</h2><p><strong>PC端mousemove事件代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//PC端鼠标移动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (onoff == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取新点和中点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newx = event.clientX - canvas.offsetLeft;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newy = event.clientY - canvas.offsetTop;</span><br><span class=\"line\">    midx = <span class=\"number\">0.5</span>*(newx+oldx);</span><br><span class=\"line\">    midy = <span class=\"number\">0.5</span>*(newy+oldy);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置粗细和颜色</span></span><br><span class=\"line\">    ctx.lineWidth = linew;</span><br><span class=\"line\">    ctx.strokeStyle = linecolor;</span><br><span class=\"line\">    ctx.lineCap = <span class=\"string\">'round'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制二次贝塞尔</span></span><br><span class=\"line\">    ctx.moveTo(oldx,oldy);</span><br><span class=\"line\">    ctx.quadraticCurveTo( midx , midy , newx , newy );</span><br><span class=\"line\">    ctx.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//转移新旧坐标</span></span><br><span class=\"line\">    oldx = newx;</span><br><span class=\"line\">    oldy = newy;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>mobile端mousemove事件代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//移动端手指移动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tMove</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//获取新点和中点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> touche = event.targetTouches[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newx = touche.clientX - canvas.offsetLeft;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newy = touche.clientY - canvas.offsetTop;</span><br><span class=\"line\">  midx = <span class=\"number\">0.5</span>*(newx+oldx);</span><br><span class=\"line\">  midy = <span class=\"number\">0.5</span>*(newy+oldy);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//设置粗细和颜色</span></span><br><span class=\"line\">  ctx.lineWidth = linew;</span><br><span class=\"line\">  ctx.strokeStyle = linecolor;</span><br><span class=\"line\">  ctx.lineCap = <span class=\"string\">'round'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\">  ctx.moveTo(oldx,oldy);</span><br><span class=\"line\">  ctx.quadraticCurveTo(midx,midy,newx,newy);</span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">  oldx = newx;</span><br><span class=\"line\">  oldy = newy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"canvas的imageData像素级缩放\"><a href=\"#canvas的imageData像素级缩放\" class=\"headerlink\" title=\"canvas的imageData像素级缩放\"></a>canvas的imageData像素级缩放</h2><p>想要获得canvas上的图像并且缩放到28*28，使用scale方法是不行的，必须获取所有的像素RGBA值，然后横向隔一段取一个点，竖向隔几行取一行，一共横向每行取28个像素点，竖向取28行</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//缩放imageData,scale:倍数,返回:imageData</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scaleImageData</span>(<span class=\"params\">imageData, scale</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scaled =</span><br><span class=\"line\">      ctx.createImageData(imageData.width * scale, imageData.height * scale);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> row = <span class=\"number\">0</span>; row &lt; imageData.height; row++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> col = <span class=\"number\">0</span>; col &lt; imageData.width; col++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> sourcePixel = [</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">0</span>],</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">1</span>],</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">2</span>],</span><br><span class=\"line\">        imageData.data[(row * imageData.width + col) * <span class=\"number\">4</span> + <span class=\"number\">3</span>]</span><br><span class=\"line\">      ];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> y = <span class=\"number\">0</span>; y &lt; scale; y++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> destRow = <span class=\"built_in\">Math</span>.floor(row * scale) + y;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; scale; x++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> destCol = <span class=\"built_in\">Math</span>.floor(col * scale) + x;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            scaled.data[(destRow * scaled.width + destCol) * <span class=\"number\">4</span> + i] = sourcePixel[i];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//  alert(scaled.data.length);</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> scaled;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取服务器的ip\"><a href=\"#获取服务器的ip\" class=\"headerlink\" title=\"获取服务器的ip\"></a>获取服务器的ip</h2><p>这里取巧了，直接从浏览器显示部分获取<br>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取服务器ip，运行时urlPath为https://192.168.137.1:8000/</span></span><br><span class=\"line\"><span class=\"function\">function <span class=\"title\">getRemoteIp</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  var urlPath = window.document.location.href;  <span class=\"comment\">//浏览器显示地址 http://10.15.5.83:5555/ISV/demo.aspx?a=1&amp;b=2</span></span><br><span class=\"line\">  <span class=\"comment\">// var docPath = window.document.location.pathname; //文件在服务器相对地址 /ISV/demo.aspx</span></span><br><span class=\"line\">  <span class=\"comment\">// var index = urlPath.indexOf(docPath);</span></span><br><span class=\"line\">  var serverPath = urlPath.substring(<span class=\"number\">7</span>, urlPath.length-<span class=\"number\">1</span>);<span class=\"comment\">//服务器ip 192.168.137.1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> serverPath;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"UA检测\"><a href=\"#UA检测\" class=\"headerlink\" title=\"UA检测\"></a>UA检测</h2><p>因为要适配移动端和PC端，所以简单的UA检测还是必要的，这里没有做的很复杂<br>主要就是通过检测<code>navigator.platfowm</code>中的关键词来判断</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var ua = navigator.userAgent; </span><br><span class=\"line\">var system = &#123;</span><br><span class=\"line\">  win : <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  mac : <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  linux : <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// mobile</span></span><br><span class=\"line\">  iphone : <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  android : <span class=\"keyword\">false</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var p = navigator.platform;</span><br><span class=\"line\">system.win = p.indexOf(<span class=\"string\">'Win'</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">system.mac = p.indexOf(<span class=\"string\">'Mac'</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">system.linux = p.indexOf(<span class=\"string\">'Linux'</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">system.iphone = ua.indexOf(<span class=\"string\">'iPhone'</span>) &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\">system.android = ua.indexOf(<span class=\"string\">'Android'</span>) &gt; -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(system.win||system.mac)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(system.android||system.iphone)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"python根据数组生成图片\"><a href=\"#python根据数组生成图片\" class=\"headerlink\" title=\"python根据数组生成图片\"></a>python根据数组生成图片</h2><p>dtype一定要写的，不写生成错误<br>imgData就是图片的RGBA数据数组，要转成np数组才可以用PIL的Image.fromarray()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = np.asarray(imgData, dtype=np.uint8)</span><br><span class=\"line\">image = Image.fromarray(array, <span class=\"string\">'RGBA'</span>) </span><br><span class=\"line\">image.save(outputImgPath + imgName +<span class=\"string\">'.png'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"将RGBA转换为RGB格式数组\"><a href=\"#将RGBA转换为RGB格式数组\" class=\"headerlink\" title=\"将RGBA转换为RGB格式数组\"></a>将RGBA转换为RGB格式数组</h2><p>网上看了很多，有用PIL的，还有直接写算法转换的，用opencv的…很多<br>这里发现PIL的不好用，读出来还是RGBA的格式，而且没办法用函数在数组上转换</p>\n<p>最后解决办法是:</p>\n<ul>\n<li>从前端传过来的数据是字典类型，先获取values()</li>\n<li>将dict.vlues这个数组转换为ndarray数组</li>\n<li>转换完了,再把这个RGBA数组用 PIL 转换为图片</li>\n<li>用save()方法保存为临时图片</li>\n<li>用opencv读取临时图片的RGB通道的数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将图片数据转换为ndarray类型</span><br><span class=\"line\">npData = np.array(imageData,dtype=np.uint8).reshape(<span class=\"number\">28</span>,<span class=\"number\">28</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"># 将RGBA格式数组转换为图片</span><br><span class=\"line\">image = Image.fromarray(npData, <span class=\"string\">'RGBA'</span>) </span><br><span class=\"line\"># 保存临时图片</span><br><span class=\"line\">image.save(<span class=\"string\">'static/images/npimg.png'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"># 用opencv读取图片的RGB数据</span><br><span class=\"line\">rgbImage = cv2.imread(<span class=\"string\">'static/images/npimg.png'</span>, cv2.IMREAD_COLOR)</span><br></pre></td></tr></table></figure>\n<h2 id=\"cv2-imread-path-flags\"><a href=\"#cv2-imread-path-flags\" class=\"headerlink\" title=\"cv2.imread(path[, flags])\"></a>cv2.imread(path[, flags])</h2><p>cv2的imread函数的第二个参数这里说明下:</p>\n<blockquote>\n<p>如果不设置，读进来的是BGR格式的数据，值在0-255,flag一共有3个取值<br>cv2.IMREAD_COLOR : 读入彩色图片,任何与透明度相关通道的会被忽视,默认以这种方式读入.<br>cv2.IMREAD_GRAYSCALE : 以灰度图的形式读入图片<br>cv2.IMREAD_UNCHANGED : 保留读取图片原有的颜色通道.</p>\n</blockquote>\n<p>可以简单的用<strong>-1,0,1</strong>来分别表示这3个flag</p>\n<h2 id=\"Python图像处理\"><a href=\"#Python图像处理\" class=\"headerlink\" title=\"Python图像处理\"></a>Python图像处理</h2><h3 id=\"图片的读写方式总结\"><a href=\"#图片的读写方式总结\" class=\"headerlink\" title=\"图片的读写方式总结\"></a>图片的读写方式总结</h3><p>找到一个很全的博客，推荐一下：<a href=\"https://www.jb51.net/article/135307.htm\" target=\"_blank\" rel=\"noopener\">Python各类图像库的图片读写方式总结</a></p>\n<h3 id=\"opencv的基本操作\"><a href=\"#opencv的基本操作\" class=\"headerlink\" title=\"opencv的基本操作\"></a>opencv的基本操作</h3><p>推荐看看这篇文章：<a href=\"https://www.jianshu.com/p/ed00179ede34\" target=\"_blank\" rel=\"noopener\">点击跳转</a></p>\n<h3 id=\"tensorflow简单的图像处理\"><a href=\"#tensorflow简单的图像处理\" class=\"headerlink\" title=\"tensorflow简单的图像处理\"></a>tensorflow简单的图像处理</h3><p>推荐链接：<a href=\"https://blog.csdn.net/jia20003/article/details/79118769\" target=\"_blank\" rel=\"noopener\">使用TensorFlow进行简单的图像处理</a></p>\n<h3 id=\"PIL格式转换\"><a href=\"#PIL格式转换\" class=\"headerlink\" title=\"PIL格式转换\"></a>PIL格式转换</h3><p>推荐链接：<a href=\"https://blog.csdn.net/icamera0/article/details/50843172\" target=\"_blank\" rel=\"noopener\">Python图像处理库PIL中图像格式转换（一）</a></p>\n<h2 id=\"对图片灰度化\"><a href=\"#对图片灰度化\" class=\"headerlink\" title=\"对图片灰度化\"></a>对图片灰度化</h2><p>如果只是灰度的话可以用PIL的convert函数，很方便，但是这里要用tensorflow，所以得用<code>tf.image_to_grayscale(imageData)</code>这个函数。注意事先要先将数据格式转换为<code>tf.float32</code>类型的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将rgb图片转换为float32格式</span></span><br><span class=\"line\">rgbImage = tf.image.convert_image_dtype(rgbImage, tf.float32)</span><br><span class=\"line\"><span class=\"comment\"># 将图片灰度化得到(28,28,1)格式的tensor</span></span><br><span class=\"line\">rgbImage = tf.image.rgb_to_grayscale(rgbImage</span><br></pre></td></tr></table></figure>\n<h2 id=\"后端改变图片的背景和画笔颜色数据\"><a href=\"#后端改变图片的背景和画笔颜色数据\" class=\"headerlink\" title=\"后端改变图片的背景和画笔颜色数据\"></a>后端改变图片的背景和画笔颜色数据</h2><p>出于美观，前端并不是黑底白字，但是模型训练的是黑底白字的，虽然后面测试用了灰度数据，还是会不准确，所以在数据处理前，对imageData中的部分像素进行修改，将橙色变为黑色，黑色画笔变为白色</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将橙色的背景转换为黑色,将画笔的黑色转为白色</span></span><br><span class=\"line\"><span class=\"comment\"># input: RGBA格式图片数据</span></span><br><span class=\"line\"><span class=\"comment\"># output: 修改过的RGBA格式图片数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reveBlack</span><span class=\"params\">(imageData)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,len(imageData),<span class=\"number\">4</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 如果画笔为白色</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> imageData[i]==<span class=\"number\">0</span> <span class=\"keyword\">and</span> imageData[i+<span class=\"number\">1</span>]==<span class=\"number\">0</span> <span class=\"keyword\">and</span> imageData[i+<span class=\"number\">2</span>]==<span class=\"number\">0</span>:</span><br><span class=\"line\">            imageData[i]=imageData[i+<span class=\"number\">1</span>]=imageData[i+<span class=\"number\">2</span>]=<span class=\"number\">255</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果背景为橙色</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> imageData[i]==<span class=\"number\">255</span> <span class=\"keyword\">and</span> imageData[i+<span class=\"number\">1</span>]==<span class=\"number\">165</span> <span class=\"keyword\">and</span> imageData[i+<span class=\"number\">2</span>]==<span class=\"number\">0</span>:</span><br><span class=\"line\">            imageData[i]=imageData[i+<span class=\"number\">1</span>]=imageData[i+<span class=\"number\">2</span>]=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> imageDat</span><br></pre></td></tr></table></figure>\n<h2 id=\"tensor和numpy数组转换\"><a href=\"#tensor和numpy数组转换\" class=\"headerlink\" title=\"tensor和numpy数组转换\"></a>tensor和numpy数组转换</h2><h3 id=\"tensor转ndarray\"><a href=\"#tensor转ndarray\" class=\"headerlink\" title=\"tensor转ndarray\"></a>tensor转ndarray</h3><p>由于项目里面是模型恢复，所以没有初始化这步<br>有两种方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 将tensor转换为ndarray</span></span><br><span class=\"line\">init = tf.initialize_all_variables()</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(init)</span><br><span class=\"line\">    <span class=\"comment\"># 第一种</span></span><br><span class=\"line\">    ndName = tensorName1.eval(session=sess)</span><br><span class=\"line\">    <span class=\"comment\">#第二种</span></span><br><span class=\"line\">    ndName = sess.run(tensorName2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ndarray转tensor\"><a href=\"#ndarray转tensor\" class=\"headerlink\" title=\"ndarray转tensor\"></a>ndarray转tensor</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将ndarray转换为tensor</span></span><br><span class=\"line\">tensorName =  tf.convert_to_tensor(ndName, dtype = tf.float32)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用训练好的模型\"><a href=\"#使用训练好的模型\" class=\"headerlink\" title=\"使用训练好的模型\"></a>使用训练好的模型</h2><p><strong>参考链接：</strong><a href=\"https://blog.csdn.net/yanchujian88/article/details/80559936\" target=\"_blank\" rel=\"noopener\">言初见的CSDN博客</a></p>\n<p>训练用的算法是Lenet-5，下面的代码是部分调用模型代码，因为只有一张图片的数据，并不是用整个测试集，所以有些地方会有点不一样</p>\n<p>主要还是通过恢复模型，传入图片数据来获得预测结果</p>\n<p>注意点：</p>\n<ol>\n<li>x占位符的shape，要注意个train的一致，第一个shape要是1，因为只有一个图片</li>\n<li>使用tf.argmax(y,1)函数获得最大预测的下标,这里就是结果了，因为是0-9正好对应了下标</li>\n<li>输入的feed_dict测试数据必须是ndarray，不可以是tensor，因此要转换以下</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义输入格式(1,28,28,1)</span></span><br><span class=\"line\">x = tf.placeholder(tf.float32, [<span class=\"number\">1</span>, </span><br><span class=\"line\">                                mnist_inference.IMAGE_SIZE, </span><br><span class=\"line\">                                mnist_inference.IMAGE_SIZE, </span><br><span class=\"line\">                                mnist_inference.NUM_CHANNEL], </span><br><span class=\"line\">                                name=<span class=\"string\">'x-input'</span>)</span><br><span class=\"line\"><span class=\"comment\">#直接通过调用封装好的函数来计算前向传播的结果 </span></span><br><span class=\"line\">y = mnist_inference.interence(x,<span class=\"keyword\">None</span>, <span class=\"keyword\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用tf.argmax(y, 1)就可以得到输入样例的预测类别 </span></span><br><span class=\"line\">prediction = tf.argmax(y, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过变量重命名的方式来加载模型</span></span><br><span class=\"line\"><span class=\"comment\"># 所有滑动平均的值组成的字典,处在/ExponentialMovingAverage下的值  </span></span><br><span class=\"line\"><span class=\"comment\"># 为了方便加载时重命名滑动平均量，tf.train.ExponentialMovingAverage类  </span></span><br><span class=\"line\"><span class=\"comment\"># 提供了variables_to_store函数来生成tf.train.Saver类所需要的变量  </span></span><br><span class=\"line\"><span class=\"comment\"># 这些值要从模型中提取</span></span><br><span class=\"line\">variable_averages = tf.train.ExponentialMovingAverage(mnist_train.MOVING_AVERAGE_DECAY)</span><br><span class=\"line\">variable_to_restore = variable_averages.variables_to_restore()</span><br><span class=\"line\">saver = tf.train.Saver(variable_to_restore)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用数据测试模型</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess: </span><br><span class=\"line\">    <span class=\"comment\"># get_checkoutpoint_state()会通过checkoutpoint文件自动找到目录中最新模型的文件名</span></span><br><span class=\"line\">    ckpt = tf.train.get_checkpoint_state(mnist_train.MODEL_PATH)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ckpt <span class=\"keyword\">and</span> ckpt.model_checkpoint_path:</span><br><span class=\"line\">        <span class=\"comment\"># 加载模型</span></span><br><span class=\"line\">        saver.restore(sess, ckpt.model_checkpoint_path)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 将tensor转换为np数组,这里也可以用np的reshape方法</span></span><br><span class=\"line\">        rgbNpData = tf.reshape(rgbImage,[<span class=\"number\">1</span>,</span><br><span class=\"line\">                                            mnist_inference.IMAGE_SIZE, </span><br><span class=\"line\">                                            mnist_inference.IMAGE_SIZE, </span><br><span class=\"line\">                                            mnist_inference.NUM_CHANNEL])</span><br><span class=\"line\">        <span class=\"comment\"># 将tensor转换为ndarray</span></span><br><span class=\"line\">        reshaped_data = rgbNpData.eval()</span><br><span class=\"line\">        <span class=\"comment\"># 将输入的测试数据格式调整为一个四维矩阵</span></span><br><span class=\"line\">        validate_feed = &#123;x: reshaped_data&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 获得预测的结果数组</span></span><br><span class=\"line\">        predictionNum = sess.run(prediction, feed_dict = validate_feed)</span><br><span class=\"line\">        print(<span class=\"string\">\"Number is %d\"</span> %(predictionNum[<span class=\"number\">0</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">tf.reset_default_graph()</span><br></pre></td></tr></table></figure>\n<h2 id=\"报错：Error-the-tensor’s-graph-is-different-from-the-session’s-graph\"><a href=\"#报错：Error-the-tensor’s-graph-is-different-from-the-session’s-graph\" class=\"headerlink\" title=\"报错：Error: the tensor’s graph is different from the session’s graph\"></a>报错：Error: the tensor’s graph is different from the session’s graph</h2><p>这是因为session里面的图和使用的图不一样导致的，刚开始不清楚，把参考的博客上面的那句： with tf.Graph().as_default() as g:写上去了，导致默认图被设置成了g，但是用的又是恢复的图，所以不一样了</p>\n<p>解决办法炒鸡简单…但是debug的过程里就一直没意识到就是了…就是把那句话去掉就行了哇</p>\n<h2 id=\"报错：List-of-Tensors-when-single-Tensor-expected\"><a href=\"#报错：List-of-Tensors-when-single-Tensor-expected\" class=\"headerlink\" title=\"报错：List of Tensors when single Tensor expected\"></a>报错：List of Tensors when single Tensor expected</h2><p>使用tf.constant()函数的时候可能会报这个错误</p>\n<p>看看这个函数的定义：</p>\n<blockquote>\n<p>def constant(value, dtype=None, shape=None, name=”Const”, verify_shape=False)<br>value: A constant value (or list) of output type dtype.<br>Returns: A Constant Tensor.</p>\n</blockquote>\n<p>问题也应该清楚了，constant要求输入的是list，用的时候如果传入了tensor类型的，当然就不可以了</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>遇到的问题还是很多的，好几个bug都折磨了我几个小时，找不到bug在哪太艰难了，深深的感受到要学了点基础再来做项目，就说这个tensorflow，没有大致的学一遍，遇到问题完全就是无头苍蝇，不好排错</p>\n<p>一个项目学到的东西还是挺多的，实战真的很重要啊</p>"},{"title":"Markdown学习笔记","comments":1,"mathjax":false,"date":"2017-08-02T07:52:13.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 前言\n\n本来博客初建，理应写点文章总结心得，说点自己的想法。  \n但正好这时候又学了[Markdown](https://en.wikipedia.org/wiki/Markdowna)，不如就先写个学习笔记，供自己以后写文参考。\n\n关于博客的搭建和以后的想法,就留着下次吧～  \n<!--more-->\n\n# 关于Markdown\n\n## 宗旨和兼容性\n\n[Markdown](https://en.wikipedia.org/wiki/Markdowna)目标是实现易读易写，使用其编写的文件可以直接以纯文本发布。  \n[Markdown](https://en.wikipedia.org/wiki/Markdowna)兼容[HTML](https://en.wikipedia.org/wiki/HTML)，语法目标是成为一种适用于网络的书写语言。  \n\n相比HTML，Markdown是一种书写的格式，而HTML更多是一种发布的格式。  \n在Markdown文件内可以直接用HTML书写，不用额外标注。\n\n[Markdown](https://en.wikipedia.org/wiki/Markdowna)兼容[HTML](https://en.wikipedia.org/wiki/HTML)，但是在[HTML](https://en.wikipedia.org/wiki/HTML)等区块元素，比如`<div>`,`<table>`,`<pre>`,`<p>`,等标签，必须在前后加上空行和其他内容隔开，还要求他们的开始和结尾标签，不能用制表符或者空格来缩进。\n\n在[HTML](https://en.wikipedia.org/wiki/HTML)区块标签内的[Markdown](https://en.wikipedia.org/wiki/Markdowna)格式语法不会被处理  \n但是在[HTML](https://en.wikipedia.org/wiki/HTML)区段标签内，[Markdown](https://en.wikipedia.org/wiki/Markdowna)语法是有效的。比如`<span>`,`<cite>`,`<del>`\n\n## 特殊字符转换\n\n在[HTML](https://en.wikipedia.org/wiki/HTML)中，< 和 & 想要显示字符原型需要用实体的形式，`&lt` 和\n`&amp`  \n而在[Markdown](https://en.wikipedia.org/wiki/Markdowna)中，则可以自由书写字符。\n\n**注** :在code范围内，< 和 & 都会一定被转换成HTML实体，因此可以更方便的写出HTML code\n\n# 区块元素\n\n## 段落和换行\n\n段落由连续文本行组成，且允许段落内用换行符强迫换行。\n\n如果想插入`<br />`，需要在插入处按入两个以上空格然后回车。  \n段落的前后要有一个以上空行，且普通段落不可以用空格或者制表符缩进。\n\n## 标题\n\n支持两种标题的语法，类Setext和atx形式\n\n### 类Setext\n\n类Setext用底线的形式，利用任意数量=（最高阶）和－（第二阶）\n\n**栗子** :  \n\n    This is an H1\n    ============\n    \n    This is an H2\n    -------------  \n  \n### Atx\n\nAtx形式则是在行首插入一到六个#,对应标题一到六阶  \n```\n# H1\n\n##  H2\n\n##### H5  \n```\n  \n可以选择闭合#，且结尾的#和开头不用一样  \n```\n# H1 #\n\n## H2 ##\n\n### H3  ###  \n```\n  \n## 区块引用\n\n在每行前面加上>,(可以偷个懒在整个段落的第一行加上>),并且区块引用可以嵌套，只要根据层次加上不同数量的>\n\n**栗子** :  \n``` \n> This is the fiest level of quoting \n>\n>> This is nested blokquote\n>\n> back to first level  \n```\n显示为:\n> This is the fiest level of quoting \n>\n>> This is nested blokquote\n>\n> back to first level  \n  \n在引用区块内也可以使用其他[Markdown](https://en.wikipedia.org/wiki/Markdowna)语法， **栗如**\n标题、列表、代码区块  \n\n    > ## 这是一个标题。\n    >\n    > 1.   这是第一行列表项。\n    > 2.   这是第二行列表项。\n    >\n    > 给出一些例子代码：\n    >\n    >     return shell_exec(\"echo $input | $markdown_script\");  \n显示为:\n> ## 这是一个标题。\n>\n> 1.   这是第一行列表项。\n> 2.   这是第二行列表项。\n>\n> 给出一些例子代码：\n>\n>     return shell_exec(\"echo $input | $markdown_script\");  \n  \n## 列表\n\n支持有序列表和无序列表两种\n\n### 无序列表\n\n无序列表使用 + - 作为列表标记，个人偏向－，因为不用按shift\n\n### 有序列表\n\n有序列表则使用数字接着一个英文句点:  \n\n    1.  First one\n    \n    2.  Second one  \n显示为:\n\n1.  First one\n\n2.  Second one  \n\n使用不同的数字不会有问题，但是看着不舒服，不推荐，还是顺序下来。  \n或者也可以只用一个数字。\n\n**栗如**  \n\n    1.  First one\n    \n    1.  Second one\n    \n    1.  THird one  \n  \n  \n列表通常在最左边，但是也可以缩进，最多三个空格，标记后面一定要接上至少一个空格或者制表符  \n如果列表间由空行，[Markdown](https://en.wikipedia.org/wiki/Markdowna)会用\\标签将内容裹起来\n\n**栗子** ：  \n    \n    *   Bird\n    \n    *   Magic  \n  \n会被转换成：  \n    \n    >    <ul>\n    \n    >    <li><p>Bird</p></li>\n    \n    >    <li><p>Magic</p></li>\n    \n    >    </ul>  \n\n显示为:\n*   Bird\n\n*   Magic  \n  \n列表可以包含多个段落，但是记得每个段落都要缩进哦\n\n如果放引用，>也要缩进  \n如果放代码区块，这个区块就要缩进两次  \n如果要在行首输入2017. 这种数字+句点+空白，可以在句点前面加反斜杠，即2017.\n\n## 代码区块\n\n终于到这啦，代码区块最简单了，只要简单的缩进4个空格或者一个tab,或者,```这个标识,\n\n**栗子** ：  \n* ____printf(\"hello world\")\n* <Tab>printf(\"hello world\") \n* \\```   \n  printf(\"hello world\")    \n  \\```   \n\n显示为:   \n\n    printf(\"hello world\")\n  \nmarkdown 会自动在代码区块外面加上\\，而且代码区块里面& < >会自动转成[HTML](https://en.wikipedia.org/wiki/HTML)实体，所以可以想怎么写code就怎么写\n\n## 表格\n\n表格对齐方式  \n   \n    1.  居左: :----\n    \n    2.  居中: :----: 或者　-----\n    \n    3.  居右: ----:  \n  \n## 分割线\n\n可以在一行中用三个以上的*，-，_ 来建立一个分割线。行内不可以用其他东西，可以在* -中间插入空格。  \n\n    * * *\n    \n    ****\n    \n    ---\n    \n    ___  \n\n显示为:\n* * *\n\n****\n\n---\n___  \n  \n# 区段元素\n\n## 链接\n\n支持行内式和参考式两种，但都是用[]标记链接文字\n\n### 行内式\n\n在方括号后面接一个()在里面写上网址就行，如果要加title,在后面用单引号、双引号或是括弧把title文字包起来就行\n\n**栗子** ：  \n\n    This is [an example](http://example.com/ \"Title\") inline link.\n    \n    [This link](http://example.net/) has no title attribute.  \n  \n  \n如果想要链接到同主机资源，用相对路径  \n\n    See my [About](/about/) page for details.  \n  \n### 参考式\n\n参考式是在后面加上另一个[],在里面写上标记  \n    \n    This is [an example][id] reference-style link.  \n  \n可以在方括号中间加空格。。。  \n最后在文件的任意处，可以是段尾，可以是文件尾，把标记的链接定义出来  \n\n    [id]: http://example.com/  \"Optional Title Here\"  \n  \n要注意的是[]后面有一个:,还有一个以上的空格，id这个标记是不区分大小写的！链接网址可以用<>包起来。\n\n### 隐式链接\n\n隐式链接标记功能可以让你省略号指定的链接标记，这种情况标记会被视为等同于链接文字。  \n隐式链接只要在链接文字后面加上一个空的[]\n\n**栗子** ：  \n    \n    [Google][]\n    \n    [Google]: http://google.com/  \n  \n参考式链接的优点是比较好读，可以将一些标记的元数据移到段落之外，可以是段尾文件尾，这样就可以不让文章的阅读感被打断\n\n## 强调\n\n如果你的* 和_ 两边都有空白，就只会被当成普通的* _\n\n## 代码\n\n如果要标记一小段行内代码，可以用反引号｀把它包起来  \n    \n    Use the `printf()` function.  \n显示为:\n\nUse the `printf()` function.  \n\n如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：  \n\n    ``There is a literal backtick (`) here.``  \n显示为:\n\n``There is a literal backtick (`) here.``  \n  \n代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，酱紫就可以在区段开始就加入一个反引号  \n\n    A single backtick in a code span: `` ` ``\n    \n    A backtick-delimited string in a code span: `` `foo` ``  \n\n显示为:\n\nA single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``  \n\n  \n## 图片\n\n使用行内式和参考式\n\n### 行内式\n    \n    ![Alt text](/path/to/img.jpg)\n    \n    ![Alt text](/path/to/img.jpg \"Optional title\")  \n  \n### 参考式\n\n    ![Alt text][id]\n    \n    [id]: url/to/image  \"Optional title attribute\"  \n  \n这部分和链接是差不多的,但如果想要指定图片的宽高，可以使用普通的`<img>`标签.\n\n# 其他\n\n## 自动链接\n\n用<>包起来的，都会被自动转成链接  \n    \n    <http://example.com/>  \n  \n会被转成  \n\n    <a href=\"http://example.com/\">http://example.com/</a>  \n  \n## 反斜杠\n\n可以用\\插入一些在语法中有含义的符号  \n    \n    \\   反斜线      `   反引号\n    \n    `*   星号       _   底线`\n    \n    {}  花括号      []  方括号\n    \n    ()  括弧        #   井字号\n    \n    \\+   加号       \\-   减号\n    \n    .   英文句点    !   惊叹号  \n  \n上面就是我学[Markdown][]的一些笔记，可能会有缺少的，有看到的可以指正～。\n\n","source":"_posts/Markdown学习笔记.md","raw":"---\ntitle: Markdown学习笔记\ncomments: true\nmathjax: false\ndate: 2017-08-02 15:52:13\ntags: [Learning,Markdown]\ncategories: Learning\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 前言\n\n本来博客初建，理应写点文章总结心得，说点自己的想法。  \n但正好这时候又学了[Markdown](https://en.wikipedia.org/wiki/Markdowna)，不如就先写个学习笔记，供自己以后写文参考。\n\n关于博客的搭建和以后的想法,就留着下次吧～  \n<!--more-->\n\n# 关于Markdown\n\n## 宗旨和兼容性\n\n[Markdown](https://en.wikipedia.org/wiki/Markdowna)目标是实现易读易写，使用其编写的文件可以直接以纯文本发布。  \n[Markdown](https://en.wikipedia.org/wiki/Markdowna)兼容[HTML](https://en.wikipedia.org/wiki/HTML)，语法目标是成为一种适用于网络的书写语言。  \n\n相比HTML，Markdown是一种书写的格式，而HTML更多是一种发布的格式。  \n在Markdown文件内可以直接用HTML书写，不用额外标注。\n\n[Markdown](https://en.wikipedia.org/wiki/Markdowna)兼容[HTML](https://en.wikipedia.org/wiki/HTML)，但是在[HTML](https://en.wikipedia.org/wiki/HTML)等区块元素，比如`<div>`,`<table>`,`<pre>`,`<p>`,等标签，必须在前后加上空行和其他内容隔开，还要求他们的开始和结尾标签，不能用制表符或者空格来缩进。\n\n在[HTML](https://en.wikipedia.org/wiki/HTML)区块标签内的[Markdown](https://en.wikipedia.org/wiki/Markdowna)格式语法不会被处理  \n但是在[HTML](https://en.wikipedia.org/wiki/HTML)区段标签内，[Markdown](https://en.wikipedia.org/wiki/Markdowna)语法是有效的。比如`<span>`,`<cite>`,`<del>`\n\n## 特殊字符转换\n\n在[HTML](https://en.wikipedia.org/wiki/HTML)中，< 和 & 想要显示字符原型需要用实体的形式，`&lt` 和\n`&amp`  \n而在[Markdown](https://en.wikipedia.org/wiki/Markdowna)中，则可以自由书写字符。\n\n**注** :在code范围内，< 和 & 都会一定被转换成HTML实体，因此可以更方便的写出HTML code\n\n# 区块元素\n\n## 段落和换行\n\n段落由连续文本行组成，且允许段落内用换行符强迫换行。\n\n如果想插入`<br />`，需要在插入处按入两个以上空格然后回车。  \n段落的前后要有一个以上空行，且普通段落不可以用空格或者制表符缩进。\n\n## 标题\n\n支持两种标题的语法，类Setext和atx形式\n\n### 类Setext\n\n类Setext用底线的形式，利用任意数量=（最高阶）和－（第二阶）\n\n**栗子** :  \n\n    This is an H1\n    ============\n    \n    This is an H2\n    -------------  \n  \n### Atx\n\nAtx形式则是在行首插入一到六个#,对应标题一到六阶  \n```\n# H1\n\n##  H2\n\n##### H5  \n```\n  \n可以选择闭合#，且结尾的#和开头不用一样  \n```\n# H1 #\n\n## H2 ##\n\n### H3  ###  \n```\n  \n## 区块引用\n\n在每行前面加上>,(可以偷个懒在整个段落的第一行加上>),并且区块引用可以嵌套，只要根据层次加上不同数量的>\n\n**栗子** :  \n``` \n> This is the fiest level of quoting \n>\n>> This is nested blokquote\n>\n> back to first level  \n```\n显示为:\n> This is the fiest level of quoting \n>\n>> This is nested blokquote\n>\n> back to first level  \n  \n在引用区块内也可以使用其他[Markdown](https://en.wikipedia.org/wiki/Markdowna)语法， **栗如**\n标题、列表、代码区块  \n\n    > ## 这是一个标题。\n    >\n    > 1.   这是第一行列表项。\n    > 2.   这是第二行列表项。\n    >\n    > 给出一些例子代码：\n    >\n    >     return shell_exec(\"echo $input | $markdown_script\");  \n显示为:\n> ## 这是一个标题。\n>\n> 1.   这是第一行列表项。\n> 2.   这是第二行列表项。\n>\n> 给出一些例子代码：\n>\n>     return shell_exec(\"echo $input | $markdown_script\");  \n  \n## 列表\n\n支持有序列表和无序列表两种\n\n### 无序列表\n\n无序列表使用 + - 作为列表标记，个人偏向－，因为不用按shift\n\n### 有序列表\n\n有序列表则使用数字接着一个英文句点:  \n\n    1.  First one\n    \n    2.  Second one  \n显示为:\n\n1.  First one\n\n2.  Second one  \n\n使用不同的数字不会有问题，但是看着不舒服，不推荐，还是顺序下来。  \n或者也可以只用一个数字。\n\n**栗如**  \n\n    1.  First one\n    \n    1.  Second one\n    \n    1.  THird one  \n  \n  \n列表通常在最左边，但是也可以缩进，最多三个空格，标记后面一定要接上至少一个空格或者制表符  \n如果列表间由空行，[Markdown](https://en.wikipedia.org/wiki/Markdowna)会用\\标签将内容裹起来\n\n**栗子** ：  \n    \n    *   Bird\n    \n    *   Magic  \n  \n会被转换成：  \n    \n    >    <ul>\n    \n    >    <li><p>Bird</p></li>\n    \n    >    <li><p>Magic</p></li>\n    \n    >    </ul>  \n\n显示为:\n*   Bird\n\n*   Magic  \n  \n列表可以包含多个段落，但是记得每个段落都要缩进哦\n\n如果放引用，>也要缩进  \n如果放代码区块，这个区块就要缩进两次  \n如果要在行首输入2017. 这种数字+句点+空白，可以在句点前面加反斜杠，即2017.\n\n## 代码区块\n\n终于到这啦，代码区块最简单了，只要简单的缩进4个空格或者一个tab,或者,```这个标识,\n\n**栗子** ：  \n* ____printf(\"hello world\")\n* <Tab>printf(\"hello world\") \n* \\```   \n  printf(\"hello world\")    \n  \\```   \n\n显示为:   \n\n    printf(\"hello world\")\n  \nmarkdown 会自动在代码区块外面加上\\，而且代码区块里面& < >会自动转成[HTML](https://en.wikipedia.org/wiki/HTML)实体，所以可以想怎么写code就怎么写\n\n## 表格\n\n表格对齐方式  \n   \n    1.  居左: :----\n    \n    2.  居中: :----: 或者　-----\n    \n    3.  居右: ----:  \n  \n## 分割线\n\n可以在一行中用三个以上的*，-，_ 来建立一个分割线。行内不可以用其他东西，可以在* -中间插入空格。  \n\n    * * *\n    \n    ****\n    \n    ---\n    \n    ___  \n\n显示为:\n* * *\n\n****\n\n---\n___  \n  \n# 区段元素\n\n## 链接\n\n支持行内式和参考式两种，但都是用[]标记链接文字\n\n### 行内式\n\n在方括号后面接一个()在里面写上网址就行，如果要加title,在后面用单引号、双引号或是括弧把title文字包起来就行\n\n**栗子** ：  \n\n    This is [an example](http://example.com/ \"Title\") inline link.\n    \n    [This link](http://example.net/) has no title attribute.  \n  \n  \n如果想要链接到同主机资源，用相对路径  \n\n    See my [About](/about/) page for details.  \n  \n### 参考式\n\n参考式是在后面加上另一个[],在里面写上标记  \n    \n    This is [an example][id] reference-style link.  \n  \n可以在方括号中间加空格。。。  \n最后在文件的任意处，可以是段尾，可以是文件尾，把标记的链接定义出来  \n\n    [id]: http://example.com/  \"Optional Title Here\"  \n  \n要注意的是[]后面有一个:,还有一个以上的空格，id这个标记是不区分大小写的！链接网址可以用<>包起来。\n\n### 隐式链接\n\n隐式链接标记功能可以让你省略号指定的链接标记，这种情况标记会被视为等同于链接文字。  \n隐式链接只要在链接文字后面加上一个空的[]\n\n**栗子** ：  \n    \n    [Google][]\n    \n    [Google]: http://google.com/  \n  \n参考式链接的优点是比较好读，可以将一些标记的元数据移到段落之外，可以是段尾文件尾，这样就可以不让文章的阅读感被打断\n\n## 强调\n\n如果你的* 和_ 两边都有空白，就只会被当成普通的* _\n\n## 代码\n\n如果要标记一小段行内代码，可以用反引号｀把它包起来  \n    \n    Use the `printf()` function.  \n显示为:\n\nUse the `printf()` function.  \n\n如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：  \n\n    ``There is a literal backtick (`) here.``  \n显示为:\n\n``There is a literal backtick (`) here.``  \n  \n代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，酱紫就可以在区段开始就加入一个反引号  \n\n    A single backtick in a code span: `` ` ``\n    \n    A backtick-delimited string in a code span: `` `foo` ``  \n\n显示为:\n\nA single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``  \n\n  \n## 图片\n\n使用行内式和参考式\n\n### 行内式\n    \n    ![Alt text](/path/to/img.jpg)\n    \n    ![Alt text](/path/to/img.jpg \"Optional title\")  \n  \n### 参考式\n\n    ![Alt text][id]\n    \n    [id]: url/to/image  \"Optional title attribute\"  \n  \n这部分和链接是差不多的,但如果想要指定图片的宽高，可以使用普通的`<img>`标签.\n\n# 其他\n\n## 自动链接\n\n用<>包起来的，都会被自动转成链接  \n    \n    <http://example.com/>  \n  \n会被转成  \n\n    <a href=\"http://example.com/\">http://example.com/</a>  \n  \n## 反斜杠\n\n可以用\\插入一些在语法中有含义的符号  \n    \n    \\   反斜线      `   反引号\n    \n    `*   星号       _   底线`\n    \n    {}  花括号      []  方括号\n    \n    ()  括弧        #   井字号\n    \n    \\+   加号       \\-   减号\n    \n    .   英文句点    !   惊叹号  \n  \n上面就是我学[Markdown][]的一些笔记，可能会有缺少的，有看到的可以指正～。\n\n","slug":"Markdown学习笔记","published":1,"updated":"2019-07-20T12:10:19.195Z","layout":"post","photos":[],"link":"","_id":"cjycjtjya0072ussbnf50d87p","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本来博客初建，理应写点文章总结心得，说点自己的想法。<br>但正好这时候又学了<a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>，不如就先写个学习笔记，供自己以后写文参考。</p>\n<p>关于博客的搭建和以后的想法,就留着下次吧～<br><a id=\"more\"></a></p>\n<h1 id=\"关于Markdown\"><a href=\"#关于Markdown\" class=\"headerlink\" title=\"关于Markdown\"></a>关于Markdown</h1><h2 id=\"宗旨和兼容性\"><a href=\"#宗旨和兼容性\" class=\"headerlink\" title=\"宗旨和兼容性\"></a>宗旨和兼容性</h2><p><a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>目标是实现易读易写，使用其编写的文件可以直接以纯文本发布。<br><a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>兼容<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>，语法目标是成为一种适用于网络的书写语言。  </p>\n<p>相比HTML，Markdown是一种书写的格式，而HTML更多是一种发布的格式。<br>在Markdown文件内可以直接用HTML书写，不用额外标注。</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>兼容<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>，但是在<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>等区块元素，比如<code>&lt;div&gt;</code>,<code>&lt;table&gt;</code>,<code>&lt;pre&gt;</code>,<code>&lt;p&gt;</code>,等标签，必须在前后加上空行和其他内容隔开，还要求他们的开始和结尾标签，不能用制表符或者空格来缩进。</p>\n<p>在<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>区块标签内的<a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>格式语法不会被处理<br>但是在<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>区段标签内，<a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>语法是有效的。比如<code>&lt;span&gt;</code>,<code>&lt;cite&gt;</code>,<code>&lt;del&gt;</code></p>\n<h2 id=\"特殊字符转换\"><a href=\"#特殊字符转换\" class=\"headerlink\" title=\"特殊字符转换\"></a>特殊字符转换</h2><p>在<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>中，&lt; 和 &amp; 想要显示字符原型需要用实体的形式，<code>&amp;lt</code> 和<br><code>&amp;amp</code><br>而在<a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>中，则可以自由书写字符。</p>\n<p><strong>注</strong> :在code范围内，&lt; 和 &amp; 都会一定被转换成HTML实体，因此可以更方便的写出HTML code</p>\n<h1 id=\"区块元素\"><a href=\"#区块元素\" class=\"headerlink\" title=\"区块元素\"></a>区块元素</h1><h2 id=\"段落和换行\"><a href=\"#段落和换行\" class=\"headerlink\" title=\"段落和换行\"></a>段落和换行</h2><p>段落由连续文本行组成，且允许段落内用换行符强迫换行。</p>\n<p>如果想插入<code>&lt;br /&gt;</code>，需要在插入处按入两个以上空格然后回车。<br>段落的前后要有一个以上空行，且普通段落不可以用空格或者制表符缩进。</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>支持两种标题的语法，类Setext和atx形式</p>\n<h3 id=\"类Setext\"><a href=\"#类Setext\" class=\"headerlink\" title=\"类Setext\"></a>类Setext</h3><p>类Setext用底线的形式，利用任意数量=（最高阶）和－（第二阶）</p>\n<p><strong>栗子</strong> :  </p>\n<pre><code>This is an H1\n============\n\nThis is an H2\n-------------  \n</code></pre><h3 id=\"Atx\"><a href=\"#Atx\" class=\"headerlink\" title=\"Atx\"></a>Atx</h3><p>Atx形式则是在行首插入一到六个#,对应标题一到六阶<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># H1</span><br><span class=\"line\"></span><br><span class=\"line\">##  H2</span><br><span class=\"line\"></span><br><span class=\"line\">##### H5</span><br></pre></td></tr></table></figure></p>\n<p>可以选择闭合#，且结尾的#和开头不用一样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># H1 #</span><br><span class=\"line\"></span><br><span class=\"line\">## H2 ##</span><br><span class=\"line\"></span><br><span class=\"line\">### H3  ###</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"区块引用\"><a href=\"#区块引用\" class=\"headerlink\" title=\"区块引用\"></a>区块引用</h2><p>在每行前面加上&gt;,(可以偷个懒在整个段落的第一行加上&gt;),并且区块引用可以嵌套，只要根据层次加上不同数量的&gt;</p>\n<p><strong>栗子</strong> :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; This is the fiest level of quoting </span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;&gt; This is nested blokquote</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; back to first level</span><br></pre></td></tr></table></figure></p>\n<p>显示为:</p>\n<blockquote>\n<p>This is the fiest level of quoting </p>\n<blockquote>\n<p>This is nested blokquote</p>\n</blockquote>\n<p>back to first level  </p>\n</blockquote>\n<p>在引用区块内也可以使用其他<a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>语法， <strong>栗如</strong><br>标题、列表、代码区块  </p>\n<pre><code>&gt; ## 这是一个标题。\n&gt;\n&gt; 1.   这是第一行列表项。\n&gt; 2.   这是第二行列表项。\n&gt;\n&gt; 给出一些例子代码：\n&gt;\n&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);  \n</code></pre><p>显示为:</p>\n<blockquote>\n<h2 id=\"这是一个标题。\"><a href=\"#这是一个标题。\" class=\"headerlink\" title=\"这是一个标题。\"></a>这是一个标题。</h2><ol>\n<li>这是第一行列表项。</li>\n<li>这是第二行列表项。</li>\n</ol>\n<p>给出一些例子代码：</p>\n<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);  \n</code></pre></blockquote>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>支持有序列表和无序列表两种</p>\n<h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><p>无序列表使用 + - 作为列表标记，个人偏向－，因为不用按shift</p>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><p>有序列表则使用数字接着一个英文句点:  </p>\n<pre><code>1.  First one\n\n2.  Second one  \n</code></pre><p>显示为:</p>\n<ol>\n<li><p>First one</p>\n</li>\n<li><p>Second one  </p>\n</li>\n</ol>\n<p>使用不同的数字不会有问题，但是看着不舒服，不推荐，还是顺序下来。<br>或者也可以只用一个数字。</p>\n<p><strong>栗如</strong>  </p>\n<pre><code>1.  First one\n\n1.  Second one\n\n1.  THird one  \n</code></pre><p>列表通常在最左边，但是也可以缩进，最多三个空格，标记后面一定要接上至少一个空格或者制表符<br>如果列表间由空行，<a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>会用\\标签将内容裹起来</p>\n<p><strong>栗子</strong> ：  </p>\n<pre><code>*   Bird\n\n*   Magic  \n</code></pre><p>会被转换成：  </p>\n<pre><code>&gt;    &lt;ul&gt;\n\n&gt;    &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;\n\n&gt;    &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;\n\n&gt;    &lt;/ul&gt;  \n</code></pre><p>显示为:</p>\n<ul>\n<li><p>Bird</p>\n</li>\n<li><p>Magic  </p>\n</li>\n</ul>\n<p>列表可以包含多个段落，但是记得每个段落都要缩进哦</p>\n<p>如果放引用，&gt;也要缩进<br>如果放代码区块，这个区块就要缩进两次<br>如果要在行首输入2017. 这种数字+句点+空白，可以在句点前面加反斜杠，即2017.</p>\n<h2 id=\"代码区块\"><a href=\"#代码区块\" class=\"headerlink\" title=\"代码区块\"></a>代码区块</h2><p>终于到这啦，代码区块最简单了，只要简单的缩进4个空格或者一个tab,或者,```这个标识,</p>\n<p><strong>栗子</strong> ：  </p>\n<ul>\n<li>____printf(“hello world”)</li>\n<li><tab>printf(“hello world”) </tab></li>\n<li>```<br>printf(“hello world”)<br>```   </li>\n</ul>\n<p>显示为:   </p>\n<pre><code>printf(&quot;hello world&quot;)\n</code></pre><p>markdown 会自动在代码区块外面加上\\，而且代码区块里面&amp; &lt; &gt;会自动转成<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>实体，所以可以想怎么写code就怎么写</p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>表格对齐方式  </p>\n<pre><code>1.  居左: :----\n\n2.  居中: :----: 或者　-----\n\n3.  居右: ----:  \n</code></pre><h2 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h2><p>可以在一行中用三个以上的<em>，-，_ 来建立一个分割线。行内不可以用其他东西，可以在</em> -中间插入空格。  </p>\n<pre><code>* * *\n\n****\n\n---\n\n___  \n</code></pre><p>显示为:</p>\n<hr>\n<hr>\n<hr>\n<hr>\n<h1 id=\"区段元素\"><a href=\"#区段元素\" class=\"headerlink\" title=\"区段元素\"></a>区段元素</h1><h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>支持行内式和参考式两种，但都是用[]标记链接文字</p>\n<h3 id=\"行内式\"><a href=\"#行内式\" class=\"headerlink\" title=\"行内式\"></a>行内式</h3><p>在方括号后面接一个()在里面写上网址就行，如果要加title,在后面用单引号、双引号或是括弧把title文字包起来就行</p>\n<p><strong>栗子</strong> ：  </p>\n<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.\n\n[This link](http://example.net/) has no title attribute.  \n</code></pre><p>如果想要链接到同主机资源，用相对路径  </p>\n<pre><code>See my [About](/about/) page for details.  \n</code></pre><h3 id=\"参考式\"><a href=\"#参考式\" class=\"headerlink\" title=\"参考式\"></a>参考式</h3><p>参考式是在后面加上另一个[],在里面写上标记  </p>\n<pre><code>This is [an example][id] reference-style link.  \n</code></pre><p>可以在方括号中间加空格。。。<br>最后在文件的任意处，可以是段尾，可以是文件尾，把标记的链接定义出来  </p>\n<pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;  \n</code></pre><p>要注意的是[]后面有一个:,还有一个以上的空格，id这个标记是不区分大小写的！链接网址可以用&lt;&gt;包起来。</p>\n<h3 id=\"隐式链接\"><a href=\"#隐式链接\" class=\"headerlink\" title=\"隐式链接\"></a>隐式链接</h3><p>隐式链接标记功能可以让你省略号指定的链接标记，这种情况标记会被视为等同于链接文字。<br>隐式链接只要在链接文字后面加上一个空的[]</p>\n<p><strong>栗子</strong> ：  </p>\n<pre><code>[Google][]\n\n[Google]: http://google.com/  \n</code></pre><p>参考式链接的优点是比较好读，可以将一些标记的元数据移到段落之外，可以是段尾文件尾，这样就可以不让文章的阅读感被打断</p>\n<h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><p>如果你的<em> 和_ 两边都有空白，就只会被当成普通的</em> _</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>如果要标记一小段行内代码，可以用反引号｀把它包起来  </p>\n<pre><code>Use the `printf()` function.  \n</code></pre><p>显示为:</p>\n<p>Use the <code>printf()</code> function.  </p>\n<p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：  </p>\n<pre><code>``There is a literal backtick (`) here.``  \n</code></pre><p>显示为:</p>\n<p><code>There is a literal backtick (`) here.</code>  </p>\n<p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，酱紫就可以在区段开始就加入一个反引号  </p>\n<pre><code>A single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``  \n</code></pre><p>显示为:</p>\n<p>A single backtick in a code span: <code>` </code></p>\n<p>A backtick-delimited string in a code span: <code>`foo` </code>  </p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><p>使用行内式和参考式</p>\n<h3 id=\"行内式-1\"><a href=\"#行内式-1\" class=\"headerlink\" title=\"行内式\"></a>行内式</h3><pre><code>![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)  \n</code></pre><h3 id=\"参考式-1\"><a href=\"#参考式-1\" class=\"headerlink\" title=\"参考式\"></a>参考式</h3><pre><code>![Alt text][id]\n\n[id]: url/to/image  &quot;Optional title attribute&quot;  \n</code></pre><p>这部分和链接是差不多的,但如果想要指定图片的宽高，可以使用普通的<code>&lt;img&gt;</code>标签.</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h2><p>用&lt;&gt;包起来的，都会被自动转成链接  </p>\n<pre><code>&lt;http://example.com/&gt;  \n</code></pre><p>会被转成  </p>\n<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;  \n</code></pre><h2 id=\"反斜杠\"><a href=\"#反斜杠\" class=\"headerlink\" title=\"反斜杠\"></a>反斜杠</h2><p>可以用\\插入一些在语法中有含义的符号  </p>\n<pre><code>\\   反斜线      `   反引号\n\n`*   星号       _   底线`\n\n{}  花括号      []  方括号\n\n()  括弧        #   井字号\n\n\\+   加号       \\-   减号\n\n.   英文句点    !   惊叹号  \n</code></pre><p>上面就是我学[Markdown][]的一些笔记，可能会有缺少的，有看到的可以指正～。</p>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本来博客初建，理应写点文章总结心得，说点自己的想法。<br>但正好这时候又学了<a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>，不如就先写个学习笔记，供自己以后写文参考。</p>\n<p>关于博客的搭建和以后的想法,就留着下次吧～<br>","more":"</p>\n<h1 id=\"关于Markdown\"><a href=\"#关于Markdown\" class=\"headerlink\" title=\"关于Markdown\"></a>关于Markdown</h1><h2 id=\"宗旨和兼容性\"><a href=\"#宗旨和兼容性\" class=\"headerlink\" title=\"宗旨和兼容性\"></a>宗旨和兼容性</h2><p><a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>目标是实现易读易写，使用其编写的文件可以直接以纯文本发布。<br><a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>兼容<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>，语法目标是成为一种适用于网络的书写语言。  </p>\n<p>相比HTML，Markdown是一种书写的格式，而HTML更多是一种发布的格式。<br>在Markdown文件内可以直接用HTML书写，不用额外标注。</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>兼容<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>，但是在<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>等区块元素，比如<code>&lt;div&gt;</code>,<code>&lt;table&gt;</code>,<code>&lt;pre&gt;</code>,<code>&lt;p&gt;</code>,等标签，必须在前后加上空行和其他内容隔开，还要求他们的开始和结尾标签，不能用制表符或者空格来缩进。</p>\n<p>在<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>区块标签内的<a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>格式语法不会被处理<br>但是在<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>区段标签内，<a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>语法是有效的。比如<code>&lt;span&gt;</code>,<code>&lt;cite&gt;</code>,<code>&lt;del&gt;</code></p>\n<h2 id=\"特殊字符转换\"><a href=\"#特殊字符转换\" class=\"headerlink\" title=\"特殊字符转换\"></a>特殊字符转换</h2><p>在<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>中，&lt; 和 &amp; 想要显示字符原型需要用实体的形式，<code>&amp;lt</code> 和<br><code>&amp;amp</code><br>而在<a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>中，则可以自由书写字符。</p>\n<p><strong>注</strong> :在code范围内，&lt; 和 &amp; 都会一定被转换成HTML实体，因此可以更方便的写出HTML code</p>\n<h1 id=\"区块元素\"><a href=\"#区块元素\" class=\"headerlink\" title=\"区块元素\"></a>区块元素</h1><h2 id=\"段落和换行\"><a href=\"#段落和换行\" class=\"headerlink\" title=\"段落和换行\"></a>段落和换行</h2><p>段落由连续文本行组成，且允许段落内用换行符强迫换行。</p>\n<p>如果想插入<code>&lt;br /&gt;</code>，需要在插入处按入两个以上空格然后回车。<br>段落的前后要有一个以上空行，且普通段落不可以用空格或者制表符缩进。</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>支持两种标题的语法，类Setext和atx形式</p>\n<h3 id=\"类Setext\"><a href=\"#类Setext\" class=\"headerlink\" title=\"类Setext\"></a>类Setext</h3><p>类Setext用底线的形式，利用任意数量=（最高阶）和－（第二阶）</p>\n<p><strong>栗子</strong> :  </p>\n<pre><code>This is an H1\n============\n\nThis is an H2\n-------------  \n</code></pre><h3 id=\"Atx\"><a href=\"#Atx\" class=\"headerlink\" title=\"Atx\"></a>Atx</h3><p>Atx形式则是在行首插入一到六个#,对应标题一到六阶<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># H1</span><br><span class=\"line\"></span><br><span class=\"line\">##  H2</span><br><span class=\"line\"></span><br><span class=\"line\">##### H5</span><br></pre></td></tr></table></figure></p>\n<p>可以选择闭合#，且结尾的#和开头不用一样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># H1 #</span><br><span class=\"line\"></span><br><span class=\"line\">## H2 ##</span><br><span class=\"line\"></span><br><span class=\"line\">### H3  ###</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"区块引用\"><a href=\"#区块引用\" class=\"headerlink\" title=\"区块引用\"></a>区块引用</h2><p>在每行前面加上&gt;,(可以偷个懒在整个段落的第一行加上&gt;),并且区块引用可以嵌套，只要根据层次加上不同数量的&gt;</p>\n<p><strong>栗子</strong> :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; This is the fiest level of quoting </span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;&gt; This is nested blokquote</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; back to first level</span><br></pre></td></tr></table></figure></p>\n<p>显示为:</p>\n<blockquote>\n<p>This is the fiest level of quoting </p>\n<blockquote>\n<p>This is nested blokquote</p>\n</blockquote>\n<p>back to first level  </p>\n</blockquote>\n<p>在引用区块内也可以使用其他<a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>语法， <strong>栗如</strong><br>标题、列表、代码区块  </p>\n<pre><code>&gt; ## 这是一个标题。\n&gt;\n&gt; 1.   这是第一行列表项。\n&gt; 2.   这是第二行列表项。\n&gt;\n&gt; 给出一些例子代码：\n&gt;\n&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);  \n</code></pre><p>显示为:</p>\n<blockquote>\n<h2 id=\"这是一个标题。\"><a href=\"#这是一个标题。\" class=\"headerlink\" title=\"这是一个标题。\"></a>这是一个标题。</h2><ol>\n<li>这是第一行列表项。</li>\n<li>这是第二行列表项。</li>\n</ol>\n<p>给出一些例子代码：</p>\n<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);  \n</code></pre></blockquote>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>支持有序列表和无序列表两种</p>\n<h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><p>无序列表使用 + - 作为列表标记，个人偏向－，因为不用按shift</p>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><p>有序列表则使用数字接着一个英文句点:  </p>\n<pre><code>1.  First one\n\n2.  Second one  \n</code></pre><p>显示为:</p>\n<ol>\n<li><p>First one</p>\n</li>\n<li><p>Second one  </p>\n</li>\n</ol>\n<p>使用不同的数字不会有问题，但是看着不舒服，不推荐，还是顺序下来。<br>或者也可以只用一个数字。</p>\n<p><strong>栗如</strong>  </p>\n<pre><code>1.  First one\n\n1.  Second one\n\n1.  THird one  \n</code></pre><p>列表通常在最左边，但是也可以缩进，最多三个空格，标记后面一定要接上至少一个空格或者制表符<br>如果列表间由空行，<a href=\"https://en.wikipedia.org/wiki/Markdowna\" target=\"_blank\" rel=\"noopener\">Markdown</a>会用\\标签将内容裹起来</p>\n<p><strong>栗子</strong> ：  </p>\n<pre><code>*   Bird\n\n*   Magic  \n</code></pre><p>会被转换成：  </p>\n<pre><code>&gt;    &lt;ul&gt;\n\n&gt;    &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;\n\n&gt;    &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;\n\n&gt;    &lt;/ul&gt;  \n</code></pre><p>显示为:</p>\n<ul>\n<li><p>Bird</p>\n</li>\n<li><p>Magic  </p>\n</li>\n</ul>\n<p>列表可以包含多个段落，但是记得每个段落都要缩进哦</p>\n<p>如果放引用，&gt;也要缩进<br>如果放代码区块，这个区块就要缩进两次<br>如果要在行首输入2017. 这种数字+句点+空白，可以在句点前面加反斜杠，即2017.</p>\n<h2 id=\"代码区块\"><a href=\"#代码区块\" class=\"headerlink\" title=\"代码区块\"></a>代码区块</h2><p>终于到这啦，代码区块最简单了，只要简单的缩进4个空格或者一个tab,或者,```这个标识,</p>\n<p><strong>栗子</strong> ：  </p>\n<ul>\n<li>____printf(“hello world”)</li>\n<li><tab>printf(“hello world”) </tab></li>\n<li>```<br>printf(“hello world”)<br>```   </li>\n</ul>\n<p>显示为:   </p>\n<pre><code>printf(&quot;hello world&quot;)\n</code></pre><p>markdown 会自动在代码区块外面加上\\，而且代码区块里面&amp; &lt; &gt;会自动转成<a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>实体，所以可以想怎么写code就怎么写</p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>表格对齐方式  </p>\n<pre><code>1.  居左: :----\n\n2.  居中: :----: 或者　-----\n\n3.  居右: ----:  \n</code></pre><h2 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h2><p>可以在一行中用三个以上的<em>，-，_ 来建立一个分割线。行内不可以用其他东西，可以在</em> -中间插入空格。  </p>\n<pre><code>* * *\n\n****\n\n---\n\n___  \n</code></pre><p>显示为:</p>\n<hr>\n<hr>\n<hr>\n<hr>\n<h1 id=\"区段元素\"><a href=\"#区段元素\" class=\"headerlink\" title=\"区段元素\"></a>区段元素</h1><h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>支持行内式和参考式两种，但都是用[]标记链接文字</p>\n<h3 id=\"行内式\"><a href=\"#行内式\" class=\"headerlink\" title=\"行内式\"></a>行内式</h3><p>在方括号后面接一个()在里面写上网址就行，如果要加title,在后面用单引号、双引号或是括弧把title文字包起来就行</p>\n<p><strong>栗子</strong> ：  </p>\n<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.\n\n[This link](http://example.net/) has no title attribute.  \n</code></pre><p>如果想要链接到同主机资源，用相对路径  </p>\n<pre><code>See my [About](/about/) page for details.  \n</code></pre><h3 id=\"参考式\"><a href=\"#参考式\" class=\"headerlink\" title=\"参考式\"></a>参考式</h3><p>参考式是在后面加上另一个[],在里面写上标记  </p>\n<pre><code>This is [an example][id] reference-style link.  \n</code></pre><p>可以在方括号中间加空格。。。<br>最后在文件的任意处，可以是段尾，可以是文件尾，把标记的链接定义出来  </p>\n<pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;  \n</code></pre><p>要注意的是[]后面有一个:,还有一个以上的空格，id这个标记是不区分大小写的！链接网址可以用&lt;&gt;包起来。</p>\n<h3 id=\"隐式链接\"><a href=\"#隐式链接\" class=\"headerlink\" title=\"隐式链接\"></a>隐式链接</h3><p>隐式链接标记功能可以让你省略号指定的链接标记，这种情况标记会被视为等同于链接文字。<br>隐式链接只要在链接文字后面加上一个空的[]</p>\n<p><strong>栗子</strong> ：  </p>\n<pre><code>[Google][]\n\n[Google]: http://google.com/  \n</code></pre><p>参考式链接的优点是比较好读，可以将一些标记的元数据移到段落之外，可以是段尾文件尾，这样就可以不让文章的阅读感被打断</p>\n<h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><p>如果你的<em> 和_ 两边都有空白，就只会被当成普通的</em> _</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>如果要标记一小段行内代码，可以用反引号｀把它包起来  </p>\n<pre><code>Use the `printf()` function.  \n</code></pre><p>显示为:</p>\n<p>Use the <code>printf()</code> function.  </p>\n<p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：  </p>\n<pre><code>``There is a literal backtick (`) here.``  \n</code></pre><p>显示为:</p>\n<p><code>There is a literal backtick (`) here.</code>  </p>\n<p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，酱紫就可以在区段开始就加入一个反引号  </p>\n<pre><code>A single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``  \n</code></pre><p>显示为:</p>\n<p>A single backtick in a code span: <code>` </code></p>\n<p>A backtick-delimited string in a code span: <code>`foo` </code>  </p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><p>使用行内式和参考式</p>\n<h3 id=\"行内式-1\"><a href=\"#行内式-1\" class=\"headerlink\" title=\"行内式\"></a>行内式</h3><pre><code>![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)  \n</code></pre><h3 id=\"参考式-1\"><a href=\"#参考式-1\" class=\"headerlink\" title=\"参考式\"></a>参考式</h3><pre><code>![Alt text][id]\n\n[id]: url/to/image  &quot;Optional title attribute&quot;  \n</code></pre><p>这部分和链接是差不多的,但如果想要指定图片的宽高，可以使用普通的<code>&lt;img&gt;</code>标签.</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h2><p>用&lt;&gt;包起来的，都会被自动转成链接  </p>\n<pre><code>&lt;http://example.com/&gt;  \n</code></pre><p>会被转成  </p>\n<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;  \n</code></pre><h2 id=\"反斜杠\"><a href=\"#反斜杠\" class=\"headerlink\" title=\"反斜杠\"></a>反斜杠</h2><p>可以用\\插入一些在语法中有含义的符号  </p>\n<pre><code>\\   反斜线      `   反引号\n\n`*   星号       _   底线`\n\n{}  花括号      []  方括号\n\n()  括弧        #   井字号\n\n\\+   加号       \\-   减号\n\n.   英文句点    !   惊叹号  \n</code></pre><p>上面就是我学[Markdown][]的一些笔记，可能会有缺少的，有看到的可以指正～。</p>"},{"title":"机器学习基石--Feasibility of Learning","comments":1,"mathjax":false,"date":"2019-04-08T09:38:49.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n《机器学习基石》第四讲**Feasibility of Learning**的课程笔记。主要介绍了机器学习的可行性。\n{% endnote %}\n<!--more-->\n\n机器学习很多时候，如果不加限制，常常会因为标准的不同，而有很多的不一样的结果。\n\n并且，在训练集内得到的结果拟合的很好，但是在测试集甚至所有的可能来看，可能就是错误的，可能就是不确定的\n\n# Learning is impossiable\n\n## No Free Lunch\n> 即: 天下没有免费的午餐\n> 用于比较两种优化算法之间的关系，即如何确定一种算法比另外一种算法好\n\nNFL定理的前提是，所有问题出现的机会相等、或所有问题都是同等重要。\n\n而实际情形往往并不是这样。一般我们只需要关注自己正要解决的问题即可。而对于我们的解决方案在另一个问题上的表现是否同等出色，我们并不关心。\n\n> 因此，脱离具体问题而空谈“什么算法最好”之类的讨论毫无意义. \n>  因为若考虑所有潜在的问题，那么所有的模型、算法都一样好——这也是我们通过NFL定理得出的。\n> 要比较模型的相对优劣，则必须建立在与之对应的学习问题之上。\n\n# Probability to the Rescue\n\n## Hoeffding's Inequality\n> Hoeffding 不等式\n\n大概意思就是不知道很大的样本中的概率，但是我们可以通过很多次的抽样，得到的概率来推测真正的概率。\n\n想到以前数学家证明硬币一面朝上的概率，通过很多很多很多次的抛硬币来统计每面朝上的概率，最后证明就是1/2，并且抛的次数越多，概率越接近。\n\n{% asset_img fol1.png \"Hoeffding Inequality 1/2\" %}\n{% asset_img fol2.png \"Hoeffding Inequality 2/2\" %}\n\n# Connection to Learning\n\n$$ E_in(h) $$代表我们抽的样本中的不一致概率\n\n$$ E_out(h) $$代表总的样本中的不一致的概率\n\n可以推断说N足够大时，$$ E_in(h) \\sim E_out(h) $$\n\n如果$$ E_in(h) \\sim E_out(h) $$，并且$$ E_in(h) $$很小，我们就可以推断，$$ E_out(h) $$很小，并且，$$ h \\sim f with respect to P $$\n\n{% asset_img fol3.png \"Added Componentss\" %}\n{% asset_img fol4.png \"The Formal Guarantee\" %}\n\n{% note danger %}\n**real learning** is: $$ A $$ shall **make choices $$ \\in H $$** (like PLA)\nrather than *being forced to pick one h*\n{% endnote %}\n\n{% note info %}\n可以使用历史数据(data)来验证一个假设的表现到底好不好, 可以理解为验证集\n{% endnote %}\n\n# Connection to Real Learning\n提出了问题：如果我们在一堆假设中看到了一个假设，在我们选出的样本上全对，我们要不要选择这个假设？举例子就是每个人都抛硬币，抛五次，可能有一个人会五次全都朝上，我们要不要说这个硬币会有点特殊？\n\nHoeffding说的是取样的和真实的大部分情况下是符合的，只有小部分是不好的\n\n事实上当你有选择的时候，比如这里抛五次硬币实验150次的时候,150次试验里出现一次五个硬币同时朝上的概率就是$$ 1 - {(31 \\over 32)^150} > 99% $$\n\n因此不好的样本，在有选择的时候，出现的概率会恶化。\n**不好的Data** == $$ A $$不可以自由做选择，可能会踩雷 == 存在$$ h $$使$$ E_out(h) $$和$$ E_in(h) $$\n差得很大\n\nHoeffding说的是在一个Data里面，抽一堆和大部分符合\n\n这里说的其实是一堆Data里，出现不好的Data的概率是：\n{% asset_img fol5.png \"Bound of BAD Data\" %}\n\n所以如果假设数量有限，即M有限，并且每个Data样本N足够大，那么不管$$ A $$怎么选，$$ E_out(g) \\sim E_in(g)$$，即可以放心选，这样就说明了有限数量的h情况下，机器学习是可行的\n\n\n\n","source":"_posts/机器学习基石-Feasibility-of-Learning.md","raw":"---\ntitle: 机器学习基石--Feasibility of Learning\ncomments: true\nmathjax: false\ndate: 2019-04-08 17:38:49\ntags: [机器学习基石,MachineLearning]\ncategories: [MachineLearning,机器学习基石,]\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n《机器学习基石》第四讲**Feasibility of Learning**的课程笔记。主要介绍了机器学习的可行性。\n{% endnote %}\n<!--more-->\n\n机器学习很多时候，如果不加限制，常常会因为标准的不同，而有很多的不一样的结果。\n\n并且，在训练集内得到的结果拟合的很好，但是在测试集甚至所有的可能来看，可能就是错误的，可能就是不确定的\n\n# Learning is impossiable\n\n## No Free Lunch\n> 即: 天下没有免费的午餐\n> 用于比较两种优化算法之间的关系，即如何确定一种算法比另外一种算法好\n\nNFL定理的前提是，所有问题出现的机会相等、或所有问题都是同等重要。\n\n而实际情形往往并不是这样。一般我们只需要关注自己正要解决的问题即可。而对于我们的解决方案在另一个问题上的表现是否同等出色，我们并不关心。\n\n> 因此，脱离具体问题而空谈“什么算法最好”之类的讨论毫无意义. \n>  因为若考虑所有潜在的问题，那么所有的模型、算法都一样好——这也是我们通过NFL定理得出的。\n> 要比较模型的相对优劣，则必须建立在与之对应的学习问题之上。\n\n# Probability to the Rescue\n\n## Hoeffding's Inequality\n> Hoeffding 不等式\n\n大概意思就是不知道很大的样本中的概率，但是我们可以通过很多次的抽样，得到的概率来推测真正的概率。\n\n想到以前数学家证明硬币一面朝上的概率，通过很多很多很多次的抛硬币来统计每面朝上的概率，最后证明就是1/2，并且抛的次数越多，概率越接近。\n\n{% asset_img fol1.png \"Hoeffding Inequality 1/2\" %}\n{% asset_img fol2.png \"Hoeffding Inequality 2/2\" %}\n\n# Connection to Learning\n\n$$ E_in(h) $$代表我们抽的样本中的不一致概率\n\n$$ E_out(h) $$代表总的样本中的不一致的概率\n\n可以推断说N足够大时，$$ E_in(h) \\sim E_out(h) $$\n\n如果$$ E_in(h) \\sim E_out(h) $$，并且$$ E_in(h) $$很小，我们就可以推断，$$ E_out(h) $$很小，并且，$$ h \\sim f with respect to P $$\n\n{% asset_img fol3.png \"Added Componentss\" %}\n{% asset_img fol4.png \"The Formal Guarantee\" %}\n\n{% note danger %}\n**real learning** is: $$ A $$ shall **make choices $$ \\in H $$** (like PLA)\nrather than *being forced to pick one h*\n{% endnote %}\n\n{% note info %}\n可以使用历史数据(data)来验证一个假设的表现到底好不好, 可以理解为验证集\n{% endnote %}\n\n# Connection to Real Learning\n提出了问题：如果我们在一堆假设中看到了一个假设，在我们选出的样本上全对，我们要不要选择这个假设？举例子就是每个人都抛硬币，抛五次，可能有一个人会五次全都朝上，我们要不要说这个硬币会有点特殊？\n\nHoeffding说的是取样的和真实的大部分情况下是符合的，只有小部分是不好的\n\n事实上当你有选择的时候，比如这里抛五次硬币实验150次的时候,150次试验里出现一次五个硬币同时朝上的概率就是$$ 1 - {(31 \\over 32)^150} > 99% $$\n\n因此不好的样本，在有选择的时候，出现的概率会恶化。\n**不好的Data** == $$ A $$不可以自由做选择，可能会踩雷 == 存在$$ h $$使$$ E_out(h) $$和$$ E_in(h) $$\n差得很大\n\nHoeffding说的是在一个Data里面，抽一堆和大部分符合\n\n这里说的其实是一堆Data里，出现不好的Data的概率是：\n{% asset_img fol5.png \"Bound of BAD Data\" %}\n\n所以如果假设数量有限，即M有限，并且每个Data样本N足够大，那么不管$$ A $$怎么选，$$ E_out(g) \\sim E_in(g)$$，即可以放心选，这样就说明了有限数量的h情况下，机器学习是可行的\n\n\n\n","slug":"机器学习基石-Feasibility-of-Learning","published":1,"updated":"2019-07-20T12:10:19.212Z","layout":"post","photos":[],"link":"","_id":"cjycjtk1c007dussb8ex1jy2s","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><p>《机器学习基石》第四讲<strong>Feasibility of Learning</strong>的课程笔记。主要介绍了机器学习的可行性。</p></div>\n<a id=\"more\"></a>\n<p>机器学习很多时候，如果不加限制，常常会因为标准的不同，而有很多的不一样的结果。</p>\n<p>并且，在训练集内得到的结果拟合的很好，但是在测试集甚至所有的可能来看，可能就是错误的，可能就是不确定的</p>\n<h1 id=\"Learning-is-impossiable\"><a href=\"#Learning-is-impossiable\" class=\"headerlink\" title=\"Learning is impossiable\"></a>Learning is impossiable</h1><h2 id=\"No-Free-Lunch\"><a href=\"#No-Free-Lunch\" class=\"headerlink\" title=\"No Free Lunch\"></a>No Free Lunch</h2><blockquote>\n<p>即: 天下没有免费的午餐<br>用于比较两种优化算法之间的关系，即如何确定一种算法比另外一种算法好</p>\n</blockquote>\n<p>NFL定理的前提是，所有问题出现的机会相等、或所有问题都是同等重要。</p>\n<p>而实际情形往往并不是这样。一般我们只需要关注自己正要解决的问题即可。而对于我们的解决方案在另一个问题上的表现是否同等出色，我们并不关心。</p>\n<blockquote>\n<p>因此，脱离具体问题而空谈“什么算法最好”之类的讨论毫无意义.<br> 因为若考虑所有潜在的问题，那么所有的模型、算法都一样好——这也是我们通过NFL定理得出的。<br>要比较模型的相对优劣，则必须建立在与之对应的学习问题之上。</p>\n</blockquote>\n<h1 id=\"Probability-to-the-Rescue\"><a href=\"#Probability-to-the-Rescue\" class=\"headerlink\" title=\"Probability to the Rescue\"></a>Probability to the Rescue</h1><h2 id=\"Hoeffding’s-Inequality\"><a href=\"#Hoeffding’s-Inequality\" class=\"headerlink\" title=\"Hoeffding’s Inequality\"></a>Hoeffding’s Inequality</h2><blockquote>\n<p>Hoeffding 不等式</p>\n</blockquote>\n<p>大概意思就是不知道很大的样本中的概率，但是我们可以通过很多次的抽样，得到的概率来推测真正的概率。</p>\n<p>想到以前数学家证明硬币一面朝上的概率，通过很多很多很多次的抛硬币来统计每面朝上的概率，最后证明就是1/2，并且抛的次数越多，概率越接近。</p>\n\n\n<h1 id=\"Connection-to-Learning\"><a href=\"#Connection-to-Learning\" class=\"headerlink\" title=\"Connection to Learning\"></a>Connection to Learning</h1><script type=\"math/tex; mode=display\">E_in(h) $$代表我们抽的样本中的不一致概率\n\n$$ E_out(h) $$代表总的样本中的不一致的概率\n\n可以推断说N足够大时，$$ E_in(h) \\sim E_out(h)</script><p>如果<script type=\"math/tex\">E_in(h) \\sim E_out(h)</script>，并且<script type=\"math/tex\">E_in(h)</script>很小，我们就可以推断，<script type=\"math/tex\">E_out(h)</script>很小，并且，<script type=\"math/tex\">h \\sim f with respect to P</script></p>\n\n\n<div class=\"note danger\"><p><strong>real learning</strong> is: <script type=\"math/tex\">A</script> shall <strong>make choices <script type=\"math/tex\">\\in H</script></strong> (like PLA)<br>rather than <em>being forced to pick one h</em></p></div>\n<div class=\"note info\"><p>可以使用历史数据(data)来验证一个假设的表现到底好不好, 可以理解为验证集</p></div>\n<h1 id=\"Connection-to-Real-Learning\"><a href=\"#Connection-to-Real-Learning\" class=\"headerlink\" title=\"Connection to Real Learning\"></a>Connection to Real Learning</h1><p>提出了问题：如果我们在一堆假设中看到了一个假设，在我们选出的样本上全对，我们要不要选择这个假设？举例子就是每个人都抛硬币，抛五次，可能有一个人会五次全都朝上，我们要不要说这个硬币会有点特殊？</p>\n<p>Hoeffding说的是取样的和真实的大部分情况下是符合的，只有小部分是不好的</p>\n<p>事实上当你有选择的时候，比如这里抛五次硬币实验150次的时候,150次试验里出现一次五个硬币同时朝上的概率就是<script type=\"math/tex\">1 - {(31 \\over 32)^150} > 99%</script></p>\n<p>因此不好的样本，在有选择的时候，出现的概率会恶化。<br><strong>不好的Data</strong> == <script type=\"math/tex\">A</script>不可以自由做选择，可能会踩雷 == 存在<script type=\"math/tex\">h</script>使<script type=\"math/tex\">E_out(h)</script>和<script type=\"math/tex\">E_in(h)</script><br>差得很大</p>\n<p>Hoeffding说的是在一个Data里面，抽一堆和大部分符合</p>\n<p>这里说的其实是一堆Data里，出现不好的Data的概率是：<br></p>\n<p>所以如果假设数量有限，即M有限，并且每个Data样本N足够大，那么不管<script type=\"math/tex\">A</script>怎么选，<script type=\"math/tex\">E_out(g) \\sim E_in(g)</script>，即可以放心选，这样就说明了有限数量的h情况下，机器学习是可行的</p>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><p>《机器学习基石》第四讲<strong>Feasibility of Learning</strong>的课程笔记。主要介绍了机器学习的可行性。</p></div>","more":"<p>机器学习很多时候，如果不加限制，常常会因为标准的不同，而有很多的不一样的结果。</p>\n<p>并且，在训练集内得到的结果拟合的很好，但是在测试集甚至所有的可能来看，可能就是错误的，可能就是不确定的</p>\n<h1 id=\"Learning-is-impossiable\"><a href=\"#Learning-is-impossiable\" class=\"headerlink\" title=\"Learning is impossiable\"></a>Learning is impossiable</h1><h2 id=\"No-Free-Lunch\"><a href=\"#No-Free-Lunch\" class=\"headerlink\" title=\"No Free Lunch\"></a>No Free Lunch</h2><blockquote>\n<p>即: 天下没有免费的午餐<br>用于比较两种优化算法之间的关系，即如何确定一种算法比另外一种算法好</p>\n</blockquote>\n<p>NFL定理的前提是，所有问题出现的机会相等、或所有问题都是同等重要。</p>\n<p>而实际情形往往并不是这样。一般我们只需要关注自己正要解决的问题即可。而对于我们的解决方案在另一个问题上的表现是否同等出色，我们并不关心。</p>\n<blockquote>\n<p>因此，脱离具体问题而空谈“什么算法最好”之类的讨论毫无意义.<br> 因为若考虑所有潜在的问题，那么所有的模型、算法都一样好——这也是我们通过NFL定理得出的。<br>要比较模型的相对优劣，则必须建立在与之对应的学习问题之上。</p>\n</blockquote>\n<h1 id=\"Probability-to-the-Rescue\"><a href=\"#Probability-to-the-Rescue\" class=\"headerlink\" title=\"Probability to the Rescue\"></a>Probability to the Rescue</h1><h2 id=\"Hoeffding’s-Inequality\"><a href=\"#Hoeffding’s-Inequality\" class=\"headerlink\" title=\"Hoeffding’s Inequality\"></a>Hoeffding’s Inequality</h2><blockquote>\n<p>Hoeffding 不等式</p>\n</blockquote>\n<p>大概意思就是不知道很大的样本中的概率，但是我们可以通过很多次的抽样，得到的概率来推测真正的概率。</p>\n<p>想到以前数学家证明硬币一面朝上的概率，通过很多很多很多次的抛硬币来统计每面朝上的概率，最后证明就是1/2，并且抛的次数越多，概率越接近。</p>\n\n\n<h1 id=\"Connection-to-Learning\"><a href=\"#Connection-to-Learning\" class=\"headerlink\" title=\"Connection to Learning\"></a>Connection to Learning</h1><script type=\"math/tex; mode=display\">E_in(h) $$代表我们抽的样本中的不一致概率\n\n$$ E_out(h) $$代表总的样本中的不一致的概率\n\n可以推断说N足够大时，$$ E_in(h) \\sim E_out(h)</script><p>如果<script type=\"math/tex\">E_in(h) \\sim E_out(h)</script>，并且<script type=\"math/tex\">E_in(h)</script>很小，我们就可以推断，<script type=\"math/tex\">E_out(h)</script>很小，并且，<script type=\"math/tex\">h \\sim f with respect to P</script></p>\n\n\n<div class=\"note danger\"><p><strong>real learning</strong> is: <script type=\"math/tex\">A</script> shall <strong>make choices <script type=\"math/tex\">\\in H</script></strong> (like PLA)<br>rather than <em>being forced to pick one h</em></p></div>\n<div class=\"note info\"><p>可以使用历史数据(data)来验证一个假设的表现到底好不好, 可以理解为验证集</p></div>\n<h1 id=\"Connection-to-Real-Learning\"><a href=\"#Connection-to-Real-Learning\" class=\"headerlink\" title=\"Connection to Real Learning\"></a>Connection to Real Learning</h1><p>提出了问题：如果我们在一堆假设中看到了一个假设，在我们选出的样本上全对，我们要不要选择这个假设？举例子就是每个人都抛硬币，抛五次，可能有一个人会五次全都朝上，我们要不要说这个硬币会有点特殊？</p>\n<p>Hoeffding说的是取样的和真实的大部分情况下是符合的，只有小部分是不好的</p>\n<p>事实上当你有选择的时候，比如这里抛五次硬币实验150次的时候,150次试验里出现一次五个硬币同时朝上的概率就是<script type=\"math/tex\">1 - {(31 \\over 32)^150} > 99%</script></p>\n<p>因此不好的样本，在有选择的时候，出现的概率会恶化。<br><strong>不好的Data</strong> == <script type=\"math/tex\">A</script>不可以自由做选择，可能会踩雷 == 存在<script type=\"math/tex\">h</script>使<script type=\"math/tex\">E_out(h)</script>和<script type=\"math/tex\">E_in(h)</script><br>差得很大</p>\n<p>Hoeffding说的是在一个Data里面，抽一堆和大部分符合</p>\n<p>这里说的其实是一堆Data里，出现不好的Data的概率是：<br></p>\n<p>所以如果假设数量有限，即M有限，并且每个Data样本N足够大，那么不管<script type=\"math/tex\">A</script>怎么选，<script type=\"math/tex\">E_out(g) \\sim E_in(g)</script>，即可以放心选，这样就说明了有限数量的h情况下，机器学习是可行的</p>"},{"title":"机器学习基石--PLA算法","comments":1,"mathjax":true,"date":"2019-04-07T04:36:48.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n《机器学习基石》第二讲 **Learning to Answer Yes/NO** 课程笔记。这一讲主要介绍了机器学习基本概念和感知机，以及其训练算法PLA。\n{% endnote %}\n<!--more-->\n\n## 基本概念\n- $$\\mathcal f$$: 未知的目标函数\n- $$\\mathcal D$$: 训练样本，数据集\n- $$\\mathcal A$$: 学习算法\n- $$\\mathcal H$$: 假设集\n- $$\\mathcal g$$: 最终的假设，是\\mathcalf的一个近似函数\n\n课件上很清楚的描绘了机器学习的一个过程\n{% asset_img pla1.png 基本过程 %}\n\n## 感知机\n感知机是神经网络的基础，与线性回归（Linear Regression），逻辑回归（Logistics Regression）等模型也非常类似，是一种非常典型的线性模型。\n\n原始的感知机算法用于解决二分类问题，其思想如下：假设样本有 d 个特征，但是每个特征的重要性不一样，因此各个特征的权重也不一样，对其进行加权后得到的总和假如大于某个阈值则认为归为其中一类，反之归为另一类。如在信用卡的例子中，通过感知机有如下的结果\n{% asset_img pla2.png 推导过程 %}\n\n然后可以将threshold化为常数项作为$$w_0$$,简化为下图：\n{% asset_img pla3.png 简化过程%}\n上面的$$w$$和$$x$$均为一个列向量，即$$w$$转置后成为行向量\n\n## PLA\n感知机要通过学习才能对样本进行正确的分类，这个学习的过程就是PLA(Perceptron Learning Algorithm).\n\n**过程如下**：\n1. 随机初始化参数$$w$$\n2. 利用参数$$w$$预测每个样本点的值并与其实际的值比较，对于分类错误的样本点(xn,yn),利用公式$$w=w+ynxn$$更新参数$$w$$的值\n3. 重复上面的过程直到所有的样本点都能够被参数$$w$$正确预测。\n\n对于某个被预测错误的样本点，参数$$ w $$更新过程如下：\n{% asset_img pla4.png w的更新 %}\n\n注意上面的算法的前提是所有的样本点都必须线性可分，假如样本点线性不可分，那么PLA按照上面的规则会陷入死循环中。如下是线性可分与线性不可分的例子)\n{% asset_img pla5.png 线性不可分的例子 %}\n\n## 收敛性证明\n上面提到只有当所有的样本均为线性可分时，PLA才能将所有的样本点正确分类后再停下了，但是这仅仅是定性的说明而已，并没有严格的数学正面来支撑其收敛性，下面要讲的便是通过数学证明来说明 PLA 算法的收敛性。\n\n课程中用两次递进的证明来说明收敛性\n{% asset_img pla6.png 简单证明 %}\n\n上面讲的是随着参数$$ w $$的更新,$$ w^T_fw_t+1 $$的值越来越大，也就是两者越来越相似\n衡量两个向量相似性的一种方法就是考虑他们的内积，值越大，代表两者约接近，但是这里还没对向量归一化，所以证明并不严格，但是已经说明了两者具有这个趋势，下面是更严格的过程\n{% asset_img pla7.png 严格证明 %}\n\n上面似乎只是说明了经过 T 次的纠错，wt 的值会限制在一个范围内，但是并没有给出最终结论\n$$ {w_f \\over ||w_f||}{w_T \\over ||w_T||} \\ge \\sqrt{T} * constant $$\n的证明过程，因此在这里进行推导过程的描述\n(注：这里的$$ w_f $$是不变的，因此$$ w_f $$与$$ w^T_f $$是一样的)\n\n假设经过了 T 次纠错，那由第一张PPT可知\n$$ w^T_fw_T \\ge w_f^Tw_{T-1} + \\min_{n}y_nw_f^Tx_n $$\n而由第二章张ppt可知\n$$ ||w_T||^2 \\le ||w_{T-1}||^2 + \\max_n||x_n||^2 \\le T\\max_n||x_n||^2 $$\n即：$$ ||w_T|| \\le \\sqrt{T}\\max_n||x_n|| $$\n\n综合上面两个式子有\n$$ {w_f^T \\over ||w_f^T||}{w_T \\over ||w_T||} \\ge {T\\min_ny_n^Tw^T_fx_n \\over ||w_f^T||\\sqrt{T}\\max_n||x_n||} = \\sqrt{T}{\\min_ny_n{w_f^T \\over ||w_f^T||}x_n \\over \\max_n||x_n||} = \\sqrt{T} * constant $$\n\n因此上面的命题得证。至此，已经可知道犯错误的次数 T 是受到某个上限的约束的。下面会给出这个具体的上限是多少。\n\n又因为\n$$ 1 \\ge {w_f^T \\over ||w_f^T||}{w_T\\over||w_T||} \\ge \\sqrt{T} * constant $$\n$$ {1\\over constant^2 } \\ge T$$\n即犯错的次数上限是${1 \\over constant^2}$,假设令\n$$ \\max_n||x||^2 = R^2, \\rho = \\min_ny_n{w_f^T \\over ||w_f^T||}x_n $$\n则有\n$$ T \\le {R^2 \\over \\rho^2} $$\n这也说明了PLA会在有限步内收敛，这个证明也是后面的练习答案\n\n## 优缺点和优化\nPLA 的优点和缺点都非常明显，其中优点是简单，易于实现\n\n缺点是假设了数据是线性可分的，然而事先并无法知道数据是否线性可分的。正如上面提到的一样，假如将PLA 用在线性不可分的数据中时，会导致PLA永远都无法对样本进行正确分类从而陷入到死循环中。\n\n为了避免上面的情况，将 PLA 的条件放宽一点，不再要求所有的样本都能正确地分开，而是要求犯错的的样本尽可能的少，即将问题变为了\n$$ arg\\min_w\\sum_{n=0}^N1\\{y_n \\neq sign(w^Tx_n)\\} $$\n\n这个最优化问题是个 NP-hard 问题，无法求得其最优解，因此只能求尽可能接近其最优解的近似解。讲义中提出的一种求解其近似解的算法`Pocket Algorithm`。  \n\n其思想就是每次保留当前最好的$$ w $$, 当遇到错误的样本点对$$ w $$进行修正后，比较修正后的$$ w $$与原来最好的$$ w $$在整个样本点上的总体效果再决定保留哪一个，重复迭代足够多的次数后返回当前得到的最好的$$ w $$。\n\n","source":"_posts/机器学习基石-PLA算法.md","raw":"---\ntitle: 机器学习基石--PLA算法\ncomments: true\nmathjax: true\ndate: 2019-04-07 12:36:48\ntags: [机器学习基石,MachineLearning,PLA]\ncategories: [MachineLearning,机器学习基石,]\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n《机器学习基石》第二讲 **Learning to Answer Yes/NO** 课程笔记。这一讲主要介绍了机器学习基本概念和感知机，以及其训练算法PLA。\n{% endnote %}\n<!--more-->\n\n## 基本概念\n- $$\\mathcal f$$: 未知的目标函数\n- $$\\mathcal D$$: 训练样本，数据集\n- $$\\mathcal A$$: 学习算法\n- $$\\mathcal H$$: 假设集\n- $$\\mathcal g$$: 最终的假设，是\\mathcalf的一个近似函数\n\n课件上很清楚的描绘了机器学习的一个过程\n{% asset_img pla1.png 基本过程 %}\n\n## 感知机\n感知机是神经网络的基础，与线性回归（Linear Regression），逻辑回归（Logistics Regression）等模型也非常类似，是一种非常典型的线性模型。\n\n原始的感知机算法用于解决二分类问题，其思想如下：假设样本有 d 个特征，但是每个特征的重要性不一样，因此各个特征的权重也不一样，对其进行加权后得到的总和假如大于某个阈值则认为归为其中一类，反之归为另一类。如在信用卡的例子中，通过感知机有如下的结果\n{% asset_img pla2.png 推导过程 %}\n\n然后可以将threshold化为常数项作为$$w_0$$,简化为下图：\n{% asset_img pla3.png 简化过程%}\n上面的$$w$$和$$x$$均为一个列向量，即$$w$$转置后成为行向量\n\n## PLA\n感知机要通过学习才能对样本进行正确的分类，这个学习的过程就是PLA(Perceptron Learning Algorithm).\n\n**过程如下**：\n1. 随机初始化参数$$w$$\n2. 利用参数$$w$$预测每个样本点的值并与其实际的值比较，对于分类错误的样本点(xn,yn),利用公式$$w=w+ynxn$$更新参数$$w$$的值\n3. 重复上面的过程直到所有的样本点都能够被参数$$w$$正确预测。\n\n对于某个被预测错误的样本点，参数$$ w $$更新过程如下：\n{% asset_img pla4.png w的更新 %}\n\n注意上面的算法的前提是所有的样本点都必须线性可分，假如样本点线性不可分，那么PLA按照上面的规则会陷入死循环中。如下是线性可分与线性不可分的例子)\n{% asset_img pla5.png 线性不可分的例子 %}\n\n## 收敛性证明\n上面提到只有当所有的样本均为线性可分时，PLA才能将所有的样本点正确分类后再停下了，但是这仅仅是定性的说明而已，并没有严格的数学正面来支撑其收敛性，下面要讲的便是通过数学证明来说明 PLA 算法的收敛性。\n\n课程中用两次递进的证明来说明收敛性\n{% asset_img pla6.png 简单证明 %}\n\n上面讲的是随着参数$$ w $$的更新,$$ w^T_fw_t+1 $$的值越来越大，也就是两者越来越相似\n衡量两个向量相似性的一种方法就是考虑他们的内积，值越大，代表两者约接近，但是这里还没对向量归一化，所以证明并不严格，但是已经说明了两者具有这个趋势，下面是更严格的过程\n{% asset_img pla7.png 严格证明 %}\n\n上面似乎只是说明了经过 T 次的纠错，wt 的值会限制在一个范围内，但是并没有给出最终结论\n$$ {w_f \\over ||w_f||}{w_T \\over ||w_T||} \\ge \\sqrt{T} * constant $$\n的证明过程，因此在这里进行推导过程的描述\n(注：这里的$$ w_f $$是不变的，因此$$ w_f $$与$$ w^T_f $$是一样的)\n\n假设经过了 T 次纠错，那由第一张PPT可知\n$$ w^T_fw_T \\ge w_f^Tw_{T-1} + \\min_{n}y_nw_f^Tx_n $$\n而由第二章张ppt可知\n$$ ||w_T||^2 \\le ||w_{T-1}||^2 + \\max_n||x_n||^2 \\le T\\max_n||x_n||^2 $$\n即：$$ ||w_T|| \\le \\sqrt{T}\\max_n||x_n|| $$\n\n综合上面两个式子有\n$$ {w_f^T \\over ||w_f^T||}{w_T \\over ||w_T||} \\ge {T\\min_ny_n^Tw^T_fx_n \\over ||w_f^T||\\sqrt{T}\\max_n||x_n||} = \\sqrt{T}{\\min_ny_n{w_f^T \\over ||w_f^T||}x_n \\over \\max_n||x_n||} = \\sqrt{T} * constant $$\n\n因此上面的命题得证。至此，已经可知道犯错误的次数 T 是受到某个上限的约束的。下面会给出这个具体的上限是多少。\n\n又因为\n$$ 1 \\ge {w_f^T \\over ||w_f^T||}{w_T\\over||w_T||} \\ge \\sqrt{T} * constant $$\n$$ {1\\over constant^2 } \\ge T$$\n即犯错的次数上限是${1 \\over constant^2}$,假设令\n$$ \\max_n||x||^2 = R^2, \\rho = \\min_ny_n{w_f^T \\over ||w_f^T||}x_n $$\n则有\n$$ T \\le {R^2 \\over \\rho^2} $$\n这也说明了PLA会在有限步内收敛，这个证明也是后面的练习答案\n\n## 优缺点和优化\nPLA 的优点和缺点都非常明显，其中优点是简单，易于实现\n\n缺点是假设了数据是线性可分的，然而事先并无法知道数据是否线性可分的。正如上面提到的一样，假如将PLA 用在线性不可分的数据中时，会导致PLA永远都无法对样本进行正确分类从而陷入到死循环中。\n\n为了避免上面的情况，将 PLA 的条件放宽一点，不再要求所有的样本都能正确地分开，而是要求犯错的的样本尽可能的少，即将问题变为了\n$$ arg\\min_w\\sum_{n=0}^N1\\{y_n \\neq sign(w^Tx_n)\\} $$\n\n这个最优化问题是个 NP-hard 问题，无法求得其最优解，因此只能求尽可能接近其最优解的近似解。讲义中提出的一种求解其近似解的算法`Pocket Algorithm`。  \n\n其思想就是每次保留当前最好的$$ w $$, 当遇到错误的样本点对$$ w $$进行修正后，比较修正后的$$ w $$与原来最好的$$ w $$在整个样本点上的总体效果再决定保留哪一个，重复迭代足够多的次数后返回当前得到的最好的$$ w $$。\n\n","slug":"机器学习基石-PLA算法","published":1,"updated":"2019-07-20T12:10:19.215Z","layout":"post","photos":[],"link":"","_id":"cjycjtk1f007eussbn4ne34an","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><p>《机器学习基石》第二讲 <strong>Learning to Answer Yes/NO</strong> 课程笔记。这一讲主要介绍了机器学习基本概念和感知机，以及其训练算法PLA。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li><script type=\"math/tex\">\\mathcal f</script>: 未知的目标函数</li>\n<li><script type=\"math/tex\">\\mathcal D</script>: 训练样本，数据集</li>\n<li><script type=\"math/tex\">\\mathcal A</script>: 学习算法</li>\n<li><script type=\"math/tex\">\\mathcal H</script>: 假设集</li>\n<li><script type=\"math/tex\">\\mathcal g</script>: 最终的假设，是\\mathcalf的一个近似函数</li>\n</ul>\n<p>课件上很清楚的描绘了机器学习的一个过程<br></p>\n<h2 id=\"感知机\"><a href=\"#感知机\" class=\"headerlink\" title=\"感知机\"></a>感知机</h2><p>感知机是神经网络的基础，与线性回归（Linear Regression），逻辑回归（Logistics Regression）等模型也非常类似，是一种非常典型的线性模型。</p>\n<p>原始的感知机算法用于解决二分类问题，其思想如下：假设样本有 d 个特征，但是每个特征的重要性不一样，因此各个特征的权重也不一样，对其进行加权后得到的总和假如大于某个阈值则认为归为其中一类，反之归为另一类。如在信用卡的例子中，通过感知机有如下的结果<br></p>\n<p>然后可以将threshold化为常数项作为<script type=\"math/tex\">w_0</script>,简化为下图：<br><br>上面的<script type=\"math/tex\">w</script>和<script type=\"math/tex\">x</script>均为一个列向量，即<script type=\"math/tex\">w</script>转置后成为行向量</p>\n<h2 id=\"PLA\"><a href=\"#PLA\" class=\"headerlink\" title=\"PLA\"></a>PLA</h2><p>感知机要通过学习才能对样本进行正确的分类，这个学习的过程就是PLA(Perceptron Learning Algorithm).</p>\n<p><strong>过程如下</strong>：</p>\n<ol>\n<li>随机初始化参数<script type=\"math/tex\">w</script></li>\n<li>利用参数<script type=\"math/tex\">w</script>预测每个样本点的值并与其实际的值比较，对于分类错误的样本点(xn,yn),利用公式<script type=\"math/tex\">w=w+ynxn</script>更新参数<script type=\"math/tex\">w</script>的值</li>\n<li>重复上面的过程直到所有的样本点都能够被参数<script type=\"math/tex\">w</script>正确预测。</li>\n</ol>\n<p>对于某个被预测错误的样本点，参数<script type=\"math/tex\">w</script>更新过程如下：<br></p>\n<p>注意上面的算法的前提是所有的样本点都必须线性可分，假如样本点线性不可分，那么PLA按照上面的规则会陷入死循环中。如下是线性可分与线性不可分的例子)<br></p>\n<h2 id=\"收敛性证明\"><a href=\"#收敛性证明\" class=\"headerlink\" title=\"收敛性证明\"></a>收敛性证明</h2><p>上面提到只有当所有的样本均为线性可分时，PLA才能将所有的样本点正确分类后再停下了，但是这仅仅是定性的说明而已，并没有严格的数学正面来支撑其收敛性，下面要讲的便是通过数学证明来说明 PLA 算法的收敛性。</p>\n<p>课程中用两次递进的证明来说明收敛性<br></p>\n<p>上面讲的是随着参数<script type=\"math/tex\">w</script>的更新,<script type=\"math/tex\">w^T_fw_t+1</script>的值越来越大，也就是两者越来越相似<br>衡量两个向量相似性的一种方法就是考虑他们的内积，值越大，代表两者约接近，但是这里还没对向量归一化，所以证明并不严格，但是已经说明了两者具有这个趋势，下面是更严格的过程<br></p>\n<p>上面似乎只是说明了经过 T 次的纠错，wt 的值会限制在一个范围内，但是并没有给出最终结论</p>\n<script type=\"math/tex; mode=display\">{w_f \\over ||w_f||}{w_T \\over ||w_T||} \\ge \\sqrt{T} * constant</script><p>的证明过程，因此在这里进行推导过程的描述<br>(注：这里的<script type=\"math/tex\">w_f</script>是不变的，因此<script type=\"math/tex\">w_f</script>与<script type=\"math/tex\">w^T_f</script>是一样的)</p>\n<p>假设经过了 T 次纠错，那由第一张PPT可知</p>\n<script type=\"math/tex; mode=display\">w^T_fw_T \\ge w_f^Tw_{T-1} + \\min_{n}y_nw_f^Tx_n</script><p>而由第二章张ppt可知</p>\n<script type=\"math/tex; mode=display\">||w_T||^2 \\le ||w_{T-1}||^2 + \\max_n||x_n||^2 \\le T\\max_n||x_n||^2</script><p>即：<script type=\"math/tex\">||w_T|| \\le \\sqrt{T}\\max_n||x_n||</script></p>\n<p>综合上面两个式子有</p>\n<script type=\"math/tex; mode=display\">{w_f^T \\over ||w_f^T||}{w_T \\over ||w_T||} \\ge {T\\min_ny_n^Tw^T_fx_n \\over ||w_f^T||\\sqrt{T}\\max_n||x_n||} = \\sqrt{T}{\\min_ny_n{w_f^T \\over ||w_f^T||}x_n \\over \\max_n||x_n||} = \\sqrt{T} * constant</script><p>因此上面的命题得证。至此，已经可知道犯错误的次数 T 是受到某个上限的约束的。下面会给出这个具体的上限是多少。</p>\n<p>又因为</p>\n<script type=\"math/tex; mode=display\">1 \\ge {w_f^T \\over ||w_f^T||}{w_T\\over||w_T||} \\ge \\sqrt{T} * constant</script><script type=\"math/tex; mode=display\">{1\\over constant^2 } \\ge T</script><p>即犯错的次数上限是${1 \\over constant^2}$,假设令</p>\n<script type=\"math/tex; mode=display\">\\max_n||x||^2 = R^2, \\rho = \\min_ny_n{w_f^T \\over ||w_f^T||}x_n</script><p>则有</p>\n<script type=\"math/tex; mode=display\">T \\le {R^2 \\over \\rho^2}</script><p>这也说明了PLA会在有限步内收敛，这个证明也是后面的练习答案</p>\n<h2 id=\"优缺点和优化\"><a href=\"#优缺点和优化\" class=\"headerlink\" title=\"优缺点和优化\"></a>优缺点和优化</h2><p>PLA 的优点和缺点都非常明显，其中优点是简单，易于实现</p>\n<p>缺点是假设了数据是线性可分的，然而事先并无法知道数据是否线性可分的。正如上面提到的一样，假如将PLA 用在线性不可分的数据中时，会导致PLA永远都无法对样本进行正确分类从而陷入到死循环中。</p>\n<p>为了避免上面的情况，将 PLA 的条件放宽一点，不再要求所有的样本都能正确地分开，而是要求犯错的的样本尽可能的少，即将问题变为了</p>\n<script type=\"math/tex; mode=display\">arg\\min_w\\sum_{n=0}^N1\\{y_n \\neq sign(w^Tx_n)\\}</script><p>这个最优化问题是个 NP-hard 问题，无法求得其最优解，因此只能求尽可能接近其最优解的近似解。讲义中提出的一种求解其近似解的算法<code>Pocket Algorithm</code>。  </p>\n<p>其思想就是每次保留当前最好的<script type=\"math/tex\">w</script>, 当遇到错误的样本点对<script type=\"math/tex\">w</script>进行修正后，比较修正后的<script type=\"math/tex\">w</script>与原来最好的<script type=\"math/tex\">w</script>在整个样本点上的总体效果再决定保留哪一个，重复迭代足够多的次数后返回当前得到的最好的<script type=\"math/tex\">w</script>。</p>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><p>《机器学习基石》第二讲 <strong>Learning to Answer Yes/NO</strong> 课程笔记。这一讲主要介绍了机器学习基本概念和感知机，以及其训练算法PLA。</p></div>","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li><script type=\"math/tex\">\\mathcal f</script>: 未知的目标函数</li>\n<li><script type=\"math/tex\">\\mathcal D</script>: 训练样本，数据集</li>\n<li><script type=\"math/tex\">\\mathcal A</script>: 学习算法</li>\n<li><script type=\"math/tex\">\\mathcal H</script>: 假设集</li>\n<li><script type=\"math/tex\">\\mathcal g</script>: 最终的假设，是\\mathcalf的一个近似函数</li>\n</ul>\n<p>课件上很清楚的描绘了机器学习的一个过程<br></p>\n<h2 id=\"感知机\"><a href=\"#感知机\" class=\"headerlink\" title=\"感知机\"></a>感知机</h2><p>感知机是神经网络的基础，与线性回归（Linear Regression），逻辑回归（Logistics Regression）等模型也非常类似，是一种非常典型的线性模型。</p>\n<p>原始的感知机算法用于解决二分类问题，其思想如下：假设样本有 d 个特征，但是每个特征的重要性不一样，因此各个特征的权重也不一样，对其进行加权后得到的总和假如大于某个阈值则认为归为其中一类，反之归为另一类。如在信用卡的例子中，通过感知机有如下的结果<br></p>\n<p>然后可以将threshold化为常数项作为<script type=\"math/tex\">w_0</script>,简化为下图：<br><br>上面的<script type=\"math/tex\">w</script>和<script type=\"math/tex\">x</script>均为一个列向量，即<script type=\"math/tex\">w</script>转置后成为行向量</p>\n<h2 id=\"PLA\"><a href=\"#PLA\" class=\"headerlink\" title=\"PLA\"></a>PLA</h2><p>感知机要通过学习才能对样本进行正确的分类，这个学习的过程就是PLA(Perceptron Learning Algorithm).</p>\n<p><strong>过程如下</strong>：</p>\n<ol>\n<li>随机初始化参数<script type=\"math/tex\">w</script></li>\n<li>利用参数<script type=\"math/tex\">w</script>预测每个样本点的值并与其实际的值比较，对于分类错误的样本点(xn,yn),利用公式<script type=\"math/tex\">w=w+ynxn</script>更新参数<script type=\"math/tex\">w</script>的值</li>\n<li>重复上面的过程直到所有的样本点都能够被参数<script type=\"math/tex\">w</script>正确预测。</li>\n</ol>\n<p>对于某个被预测错误的样本点，参数<script type=\"math/tex\">w</script>更新过程如下：<br></p>\n<p>注意上面的算法的前提是所有的样本点都必须线性可分，假如样本点线性不可分，那么PLA按照上面的规则会陷入死循环中。如下是线性可分与线性不可分的例子)<br></p>\n<h2 id=\"收敛性证明\"><a href=\"#收敛性证明\" class=\"headerlink\" title=\"收敛性证明\"></a>收敛性证明</h2><p>上面提到只有当所有的样本均为线性可分时，PLA才能将所有的样本点正确分类后再停下了，但是这仅仅是定性的说明而已，并没有严格的数学正面来支撑其收敛性，下面要讲的便是通过数学证明来说明 PLA 算法的收敛性。</p>\n<p>课程中用两次递进的证明来说明收敛性<br></p>\n<p>上面讲的是随着参数<script type=\"math/tex\">w</script>的更新,<script type=\"math/tex\">w^T_fw_t+1</script>的值越来越大，也就是两者越来越相似<br>衡量两个向量相似性的一种方法就是考虑他们的内积，值越大，代表两者约接近，但是这里还没对向量归一化，所以证明并不严格，但是已经说明了两者具有这个趋势，下面是更严格的过程<br></p>\n<p>上面似乎只是说明了经过 T 次的纠错，wt 的值会限制在一个范围内，但是并没有给出最终结论</p>\n<script type=\"math/tex; mode=display\">{w_f \\over ||w_f||}{w_T \\over ||w_T||} \\ge \\sqrt{T} * constant</script><p>的证明过程，因此在这里进行推导过程的描述<br>(注：这里的<script type=\"math/tex\">w_f</script>是不变的，因此<script type=\"math/tex\">w_f</script>与<script type=\"math/tex\">w^T_f</script>是一样的)</p>\n<p>假设经过了 T 次纠错，那由第一张PPT可知</p>\n<script type=\"math/tex; mode=display\">w^T_fw_T \\ge w_f^Tw_{T-1} + \\min_{n}y_nw_f^Tx_n</script><p>而由第二章张ppt可知</p>\n<script type=\"math/tex; mode=display\">||w_T||^2 \\le ||w_{T-1}||^2 + \\max_n||x_n||^2 \\le T\\max_n||x_n||^2</script><p>即：<script type=\"math/tex\">||w_T|| \\le \\sqrt{T}\\max_n||x_n||</script></p>\n<p>综合上面两个式子有</p>\n<script type=\"math/tex; mode=display\">{w_f^T \\over ||w_f^T||}{w_T \\over ||w_T||} \\ge {T\\min_ny_n^Tw^T_fx_n \\over ||w_f^T||\\sqrt{T}\\max_n||x_n||} = \\sqrt{T}{\\min_ny_n{w_f^T \\over ||w_f^T||}x_n \\over \\max_n||x_n||} = \\sqrt{T} * constant</script><p>因此上面的命题得证。至此，已经可知道犯错误的次数 T 是受到某个上限的约束的。下面会给出这个具体的上限是多少。</p>\n<p>又因为</p>\n<script type=\"math/tex; mode=display\">1 \\ge {w_f^T \\over ||w_f^T||}{w_T\\over||w_T||} \\ge \\sqrt{T} * constant</script><script type=\"math/tex; mode=display\">{1\\over constant^2 } \\ge T</script><p>即犯错的次数上限是${1 \\over constant^2}$,假设令</p>\n<script type=\"math/tex; mode=display\">\\max_n||x||^2 = R^2, \\rho = \\min_ny_n{w_f^T \\over ||w_f^T||}x_n</script><p>则有</p>\n<script type=\"math/tex; mode=display\">T \\le {R^2 \\over \\rho^2}</script><p>这也说明了PLA会在有限步内收敛，这个证明也是后面的练习答案</p>\n<h2 id=\"优缺点和优化\"><a href=\"#优缺点和优化\" class=\"headerlink\" title=\"优缺点和优化\"></a>优缺点和优化</h2><p>PLA 的优点和缺点都非常明显，其中优点是简单，易于实现</p>\n<p>缺点是假设了数据是线性可分的，然而事先并无法知道数据是否线性可分的。正如上面提到的一样，假如将PLA 用在线性不可分的数据中时，会导致PLA永远都无法对样本进行正确分类从而陷入到死循环中。</p>\n<p>为了避免上面的情况，将 PLA 的条件放宽一点，不再要求所有的样本都能正确地分开，而是要求犯错的的样本尽可能的少，即将问题变为了</p>\n<script type=\"math/tex; mode=display\">arg\\min_w\\sum_{n=0}^N1\\{y_n \\neq sign(w^Tx_n)\\}</script><p>这个最优化问题是个 NP-hard 问题，无法求得其最优解，因此只能求尽可能接近其最优解的近似解。讲义中提出的一种求解其近似解的算法<code>Pocket Algorithm</code>。  </p>\n<p>其思想就是每次保留当前最好的<script type=\"math/tex\">w</script>, 当遇到错误的样本点对<script type=\"math/tex\">w</script>进行修正后，比较修正后的<script type=\"math/tex\">w</script>与原来最好的<script type=\"math/tex\">w</script>在整个样本点上的总体效果再决定保留哪一个，重复迭代足够多的次数后返回当前得到的最好的<script type=\"math/tex\">w</script>。</p>"},{"title":"机器学习基石--Types of Learning","comments":1,"mathjax":true,"date":"2019-04-07T12:54:44.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n《机器学习基石》第三讲**Types of Learning**的笔记。主要介绍了机器学习的集中分类标准和具体分类。\n{% endnote %}\n<!--more-->\n\n# 不同的输出空间\n\n## 二元分类: binary classification\n很基本的分类问题，输出只有两种. 通俗的理解就是简单的是非题，要么是，要么不是。\n\n## 多元分类: multiclass classification\n很简单的例子就是对硬币的分类，课程中使用了美元的分类，1c, 5c, 10c, 25c 这样。\n\n输出可以不只两种，上述硬币的分类输出为四，输出可以是K种。\n\n二元分类是特殊的多元分类，即K=2的情况。\n\n**应用场景**:主要是视觉或听觉的辨识\n- 数字识别\n- 图片内容分类\n- 邮件的分类\n\n## 回归问题: Regression\n\n$ y=R $ or $y = [lower, upper] \\setminus R (bounded regression)$\n\n**特点是**输出是一个实数\n\n**应用**\n- 股票价格\n- 温度预测\n\n## 结构化学习: Structed Learning\n理解起来就是多元分类的扩展，有很多很多的类别，但是类别和类别之间有着某种潜在结构，我们要输出的就是这种结构。\n\n比如一个句子，可以是主谓宾、主谓等等，但是不可能是谓语谓语谓语这样。我们如果对一个句子进行语法判断，输出空间就是这些结构，而不是一个个的类别。\n\n**应用**:输出空间有着某种结构\n- 蛋白质的结构\n- 自然语言处理中语言的parse tree\n\n总的可以看下图：\n{% asset_img tol1.png Learning with Different Output Space %}\n\n\n# 不同程度标记的样本\n## 监督学习: Supervised Learning\n给了一堆样本，然后还对每个样本进行了标记是什么，即每个$$ x_n $$对应一个$$ y_n $$\n\n## 非监督学习: Unsupervised Learning\n给了一对样本，但是不给样本的正确标记(without yn), 让机器自己去把样本分成几类。\n\n**聚类**就相当于是**非监督的多分类问题**\n- 把一些文章按照不同的topic分类\n- 按照消费者的资料把消费者分类,针对不同的人群进行促销。\n\n**密度预测**相当于是**Unsupervised bounded regression**\n- 交通车流量分析,按照位置分\n\n**异常监测**相当于是**Unsupervised binary classification**\n- 网络流量分析\n\n{% note info %}\n聚类通常比较有用，但是评定聚类的好坏通常比较困难。\n{% endnote %}\n\n## 半监督式学习: Semi-supervised Learning\n比如硬币识别，但是只给了一部分$$ y_n $$，和其他没有标记的样本混在一起\n\n**应用**\n- 人脸识别，只有少量标记的面部照片\n- 药物效果预测，只有少量的药物有标签\n\n## 强化学习\n一种非常不同的，但是很自然的学习方式。不直接告诉它你要做什么，但是可以通过一定的行为反应，惩罚错误的结果，奖励正确的结果。\n\n比如训练狗狗，做得对就奖励，做的错就惩罚，没办法直接说给他听。\n\n**应用**\n- 广告系统输入的是顾客资料，顾客点击或者不点击，推荐\n\n## 总结\n{% asset_img tol2.png \"Learning with Different Data Label yn\" %}\n\n# 不同的训练方式\n## batch Supervised multiclass classification\n成批的将数据喂给机器学习的算法，算法从所有已知的data中学习，得到假设$$ g $$\n**应用**\n- 数据是email，得到邮件分类器\n- 数据是cancer资料，得到cancer分类器\n\n{% note info %}\n根据数据是否一次送入模型中训练分为batch learning和online learning.\n\nbatch learning像是填鸭式，online learning像是教书，一条一条教.\n{% endnote %}\n\n## online learning \n指每次有新样本的时候就用来训练更新 hypothesis，每一轮$$ g $$会更好, 常见的比如说有垃圾邮件分类系统.\n\n增强学习和PLA常常比较接近online learning\n\n## active learning\n希望是机器能够主动的问选择的$$ x_n $$对应的$$ y_n $$，可以通过这种方式用很少的labels来提高$$ g $$\n\n# 不同的输入空间\n根据输入的样本的特征来分也可以分为下面三类（虽然这种分类方法并不常见）：concrete features，raw features 和 abstract features。\n\n## concrete features\n指输入的样本已经标注好了各种特征，如信用卡例子中顾客的各种资料\n\n## raw features\n一般指图像或音频中的图像或声波，这些信息是原始的信号，需要进行一些转换才能使用。\n\n比如手写数字识别，16x16的像素格，可以将16x16=256个像素变成一个256维的向量输入。\n\n## abstract features\n课程中用了KDDCup的例子，给出每个用户和他们喜欢听的音乐，要预测这个用户对一个新歌曲的评分是多少。\n输入的是，用户id，歌曲的id，输出是评分数字\n\n但是输入的特征并不是很直接，需要一方面人来提示，还有是机器自己从每个人喜欢听的歌里面得到特征，从每首歌的曲风等特征里面总结出特征，然后再用这些特征训练，得到结果。\n\n这种按照输入样本的 features 进行分类的方法在实际中并不常用，因为输入的样本往往是各种 features交杂在一起的，不同问题需要与其相应的 features 才能得到好的效果，features 对结果的影响比较大。因此机器学习中也产生了 feature engineering 一说。\n\n## 总结\n{% asset_img tol3.png \"Learning with Different input Space\" %}\n\n\n\n\n","source":"_posts/机器学习基石-Types-of-Learning.md","raw":"---\ntitle: 机器学习基石--Types of Learning\ncomments: true\nmathjax: true\ndate: 2019-04-07 20:54:44\ntags: [机器学习基石,MachineLearning]\ncategories: [MachineLearning,机器学习基石,]\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n《机器学习基石》第三讲**Types of Learning**的笔记。主要介绍了机器学习的集中分类标准和具体分类。\n{% endnote %}\n<!--more-->\n\n# 不同的输出空间\n\n## 二元分类: binary classification\n很基本的分类问题，输出只有两种. 通俗的理解就是简单的是非题，要么是，要么不是。\n\n## 多元分类: multiclass classification\n很简单的例子就是对硬币的分类，课程中使用了美元的分类，1c, 5c, 10c, 25c 这样。\n\n输出可以不只两种，上述硬币的分类输出为四，输出可以是K种。\n\n二元分类是特殊的多元分类，即K=2的情况。\n\n**应用场景**:主要是视觉或听觉的辨识\n- 数字识别\n- 图片内容分类\n- 邮件的分类\n\n## 回归问题: Regression\n\n$ y=R $ or $y = [lower, upper] \\setminus R (bounded regression)$\n\n**特点是**输出是一个实数\n\n**应用**\n- 股票价格\n- 温度预测\n\n## 结构化学习: Structed Learning\n理解起来就是多元分类的扩展，有很多很多的类别，但是类别和类别之间有着某种潜在结构，我们要输出的就是这种结构。\n\n比如一个句子，可以是主谓宾、主谓等等，但是不可能是谓语谓语谓语这样。我们如果对一个句子进行语法判断，输出空间就是这些结构，而不是一个个的类别。\n\n**应用**:输出空间有着某种结构\n- 蛋白质的结构\n- 自然语言处理中语言的parse tree\n\n总的可以看下图：\n{% asset_img tol1.png Learning with Different Output Space %}\n\n\n# 不同程度标记的样本\n## 监督学习: Supervised Learning\n给了一堆样本，然后还对每个样本进行了标记是什么，即每个$$ x_n $$对应一个$$ y_n $$\n\n## 非监督学习: Unsupervised Learning\n给了一对样本，但是不给样本的正确标记(without yn), 让机器自己去把样本分成几类。\n\n**聚类**就相当于是**非监督的多分类问题**\n- 把一些文章按照不同的topic分类\n- 按照消费者的资料把消费者分类,针对不同的人群进行促销。\n\n**密度预测**相当于是**Unsupervised bounded regression**\n- 交通车流量分析,按照位置分\n\n**异常监测**相当于是**Unsupervised binary classification**\n- 网络流量分析\n\n{% note info %}\n聚类通常比较有用，但是评定聚类的好坏通常比较困难。\n{% endnote %}\n\n## 半监督式学习: Semi-supervised Learning\n比如硬币识别，但是只给了一部分$$ y_n $$，和其他没有标记的样本混在一起\n\n**应用**\n- 人脸识别，只有少量标记的面部照片\n- 药物效果预测，只有少量的药物有标签\n\n## 强化学习\n一种非常不同的，但是很自然的学习方式。不直接告诉它你要做什么，但是可以通过一定的行为反应，惩罚错误的结果，奖励正确的结果。\n\n比如训练狗狗，做得对就奖励，做的错就惩罚，没办法直接说给他听。\n\n**应用**\n- 广告系统输入的是顾客资料，顾客点击或者不点击，推荐\n\n## 总结\n{% asset_img tol2.png \"Learning with Different Data Label yn\" %}\n\n# 不同的训练方式\n## batch Supervised multiclass classification\n成批的将数据喂给机器学习的算法，算法从所有已知的data中学习，得到假设$$ g $$\n**应用**\n- 数据是email，得到邮件分类器\n- 数据是cancer资料，得到cancer分类器\n\n{% note info %}\n根据数据是否一次送入模型中训练分为batch learning和online learning.\n\nbatch learning像是填鸭式，online learning像是教书，一条一条教.\n{% endnote %}\n\n## online learning \n指每次有新样本的时候就用来训练更新 hypothesis，每一轮$$ g $$会更好, 常见的比如说有垃圾邮件分类系统.\n\n增强学习和PLA常常比较接近online learning\n\n## active learning\n希望是机器能够主动的问选择的$$ x_n $$对应的$$ y_n $$，可以通过这种方式用很少的labels来提高$$ g $$\n\n# 不同的输入空间\n根据输入的样本的特征来分也可以分为下面三类（虽然这种分类方法并不常见）：concrete features，raw features 和 abstract features。\n\n## concrete features\n指输入的样本已经标注好了各种特征，如信用卡例子中顾客的各种资料\n\n## raw features\n一般指图像或音频中的图像或声波，这些信息是原始的信号，需要进行一些转换才能使用。\n\n比如手写数字识别，16x16的像素格，可以将16x16=256个像素变成一个256维的向量输入。\n\n## abstract features\n课程中用了KDDCup的例子，给出每个用户和他们喜欢听的音乐，要预测这个用户对一个新歌曲的评分是多少。\n输入的是，用户id，歌曲的id，输出是评分数字\n\n但是输入的特征并不是很直接，需要一方面人来提示，还有是机器自己从每个人喜欢听的歌里面得到特征，从每首歌的曲风等特征里面总结出特征，然后再用这些特征训练，得到结果。\n\n这种按照输入样本的 features 进行分类的方法在实际中并不常用，因为输入的样本往往是各种 features交杂在一起的，不同问题需要与其相应的 features 才能得到好的效果，features 对结果的影响比较大。因此机器学习中也产生了 feature engineering 一说。\n\n## 总结\n{% asset_img tol3.png \"Learning with Different input Space\" %}\n\n\n\n\n","slug":"机器学习基石-Types-of-Learning","published":1,"updated":"2019-07-20T12:10:19.219Z","layout":"post","photos":[],"link":"","_id":"cjycjtk1n007gussbytb9phn9","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><p>《机器学习基石》第三讲<strong>Types of Learning</strong>的笔记。主要介绍了机器学习的集中分类标准和具体分类。</p></div>\n<a id=\"more\"></a>\n<h1 id=\"不同的输出空间\"><a href=\"#不同的输出空间\" class=\"headerlink\" title=\"不同的输出空间\"></a>不同的输出空间</h1><h2 id=\"二元分类-binary-classification\"><a href=\"#二元分类-binary-classification\" class=\"headerlink\" title=\"二元分类: binary classification\"></a>二元分类: binary classification</h2><p>很基本的分类问题，输出只有两种. 通俗的理解就是简单的是非题，要么是，要么不是。</p>\n<h2 id=\"多元分类-multiclass-classification\"><a href=\"#多元分类-multiclass-classification\" class=\"headerlink\" title=\"多元分类: multiclass classification\"></a>多元分类: multiclass classification</h2><p>很简单的例子就是对硬币的分类，课程中使用了美元的分类，1c, 5c, 10c, 25c 这样。</p>\n<p>输出可以不只两种，上述硬币的分类输出为四，输出可以是K种。</p>\n<p>二元分类是特殊的多元分类，即K=2的情况。</p>\n<p><strong>应用场景</strong>:主要是视觉或听觉的辨识</p>\n<ul>\n<li>数字识别</li>\n<li>图片内容分类</li>\n<li>邮件的分类</li>\n</ul>\n<h2 id=\"回归问题-Regression\"><a href=\"#回归问题-Regression\" class=\"headerlink\" title=\"回归问题: Regression\"></a>回归问题: Regression</h2><p>$ y=R $ or $y = [lower, upper] \\setminus R (bounded regression)$</p>\n<p><strong>特点是</strong>输出是一个实数</p>\n<p><strong>应用</strong></p>\n<ul>\n<li>股票价格</li>\n<li>温度预测</li>\n</ul>\n<h2 id=\"结构化学习-Structed-Learning\"><a href=\"#结构化学习-Structed-Learning\" class=\"headerlink\" title=\"结构化学习: Structed Learning\"></a>结构化学习: Structed Learning</h2><p>理解起来就是多元分类的扩展，有很多很多的类别，但是类别和类别之间有着某种潜在结构，我们要输出的就是这种结构。</p>\n<p>比如一个句子，可以是主谓宾、主谓等等，但是不可能是谓语谓语谓语这样。我们如果对一个句子进行语法判断，输出空间就是这些结构，而不是一个个的类别。</p>\n<p><strong>应用</strong>:输出空间有着某种结构</p>\n<ul>\n<li>蛋白质的结构</li>\n<li>自然语言处理中语言的parse tree</li>\n</ul>\n<p>总的可以看下图：<br></p>\n<h1 id=\"不同程度标记的样本\"><a href=\"#不同程度标记的样本\" class=\"headerlink\" title=\"不同程度标记的样本\"></a>不同程度标记的样本</h1><h2 id=\"监督学习-Supervised-Learning\"><a href=\"#监督学习-Supervised-Learning\" class=\"headerlink\" title=\"监督学习: Supervised Learning\"></a>监督学习: Supervised Learning</h2><p>给了一堆样本，然后还对每个样本进行了标记是什么，即每个<script type=\"math/tex\">x_n</script>对应一个<script type=\"math/tex\">y_n</script></p>\n<h2 id=\"非监督学习-Unsupervised-Learning\"><a href=\"#非监督学习-Unsupervised-Learning\" class=\"headerlink\" title=\"非监督学习: Unsupervised Learning\"></a>非监督学习: Unsupervised Learning</h2><p>给了一对样本，但是不给样本的正确标记(without yn), 让机器自己去把样本分成几类。</p>\n<p><strong>聚类</strong>就相当于是<strong>非监督的多分类问题</strong></p>\n<ul>\n<li>把一些文章按照不同的topic分类</li>\n<li>按照消费者的资料把消费者分类,针对不同的人群进行促销。</li>\n</ul>\n<p><strong>密度预测</strong>相当于是<strong>Unsupervised bounded regression</strong></p>\n<ul>\n<li>交通车流量分析,按照位置分</li>\n</ul>\n<p><strong>异常监测</strong>相当于是<strong>Unsupervised binary classification</strong></p>\n<ul>\n<li>网络流量分析</li>\n</ul>\n<div class=\"note info\"><p>聚类通常比较有用，但是评定聚类的好坏通常比较困难。</p></div>\n<h2 id=\"半监督式学习-Semi-supervised-Learning\"><a href=\"#半监督式学习-Semi-supervised-Learning\" class=\"headerlink\" title=\"半监督式学习: Semi-supervised Learning\"></a>半监督式学习: Semi-supervised Learning</h2><p>比如硬币识别，但是只给了一部分<script type=\"math/tex\">y_n</script>，和其他没有标记的样本混在一起</p>\n<p><strong>应用</strong></p>\n<ul>\n<li>人脸识别，只有少量标记的面部照片</li>\n<li>药物效果预测，只有少量的药物有标签</li>\n</ul>\n<h2 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a>强化学习</h2><p>一种非常不同的，但是很自然的学习方式。不直接告诉它你要做什么，但是可以通过一定的行为反应，惩罚错误的结果，奖励正确的结果。</p>\n<p>比如训练狗狗，做得对就奖励，做的错就惩罚，没办法直接说给他听。</p>\n<p><strong>应用</strong></p>\n<ul>\n<li>广告系统输入的是顾客资料，顾客点击或者不点击，推荐</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>\n<h1 id=\"不同的训练方式\"><a href=\"#不同的训练方式\" class=\"headerlink\" title=\"不同的训练方式\"></a>不同的训练方式</h1><h2 id=\"batch-Supervised-multiclass-classification\"><a href=\"#batch-Supervised-multiclass-classification\" class=\"headerlink\" title=\"batch Supervised multiclass classification\"></a>batch Supervised multiclass classification</h2><p>成批的将数据喂给机器学习的算法，算法从所有已知的data中学习，得到假设<script type=\"math/tex\">g</script><br><strong>应用</strong></p>\n<ul>\n<li>数据是email，得到邮件分类器</li>\n<li>数据是cancer资料，得到cancer分类器</li>\n</ul>\n<div class=\"note info\"><p>根据数据是否一次送入模型中训练分为batch learning和online learning.</p>\n<p>batch learning像是填鸭式，online learning像是教书，一条一条教.</p></div>\n<h2 id=\"online-learning\"><a href=\"#online-learning\" class=\"headerlink\" title=\"online learning\"></a>online learning</h2><p>指每次有新样本的时候就用来训练更新 hypothesis，每一轮<script type=\"math/tex\">g</script>会更好, 常见的比如说有垃圾邮件分类系统.</p>\n<p>增强学习和PLA常常比较接近online learning</p>\n<h2 id=\"active-learning\"><a href=\"#active-learning\" class=\"headerlink\" title=\"active learning\"></a>active learning</h2><p>希望是机器能够主动的问选择的<script type=\"math/tex\">x_n</script>对应的<script type=\"math/tex\">y_n</script>，可以通过这种方式用很少的labels来提高<script type=\"math/tex\">g</script></p>\n<h1 id=\"不同的输入空间\"><a href=\"#不同的输入空间\" class=\"headerlink\" title=\"不同的输入空间\"></a>不同的输入空间</h1><p>根据输入的样本的特征来分也可以分为下面三类（虽然这种分类方法并不常见）：concrete features，raw features 和 abstract features。</p>\n<h2 id=\"concrete-features\"><a href=\"#concrete-features\" class=\"headerlink\" title=\"concrete features\"></a>concrete features</h2><p>指输入的样本已经标注好了各种特征，如信用卡例子中顾客的各种资料</p>\n<h2 id=\"raw-features\"><a href=\"#raw-features\" class=\"headerlink\" title=\"raw features\"></a>raw features</h2><p>一般指图像或音频中的图像或声波，这些信息是原始的信号，需要进行一些转换才能使用。</p>\n<p>比如手写数字识别，16x16的像素格，可以将16x16=256个像素变成一个256维的向量输入。</p>\n<h2 id=\"abstract-features\"><a href=\"#abstract-features\" class=\"headerlink\" title=\"abstract features\"></a>abstract features</h2><p>课程中用了KDDCup的例子，给出每个用户和他们喜欢听的音乐，要预测这个用户对一个新歌曲的评分是多少。<br>输入的是，用户id，歌曲的id，输出是评分数字</p>\n<p>但是输入的特征并不是很直接，需要一方面人来提示，还有是机器自己从每个人喜欢听的歌里面得到特征，从每首歌的曲风等特征里面总结出特征，然后再用这些特征训练，得到结果。</p>\n<p>这种按照输入样本的 features 进行分类的方法在实际中并不常用，因为输入的样本往往是各种 features交杂在一起的，不同问题需要与其相应的 features 才能得到好的效果，features 对结果的影响比较大。因此机器学习中也产生了 feature engineering 一说。</p>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><p>《机器学习基石》第三讲<strong>Types of Learning</strong>的笔记。主要介绍了机器学习的集中分类标准和具体分类。</p></div>","more":"<h1 id=\"不同的输出空间\"><a href=\"#不同的输出空间\" class=\"headerlink\" title=\"不同的输出空间\"></a>不同的输出空间</h1><h2 id=\"二元分类-binary-classification\"><a href=\"#二元分类-binary-classification\" class=\"headerlink\" title=\"二元分类: binary classification\"></a>二元分类: binary classification</h2><p>很基本的分类问题，输出只有两种. 通俗的理解就是简单的是非题，要么是，要么不是。</p>\n<h2 id=\"多元分类-multiclass-classification\"><a href=\"#多元分类-multiclass-classification\" class=\"headerlink\" title=\"多元分类: multiclass classification\"></a>多元分类: multiclass classification</h2><p>很简单的例子就是对硬币的分类，课程中使用了美元的分类，1c, 5c, 10c, 25c 这样。</p>\n<p>输出可以不只两种，上述硬币的分类输出为四，输出可以是K种。</p>\n<p>二元分类是特殊的多元分类，即K=2的情况。</p>\n<p><strong>应用场景</strong>:主要是视觉或听觉的辨识</p>\n<ul>\n<li>数字识别</li>\n<li>图片内容分类</li>\n<li>邮件的分类</li>\n</ul>\n<h2 id=\"回归问题-Regression\"><a href=\"#回归问题-Regression\" class=\"headerlink\" title=\"回归问题: Regression\"></a>回归问题: Regression</h2><p>$ y=R $ or $y = [lower, upper] \\setminus R (bounded regression)$</p>\n<p><strong>特点是</strong>输出是一个实数</p>\n<p><strong>应用</strong></p>\n<ul>\n<li>股票价格</li>\n<li>温度预测</li>\n</ul>\n<h2 id=\"结构化学习-Structed-Learning\"><a href=\"#结构化学习-Structed-Learning\" class=\"headerlink\" title=\"结构化学习: Structed Learning\"></a>结构化学习: Structed Learning</h2><p>理解起来就是多元分类的扩展，有很多很多的类别，但是类别和类别之间有着某种潜在结构，我们要输出的就是这种结构。</p>\n<p>比如一个句子，可以是主谓宾、主谓等等，但是不可能是谓语谓语谓语这样。我们如果对一个句子进行语法判断，输出空间就是这些结构，而不是一个个的类别。</p>\n<p><strong>应用</strong>:输出空间有着某种结构</p>\n<ul>\n<li>蛋白质的结构</li>\n<li>自然语言处理中语言的parse tree</li>\n</ul>\n<p>总的可以看下图：<br></p>\n<h1 id=\"不同程度标记的样本\"><a href=\"#不同程度标记的样本\" class=\"headerlink\" title=\"不同程度标记的样本\"></a>不同程度标记的样本</h1><h2 id=\"监督学习-Supervised-Learning\"><a href=\"#监督学习-Supervised-Learning\" class=\"headerlink\" title=\"监督学习: Supervised Learning\"></a>监督学习: Supervised Learning</h2><p>给了一堆样本，然后还对每个样本进行了标记是什么，即每个<script type=\"math/tex\">x_n</script>对应一个<script type=\"math/tex\">y_n</script></p>\n<h2 id=\"非监督学习-Unsupervised-Learning\"><a href=\"#非监督学习-Unsupervised-Learning\" class=\"headerlink\" title=\"非监督学习: Unsupervised Learning\"></a>非监督学习: Unsupervised Learning</h2><p>给了一对样本，但是不给样本的正确标记(without yn), 让机器自己去把样本分成几类。</p>\n<p><strong>聚类</strong>就相当于是<strong>非监督的多分类问题</strong></p>\n<ul>\n<li>把一些文章按照不同的topic分类</li>\n<li>按照消费者的资料把消费者分类,针对不同的人群进行促销。</li>\n</ul>\n<p><strong>密度预测</strong>相当于是<strong>Unsupervised bounded regression</strong></p>\n<ul>\n<li>交通车流量分析,按照位置分</li>\n</ul>\n<p><strong>异常监测</strong>相当于是<strong>Unsupervised binary classification</strong></p>\n<ul>\n<li>网络流量分析</li>\n</ul>\n<div class=\"note info\"><p>聚类通常比较有用，但是评定聚类的好坏通常比较困难。</p></div>\n<h2 id=\"半监督式学习-Semi-supervised-Learning\"><a href=\"#半监督式学习-Semi-supervised-Learning\" class=\"headerlink\" title=\"半监督式学习: Semi-supervised Learning\"></a>半监督式学习: Semi-supervised Learning</h2><p>比如硬币识别，但是只给了一部分<script type=\"math/tex\">y_n</script>，和其他没有标记的样本混在一起</p>\n<p><strong>应用</strong></p>\n<ul>\n<li>人脸识别，只有少量标记的面部照片</li>\n<li>药物效果预测，只有少量的药物有标签</li>\n</ul>\n<h2 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a>强化学习</h2><p>一种非常不同的，但是很自然的学习方式。不直接告诉它你要做什么，但是可以通过一定的行为反应，惩罚错误的结果，奖励正确的结果。</p>\n<p>比如训练狗狗，做得对就奖励，做的错就惩罚，没办法直接说给他听。</p>\n<p><strong>应用</strong></p>\n<ul>\n<li>广告系统输入的是顾客资料，顾客点击或者不点击，推荐</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>\n<h1 id=\"不同的训练方式\"><a href=\"#不同的训练方式\" class=\"headerlink\" title=\"不同的训练方式\"></a>不同的训练方式</h1><h2 id=\"batch-Supervised-multiclass-classification\"><a href=\"#batch-Supervised-multiclass-classification\" class=\"headerlink\" title=\"batch Supervised multiclass classification\"></a>batch Supervised multiclass classification</h2><p>成批的将数据喂给机器学习的算法，算法从所有已知的data中学习，得到假设<script type=\"math/tex\">g</script><br><strong>应用</strong></p>\n<ul>\n<li>数据是email，得到邮件分类器</li>\n<li>数据是cancer资料，得到cancer分类器</li>\n</ul>\n<div class=\"note info\"><p>根据数据是否一次送入模型中训练分为batch learning和online learning.</p>\n<p>batch learning像是填鸭式，online learning像是教书，一条一条教.</p></div>\n<h2 id=\"online-learning\"><a href=\"#online-learning\" class=\"headerlink\" title=\"online learning\"></a>online learning</h2><p>指每次有新样本的时候就用来训练更新 hypothesis，每一轮<script type=\"math/tex\">g</script>会更好, 常见的比如说有垃圾邮件分类系统.</p>\n<p>增强学习和PLA常常比较接近online learning</p>\n<h2 id=\"active-learning\"><a href=\"#active-learning\" class=\"headerlink\" title=\"active learning\"></a>active learning</h2><p>希望是机器能够主动的问选择的<script type=\"math/tex\">x_n</script>对应的<script type=\"math/tex\">y_n</script>，可以通过这种方式用很少的labels来提高<script type=\"math/tex\">g</script></p>\n<h1 id=\"不同的输入空间\"><a href=\"#不同的输入空间\" class=\"headerlink\" title=\"不同的输入空间\"></a>不同的输入空间</h1><p>根据输入的样本的特征来分也可以分为下面三类（虽然这种分类方法并不常见）：concrete features，raw features 和 abstract features。</p>\n<h2 id=\"concrete-features\"><a href=\"#concrete-features\" class=\"headerlink\" title=\"concrete features\"></a>concrete features</h2><p>指输入的样本已经标注好了各种特征，如信用卡例子中顾客的各种资料</p>\n<h2 id=\"raw-features\"><a href=\"#raw-features\" class=\"headerlink\" title=\"raw features\"></a>raw features</h2><p>一般指图像或音频中的图像或声波，这些信息是原始的信号，需要进行一些转换才能使用。</p>\n<p>比如手写数字识别，16x16的像素格，可以将16x16=256个像素变成一个256维的向量输入。</p>\n<h2 id=\"abstract-features\"><a href=\"#abstract-features\" class=\"headerlink\" title=\"abstract features\"></a>abstract features</h2><p>课程中用了KDDCup的例子，给出每个用户和他们喜欢听的音乐，要预测这个用户对一个新歌曲的评分是多少。<br>输入的是，用户id，歌曲的id，输出是评分数字</p>\n<p>但是输入的特征并不是很直接，需要一方面人来提示，还有是机器自己从每个人喜欢听的歌里面得到特征，从每首歌的曲风等特征里面总结出特征，然后再用这些特征训练，得到结果。</p>\n<p>这种按照输入样本的 features 进行分类的方法在实际中并不常用，因为输入的样本往往是各种 features交杂在一起的，不同问题需要与其相应的 features 才能得到好的效果，features 对结果的影响比较大。因此机器学习中也产生了 feature engineering 一说。</p>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2>"},{"title":"机器学习概念整理","comments":1,"mathjax":true,"date":"2018-10-13T13:57:53.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n　　记录一些学习过程中遇到的基础概念，来源《机器学习导论》，《机器学习》——周志华，《白话大数据和机器学习》，《统计学习方法》——李航等，不是很全，等以后学习的深入待补充。<!--more-->\n\n# 数据和信息\n- 信息: 香农指出是\"信息是用来消除随机不定性的东西\",就是那些把我们不清楚的描述,\"信息是被消除的不确定性\"。\n- 算法: 简单理解为计算的方法和技巧，也可以是解决问题的办法\n- 信息量: 一种信息数量化度量的规则，I=log_2m(m中情况产生概率均等)\n- 先验概率: 事件按照常理，一般性规律发生的概率\n- 香农公式: $$ C = B * log_2(1+S/N) $$,B=2H,H为信道带宽,S为信号功率,N为噪声功率\n- 信息熵: 信息的杂乱程度的量化描述,H(x)=-sum_1^np(x_i)log_2P(x_i),i=1,2...\n- 熵: 混乱程度的描述，越有序，熵越低，反之越高 \n\n# 回归和聚类\n- 回归: 从大量的函数结果和自变量反推回函数表达式的过程就是回归 \n- 过拟合: 一般是拟合过程中模型描述的太复杂，一般参数繁多，计算逻辑多\n- 欠拟合: 一般是操作不当产生的误差e分布太散或者太大的情况\n \n\n# 无分类的概念\n\n\n","source":"_posts/机器学习概念整理.md","raw":"---\ntitle: 机器学习概念整理\ncomments: true\nmathjax: true\ndate: 2018-10-13 21:57:53\ntags: MachineLearning\ncategories: MachineLearning\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n　　记录一些学习过程中遇到的基础概念，来源《机器学习导论》，《机器学习》——周志华，《白话大数据和机器学习》，《统计学习方法》——李航等，不是很全，等以后学习的深入待补充。<!--more-->\n\n# 数据和信息\n- 信息: 香农指出是\"信息是用来消除随机不定性的东西\",就是那些把我们不清楚的描述,\"信息是被消除的不确定性\"。\n- 算法: 简单理解为计算的方法和技巧，也可以是解决问题的办法\n- 信息量: 一种信息数量化度量的规则，I=log_2m(m中情况产生概率均等)\n- 先验概率: 事件按照常理，一般性规律发生的概率\n- 香农公式: $$ C = B * log_2(1+S/N) $$,B=2H,H为信道带宽,S为信号功率,N为噪声功率\n- 信息熵: 信息的杂乱程度的量化描述,H(x)=-sum_1^np(x_i)log_2P(x_i),i=1,2...\n- 熵: 混乱程度的描述，越有序，熵越低，反之越高 \n\n# 回归和聚类\n- 回归: 从大量的函数结果和自变量反推回函数表达式的过程就是回归 \n- 过拟合: 一般是拟合过程中模型描述的太复杂，一般参数繁多，计算逻辑多\n- 欠拟合: 一般是操作不当产生的误差e分布太散或者太大的情况\n \n\n# 无分类的概念\n\n\n","slug":"机器学习概念整理","published":1,"updated":"2019-07-20T12:10:19.222Z","layout":"post","photos":[],"link":"","_id":"cjycjtk1z007iussbdzzpyku8","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>　　记录一些学习过程中遇到的基础概念，来源《机器学习导论》，《机器学习》——周志华，《白话大数据和机器学习》，《统计学习方法》——李航等，不是很全，等以后学习的深入待补充。<a id=\"more\"></a></p>\n<h1 id=\"数据和信息\"><a href=\"#数据和信息\" class=\"headerlink\" title=\"数据和信息\"></a>数据和信息</h1><ul>\n<li>信息: 香农指出是”信息是用来消除随机不定性的东西”,就是那些把我们不清楚的描述,”信息是被消除的不确定性”。</li>\n<li>算法: 简单理解为计算的方法和技巧，也可以是解决问题的办法</li>\n<li>信息量: 一种信息数量化度量的规则，I=log_2m(m中情况产生概率均等)</li>\n<li>先验概率: 事件按照常理，一般性规律发生的概率</li>\n<li>香农公式: <script type=\"math/tex\">C = B * log_2(1+S/N)</script>,B=2H,H为信道带宽,S为信号功率,N为噪声功率</li>\n<li>信息熵: 信息的杂乱程度的量化描述,H(x)=-sum_1^np(x_i)log_2P(x_i),i=1,2…</li>\n<li>熵: 混乱程度的描述，越有序，熵越低，反之越高 </li>\n</ul>\n<h1 id=\"回归和聚类\"><a href=\"#回归和聚类\" class=\"headerlink\" title=\"回归和聚类\"></a>回归和聚类</h1><ul>\n<li>回归: 从大量的函数结果和自变量反推回函数表达式的过程就是回归 </li>\n<li>过拟合: 一般是拟合过程中模型描述的太复杂，一般参数繁多，计算逻辑多</li>\n<li>欠拟合: 一般是操作不当产生的误差e分布太散或者太大的情况</li>\n</ul>\n<h1 id=\"无分类的概念\"><a href=\"#无分类的概念\" class=\"headerlink\" title=\"无分类的概念\"></a>无分类的概念</h1>","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>　　记录一些学习过程中遇到的基础概念，来源《机器学习导论》，《机器学习》——周志华，《白话大数据和机器学习》，《统计学习方法》——李航等，不是很全，等以后学习的深入待补充。","more":"</p>\n<h1 id=\"数据和信息\"><a href=\"#数据和信息\" class=\"headerlink\" title=\"数据和信息\"></a>数据和信息</h1><ul>\n<li>信息: 香农指出是”信息是用来消除随机不定性的东西”,就是那些把我们不清楚的描述,”信息是被消除的不确定性”。</li>\n<li>算法: 简单理解为计算的方法和技巧，也可以是解决问题的办法</li>\n<li>信息量: 一种信息数量化度量的规则，I=log_2m(m中情况产生概率均等)</li>\n<li>先验概率: 事件按照常理，一般性规律发生的概率</li>\n<li>香农公式: <script type=\"math/tex\">C = B * log_2(1+S/N)</script>,B=2H,H为信道带宽,S为信号功率,N为噪声功率</li>\n<li>信息熵: 信息的杂乱程度的量化描述,H(x)=-sum_1^np(x_i)log_2P(x_i),i=1,2…</li>\n<li>熵: 混乱程度的描述，越有序，熵越低，反之越高 </li>\n</ul>\n<h1 id=\"回归和聚类\"><a href=\"#回归和聚类\" class=\"headerlink\" title=\"回归和聚类\"></a>回归和聚类</h1><ul>\n<li>回归: 从大量的函数结果和自变量反推回函数表达式的过程就是回归 </li>\n<li>过拟合: 一般是拟合过程中模型描述的太复杂，一般参数繁多，计算逻辑多</li>\n<li>欠拟合: 一般是操作不当产生的误差e分布太散或者太大的情况</li>\n</ul>\n<h1 id=\"无分类的概念\"><a href=\"#无分类的概念\" class=\"headerlink\" title=\"无分类的概念\"></a>无分类的概念</h1>"},{"title":"聚类和K-Means算法","comments":1,"date":"2018-09-10T10:08:12.000Z","mathjax":true,"_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n# 聚类\n## 聚类定义\n　　聚类(Clustering)，指的是一种学习方式（操作方式），即把物理或者抽象对象的集合分组为由彼此的对象组成的多个类的分析过程。<!--more--> \n\n{% note info %} 聚类属于无监督机器学习，简言之就是把特征形态相同的或者近似的划分在一个概念下，聚集为一组。\n\n聚类在实际的应用中中亦是非常广泛的，如：市场细分（Market segmentation）、社交圈分析（social network analysis）、集群计算（organize computing clusters）、天体数据分析（astronomical data analysis）等\n{% endnote %}\n\n## 聚类算法分类\n　　主要的聚类主要的聚类算法可以划分为如下几类：划分方法、层次方法、基于密度的方法、基于网格的方法以及基于模型的方法。\n\n　　每一类中都存在着得到广泛应用的算法，例如：划分方法中的k-means聚类算法、层次方法中的凝聚型层次聚类算法、基于模型方法中的神经网络聚类算法等\n\n　　但是上述的都是硬聚类，即每一个数据只能被归为一类，还有一种是模糊聚类。\n   　　模糊聚类通过隶属函数来确定每个数据隶属于各个簇的程度，而不是将一个数据对象硬性地归类到某一簇中。\n\n# 常用距离算法\n## 欧氏距离\n　　欧氏距离是最直观的距离度量方法，通常就是学过的两点间距离，可以用在多维。\n\n- 二维平面上点a(x1,y1)与b(x2,y2)间的欧氏距离:  \n$$ d_{12} = \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2} $$\n- 三维空间点a(x1,y1,z1)与b(x2,y2,z2)间的欧氏距离:\n$$ d{12} = \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2+(z_1-z_2)^2} $$\n- 更高维的计算类似二维三维\n\n## 曼哈顿距离\n　　不再是两点间连线的那种，是类似九宫格的走法，只能直线和直角拐弯。又叫做“城市街区距离”。\n\n- 二维平面两点a(x1,y1)与b(x2,y2)间的曼哈顿距离：\n$$ d_12 = |x_1-x_2|+|y_1-y_2| $$\n- 三维和其他维类似\n\n{% note info %}\n　　除了这两种还有余弦距离和切比雪夫距离等，这里不展开说。采用不同的距离度量方法对结果有很大的影响。\n{% endnote %}\n\n# k-means算法\n  思想大致是:\n- 1.　先随机选k个质心\n- 2.　对每个点计算其到各个质心的距离\n- 3.　选距离最近的，把这个点归为这个质心的一类，形成k个簇\n- 4.　然后对于每个簇，计算其中每个点到质心的平均距离\n- 5.　然后把这个作为这个簇的新的质心,进行第二步\n- 6.　直到簇不怎么发生变化或者达到了预设的最大迭代次数，停止\n  \n　主要函数如下:\n\n```C++\n//k-means聚类\nvector<Cluster> k_means(vector<vector<int> >trans,int k,int counts){\n  vector<Cluster> clusters(k);\n\n  const int row = trans.size();\n  const int col = trans[0].size();\n\n  //随机初始化聚类中心\n  srand((int)time(0));\n  for(int i=0;i<k;i++){\n    int center = rand()%trans.size();\n    clusters[i].center=trans[center]; \n  }\n\n  //迭代counts次\n  for(int cnt = 0;cnt<counts;cnt++){\n\n    //清空样本空间\n    for(int i=0;i<k;i++)\n      clusters[i].samples.clear();\n\n    //计算样本属于的簇\n    for(int i=0;i<row;i++){\n      int tmp_center = 0;\n      int minal = cal_distance(trans[i],clusters[tmp_center].center);\n\n      for(int j=1;j<k;j++){\n        int distance = cal_distance(trans[i],clusters[j].center);\n        if(distance<minal){\n          tmp_center = j;\n          minal = distance;\n        }\n      }\n\n      clusters[tmp_center].samples.push_back(i);\n    }\n\n    //重新计算簇中心\n    for(int i=0;i<k;i++){\n      int sum = 0;\n\n      for(int m=0;m<trans[0].size();m++){\n        for(int j=0;j<clusters[i].samples.size();j++){\n          //cout<<\"sum+=: \"<<trans[clusters[i].samples[j]][m];\n          sum+=trans[clusters[i].samples[j]][m];\n        }\n\n        clusters[i].center[m]=sum/clusters[i].samples.size();\n        sum=0;\n      }\n    }\n  }\n\n  return clusters;\n}\n```\n\n　用了C\\+\\+作为实现的代码，python的代码可以参考网上的，有很多。计算距离用的是欧式距离。数据可以自己构造尝试。\n\n----------------------------------------------\n","source":"_posts/聚类和K-Means算法.md","raw":"---\ntitle: 聚类和K-Means算法\ncomments: true\ndate: 2018-09-10 18:08:12\ntags: [Python,MachineLearning,Clustering,K-Means,Learning]\ncategories: MachineLearning\nmathjax: true\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n# 聚类\n## 聚类定义\n　　聚类(Clustering)，指的是一种学习方式（操作方式），即把物理或者抽象对象的集合分组为由彼此的对象组成的多个类的分析过程。<!--more--> \n\n{% note info %} 聚类属于无监督机器学习，简言之就是把特征形态相同的或者近似的划分在一个概念下，聚集为一组。\n\n聚类在实际的应用中中亦是非常广泛的，如：市场细分（Market segmentation）、社交圈分析（social network analysis）、集群计算（organize computing clusters）、天体数据分析（astronomical data analysis）等\n{% endnote %}\n\n## 聚类算法分类\n　　主要的聚类主要的聚类算法可以划分为如下几类：划分方法、层次方法、基于密度的方法、基于网格的方法以及基于模型的方法。\n\n　　每一类中都存在着得到广泛应用的算法，例如：划分方法中的k-means聚类算法、层次方法中的凝聚型层次聚类算法、基于模型方法中的神经网络聚类算法等\n\n　　但是上述的都是硬聚类，即每一个数据只能被归为一类，还有一种是模糊聚类。\n   　　模糊聚类通过隶属函数来确定每个数据隶属于各个簇的程度，而不是将一个数据对象硬性地归类到某一簇中。\n\n# 常用距离算法\n## 欧氏距离\n　　欧氏距离是最直观的距离度量方法，通常就是学过的两点间距离，可以用在多维。\n\n- 二维平面上点a(x1,y1)与b(x2,y2)间的欧氏距离:  \n$$ d_{12} = \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2} $$\n- 三维空间点a(x1,y1,z1)与b(x2,y2,z2)间的欧氏距离:\n$$ d{12} = \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2+(z_1-z_2)^2} $$\n- 更高维的计算类似二维三维\n\n## 曼哈顿距离\n　　不再是两点间连线的那种，是类似九宫格的走法，只能直线和直角拐弯。又叫做“城市街区距离”。\n\n- 二维平面两点a(x1,y1)与b(x2,y2)间的曼哈顿距离：\n$$ d_12 = |x_1-x_2|+|y_1-y_2| $$\n- 三维和其他维类似\n\n{% note info %}\n　　除了这两种还有余弦距离和切比雪夫距离等，这里不展开说。采用不同的距离度量方法对结果有很大的影响。\n{% endnote %}\n\n# k-means算法\n  思想大致是:\n- 1.　先随机选k个质心\n- 2.　对每个点计算其到各个质心的距离\n- 3.　选距离最近的，把这个点归为这个质心的一类，形成k个簇\n- 4.　然后对于每个簇，计算其中每个点到质心的平均距离\n- 5.　然后把这个作为这个簇的新的质心,进行第二步\n- 6.　直到簇不怎么发生变化或者达到了预设的最大迭代次数，停止\n  \n　主要函数如下:\n\n```C++\n//k-means聚类\nvector<Cluster> k_means(vector<vector<int> >trans,int k,int counts){\n  vector<Cluster> clusters(k);\n\n  const int row = trans.size();\n  const int col = trans[0].size();\n\n  //随机初始化聚类中心\n  srand((int)time(0));\n  for(int i=0;i<k;i++){\n    int center = rand()%trans.size();\n    clusters[i].center=trans[center]; \n  }\n\n  //迭代counts次\n  for(int cnt = 0;cnt<counts;cnt++){\n\n    //清空样本空间\n    for(int i=0;i<k;i++)\n      clusters[i].samples.clear();\n\n    //计算样本属于的簇\n    for(int i=0;i<row;i++){\n      int tmp_center = 0;\n      int minal = cal_distance(trans[i],clusters[tmp_center].center);\n\n      for(int j=1;j<k;j++){\n        int distance = cal_distance(trans[i],clusters[j].center);\n        if(distance<minal){\n          tmp_center = j;\n          minal = distance;\n        }\n      }\n\n      clusters[tmp_center].samples.push_back(i);\n    }\n\n    //重新计算簇中心\n    for(int i=0;i<k;i++){\n      int sum = 0;\n\n      for(int m=0;m<trans[0].size();m++){\n        for(int j=0;j<clusters[i].samples.size();j++){\n          //cout<<\"sum+=: \"<<trans[clusters[i].samples[j]][m];\n          sum+=trans[clusters[i].samples[j]][m];\n        }\n\n        clusters[i].center[m]=sum/clusters[i].samples.size();\n        sum=0;\n      }\n    }\n  }\n\n  return clusters;\n}\n```\n\n　用了C\\+\\+作为实现的代码，python的代码可以参考网上的，有很多。计算距离用的是欧式距离。数据可以自己构造尝试。\n\n----------------------------------------------\n","slug":"聚类和K-Means算法","published":1,"updated":"2019-07-20T12:10:19.222Z","layout":"post","photos":[],"link":"","_id":"cjycjtk29007lussbzfml7y3b","content":"<p><meta name=\"referrer\" content=\"no-referrer\"></p>\n<h1 id=\"聚类\"><a href=\"#聚类\" class=\"headerlink\" title=\"聚类\"></a>聚类</h1><h2 id=\"聚类定义\"><a href=\"#聚类定义\" class=\"headerlink\" title=\"聚类定义\"></a>聚类定义</h2><p>　　聚类(Clustering)，指的是一种学习方式（操作方式），即把物理或者抽象对象的集合分组为由彼此的对象组成的多个类的分析过程。<a id=\"more\"></a> </p>\n<div class=\"note info\"><p> 聚类属于无监督机器学习，简言之就是把特征形态相同的或者近似的划分在一个概念下，聚集为一组。</p>\n<p>聚类在实际的应用中中亦是非常广泛的，如：市场细分（Market segmentation）、社交圈分析（social network analysis）、集群计算（organize computing clusters）、天体数据分析（astronomical data analysis）等</p></div>\n<h2 id=\"聚类算法分类\"><a href=\"#聚类算法分类\" class=\"headerlink\" title=\"聚类算法分类\"></a>聚类算法分类</h2><p>　　主要的聚类主要的聚类算法可以划分为如下几类：划分方法、层次方法、基于密度的方法、基于网格的方法以及基于模型的方法。</p>\n<p>　　每一类中都存在着得到广泛应用的算法，例如：划分方法中的k-means聚类算法、层次方法中的凝聚型层次聚类算法、基于模型方法中的神经网络聚类算法等</p>\n<p>　　但是上述的都是硬聚类，即每一个数据只能被归为一类，还有一种是模糊聚类。<br>   　　模糊聚类通过隶属函数来确定每个数据隶属于各个簇的程度，而不是将一个数据对象硬性地归类到某一簇中。</p>\n<h1 id=\"常用距离算法\"><a href=\"#常用距离算法\" class=\"headerlink\" title=\"常用距离算法\"></a>常用距离算法</h1><h2 id=\"欧氏距离\"><a href=\"#欧氏距离\" class=\"headerlink\" title=\"欧氏距离\"></a>欧氏距离</h2><p>　　欧氏距离是最直观的距离度量方法，通常就是学过的两点间距离，可以用在多维。</p>\n<ul>\n<li>二维平面上点a(x1,y1)与b(x2,y2)间的欧氏距离:  <script type=\"math/tex; mode=display\">d_{12} = \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}</script></li>\n<li>三维空间点a(x1,y1,z1)与b(x2,y2,z2)间的欧氏距离:<script type=\"math/tex; mode=display\">d{12} = \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2+(z_1-z_2)^2}</script></li>\n<li>更高维的计算类似二维三维</li>\n</ul>\n<h2 id=\"曼哈顿距离\"><a href=\"#曼哈顿距离\" class=\"headerlink\" title=\"曼哈顿距离\"></a>曼哈顿距离</h2><p>　　不再是两点间连线的那种，是类似九宫格的走法，只能直线和直角拐弯。又叫做“城市街区距离”。</p>\n<ul>\n<li>二维平面两点a(x1,y1)与b(x2,y2)间的曼哈顿距离：<script type=\"math/tex; mode=display\">d_12 = |x_1-x_2|+|y_1-y_2|</script></li>\n<li>三维和其他维类似</li>\n</ul>\n<div class=\"note info\"><p>　　除了这两种还有余弦距离和切比雪夫距离等，这里不展开说。采用不同的距离度量方法对结果有很大的影响。</p></div>\n<h1 id=\"k-means算法\"><a href=\"#k-means算法\" class=\"headerlink\" title=\"k-means算法\"></a>k-means算法</h1><p>  思想大致是:</p>\n<ul>\n<li>1.　先随机选k个质心</li>\n<li>2.　对每个点计算其到各个质心的距离</li>\n<li>3.　选距离最近的，把这个点归为这个质心的一类，形成k个簇</li>\n<li>4.　然后对于每个簇，计算其中每个点到质心的平均距离</li>\n<li>5.　然后把这个作为这个簇的新的质心,进行第二步</li>\n<li>6.　直到簇不怎么发生变化或者达到了预设的最大迭代次数，停止</li>\n</ul>\n<p>　主要函数如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//k-means聚类</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Cluster&gt; k_means(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;trans,<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> counts)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;Cluster&gt; clusters(k);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> row = trans.size();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> col = trans[<span class=\"number\">0</span>].size();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//随机初始化聚类中心</span></span><br><span class=\"line\">  srand((<span class=\"keyword\">int</span>)time(<span class=\"number\">0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center = rand()%trans.size();</span><br><span class=\"line\">    clusters[i].center=trans[center]; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//迭代counts次</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;cnt&lt;counts;cnt++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//清空样本空间</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)</span><br><span class=\"line\">      clusters[i].samples.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算样本属于的簇</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;row;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> tmp_center = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> minal = cal_distance(trans[i],clusters[tmp_center].center);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;k;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> distance = cal_distance(trans[i],clusters[j].center);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(distance&lt;minal)&#123;</span><br><span class=\"line\">          tmp_center = j;</span><br><span class=\"line\">          minal = distance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      clusters[tmp_center].samples.push_back(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重新计算簇中心</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m=<span class=\"number\">0</span>;m&lt;trans[<span class=\"number\">0</span>].size();m++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;clusters[i].samples.size();j++)&#123;</span><br><span class=\"line\">          <span class=\"comment\">//cout&lt;&lt;\"sum+=: \"&lt;&lt;trans[clusters[i].samples[j]][m];</span></span><br><span class=\"line\">          sum+=trans[clusters[i].samples[j]][m];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        clusters[i].center[m]=sum/clusters[i].samples.size();</span><br><span class=\"line\">        sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> clusters;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　用了C++作为实现的代码，python的代码可以参考网上的，有很多。计算距离用的是欧式距离。数据可以自己构造尝试。</p>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p><meta name=\"referrer\" content=\"no-referrer\"></p>\n<h1 id=\"聚类\"><a href=\"#聚类\" class=\"headerlink\" title=\"聚类\"></a>聚类</h1><h2 id=\"聚类定义\"><a href=\"#聚类定义\" class=\"headerlink\" title=\"聚类定义\"></a>聚类定义</h2><p>　　聚类(Clustering)，指的是一种学习方式（操作方式），即把物理或者抽象对象的集合分组为由彼此的对象组成的多个类的分析过程。","more":"</p>\n<div class=\"note info\"><p> 聚类属于无监督机器学习，简言之就是把特征形态相同的或者近似的划分在一个概念下，聚集为一组。</p>\n<p>聚类在实际的应用中中亦是非常广泛的，如：市场细分（Market segmentation）、社交圈分析（social network analysis）、集群计算（organize computing clusters）、天体数据分析（astronomical data analysis）等</p></div>\n<h2 id=\"聚类算法分类\"><a href=\"#聚类算法分类\" class=\"headerlink\" title=\"聚类算法分类\"></a>聚类算法分类</h2><p>　　主要的聚类主要的聚类算法可以划分为如下几类：划分方法、层次方法、基于密度的方法、基于网格的方法以及基于模型的方法。</p>\n<p>　　每一类中都存在着得到广泛应用的算法，例如：划分方法中的k-means聚类算法、层次方法中的凝聚型层次聚类算法、基于模型方法中的神经网络聚类算法等</p>\n<p>　　但是上述的都是硬聚类，即每一个数据只能被归为一类，还有一种是模糊聚类。<br>   　　模糊聚类通过隶属函数来确定每个数据隶属于各个簇的程度，而不是将一个数据对象硬性地归类到某一簇中。</p>\n<h1 id=\"常用距离算法\"><a href=\"#常用距离算法\" class=\"headerlink\" title=\"常用距离算法\"></a>常用距离算法</h1><h2 id=\"欧氏距离\"><a href=\"#欧氏距离\" class=\"headerlink\" title=\"欧氏距离\"></a>欧氏距离</h2><p>　　欧氏距离是最直观的距离度量方法，通常就是学过的两点间距离，可以用在多维。</p>\n<ul>\n<li>二维平面上点a(x1,y1)与b(x2,y2)间的欧氏距离:  <script type=\"math/tex; mode=display\">d_{12} = \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}</script></li>\n<li>三维空间点a(x1,y1,z1)与b(x2,y2,z2)间的欧氏距离:<script type=\"math/tex; mode=display\">d{12} = \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2+(z_1-z_2)^2}</script></li>\n<li>更高维的计算类似二维三维</li>\n</ul>\n<h2 id=\"曼哈顿距离\"><a href=\"#曼哈顿距离\" class=\"headerlink\" title=\"曼哈顿距离\"></a>曼哈顿距离</h2><p>　　不再是两点间连线的那种，是类似九宫格的走法，只能直线和直角拐弯。又叫做“城市街区距离”。</p>\n<ul>\n<li>二维平面两点a(x1,y1)与b(x2,y2)间的曼哈顿距离：<script type=\"math/tex; mode=display\">d_12 = |x_1-x_2|+|y_1-y_2|</script></li>\n<li>三维和其他维类似</li>\n</ul>\n<div class=\"note info\"><p>　　除了这两种还有余弦距离和切比雪夫距离等，这里不展开说。采用不同的距离度量方法对结果有很大的影响。</p></div>\n<h1 id=\"k-means算法\"><a href=\"#k-means算法\" class=\"headerlink\" title=\"k-means算法\"></a>k-means算法</h1><p>  思想大致是:</p>\n<ul>\n<li>1.　先随机选k个质心</li>\n<li>2.　对每个点计算其到各个质心的距离</li>\n<li>3.　选距离最近的，把这个点归为这个质心的一类，形成k个簇</li>\n<li>4.　然后对于每个簇，计算其中每个点到质心的平均距离</li>\n<li>5.　然后把这个作为这个簇的新的质心,进行第二步</li>\n<li>6.　直到簇不怎么发生变化或者达到了预设的最大迭代次数，停止</li>\n</ul>\n<p>　主要函数如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//k-means聚类</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Cluster&gt; k_means(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;trans,<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> counts)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;Cluster&gt; clusters(k);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> row = trans.size();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> col = trans[<span class=\"number\">0</span>].size();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//随机初始化聚类中心</span></span><br><span class=\"line\">  srand((<span class=\"keyword\">int</span>)time(<span class=\"number\">0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center = rand()%trans.size();</span><br><span class=\"line\">    clusters[i].center=trans[center]; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//迭代counts次</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;cnt&lt;counts;cnt++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//清空样本空间</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)</span><br><span class=\"line\">      clusters[i].samples.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算样本属于的簇</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;row;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> tmp_center = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> minal = cal_distance(trans[i],clusters[tmp_center].center);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;k;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> distance = cal_distance(trans[i],clusters[j].center);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(distance&lt;minal)&#123;</span><br><span class=\"line\">          tmp_center = j;</span><br><span class=\"line\">          minal = distance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      clusters[tmp_center].samples.push_back(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重新计算簇中心</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m=<span class=\"number\">0</span>;m&lt;trans[<span class=\"number\">0</span>].size();m++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;clusters[i].samples.size();j++)&#123;</span><br><span class=\"line\">          <span class=\"comment\">//cout&lt;&lt;\"sum+=: \"&lt;&lt;trans[clusters[i].samples[j]][m];</span></span><br><span class=\"line\">          sum+=trans[clusters[i].samples[j]][m];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        clusters[i].center[m]=sum/clusters[i].samples.size();</span><br><span class=\"line\">        sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> clusters;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　用了C++作为实现的代码，python的代码可以参考网上的，有很多。计算距离用的是欧式距离。数据可以自己构造尝试。</p>\n<hr>"},{"title":"动态规划套路详解","comments":1,"mathjax":false,"date":"2019-06-18T06:38:35.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n在LeetCode的[322题题解](https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-tao-lu-xiang-jie-by-wei-lai-bu-ke/)中看到一篇动态规划的详解，讲的很清楚，转载记录下\n\n转自：[LeetCode动态规划套路详解](https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-tao-lu-xiang-jie-by-wei-lai-bu-ke/)\n{% endnote %}\n<!--more-->\n## 介绍&闲谈\n下面通过对斐波那契数列和这道凑零钱问题详解动态规划。如果只想看本题的答案，请直接翻到最后查看。\n\n动态规划算法似乎是一种很高深莫测的算法，你会在一些面试或算法书籍的高级技巧部分看到相关内容，什么状态转移方程，**重叠子问题**，最优子结构等高大上的词汇也可能让你望而却步。\n\n而且，当你去看用动态规划解决某个问题的代码时，你会觉得这样解决问题竟然如此巧妙，但却难以理解，你可能惊讶于人家是怎么想到这种解法的。\n\n实际上，动态规划是一种常见的「算法设计技巧」，并没有什么高深莫测，至于各种高大上的术语，那是吓唬别人用的，只要你亲自体验几把，这些名词的含义其实显而易见，再简单不过了。\n\n至于为什么最终的解法看起来如此精妙，是因为动态规划遵循一套固定的流程：    \n递归的暴力解法 -> 带备忘录的递归解法 -> 非递归的动态规划解法。\n\n这个过程是层层递进的解决问题的过程，你如果没有前面的铺垫，直接看最终的非递归动态规划解法，当然会觉得牛逼而不可及了。\n\n当然，见的多了，思考多了，是可以一步写出非递归的动态规划解法的。任何技巧都需要练习，我们先遵循这个流程走，算法设计也就这些套路，除此之外，真的没啥高深的。\n\n以下，先通过两个个比较简单的例子：斐波那契和凑零钱问题，揭开动态规划的神秘面纱，描述上述三个流程。后续还会写几篇文章探讨如何使用动态规划技巧解决比较复杂的经典问题。\n\n首先，第一个快被举烂了的例子，斐波那契数列。请读者不要嫌弃这个例子简单，因为简单的例子才能让你把精力充分集中在算法背后的通用思想和技巧上，而不会被那些隐晦的细节问题搞的莫名其妙。后续，困难的例子有的是。\n## 步骤一、暴力的递归算法\n\n```C++\nint fib(int N) {\n    if (N == 1 || N == 2) return 1;\n    return fib(N - 1) + fib(N - 2);\n}\n```\n\n这个不用多说了，学校老师讲递归的时候似乎都是拿这个举例。我们也知道这样写代码虽然简洁易懂，但是十分低效，低效在哪里？假设 n = 20，请画出递归树。\n\nPS：但凡遇到需要递归的问题，最好都画出递归树，这对你分析算法的复杂度，寻找算法低效的原因都有巨大帮助。\n{% asset_img 1.png %}\n\n这个递归树怎么理解？就是说想要计算原问题 f(20)，我就得先计算出子问题 f(19) 和 f(18)，然后要计算 f(19)，我就要先算出子问题 f(18) 和 f(17)，以此类推。最后遇到 f(1) 或者 f(2) 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。\n\n**递归算法的时间复杂度怎么计算？子问题个数乘以解决一个子问题需要的时间。**\n\n子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。\n\n解决一个子问题的时间，在本算法中，没有循环，只有 f(n - 1) + f(n - 2) 一个加法操作，时间为 O(1)。\n\n所以，这个算法的时间复杂度为 O(2^n)，指数级别，爆炸。\n\n观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 f(18) 被计算了两次，而且你可以看到，以 f(18) 为根的这个递归树体量巨大，多算一遍，会耗费巨大的时间。更何况，还不止 f(18) 这一个节点被重复计算，所以这个算法及其低效。\n\n这就是动态规划问题的第一个性质：**重叠子问题**。下面，我们想办法解决这个问题。\n\n## 步骤二、带备忘录的递归解法\n\n明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。\n\n一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。\n\n```C++\nint fib(int N) {\n    if (N < 1) return 0;\n    // 备忘录全初始化为 0\n    vector<int> memo(N + 1, 0);\n    return helper(memo, N);\n}\nint helper(vector<int>& memo, int n) {\n    if (n == 1 || n == 2) return 1;\n    if (memo[n] != 0) return memo[n];\n    // 未被计算过\n    memo[n] = helper(memo, n - 1) + helper(memo, n - 2);\n    return memo[n];\n}\n```\n\n现在，画出递归树，你就知道「备忘录」到底做了什么。\n\n{% asset_img 2.png %}\n\n实际上，带「备忘录」的递归算法，把一棵存在巨量冗余的递归树通过「剪枝」，改造成了一幅不存在冗余的递归图，极大减少了子问题（即递归图中节点）的个数。\n\n递归算法的时间复杂度怎么算？子问题个数乘以解决一个子问题需要的时间。\n\n子问题个数，即图中节点的总数，由于本算法不存在冗余计算，子问题就是 f(1), f(2), f(3) ... f(20)，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。\n\n解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。\n\n所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。\n\n至此，带备忘录的递归解法的效率已经和动态规划一样了。实际上，这种解法和动态规划的思想已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。\n\n啥叫「自顶向下」？注意我们刚才画的递归树（或者说图），是从上向下延伸，都是从一个规模较大的原问题比如说 f(20)，向下逐渐分解规模，直到 f(1) 和 f(2) 触底，然后逐层返回答案，这就叫「自顶向下」。\n\n啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 f(1) 和 f(2) 开始往上推，直到推到我们想要的答案 f(20)，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。\n\n## 步骤三、动态规划\n\n有了上一步「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，就叫做 DP table 吧，在这张表上完成「自底向上」的推算岂不美哉！\n\n```C++\nint fib(int N) {\n    vector<int> dp(N + 1, 0);\n    dp[1] = dp[2] = 1;\n    for (int i = 3; i <= N; i++)\n        dp[i] = dp[i - 1] + dp[i - 2];\n    return dp[N];\n}\n```\n\n{% asset_img 3.png %}\n\n画个图就很好理解了，而且你发现这个 DP table 特别像之前那个「剪枝」后的结果，只是反过来算而已。实际上，带备忘录的递归解法中的「备忘录」，最终完成后就是这个 DP table，所以说这两种解法其实是差不多的，大部分情况下，效率也基本相同。\n\n这里，引出「动态转移方程」这个名词，实际上就是描述问题结构的数学形式：\n\n{% asset_img 4.png %}\n\n为啥叫「状态转移方程」？为了听起来高端。你把 f(n) 想做一个状态 n，这个状态 n 是由状态 n - 1 和状态 n - 2 相加转移而来，这就叫状态转移，仅此而已。\n\n你会发现，上面的几种解法中的所有操作，例如 return f(n - 1) + f(n - 2)，dp[i] = dp[i - 1] + dp[i - 2]，以及对备忘录或 DP table 的初始化操作，都是围绕这个方程式的不同表现形式。可见列出「状态转移方程」的重要性，它是解决问题的核心。很容易发现，其实状态转移方程直接代表着暴力解法。\n\n**千万不要看不起暴力解，动态规划问题最困难的就是写出状态转移方程**，即这个暴力解。优化方法无非是用备忘录或者 DP table，再无奥妙可言。\n\n这个例子的最后，讲一个细节优化。细心的读者会发现，根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：\n\n```C++\nint fib(int n) {\n    if (n < 2) return n;\n    int prev = 0, curr = 1;\n    for (int i = 0; i < n - 1; i++) {\n        int sum = prev + curr;\n        prev = curr;\n        curr = sum;\n    }\n    return curr;\n}\n```\n\n有人会问，动态规划的另一个重要特性「最优子结构」，怎么没有涉及？下面会涉及。斐波那契数列的例子严格来说不算动态规划，以上旨在演示算法设计螺旋上升的过程。当问题中要求求一个最优解或在代码中看到循环和 max、min 等函数时，十有八九，需要动态规划大显身手。\n\n下面，看第二个例子，**凑零钱问题**，有了上面的详细铺垫，这个问题会很快解决。\n\n题目：给你 k 种面值的硬币，面值分别为 c1, c2 ... ck，再给一个总金额 n，问你最少需要几枚硬币凑出这个金额，如果不可能凑出，则回答 -1 。\n\n比如说，k = 3，面值分别为 1，2，5，总金额 n = 11，那么最少需要 3 枚硬币，即 11 = 5 + 5 + 1 。下面走流程。\n## CoinChange问题\n### 一、暴力解法\n\n首先是最困难的一步，写出状态转移方程，这个问题比较好写：\n\n{% asset_img 5.png %}]\n\n其实，这个方程就用到了「最优子结构」性质：**原问题的解由子问题的最优解构成**。即 f(11) 由 f(10), f(9), f(6) 的最优解转移而来。\n\n记住，**要符合「最优子结构」，子问题间必须互相独立**。啥叫相互独立？你肯定不想看数学证明，我用一个直观的例子来讲解。\n\n比如说，你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高...... 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高...... 当然，最终就是你每门课都是满分，这就是最高的总成绩。\n\n得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。\n\n但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，此消彼长。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。\n\n回到凑零钱问题，显然子问题之间没有相互制约，而是互相独立的。所以这个状态转移方程是可以得到正确答案的。\n\n之后就没啥难点了，按照方程写暴力递归算法即可。\n\n```C++\nint coinChange(vector<int>& coins, int amount) {\n    if (amount == 0) return 0;\n    int ans = INT_MAX;\n    for (int coin : coins) {\n        // 金额不可达\n        if (amount - coin < 0) continue;\n        int subProb = coinChange(coins, amount - coin);\n        // 子问题无解\n        if (subProb == -1) continue;\n        ans = min(ans, subProb + 1);\n    }\n    return ans == INT_MAX ? -1 : ans;\n}\n```\n\n画出递归树：\n\n{% asset_img 6.png %}\n\n时间复杂度分析：子问题总数 x 每个子问题的时间。子问题总数为递归树节点个数，这个比较难看出来，是 O(n^k)，总之是指数级别的。每个子问题中含有一个 for 循环，复杂度为 O(k)。所以总时间复杂度为 $$ O(k\\*n^k) $$，指数级别。\n\n### 二、带备忘录的递归算法\n\n```C++\nint coinChange(vector<int>& coins, int amount) {\n    // 备忘录初始化为 -2\n    vector<int> memo(amount + 1, -2);\n    return helper(coins, amount, memo);\n}\n\nint helper(vector<int>& coins, int amount, vector<int>& memo) {\n    if (amount == 0) return 0;\n    if (memo[amount] != -2) return memo[amount];\n    int ans = INT_MAX;\n    for (int coin : coins) {\n        // 金额不可达\n        if (amount - coin < 0) continue;\n        int subProb = helper(coins, amount - coin, memo);\n        // 子问题无解\n        if (subProb == -1) continue;\n        ans = min(ans, subProb + 1);\n    }\n    // 记录本轮答案\n    memo[amount] = (ans == INT_MAX) ? -1 : ans;\n    return memo[amount];\n}\n```\n\n不画图了，很显然「备忘录」大大减小了子问题数目，完全消除了子问题的冗余，所以子问题总数不会超过金额数 n，即子问题数目为 O(n)。处理一个子问题的时间不变，仍是 O(k)，所以总的时间复杂度是 O(kn)。\n\n### 三、动态规划\n\n```C++\nint coinChange(vector<int>& coins, int amount) {\n    vector<int> dp(amount + 1, amount + 1);\n    dp[0] = 0;\n    for (int i = 1; i <= amount; i++) {\n        for (int coin : coins)\n            if (coin <= i)\n                dp[i] = min(dp[i], dp[i - coin] + 1);\n    }\n    return dp[amount] > amount ? -1 : dp[amount];\n}\n```\n\n{% asset_img 7.png %}\n\n## 最后总结\n\n如果你不太了解动态规划，还能看到这里，真得给你鼓掌，相信你已经掌握了这个算法的设计技巧。\n\n计算机解决问题其实没有任何奇技淫巧，它唯一的解决办法就是穷举，穷举所有可能性。**算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明地穷举”。**\n\n列出动态转移方程，就是在解决“如何穷举”的问题。之所以说它难，一是因为很多穷举需要递归实现，二是因为有的问题本身的解空间复杂，不那么容易穷举完整。\n\n备忘录、DP table 就是在追求“如何聪明地穷举”。用空间换时间的思路，是降低时间复杂度的不二法门，除此之外，试问，还能玩出啥花活？\n","source":"_posts/动态规划套路详解.md","raw":"---\ntitle: 动态规划套路详解\ntags:\n  - DP\n  - Learning\n  - Reprint\ncategories:\n  - Learning\ncomments: true\nmathjax: false\ndate: 2019-06-18 14:38:35\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n## 前言\n在LeetCode的[322题题解](https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-tao-lu-xiang-jie-by-wei-lai-bu-ke/)中看到一篇动态规划的详解，讲的很清楚，转载记录下\n\n转自：[LeetCode动态规划套路详解](https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-tao-lu-xiang-jie-by-wei-lai-bu-ke/)\n{% endnote %}\n<!--more-->\n## 介绍&闲谈\n下面通过对斐波那契数列和这道凑零钱问题详解动态规划。如果只想看本题的答案，请直接翻到最后查看。\n\n动态规划算法似乎是一种很高深莫测的算法，你会在一些面试或算法书籍的高级技巧部分看到相关内容，什么状态转移方程，**重叠子问题**，最优子结构等高大上的词汇也可能让你望而却步。\n\n而且，当你去看用动态规划解决某个问题的代码时，你会觉得这样解决问题竟然如此巧妙，但却难以理解，你可能惊讶于人家是怎么想到这种解法的。\n\n实际上，动态规划是一种常见的「算法设计技巧」，并没有什么高深莫测，至于各种高大上的术语，那是吓唬别人用的，只要你亲自体验几把，这些名词的含义其实显而易见，再简单不过了。\n\n至于为什么最终的解法看起来如此精妙，是因为动态规划遵循一套固定的流程：    \n递归的暴力解法 -> 带备忘录的递归解法 -> 非递归的动态规划解法。\n\n这个过程是层层递进的解决问题的过程，你如果没有前面的铺垫，直接看最终的非递归动态规划解法，当然会觉得牛逼而不可及了。\n\n当然，见的多了，思考多了，是可以一步写出非递归的动态规划解法的。任何技巧都需要练习，我们先遵循这个流程走，算法设计也就这些套路，除此之外，真的没啥高深的。\n\n以下，先通过两个个比较简单的例子：斐波那契和凑零钱问题，揭开动态规划的神秘面纱，描述上述三个流程。后续还会写几篇文章探讨如何使用动态规划技巧解决比较复杂的经典问题。\n\n首先，第一个快被举烂了的例子，斐波那契数列。请读者不要嫌弃这个例子简单，因为简单的例子才能让你把精力充分集中在算法背后的通用思想和技巧上，而不会被那些隐晦的细节问题搞的莫名其妙。后续，困难的例子有的是。\n## 步骤一、暴力的递归算法\n\n```C++\nint fib(int N) {\n    if (N == 1 || N == 2) return 1;\n    return fib(N - 1) + fib(N - 2);\n}\n```\n\n这个不用多说了，学校老师讲递归的时候似乎都是拿这个举例。我们也知道这样写代码虽然简洁易懂，但是十分低效，低效在哪里？假设 n = 20，请画出递归树。\n\nPS：但凡遇到需要递归的问题，最好都画出递归树，这对你分析算法的复杂度，寻找算法低效的原因都有巨大帮助。\n{% asset_img 1.png %}\n\n这个递归树怎么理解？就是说想要计算原问题 f(20)，我就得先计算出子问题 f(19) 和 f(18)，然后要计算 f(19)，我就要先算出子问题 f(18) 和 f(17)，以此类推。最后遇到 f(1) 或者 f(2) 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。\n\n**递归算法的时间复杂度怎么计算？子问题个数乘以解决一个子问题需要的时间。**\n\n子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。\n\n解决一个子问题的时间，在本算法中，没有循环，只有 f(n - 1) + f(n - 2) 一个加法操作，时间为 O(1)。\n\n所以，这个算法的时间复杂度为 O(2^n)，指数级别，爆炸。\n\n观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 f(18) 被计算了两次，而且你可以看到，以 f(18) 为根的这个递归树体量巨大，多算一遍，会耗费巨大的时间。更何况，还不止 f(18) 这一个节点被重复计算，所以这个算法及其低效。\n\n这就是动态规划问题的第一个性质：**重叠子问题**。下面，我们想办法解决这个问题。\n\n## 步骤二、带备忘录的递归解法\n\n明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。\n\n一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。\n\n```C++\nint fib(int N) {\n    if (N < 1) return 0;\n    // 备忘录全初始化为 0\n    vector<int> memo(N + 1, 0);\n    return helper(memo, N);\n}\nint helper(vector<int>& memo, int n) {\n    if (n == 1 || n == 2) return 1;\n    if (memo[n] != 0) return memo[n];\n    // 未被计算过\n    memo[n] = helper(memo, n - 1) + helper(memo, n - 2);\n    return memo[n];\n}\n```\n\n现在，画出递归树，你就知道「备忘录」到底做了什么。\n\n{% asset_img 2.png %}\n\n实际上，带「备忘录」的递归算法，把一棵存在巨量冗余的递归树通过「剪枝」，改造成了一幅不存在冗余的递归图，极大减少了子问题（即递归图中节点）的个数。\n\n递归算法的时间复杂度怎么算？子问题个数乘以解决一个子问题需要的时间。\n\n子问题个数，即图中节点的总数，由于本算法不存在冗余计算，子问题就是 f(1), f(2), f(3) ... f(20)，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。\n\n解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。\n\n所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。\n\n至此，带备忘录的递归解法的效率已经和动态规划一样了。实际上，这种解法和动态规划的思想已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。\n\n啥叫「自顶向下」？注意我们刚才画的递归树（或者说图），是从上向下延伸，都是从一个规模较大的原问题比如说 f(20)，向下逐渐分解规模，直到 f(1) 和 f(2) 触底，然后逐层返回答案，这就叫「自顶向下」。\n\n啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 f(1) 和 f(2) 开始往上推，直到推到我们想要的答案 f(20)，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。\n\n## 步骤三、动态规划\n\n有了上一步「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，就叫做 DP table 吧，在这张表上完成「自底向上」的推算岂不美哉！\n\n```C++\nint fib(int N) {\n    vector<int> dp(N + 1, 0);\n    dp[1] = dp[2] = 1;\n    for (int i = 3; i <= N; i++)\n        dp[i] = dp[i - 1] + dp[i - 2];\n    return dp[N];\n}\n```\n\n{% asset_img 3.png %}\n\n画个图就很好理解了，而且你发现这个 DP table 特别像之前那个「剪枝」后的结果，只是反过来算而已。实际上，带备忘录的递归解法中的「备忘录」，最终完成后就是这个 DP table，所以说这两种解法其实是差不多的，大部分情况下，效率也基本相同。\n\n这里，引出「动态转移方程」这个名词，实际上就是描述问题结构的数学形式：\n\n{% asset_img 4.png %}\n\n为啥叫「状态转移方程」？为了听起来高端。你把 f(n) 想做一个状态 n，这个状态 n 是由状态 n - 1 和状态 n - 2 相加转移而来，这就叫状态转移，仅此而已。\n\n你会发现，上面的几种解法中的所有操作，例如 return f(n - 1) + f(n - 2)，dp[i] = dp[i - 1] + dp[i - 2]，以及对备忘录或 DP table 的初始化操作，都是围绕这个方程式的不同表现形式。可见列出「状态转移方程」的重要性，它是解决问题的核心。很容易发现，其实状态转移方程直接代表着暴力解法。\n\n**千万不要看不起暴力解，动态规划问题最困难的就是写出状态转移方程**，即这个暴力解。优化方法无非是用备忘录或者 DP table，再无奥妙可言。\n\n这个例子的最后，讲一个细节优化。细心的读者会发现，根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：\n\n```C++\nint fib(int n) {\n    if (n < 2) return n;\n    int prev = 0, curr = 1;\n    for (int i = 0; i < n - 1; i++) {\n        int sum = prev + curr;\n        prev = curr;\n        curr = sum;\n    }\n    return curr;\n}\n```\n\n有人会问，动态规划的另一个重要特性「最优子结构」，怎么没有涉及？下面会涉及。斐波那契数列的例子严格来说不算动态规划，以上旨在演示算法设计螺旋上升的过程。当问题中要求求一个最优解或在代码中看到循环和 max、min 等函数时，十有八九，需要动态规划大显身手。\n\n下面，看第二个例子，**凑零钱问题**，有了上面的详细铺垫，这个问题会很快解决。\n\n题目：给你 k 种面值的硬币，面值分别为 c1, c2 ... ck，再给一个总金额 n，问你最少需要几枚硬币凑出这个金额，如果不可能凑出，则回答 -1 。\n\n比如说，k = 3，面值分别为 1，2，5，总金额 n = 11，那么最少需要 3 枚硬币，即 11 = 5 + 5 + 1 。下面走流程。\n## CoinChange问题\n### 一、暴力解法\n\n首先是最困难的一步，写出状态转移方程，这个问题比较好写：\n\n{% asset_img 5.png %}]\n\n其实，这个方程就用到了「最优子结构」性质：**原问题的解由子问题的最优解构成**。即 f(11) 由 f(10), f(9), f(6) 的最优解转移而来。\n\n记住，**要符合「最优子结构」，子问题间必须互相独立**。啥叫相互独立？你肯定不想看数学证明，我用一个直观的例子来讲解。\n\n比如说，你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高...... 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高...... 当然，最终就是你每门课都是满分，这就是最高的总成绩。\n\n得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。\n\n但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，此消彼长。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。\n\n回到凑零钱问题，显然子问题之间没有相互制约，而是互相独立的。所以这个状态转移方程是可以得到正确答案的。\n\n之后就没啥难点了，按照方程写暴力递归算法即可。\n\n```C++\nint coinChange(vector<int>& coins, int amount) {\n    if (amount == 0) return 0;\n    int ans = INT_MAX;\n    for (int coin : coins) {\n        // 金额不可达\n        if (amount - coin < 0) continue;\n        int subProb = coinChange(coins, amount - coin);\n        // 子问题无解\n        if (subProb == -1) continue;\n        ans = min(ans, subProb + 1);\n    }\n    return ans == INT_MAX ? -1 : ans;\n}\n```\n\n画出递归树：\n\n{% asset_img 6.png %}\n\n时间复杂度分析：子问题总数 x 每个子问题的时间。子问题总数为递归树节点个数，这个比较难看出来，是 O(n^k)，总之是指数级别的。每个子问题中含有一个 for 循环，复杂度为 O(k)。所以总时间复杂度为 $$ O(k\\*n^k) $$，指数级别。\n\n### 二、带备忘录的递归算法\n\n```C++\nint coinChange(vector<int>& coins, int amount) {\n    // 备忘录初始化为 -2\n    vector<int> memo(amount + 1, -2);\n    return helper(coins, amount, memo);\n}\n\nint helper(vector<int>& coins, int amount, vector<int>& memo) {\n    if (amount == 0) return 0;\n    if (memo[amount] != -2) return memo[amount];\n    int ans = INT_MAX;\n    for (int coin : coins) {\n        // 金额不可达\n        if (amount - coin < 0) continue;\n        int subProb = helper(coins, amount - coin, memo);\n        // 子问题无解\n        if (subProb == -1) continue;\n        ans = min(ans, subProb + 1);\n    }\n    // 记录本轮答案\n    memo[amount] = (ans == INT_MAX) ? -1 : ans;\n    return memo[amount];\n}\n```\n\n不画图了，很显然「备忘录」大大减小了子问题数目，完全消除了子问题的冗余，所以子问题总数不会超过金额数 n，即子问题数目为 O(n)。处理一个子问题的时间不变，仍是 O(k)，所以总的时间复杂度是 O(kn)。\n\n### 三、动态规划\n\n```C++\nint coinChange(vector<int>& coins, int amount) {\n    vector<int> dp(amount + 1, amount + 1);\n    dp[0] = 0;\n    for (int i = 1; i <= amount; i++) {\n        for (int coin : coins)\n            if (coin <= i)\n                dp[i] = min(dp[i], dp[i - coin] + 1);\n    }\n    return dp[amount] > amount ? -1 : dp[amount];\n}\n```\n\n{% asset_img 7.png %}\n\n## 最后总结\n\n如果你不太了解动态规划，还能看到这里，真得给你鼓掌，相信你已经掌握了这个算法的设计技巧。\n\n计算机解决问题其实没有任何奇技淫巧，它唯一的解决办法就是穷举，穷举所有可能性。**算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明地穷举”。**\n\n列出动态转移方程，就是在解决“如何穷举”的问题。之所以说它难，一是因为很多穷举需要递归实现，二是因为有的问题本身的解空间复杂，不那么容易穷举完整。\n\n备忘录、DP table 就是在追求“如何聪明地穷举”。用空间换时间的思路，是降低时间复杂度的不二法门，除此之外，试问，还能玩出啥花活？\n","slug":"动态规划套路详解","published":1,"updated":"2019-07-20T12:10:19.195Z","_id":"cjycjtk390083ussbp3yhnt93","layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在LeetCode的<a href=\"https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-tao-lu-xiang-jie-by-wei-lai-bu-ke/\" target=\"_blank\" rel=\"noopener\">322题题解</a>中看到一篇动态规划的详解，讲的很清楚，转载记录下</p>\n<p>转自：<a href=\"https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-tao-lu-xiang-jie-by-wei-lai-bu-ke/\" target=\"_blank\" rel=\"noopener\">LeetCode动态规划套路详解</a></p></div>\n<a id=\"more\"></a>\n<h2 id=\"介绍-amp-闲谈\"><a href=\"#介绍-amp-闲谈\" class=\"headerlink\" title=\"介绍&amp;闲谈\"></a>介绍&amp;闲谈</h2><p>下面通过对斐波那契数列和这道凑零钱问题详解动态规划。如果只想看本题的答案，请直接翻到最后查看。</p>\n<p>动态规划算法似乎是一种很高深莫测的算法，你会在一些面试或算法书籍的高级技巧部分看到相关内容，什么状态转移方程，<strong>重叠子问题</strong>，最优子结构等高大上的词汇也可能让你望而却步。</p>\n<p>而且，当你去看用动态规划解决某个问题的代码时，你会觉得这样解决问题竟然如此巧妙，但却难以理解，你可能惊讶于人家是怎么想到这种解法的。</p>\n<p>实际上，动态规划是一种常见的「算法设计技巧」，并没有什么高深莫测，至于各种高大上的术语，那是吓唬别人用的，只要你亲自体验几把，这些名词的含义其实显而易见，再简单不过了。</p>\n<p>至于为什么最终的解法看起来如此精妙，是因为动态规划遵循一套固定的流程：<br>递归的暴力解法 -&gt; 带备忘录的递归解法 -&gt; 非递归的动态规划解法。</p>\n<p>这个过程是层层递进的解决问题的过程，你如果没有前面的铺垫，直接看最终的非递归动态规划解法，当然会觉得牛逼而不可及了。</p>\n<p>当然，见的多了，思考多了，是可以一步写出非递归的动态规划解法的。任何技巧都需要练习，我们先遵循这个流程走，算法设计也就这些套路，除此之外，真的没啥高深的。</p>\n<p>以下，先通过两个个比较简单的例子：斐波那契和凑零钱问题，揭开动态规划的神秘面纱，描述上述三个流程。后续还会写几篇文章探讨如何使用动态规划技巧解决比较复杂的经典问题。</p>\n<p>首先，第一个快被举烂了的例子，斐波那契数列。请读者不要嫌弃这个例子简单，因为简单的例子才能让你把精力充分集中在算法背后的通用思想和技巧上，而不会被那些隐晦的细节问题搞的莫名其妙。后续，困难的例子有的是。</p>\n<h2 id=\"步骤一、暴力的递归算法\"><a href=\"#步骤一、暴力的递归算法\" class=\"headerlink\" title=\"步骤一、暴力的递归算法\"></a>步骤一、暴力的递归算法</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N == <span class=\"number\">1</span> || N == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(N - <span class=\"number\">1</span>) + fib(N - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个不用多说了，学校老师讲递归的时候似乎都是拿这个举例。我们也知道这样写代码虽然简洁易懂，但是十分低效，低效在哪里？假设 n = 20，请画出递归树。</p>\n<p>PS：但凡遇到需要递归的问题，最好都画出递归树，这对你分析算法的复杂度，寻找算法低效的原因都有巨大帮助。<br></p>\n<p>这个递归树怎么理解？就是说想要计算原问题 f(20)，我就得先计算出子问题 f(19) 和 f(18)，然后要计算 f(19)，我就要先算出子问题 f(18) 和 f(17)，以此类推。最后遇到 f(1) 或者 f(2) 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。</p>\n<p><strong>递归算法的时间复杂度怎么计算？子问题个数乘以解决一个子问题需要的时间。</strong></p>\n<p>子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。</p>\n<p>解决一个子问题的时间，在本算法中，没有循环，只有 f(n - 1) + f(n - 2) 一个加法操作，时间为 O(1)。</p>\n<p>所以，这个算法的时间复杂度为 O(2^n)，指数级别，爆炸。</p>\n<p>观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 f(18) 被计算了两次，而且你可以看到，以 f(18) 为根的这个递归树体量巨大，多算一遍，会耗费巨大的时间。更何况，还不止 f(18) 这一个节点被重复计算，所以这个算法及其低效。</p>\n<p>这就是动态规划问题的第一个性质：<strong>重叠子问题</strong>。下面，我们想办法解决这个问题。</p>\n<h2 id=\"步骤二、带备忘录的递归解法\"><a href=\"#步骤二、带备忘录的递归解法\" class=\"headerlink\" title=\"步骤二、带备忘录的递归解法\"></a>步骤二、带备忘录的递归解法</h2><p>明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。</p>\n<p>一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 备忘录全初始化为 0</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; memo(N + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(memo, N);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; memo, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (memo[n] != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> memo[n];</span><br><span class=\"line\">    <span class=\"comment\">// 未被计算过</span></span><br><span class=\"line\">    memo[n] = helper(memo, n - <span class=\"number\">1</span>) + helper(memo, n - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，画出递归树，你就知道「备忘录」到底做了什么。</p>\n\n<p>实际上，带「备忘录」的递归算法，把一棵存在巨量冗余的递归树通过「剪枝」，改造成了一幅不存在冗余的递归图，极大减少了子问题（即递归图中节点）的个数。</p>\n<p>递归算法的时间复杂度怎么算？子问题个数乘以解决一个子问题需要的时间。</p>\n<p>子问题个数，即图中节点的总数，由于本算法不存在冗余计算，子问题就是 f(1), f(2), f(3) … f(20)，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。</p>\n<p>解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。</p>\n<p>所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。</p>\n<p>至此，带备忘录的递归解法的效率已经和动态规划一样了。实际上，这种解法和动态规划的思想已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。</p>\n<p>啥叫「自顶向下」？注意我们刚才画的递归树（或者说图），是从上向下延伸，都是从一个规模较大的原问题比如说 f(20)，向下逐渐分解规模，直到 f(1) 和 f(2) 触底，然后逐层返回答案，这就叫「自顶向下」。</p>\n<p>啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 f(1) 和 f(2) 开始往上推，直到推到我们想要的答案 f(20)，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。</p>\n<h2 id=\"步骤三、动态规划\"><a href=\"#步骤三、动态规划\" class=\"headerlink\" title=\"步骤三、动态规划\"></a>步骤三、动态规划</h2><p>有了上一步「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，就叫做 DP table 吧，在这张表上完成「自底向上」的推算岂不美哉！</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dp(N + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = dp[<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= N; i++)</span><br><span class=\"line\">        dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[N];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>画个图就很好理解了，而且你发现这个 DP table 特别像之前那个「剪枝」后的结果，只是反过来算而已。实际上，带备忘录的递归解法中的「备忘录」，最终完成后就是这个 DP table，所以说这两种解法其实是差不多的，大部分情况下，效率也基本相同。</p>\n<p>这里，引出「动态转移方程」这个名词，实际上就是描述问题结构的数学形式：</p>\n\n<p>为啥叫「状态转移方程」？为了听起来高端。你把 f(n) 想做一个状态 n，这个状态 n 是由状态 n - 1 和状态 n - 2 相加转移而来，这就叫状态转移，仅此而已。</p>\n<p>你会发现，上面的几种解法中的所有操作，例如 return f(n - 1) + f(n - 2)，dp[i] = dp[i - 1] + dp[i - 2]，以及对备忘录或 DP table 的初始化操作，都是围绕这个方程式的不同表现形式。可见列出「状态转移方程」的重要性，它是解决问题的核心。很容易发现，其实状态转移方程直接代表着暴力解法。</p>\n<p><strong>千万不要看不起暴力解，动态规划问题最困难的就是写出状态转移方程</strong>，即这个暴力解。优化方法无非是用备忘录或者 DP table，再无奥妙可言。</p>\n<p>这个例子的最后，讲一个细节优化。细心的读者会发现，根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> prev = <span class=\"number\">0</span>, curr = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = prev + curr;</span><br><span class=\"line\">        prev = curr;</span><br><span class=\"line\">        curr = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有人会问，动态规划的另一个重要特性「最优子结构」，怎么没有涉及？下面会涉及。斐波那契数列的例子严格来说不算动态规划，以上旨在演示算法设计螺旋上升的过程。当问题中要求求一个最优解或在代码中看到循环和 max、min 等函数时，十有八九，需要动态规划大显身手。</p>\n<p>下面，看第二个例子，<strong>凑零钱问题</strong>，有了上面的详细铺垫，这个问题会很快解决。</p>\n<p>题目：给你 k 种面值的硬币，面值分别为 c1, c2 … ck，再给一个总金额 n，问你最少需要几枚硬币凑出这个金额，如果不可能凑出，则回答 -1 。</p>\n<p>比如说，k = 3，面值分别为 1，2，5，总金额 n = 11，那么最少需要 3 枚硬币，即 11 = 5 + 5 + 1 。下面走流程。</p>\n<h2 id=\"CoinChange问题\"><a href=\"#CoinChange问题\" class=\"headerlink\" title=\"CoinChange问题\"></a>CoinChange问题</h2><h3 id=\"一、暴力解法\"><a href=\"#一、暴力解法\" class=\"headerlink\" title=\"一、暴力解法\"></a>一、暴力解法</h3><p>首先是最困难的一步，写出状态转移方程，这个问题比较好写：</p>\n]\n\n其实，这个方程就用到了「最优子结构」性质：**原问题的解由子问题的最优解构成**。即 f(11) 由 f(10), f(9), f(6) 的最优解转移而来。\n\n记住，**要符合「最优子结构」，子问题间必须互相独立**。啥叫相互独立？你肯定不想看数学证明，我用一个直观的例子来讲解。\n\n比如说，你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高...... 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高...... 当然，最终就是你每门课都是满分，这就是最高的总成绩。\n\n得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。\n\n但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，此消彼长。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。\n\n回到凑零钱问题，显然子问题之间没有相互制约，而是互相独立的。所以这个状态转移方程是可以得到正确答案的。\n\n之后就没啥难点了，按照方程写暴力递归算法即可。\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">coinChange</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; coins, <span class=\"keyword\">int</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (amount == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> coin : coins) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 金额不可达</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (amount - coin &lt; <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> subProb = coinChange(coins, amount - coin);</span><br><span class=\"line\">        <span class=\"comment\">// 子问题无解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (subProb == <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ans = min(ans, subProb + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans == INT_MAX ? <span class=\"number\">-1</span> : ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>画出递归树：</p>\n\n<p>时间复杂度分析：子问题总数 x 每个子问题的时间。子问题总数为递归树节点个数，这个比较难看出来，是 O(n^k)，总之是指数级别的。每个子问题中含有一个 for 循环，复杂度为 O(k)。所以总时间复杂度为 <script type=\"math/tex\">O(k\\*n^k)</script>，指数级别。</p>\n<h3 id=\"二、带备忘录的递归算法\"><a href=\"#二、带备忘录的递归算法\" class=\"headerlink\" title=\"二、带备忘录的递归算法\"></a>二、带备忘录的递归算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">coinChange</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; coins, <span class=\"keyword\">int</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 备忘录初始化为 -2</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; memo(amount + <span class=\"number\">1</span>, <span class=\"number\">-2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(coins, amount, memo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; coins, <span class=\"keyword\">int</span> amount, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; memo)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (amount == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (memo[amount] != <span class=\"number\">-2</span>) <span class=\"keyword\">return</span> memo[amount];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> coin : coins) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 金额不可达</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (amount - coin &lt; <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> subProb = helper(coins, amount - coin, memo);</span><br><span class=\"line\">        <span class=\"comment\">// 子问题无解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (subProb == <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ans = min(ans, subProb + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 记录本轮答案</span></span><br><span class=\"line\">    memo[amount] = (ans == INT_MAX) ? <span class=\"number\">-1</span> : ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo[amount];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不画图了，很显然「备忘录」大大减小了子问题数目，完全消除了子问题的冗余，所以子问题总数不会超过金额数 n，即子问题数目为 O(n)。处理一个子问题的时间不变，仍是 O(k)，所以总的时间复杂度是 O(kn)。</p>\n<h3 id=\"三、动态规划\"><a href=\"#三、动态规划\" class=\"headerlink\" title=\"三、动态规划\"></a>三、动态规划</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">coinChange</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; coins, <span class=\"keyword\">int</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dp(amount + <span class=\"number\">1</span>, amount + <span class=\"number\">1</span>);</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= amount; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> coin : coins)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (coin &lt;= i)</span><br><span class=\"line\">                dp[i] = min(dp[i], dp[i - coin] + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[amount] &gt; amount ? <span class=\"number\">-1</span> : dp[amount];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后总结\"><a href=\"#最后总结\" class=\"headerlink\" title=\"最后总结\"></a>最后总结</h2><p>如果你不太了解动态规划，还能看到这里，真得给你鼓掌，相信你已经掌握了这个算法的设计技巧。</p>\n<p>计算机解决问题其实没有任何奇技淫巧，它唯一的解决办法就是穷举，穷举所有可能性。<strong>算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明地穷举”。</strong></p>\n<p>列出动态转移方程，就是在解决“如何穷举”的问题。之所以说它难，一是因为很多穷举需要递归实现，二是因为有的问题本身的解空间复杂，不那么容易穷举完整。</p>\n<p>备忘录、DP table 就是在追求“如何聪明地穷举”。用空间换时间的思路，是降低时间复杂度的不二法门，除此之外，试问，还能玩出啥花活？</p>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在LeetCode的<a href=\"https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-tao-lu-xiang-jie-by-wei-lai-bu-ke/\" target=\"_blank\" rel=\"noopener\">322题题解</a>中看到一篇动态规划的详解，讲的很清楚，转载记录下</p>\n<p>转自：<a href=\"https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-tao-lu-xiang-jie-by-wei-lai-bu-ke/\" target=\"_blank\" rel=\"noopener\">LeetCode动态规划套路详解</a></p></div>","more":"<h2 id=\"介绍-amp-闲谈\"><a href=\"#介绍-amp-闲谈\" class=\"headerlink\" title=\"介绍&amp;闲谈\"></a>介绍&amp;闲谈</h2><p>下面通过对斐波那契数列和这道凑零钱问题详解动态规划。如果只想看本题的答案，请直接翻到最后查看。</p>\n<p>动态规划算法似乎是一种很高深莫测的算法，你会在一些面试或算法书籍的高级技巧部分看到相关内容，什么状态转移方程，<strong>重叠子问题</strong>，最优子结构等高大上的词汇也可能让你望而却步。</p>\n<p>而且，当你去看用动态规划解决某个问题的代码时，你会觉得这样解决问题竟然如此巧妙，但却难以理解，你可能惊讶于人家是怎么想到这种解法的。</p>\n<p>实际上，动态规划是一种常见的「算法设计技巧」，并没有什么高深莫测，至于各种高大上的术语，那是吓唬别人用的，只要你亲自体验几把，这些名词的含义其实显而易见，再简单不过了。</p>\n<p>至于为什么最终的解法看起来如此精妙，是因为动态规划遵循一套固定的流程：<br>递归的暴力解法 -&gt; 带备忘录的递归解法 -&gt; 非递归的动态规划解法。</p>\n<p>这个过程是层层递进的解决问题的过程，你如果没有前面的铺垫，直接看最终的非递归动态规划解法，当然会觉得牛逼而不可及了。</p>\n<p>当然，见的多了，思考多了，是可以一步写出非递归的动态规划解法的。任何技巧都需要练习，我们先遵循这个流程走，算法设计也就这些套路，除此之外，真的没啥高深的。</p>\n<p>以下，先通过两个个比较简单的例子：斐波那契和凑零钱问题，揭开动态规划的神秘面纱，描述上述三个流程。后续还会写几篇文章探讨如何使用动态规划技巧解决比较复杂的经典问题。</p>\n<p>首先，第一个快被举烂了的例子，斐波那契数列。请读者不要嫌弃这个例子简单，因为简单的例子才能让你把精力充分集中在算法背后的通用思想和技巧上，而不会被那些隐晦的细节问题搞的莫名其妙。后续，困难的例子有的是。</p>\n<h2 id=\"步骤一、暴力的递归算法\"><a href=\"#步骤一、暴力的递归算法\" class=\"headerlink\" title=\"步骤一、暴力的递归算法\"></a>步骤一、暴力的递归算法</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N == <span class=\"number\">1</span> || N == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(N - <span class=\"number\">1</span>) + fib(N - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个不用多说了，学校老师讲递归的时候似乎都是拿这个举例。我们也知道这样写代码虽然简洁易懂，但是十分低效，低效在哪里？假设 n = 20，请画出递归树。</p>\n<p>PS：但凡遇到需要递归的问题，最好都画出递归树，这对你分析算法的复杂度，寻找算法低效的原因都有巨大帮助。<br></p>\n<p>这个递归树怎么理解？就是说想要计算原问题 f(20)，我就得先计算出子问题 f(19) 和 f(18)，然后要计算 f(19)，我就要先算出子问题 f(18) 和 f(17)，以此类推。最后遇到 f(1) 或者 f(2) 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。</p>\n<p><strong>递归算法的时间复杂度怎么计算？子问题个数乘以解决一个子问题需要的时间。</strong></p>\n<p>子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。</p>\n<p>解决一个子问题的时间，在本算法中，没有循环，只有 f(n - 1) + f(n - 2) 一个加法操作，时间为 O(1)。</p>\n<p>所以，这个算法的时间复杂度为 O(2^n)，指数级别，爆炸。</p>\n<p>观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 f(18) 被计算了两次，而且你可以看到，以 f(18) 为根的这个递归树体量巨大，多算一遍，会耗费巨大的时间。更何况，还不止 f(18) 这一个节点被重复计算，所以这个算法及其低效。</p>\n<p>这就是动态规划问题的第一个性质：<strong>重叠子问题</strong>。下面，我们想办法解决这个问题。</p>\n<h2 id=\"步骤二、带备忘录的递归解法\"><a href=\"#步骤二、带备忘录的递归解法\" class=\"headerlink\" title=\"步骤二、带备忘录的递归解法\"></a>步骤二、带备忘录的递归解法</h2><p>明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。</p>\n<p>一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 备忘录全初始化为 0</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; memo(N + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(memo, N);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; memo, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (memo[n] != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> memo[n];</span><br><span class=\"line\">    <span class=\"comment\">// 未被计算过</span></span><br><span class=\"line\">    memo[n] = helper(memo, n - <span class=\"number\">1</span>) + helper(memo, n - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，画出递归树，你就知道「备忘录」到底做了什么。</p>\n\n<p>实际上，带「备忘录」的递归算法，把一棵存在巨量冗余的递归树通过「剪枝」，改造成了一幅不存在冗余的递归图，极大减少了子问题（即递归图中节点）的个数。</p>\n<p>递归算法的时间复杂度怎么算？子问题个数乘以解决一个子问题需要的时间。</p>\n<p>子问题个数，即图中节点的总数，由于本算法不存在冗余计算，子问题就是 f(1), f(2), f(3) … f(20)，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。</p>\n<p>解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。</p>\n<p>所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。</p>\n<p>至此，带备忘录的递归解法的效率已经和动态规划一样了。实际上，这种解法和动态规划的思想已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。</p>\n<p>啥叫「自顶向下」？注意我们刚才画的递归树（或者说图），是从上向下延伸，都是从一个规模较大的原问题比如说 f(20)，向下逐渐分解规模，直到 f(1) 和 f(2) 触底，然后逐层返回答案，这就叫「自顶向下」。</p>\n<p>啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 f(1) 和 f(2) 开始往上推，直到推到我们想要的答案 f(20)，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。</p>\n<h2 id=\"步骤三、动态规划\"><a href=\"#步骤三、动态规划\" class=\"headerlink\" title=\"步骤三、动态规划\"></a>步骤三、动态规划</h2><p>有了上一步「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，就叫做 DP table 吧，在这张表上完成「自底向上」的推算岂不美哉！</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dp(N + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = dp[<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= N; i++)</span><br><span class=\"line\">        dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[N];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>画个图就很好理解了，而且你发现这个 DP table 特别像之前那个「剪枝」后的结果，只是反过来算而已。实际上，带备忘录的递归解法中的「备忘录」，最终完成后就是这个 DP table，所以说这两种解法其实是差不多的，大部分情况下，效率也基本相同。</p>\n<p>这里，引出「动态转移方程」这个名词，实际上就是描述问题结构的数学形式：</p>\n\n<p>为啥叫「状态转移方程」？为了听起来高端。你把 f(n) 想做一个状态 n，这个状态 n 是由状态 n - 1 和状态 n - 2 相加转移而来，这就叫状态转移，仅此而已。</p>\n<p>你会发现，上面的几种解法中的所有操作，例如 return f(n - 1) + f(n - 2)，dp[i] = dp[i - 1] + dp[i - 2]，以及对备忘录或 DP table 的初始化操作，都是围绕这个方程式的不同表现形式。可见列出「状态转移方程」的重要性，它是解决问题的核心。很容易发现，其实状态转移方程直接代表着暴力解法。</p>\n<p><strong>千万不要看不起暴力解，动态规划问题最困难的就是写出状态转移方程</strong>，即这个暴力解。优化方法无非是用备忘录或者 DP table，再无奥妙可言。</p>\n<p>这个例子的最后，讲一个细节优化。细心的读者会发现，根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> prev = <span class=\"number\">0</span>, curr = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = prev + curr;</span><br><span class=\"line\">        prev = curr;</span><br><span class=\"line\">        curr = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有人会问，动态规划的另一个重要特性「最优子结构」，怎么没有涉及？下面会涉及。斐波那契数列的例子严格来说不算动态规划，以上旨在演示算法设计螺旋上升的过程。当问题中要求求一个最优解或在代码中看到循环和 max、min 等函数时，十有八九，需要动态规划大显身手。</p>\n<p>下面，看第二个例子，<strong>凑零钱问题</strong>，有了上面的详细铺垫，这个问题会很快解决。</p>\n<p>题目：给你 k 种面值的硬币，面值分别为 c1, c2 … ck，再给一个总金额 n，问你最少需要几枚硬币凑出这个金额，如果不可能凑出，则回答 -1 。</p>\n<p>比如说，k = 3，面值分别为 1，2，5，总金额 n = 11，那么最少需要 3 枚硬币，即 11 = 5 + 5 + 1 。下面走流程。</p>\n<h2 id=\"CoinChange问题\"><a href=\"#CoinChange问题\" class=\"headerlink\" title=\"CoinChange问题\"></a>CoinChange问题</h2><h3 id=\"一、暴力解法\"><a href=\"#一、暴力解法\" class=\"headerlink\" title=\"一、暴力解法\"></a>一、暴力解法</h3><p>首先是最困难的一步，写出状态转移方程，这个问题比较好写：</p>\n]\n\n其实，这个方程就用到了「最优子结构」性质：**原问题的解由子问题的最优解构成**。即 f(11) 由 f(10), f(9), f(6) 的最优解转移而来。\n\n记住，**要符合「最优子结构」，子问题间必须互相独立**。啥叫相互独立？你肯定不想看数学证明，我用一个直观的例子来讲解。\n\n比如说，你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高...... 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高...... 当然，最终就是你每门课都是满分，这就是最高的总成绩。\n\n得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。\n\n但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，此消彼长。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。\n\n回到凑零钱问题，显然子问题之间没有相互制约，而是互相独立的。所以这个状态转移方程是可以得到正确答案的。\n\n之后就没啥难点了，按照方程写暴力递归算法即可。\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">coinChange</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; coins, <span class=\"keyword\">int</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (amount == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> coin : coins) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 金额不可达</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (amount - coin &lt; <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> subProb = coinChange(coins, amount - coin);</span><br><span class=\"line\">        <span class=\"comment\">// 子问题无解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (subProb == <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ans = min(ans, subProb + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans == INT_MAX ? <span class=\"number\">-1</span> : ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>画出递归树：</p>\n\n<p>时间复杂度分析：子问题总数 x 每个子问题的时间。子问题总数为递归树节点个数，这个比较难看出来，是 O(n^k)，总之是指数级别的。每个子问题中含有一个 for 循环，复杂度为 O(k)。所以总时间复杂度为 <script type=\"math/tex\">O(k\\*n^k)</script>，指数级别。</p>\n<h3 id=\"二、带备忘录的递归算法\"><a href=\"#二、带备忘录的递归算法\" class=\"headerlink\" title=\"二、带备忘录的递归算法\"></a>二、带备忘录的递归算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">coinChange</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; coins, <span class=\"keyword\">int</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 备忘录初始化为 -2</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; memo(amount + <span class=\"number\">1</span>, <span class=\"number\">-2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(coins, amount, memo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; coins, <span class=\"keyword\">int</span> amount, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; memo)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (amount == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (memo[amount] != <span class=\"number\">-2</span>) <span class=\"keyword\">return</span> memo[amount];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> coin : coins) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 金额不可达</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (amount - coin &lt; <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> subProb = helper(coins, amount - coin, memo);</span><br><span class=\"line\">        <span class=\"comment\">// 子问题无解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (subProb == <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ans = min(ans, subProb + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 记录本轮答案</span></span><br><span class=\"line\">    memo[amount] = (ans == INT_MAX) ? <span class=\"number\">-1</span> : ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo[amount];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不画图了，很显然「备忘录」大大减小了子问题数目，完全消除了子问题的冗余，所以子问题总数不会超过金额数 n，即子问题数目为 O(n)。处理一个子问题的时间不变，仍是 O(k)，所以总的时间复杂度是 O(kn)。</p>\n<h3 id=\"三、动态规划\"><a href=\"#三、动态规划\" class=\"headerlink\" title=\"三、动态规划\"></a>三、动态规划</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">coinChange</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; coins, <span class=\"keyword\">int</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dp(amount + <span class=\"number\">1</span>, amount + <span class=\"number\">1</span>);</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= amount; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> coin : coins)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (coin &lt;= i)</span><br><span class=\"line\">                dp[i] = min(dp[i], dp[i - coin] + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[amount] &gt; amount ? <span class=\"number\">-1</span> : dp[amount];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后总结\"><a href=\"#最后总结\" class=\"headerlink\" title=\"最后总结\"></a>最后总结</h2><p>如果你不太了解动态规划，还能看到这里，真得给你鼓掌，相信你已经掌握了这个算法的设计技巧。</p>\n<p>计算机解决问题其实没有任何奇技淫巧，它唯一的解决办法就是穷举，穷举所有可能性。<strong>算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明地穷举”。</strong></p>\n<p>列出动态转移方程，就是在解决“如何穷举”的问题。之所以说它难，一是因为很多穷举需要递归实现，二是因为有的问题本身的解空间复杂，不那么容易穷举完整。</p>\n<p>备忘录、DP table 就是在追求“如何聪明地穷举”。用空间换时间的思路，是降低时间复杂度的不二法门，除此之外，试问，还能玩出啥花活？</p>"},{"title":"记2019南大计算机本科生开放日","comments":1,"mathjax":false,"date":"2019-07-12T10:29:34.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n# 前言\n2019年7月12，恩，南大夏令营第一天，一天之内心情就像打翻的五味瓶。。。\n\n哎，写下来这些也是希望能给后面的学弟学妹点帮助，毕竟我也是看了很多以前别人写的夏令营的博客才完全了解夏令营。\n不说了罢，再说，要落泪了...\n{% endnote %}\n<!--more-->\n\n# 申请夏令营和选拔\n## 初审\n南大入营选拔很看重绩点和排名，以及，学校，这些都是敲门砖。\n\n当你绩点专业前5%，学校起码是211，你就有戏了，非211和985的，应该非常非常少，当然，如果你有很多厉害的奖，专利，论文啥的，就没问题\n除了上面的敲门砖，竞赛、论文、获奖、专利、软著这些之类的，如果有比较厉害的，也会很有希望。\n\n## 复审\n不要以为收到第一封通知邮件就是入营了，那只是初审，复审还会刷掉点人。\n复审需要寄送材料，按照邮件要求寄送即可，不要作假就行\n\n2019年大概400左右人入营，南京市内100+，非南京市280+，大概只给100不到的优营名额，竞争还是很激烈的\n\n# 夏令营\n## 准备\n别想了，在你报名之前你就应该准备。\n\n事实证明，如果你觉得自己有希望保研，最好大三下开学就准备夏令营，在大三下期末考之前，你需要认真复习准备我下面要说的。等期末结束再认真复习，就晚了。。\n我就是，期末之前复习不多，期末之后确认入营了才认真起来，但是时间完全不够用。\n\n**准备分为机试和面试**\n 1. 机试\n- 你需要学大量的算法，ACM中等难度就可以\n- 刷大量的题，100道肯定不够的，可以刷[LeetCode](https://leetcode.com/problemset/all/)上的中等难度题，也可以找上面的分类题目写。还可以刷[牛客网](https://www.nowcoder.com/ta/kaoyan)的考研复试题。事实证明，这两个网站都很有用\n- 刷完题要总结，可以用思维导图，我觉得挺好\n 2. 面试\n- 你需要复习数学相关，比如：概统、现代、离散\n- 专业相关，比如：操作系统、数据结构、计网、计组、数据库。如果时间充足，全都复习，时间不够，按我的写的顺序复习\n\n## 第一天机试\n第一天，算是最难受的了把。因为报道当天早上从学校出发的，所以要早起。但是，前一天晚上睡觉睡不着..不是我一个人，同行的四个人，都睡不着，一方面是无法避免的紧张，另一方面是，和自己生物钟不协调，睡太早\n\n所以尽量提前几天调好生物钟把，精神会好点\n\n上午11点左右到南大，路上本来想着再看看算法，但是因为晕车，困，没座位这些原因就没看。报道之后就直接去酒店登记入住了。酒店还是很棒的，毕竟四星级，条件很好。\n每天的午饭晚饭有餐券。不得不说！南大的伙食真的好，虽然，很贵....我看到一个女生，两个大荤加一个蔬菜，好像还有汤，26元..正常人均15把\n\n吃完饭就没多少时间了，因为着凉肚子难受，趴桌子趴了一会。复习也只能大概过一遍。所以尽量夏令营之前准备妥当。\n吃饭的时候听可靠消息说今年的题目比较难，当时心里就慌了，后面等机房开门的时候就一直看算法，心情沉重，\n\n### 机试\n要求下午1点半到，两点开始考试。\n一共两小时，三道题，每道题有10个测试用例，一个测试用例10分。满分也就是300分。\n\n以前好像看到说可以看到测试用例。但是！并没有，只能看到你第几个通过，第几个没通过，而且今年看不到总排名\n\n**第一题**\n\n大概意思是，给你一个不超过100位的数n，和一个不超过100的数字k，要求从数n中去掉k个数字，然后使得去掉k个数之后，n最小。\n\n**题解参考链接**：https://blog.csdn.net/C20190413/article/details/77368590   \n    \n   \n**第二题**\n\n大概意思是，有B个男孩，G个女孩，要求所有男孩女孩排成一队，连续的男孩个数不可以超过K个，问一共有多少种排法\n\n**思路参考：**\n\n分路递归，看当前为止是男孩还是女孩。\n\n所以第一路递归，当前是男孩，第二路递归，当前是女孩，然后继续递归遍历下一个位置。\n\n当然会有限制条件，不可以连续超过k个男孩，我在参数中记录当前位置，前面的男孩个数。\n\n如果女孩个数等于0，那后面全是男孩，要看剩下的男孩个数是否超过k，如果男孩个数为0，剩下全是女孩，返回1。\n\n如果前面男孩个数已经k个了，这个位置只能是女孩。\n\n大概这样。但是会超时，10个样例只通过了7个...后面也没想到怎么剪枝优化。\n\n**第三题**\n\n给出一个二叉树的前序遍历序列和后序遍历序列，序列是没有空节点#号的，只有字母，问通过这两个序列可以构造多少中不同的二叉树，因为树的样子不一样，遍历的序列是可能一样的。比如前序序列:abc，后序序列cba，就有4种不同的树\n\n**思路参考链接**：https://blog.csdn.net/C20190413/article/details/77368590\n       \n            \n## 第二天面试\n### 面试\n虽说，南大夏令营的结果是综合了机试和面试，综合排名。但是！**实际情况是**，机试稳了，面试就走过场了。面试相对来说没那么重要，但是为了不留遗憾，还是需要认真对待的。机试完一晚上加上第二天上午的时间，足够准备了。\n\n这次的面试分两批，上下午。我是下午那批，所以有一个上午可以睡个好觉，吃个美滋滋的自助早餐，还能准备一会。\n\n**每个人面试大概十分钟，只有一个英文面试题，一定要好好练练口语，以便临场发挥**\n\n我这次面试比较轻松，没有太过刁难。上来先**自我介绍**，没说限制时间，基本上自己说完就好。\n\n然后因为我说了国家级大创，所以，下一个问题**问了大创项目**，做了啥，怎么样，细节。还有会从你的回答中，**延伸出去**，问一些技术方面的问题。\n\n大创这里三个老师都问了我问题，由易到难，中间还问了我通信如何实现高并发，如何处理请求，以及通过什么方式实现的通信，比如wifi，蓝牙，我说了是websocket。还问了更深的窄带物联网的通信。这里花的时间是比较多的。\n\n随后一个老师**英文提问**自己哪门课学的比较好，为什么，紧张状态下真的话都说不清，很乱，这也是我面试唯一一个败笔....不过还好的是说完就冷静下来，继续回答问题。\n\n自我介绍说想在大数据这方面继续深造，老师就问了**为什么，如何看待大数据**，一些理解把，**延伸出去**的问了如何看待大数据中的隐私问题，答完又问了解过隐私方面的协议，比如说xxx吗，确实没听过，就直说这个不是很了解。\n\n整个面试还是比较轻松的，我的面试没那么难。\n\n不过交流下来，差距还是挺大的，似乎只有我比较幸运，问的比较正常。其他的有很多挺难回答的问题，**因老师和自我介绍而异**把。\n\n**面试的原则是实事求是，不会就是不会，还有就是更偏向随机应变，而不是死背稿子。**\n\n在面试的时候一般都会很紧张，所以背的稿子几乎没啥用。甚至我的自我介绍都是临场发挥的，和稿子不大一样。\n\n**建议**是自我介绍好好写，记住大概要说的。然后基于自己的自我介绍，自己想可能会问啥问题，然后自己回答。\n\n## 联系导师签字\n面试完基本上就去找意向导师了，也有人第一天来就直接找了意向导师。\n\n每个老师只能签四个人，所以说，如果去晚了，可能会没名额。\n\n这个也挺难说，毕竟签了字，你也不一定能进南大，签了字，老师也不一定选你。\n\n**这里的建议是：**\n　　夏令营之前就了解好各个实验室的情况，起码有个大概了解。可以找本校的在南大读研的学长，让他给你说说情况，推荐下啥的。也可以避免踩雷。有了意向导师，在复审通过后就给老师发邮件，记得附上自己简历。\n\n南大的实验室，除了LAMDA，其他的实力上来说应该差不多，只是有的比价偏理论，有的比较偏项目，有的比较综合，自己看方向和综合情况选把。\n\n## 第三天\n机试面试结束，先让我玩一个晚上，享受四星级酒店的待遇再说吧～\n\n--------\n","source":"_posts/记2019南大计算机本科生开放日.md","raw":"---\ntitle: 记2019南大计算机本科生开放日\ntags:\n  - Nju\n  - SummerCamp\n  - Daily\ncategories:\n  - Daily\ncomments: true\nmathjax: false\ndate: 2019-07-12 18:29:34\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n{% note info %}\n# 前言\n2019年7月12，恩，南大夏令营第一天，一天之内心情就像打翻的五味瓶。。。\n\n哎，写下来这些也是希望能给后面的学弟学妹点帮助，毕竟我也是看了很多以前别人写的夏令营的博客才完全了解夏令营。\n不说了罢，再说，要落泪了...\n{% endnote %}\n<!--more-->\n\n# 申请夏令营和选拔\n## 初审\n南大入营选拔很看重绩点和排名，以及，学校，这些都是敲门砖。\n\n当你绩点专业前5%，学校起码是211，你就有戏了，非211和985的，应该非常非常少，当然，如果你有很多厉害的奖，专利，论文啥的，就没问题\n除了上面的敲门砖，竞赛、论文、获奖、专利、软著这些之类的，如果有比较厉害的，也会很有希望。\n\n## 复审\n不要以为收到第一封通知邮件就是入营了，那只是初审，复审还会刷掉点人。\n复审需要寄送材料，按照邮件要求寄送即可，不要作假就行\n\n2019年大概400左右人入营，南京市内100+，非南京市280+，大概只给100不到的优营名额，竞争还是很激烈的\n\n# 夏令营\n## 准备\n别想了，在你报名之前你就应该准备。\n\n事实证明，如果你觉得自己有希望保研，最好大三下开学就准备夏令营，在大三下期末考之前，你需要认真复习准备我下面要说的。等期末结束再认真复习，就晚了。。\n我就是，期末之前复习不多，期末之后确认入营了才认真起来，但是时间完全不够用。\n\n**准备分为机试和面试**\n 1. 机试\n- 你需要学大量的算法，ACM中等难度就可以\n- 刷大量的题，100道肯定不够的，可以刷[LeetCode](https://leetcode.com/problemset/all/)上的中等难度题，也可以找上面的分类题目写。还可以刷[牛客网](https://www.nowcoder.com/ta/kaoyan)的考研复试题。事实证明，这两个网站都很有用\n- 刷完题要总结，可以用思维导图，我觉得挺好\n 2. 面试\n- 你需要复习数学相关，比如：概统、现代、离散\n- 专业相关，比如：操作系统、数据结构、计网、计组、数据库。如果时间充足，全都复习，时间不够，按我的写的顺序复习\n\n## 第一天机试\n第一天，算是最难受的了把。因为报道当天早上从学校出发的，所以要早起。但是，前一天晚上睡觉睡不着..不是我一个人，同行的四个人，都睡不着，一方面是无法避免的紧张，另一方面是，和自己生物钟不协调，睡太早\n\n所以尽量提前几天调好生物钟把，精神会好点\n\n上午11点左右到南大，路上本来想着再看看算法，但是因为晕车，困，没座位这些原因就没看。报道之后就直接去酒店登记入住了。酒店还是很棒的，毕竟四星级，条件很好。\n每天的午饭晚饭有餐券。不得不说！南大的伙食真的好，虽然，很贵....我看到一个女生，两个大荤加一个蔬菜，好像还有汤，26元..正常人均15把\n\n吃完饭就没多少时间了，因为着凉肚子难受，趴桌子趴了一会。复习也只能大概过一遍。所以尽量夏令营之前准备妥当。\n吃饭的时候听可靠消息说今年的题目比较难，当时心里就慌了，后面等机房开门的时候就一直看算法，心情沉重，\n\n### 机试\n要求下午1点半到，两点开始考试。\n一共两小时，三道题，每道题有10个测试用例，一个测试用例10分。满分也就是300分。\n\n以前好像看到说可以看到测试用例。但是！并没有，只能看到你第几个通过，第几个没通过，而且今年看不到总排名\n\n**第一题**\n\n大概意思是，给你一个不超过100位的数n，和一个不超过100的数字k，要求从数n中去掉k个数字，然后使得去掉k个数之后，n最小。\n\n**题解参考链接**：https://blog.csdn.net/C20190413/article/details/77368590   \n    \n   \n**第二题**\n\n大概意思是，有B个男孩，G个女孩，要求所有男孩女孩排成一队，连续的男孩个数不可以超过K个，问一共有多少种排法\n\n**思路参考：**\n\n分路递归，看当前为止是男孩还是女孩。\n\n所以第一路递归，当前是男孩，第二路递归，当前是女孩，然后继续递归遍历下一个位置。\n\n当然会有限制条件，不可以连续超过k个男孩，我在参数中记录当前位置，前面的男孩个数。\n\n如果女孩个数等于0，那后面全是男孩，要看剩下的男孩个数是否超过k，如果男孩个数为0，剩下全是女孩，返回1。\n\n如果前面男孩个数已经k个了，这个位置只能是女孩。\n\n大概这样。但是会超时，10个样例只通过了7个...后面也没想到怎么剪枝优化。\n\n**第三题**\n\n给出一个二叉树的前序遍历序列和后序遍历序列，序列是没有空节点#号的，只有字母，问通过这两个序列可以构造多少中不同的二叉树，因为树的样子不一样，遍历的序列是可能一样的。比如前序序列:abc，后序序列cba，就有4种不同的树\n\n**思路参考链接**：https://blog.csdn.net/C20190413/article/details/77368590\n       \n            \n## 第二天面试\n### 面试\n虽说，南大夏令营的结果是综合了机试和面试，综合排名。但是！**实际情况是**，机试稳了，面试就走过场了。面试相对来说没那么重要，但是为了不留遗憾，还是需要认真对待的。机试完一晚上加上第二天上午的时间，足够准备了。\n\n这次的面试分两批，上下午。我是下午那批，所以有一个上午可以睡个好觉，吃个美滋滋的自助早餐，还能准备一会。\n\n**每个人面试大概十分钟，只有一个英文面试题，一定要好好练练口语，以便临场发挥**\n\n我这次面试比较轻松，没有太过刁难。上来先**自我介绍**，没说限制时间，基本上自己说完就好。\n\n然后因为我说了国家级大创，所以，下一个问题**问了大创项目**，做了啥，怎么样，细节。还有会从你的回答中，**延伸出去**，问一些技术方面的问题。\n\n大创这里三个老师都问了我问题，由易到难，中间还问了我通信如何实现高并发，如何处理请求，以及通过什么方式实现的通信，比如wifi，蓝牙，我说了是websocket。还问了更深的窄带物联网的通信。这里花的时间是比较多的。\n\n随后一个老师**英文提问**自己哪门课学的比较好，为什么，紧张状态下真的话都说不清，很乱，这也是我面试唯一一个败笔....不过还好的是说完就冷静下来，继续回答问题。\n\n自我介绍说想在大数据这方面继续深造，老师就问了**为什么，如何看待大数据**，一些理解把，**延伸出去**的问了如何看待大数据中的隐私问题，答完又问了解过隐私方面的协议，比如说xxx吗，确实没听过，就直说这个不是很了解。\n\n整个面试还是比较轻松的，我的面试没那么难。\n\n不过交流下来，差距还是挺大的，似乎只有我比较幸运，问的比较正常。其他的有很多挺难回答的问题，**因老师和自我介绍而异**把。\n\n**面试的原则是实事求是，不会就是不会，还有就是更偏向随机应变，而不是死背稿子。**\n\n在面试的时候一般都会很紧张，所以背的稿子几乎没啥用。甚至我的自我介绍都是临场发挥的，和稿子不大一样。\n\n**建议**是自我介绍好好写，记住大概要说的。然后基于自己的自我介绍，自己想可能会问啥问题，然后自己回答。\n\n## 联系导师签字\n面试完基本上就去找意向导师了，也有人第一天来就直接找了意向导师。\n\n每个老师只能签四个人，所以说，如果去晚了，可能会没名额。\n\n这个也挺难说，毕竟签了字，你也不一定能进南大，签了字，老师也不一定选你。\n\n**这里的建议是：**\n　　夏令营之前就了解好各个实验室的情况，起码有个大概了解。可以找本校的在南大读研的学长，让他给你说说情况，推荐下啥的。也可以避免踩雷。有了意向导师，在复审通过后就给老师发邮件，记得附上自己简历。\n\n南大的实验室，除了LAMDA，其他的实力上来说应该差不多，只是有的比价偏理论，有的比较偏项目，有的比较综合，自己看方向和综合情况选把。\n\n## 第三天\n机试面试结束，先让我玩一个晚上，享受四星级酒店的待遇再说吧～\n\n--------\n","slug":"记2019南大计算机本科生开放日","published":1,"updated":"2019-07-20T12:10:19.222Z","_id":"cjycjtk3q0089ussbd87t8e2p","layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>2019年7月12，恩，南大夏令营第一天，一天之内心情就像打翻的五味瓶。。。</p>\n<p>哎，写下来这些也是希望能给后面的学弟学妹点帮助，毕竟我也是看了很多以前别人写的夏令营的博客才完全了解夏令营。<br>不说了罢，再说，要落泪了…</p></div>\n<a id=\"more\"></a>\n<h1 id=\"申请夏令营和选拔\"><a href=\"#申请夏令营和选拔\" class=\"headerlink\" title=\"申请夏令营和选拔\"></a>申请夏令营和选拔</h1><h2 id=\"初审\"><a href=\"#初审\" class=\"headerlink\" title=\"初审\"></a>初审</h2><p>南大入营选拔很看重绩点和排名，以及，学校，这些都是敲门砖。</p>\n<p>当你绩点专业前5%，学校起码是211，你就有戏了，非211和985的，应该非常非常少，当然，如果你有很多厉害的奖，专利，论文啥的，就没问题<br>除了上面的敲门砖，竞赛、论文、获奖、专利、软著这些之类的，如果有比较厉害的，也会很有希望。</p>\n<h2 id=\"复审\"><a href=\"#复审\" class=\"headerlink\" title=\"复审\"></a>复审</h2><p>不要以为收到第一封通知邮件就是入营了，那只是初审，复审还会刷掉点人。<br>复审需要寄送材料，按照邮件要求寄送即可，不要作假就行</p>\n<p>2019年大概400左右人入营，南京市内100+，非南京市280+，大概只给100不到的优营名额，竞争还是很激烈的</p>\n<h1 id=\"夏令营\"><a href=\"#夏令营\" class=\"headerlink\" title=\"夏令营\"></a>夏令营</h1><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>别想了，在你报名之前你就应该准备。</p>\n<p>事实证明，如果你觉得自己有希望保研，最好大三下开学就准备夏令营，在大三下期末考之前，你需要认真复习准备我下面要说的。等期末结束再认真复习，就晚了。。<br>我就是，期末之前复习不多，期末之后确认入营了才认真起来，但是时间完全不够用。</p>\n<p><strong>准备分为机试和面试</strong></p>\n<ol>\n<li>机试<ul>\n<li>你需要学大量的算法，ACM中等难度就可以</li>\n<li>刷大量的题，100道肯定不够的，可以刷<a href=\"https://leetcode.com/problemset/all/\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上的中等难度题，也可以找上面的分类题目写。还可以刷<a href=\"https://www.nowcoder.com/ta/kaoyan\" target=\"_blank\" rel=\"noopener\">牛客网</a>的考研复试题。事实证明，这两个网站都很有用</li>\n<li>刷完题要总结，可以用思维导图，我觉得挺好</li>\n</ul>\n</li>\n<li>面试<ul>\n<li>你需要复习数学相关，比如：概统、现代、离散</li>\n<li>专业相关，比如：操作系统、数据结构、计网、计组、数据库。如果时间充足，全都复习，时间不够，按我的写的顺序复习</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"第一天机试\"><a href=\"#第一天机试\" class=\"headerlink\" title=\"第一天机试\"></a>第一天机试</h2><p>第一天，算是最难受的了把。因为报道当天早上从学校出发的，所以要早起。但是，前一天晚上睡觉睡不着..不是我一个人，同行的四个人，都睡不着，一方面是无法避免的紧张，另一方面是，和自己生物钟不协调，睡太早</p>\n<p>所以尽量提前几天调好生物钟把，精神会好点</p>\n<p>上午11点左右到南大，路上本来想着再看看算法，但是因为晕车，困，没座位这些原因就没看。报道之后就直接去酒店登记入住了。酒店还是很棒的，毕竟四星级，条件很好。<br>每天的午饭晚饭有餐券。不得不说！南大的伙食真的好，虽然，很贵….我看到一个女生，两个大荤加一个蔬菜，好像还有汤，26元..正常人均15把</p>\n<p>吃完饭就没多少时间了，因为着凉肚子难受，趴桌子趴了一会。复习也只能大概过一遍。所以尽量夏令营之前准备妥当。<br>吃饭的时候听可靠消息说今年的题目比较难，当时心里就慌了，后面等机房开门的时候就一直看算法，心情沉重，</p>\n<h3 id=\"机试\"><a href=\"#机试\" class=\"headerlink\" title=\"机试\"></a>机试</h3><p>要求下午1点半到，两点开始考试。<br>一共两小时，三道题，每道题有10个测试用例，一个测试用例10分。满分也就是300分。</p>\n<p>以前好像看到说可以看到测试用例。但是！并没有，只能看到你第几个通过，第几个没通过，而且今年看不到总排名</p>\n<p><strong>第一题</strong></p>\n<p>大概意思是，给你一个不超过100位的数n，和一个不超过100的数字k，要求从数n中去掉k个数字，然后使得去掉k个数之后，n最小。</p>\n<p><strong>题解参考链接</strong>：<a href=\"https://blog.csdn.net/C20190413/article/details/77368590\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/C20190413/article/details/77368590</a>   </p>\n<p><strong>第二题</strong></p>\n<p>大概意思是，有B个男孩，G个女孩，要求所有男孩女孩排成一队，连续的男孩个数不可以超过K个，问一共有多少种排法</p>\n<p><strong>思路参考：</strong></p>\n<p>分路递归，看当前为止是男孩还是女孩。</p>\n<p>所以第一路递归，当前是男孩，第二路递归，当前是女孩，然后继续递归遍历下一个位置。</p>\n<p>当然会有限制条件，不可以连续超过k个男孩，我在参数中记录当前位置，前面的男孩个数。</p>\n<p>如果女孩个数等于0，那后面全是男孩，要看剩下的男孩个数是否超过k，如果男孩个数为0，剩下全是女孩，返回1。</p>\n<p>如果前面男孩个数已经k个了，这个位置只能是女孩。</p>\n<p>大概这样。但是会超时，10个样例只通过了7个…后面也没想到怎么剪枝优化。</p>\n<p><strong>第三题</strong></p>\n<p>给出一个二叉树的前序遍历序列和后序遍历序列，序列是没有空节点#号的，只有字母，问通过这两个序列可以构造多少中不同的二叉树，因为树的样子不一样，遍历的序列是可能一样的。比如前序序列:abc，后序序列cba，就有4种不同的树</p>\n<p><strong>思路参考链接</strong>：<a href=\"https://blog.csdn.net/C20190413/article/details/77368590\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/C20190413/article/details/77368590</a></p>\n<h2 id=\"第二天面试\"><a href=\"#第二天面试\" class=\"headerlink\" title=\"第二天面试\"></a>第二天面试</h2><h3 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h3><p>虽说，南大夏令营的结果是综合了机试和面试，综合排名。但是！<strong>实际情况是</strong>，机试稳了，面试就走过场了。面试相对来说没那么重要，但是为了不留遗憾，还是需要认真对待的。机试完一晚上加上第二天上午的时间，足够准备了。</p>\n<p>这次的面试分两批，上下午。我是下午那批，所以有一个上午可以睡个好觉，吃个美滋滋的自助早餐，还能准备一会。</p>\n<p><strong>每个人面试大概十分钟，只有一个英文面试题，一定要好好练练口语，以便临场发挥</strong></p>\n<p>我这次面试比较轻松，没有太过刁难。上来先<strong>自我介绍</strong>，没说限制时间，基本上自己说完就好。</p>\n<p>然后因为我说了国家级大创，所以，下一个问题<strong>问了大创项目</strong>，做了啥，怎么样，细节。还有会从你的回答中，<strong>延伸出去</strong>，问一些技术方面的问题。</p>\n<p>大创这里三个老师都问了我问题，由易到难，中间还问了我通信如何实现高并发，如何处理请求，以及通过什么方式实现的通信，比如wifi，蓝牙，我说了是websocket。还问了更深的窄带物联网的通信。这里花的时间是比较多的。</p>\n<p>随后一个老师<strong>英文提问</strong>自己哪门课学的比较好，为什么，紧张状态下真的话都说不清，很乱，这也是我面试唯一一个败笔….不过还好的是说完就冷静下来，继续回答问题。</p>\n<p>自我介绍说想在大数据这方面继续深造，老师就问了<strong>为什么，如何看待大数据</strong>，一些理解把，<strong>延伸出去</strong>的问了如何看待大数据中的隐私问题，答完又问了解过隐私方面的协议，比如说xxx吗，确实没听过，就直说这个不是很了解。</p>\n<p>整个面试还是比较轻松的，我的面试没那么难。</p>\n<p>不过交流下来，差距还是挺大的，似乎只有我比较幸运，问的比较正常。其他的有很多挺难回答的问题，<strong>因老师和自我介绍而异</strong>把。</p>\n<p><strong>面试的原则是实事求是，不会就是不会，还有就是更偏向随机应变，而不是死背稿子。</strong></p>\n<p>在面试的时候一般都会很紧张，所以背的稿子几乎没啥用。甚至我的自我介绍都是临场发挥的，和稿子不大一样。</p>\n<p><strong>建议</strong>是自我介绍好好写，记住大概要说的。然后基于自己的自我介绍，自己想可能会问啥问题，然后自己回答。</p>\n<h2 id=\"联系导师签字\"><a href=\"#联系导师签字\" class=\"headerlink\" title=\"联系导师签字\"></a>联系导师签字</h2><p>面试完基本上就去找意向导师了，也有人第一天来就直接找了意向导师。</p>\n<p>每个老师只能签四个人，所以说，如果去晚了，可能会没名额。</p>\n<p>这个也挺难说，毕竟签了字，你也不一定能进南大，签了字，老师也不一定选你。</p>\n<p><strong>这里的建议是：</strong><br>　　夏令营之前就了解好各个实验室的情况，起码有个大概了解。可以找本校的在南大读研的学长，让他给你说说情况，推荐下啥的。也可以避免踩雷。有了意向导师，在复审通过后就给老师发邮件，记得附上自己简历。</p>\n<p>南大的实验室，除了LAMDA，其他的实力上来说应该差不多，只是有的比价偏理论，有的比较偏项目，有的比较综合，自己看方向和综合情况选把。</p>\n<h2 id=\"第三天\"><a href=\"#第三天\" class=\"headerlink\" title=\"第三天\"></a>第三天</h2><p>机试面试结束，先让我玩一个晚上，享受四星级酒店的待遇再说吧～</p>\n<hr>\n","site":{"data":{"next":{"title":"Jounery Of A Newbie","subtitle":null,"description":"Catch Your Dream!","keywords":null,"author":"Haniel","language":"en","timezone":null,"url":"https://catchdream.me","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"paginatio_dir":"page","theme":"next-geek","deploy":[{"type":"git","repo":{"github":"git@github.com:HanielF/HanielF.github.io.git","coding":"git@git.coding.net:Haniel/Haniel.git"},"branch":"master"},{"type":"baidu_url_submitter"}],"sitemap":{"path":"sitemap.xml"},"baidusitemap":{"path":"baidusitemap.xml"},"search":{"path":"search.xml","field":"post","format":"html","limit":10000},"favicon":"/favicon.ico","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Mala","social":{"Github":"https://github.com/HanielF","Twitter":"https://twitter.com/Haniel_xx"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"avatar":"/uploads/avatar.jpg","toc":{"enable":true,"number":true,"wrap":true},"sidebar":{"position":"right","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":true,"min2read":true,"totalcount":true,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":true,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"suprise":{"ball":true},"valine":{"enable":true,"appid":"h26w2GPeIju4o37JSWro2OKv-gzGzoHsz","appkey":"dLWVYMk366NEnW44SaBr3FdL","notify":false,"verify":false,"placeholder":"Comment in your way!","avatar":"wavatar","guest_info":"nick","pageSize":10},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":true,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<div class=\"note info\"><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>2019年7月12，恩，南大夏令营第一天，一天之内心情就像打翻的五味瓶。。。</p>\n<p>哎，写下来这些也是希望能给后面的学弟学妹点帮助，毕竟我也是看了很多以前别人写的夏令营的博客才完全了解夏令营。<br>不说了罢，再说，要落泪了…</p></div>","more":"<h1 id=\"申请夏令营和选拔\"><a href=\"#申请夏令营和选拔\" class=\"headerlink\" title=\"申请夏令营和选拔\"></a>申请夏令营和选拔</h1><h2 id=\"初审\"><a href=\"#初审\" class=\"headerlink\" title=\"初审\"></a>初审</h2><p>南大入营选拔很看重绩点和排名，以及，学校，这些都是敲门砖。</p>\n<p>当你绩点专业前5%，学校起码是211，你就有戏了，非211和985的，应该非常非常少，当然，如果你有很多厉害的奖，专利，论文啥的，就没问题<br>除了上面的敲门砖，竞赛、论文、获奖、专利、软著这些之类的，如果有比较厉害的，也会很有希望。</p>\n<h2 id=\"复审\"><a href=\"#复审\" class=\"headerlink\" title=\"复审\"></a>复审</h2><p>不要以为收到第一封通知邮件就是入营了，那只是初审，复审还会刷掉点人。<br>复审需要寄送材料，按照邮件要求寄送即可，不要作假就行</p>\n<p>2019年大概400左右人入营，南京市内100+，非南京市280+，大概只给100不到的优营名额，竞争还是很激烈的</p>\n<h1 id=\"夏令营\"><a href=\"#夏令营\" class=\"headerlink\" title=\"夏令营\"></a>夏令营</h1><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>别想了，在你报名之前你就应该准备。</p>\n<p>事实证明，如果你觉得自己有希望保研，最好大三下开学就准备夏令营，在大三下期末考之前，你需要认真复习准备我下面要说的。等期末结束再认真复习，就晚了。。<br>我就是，期末之前复习不多，期末之后确认入营了才认真起来，但是时间完全不够用。</p>\n<p><strong>准备分为机试和面试</strong></p>\n<ol>\n<li>机试<ul>\n<li>你需要学大量的算法，ACM中等难度就可以</li>\n<li>刷大量的题，100道肯定不够的，可以刷<a href=\"https://leetcode.com/problemset/all/\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上的中等难度题，也可以找上面的分类题目写。还可以刷<a href=\"https://www.nowcoder.com/ta/kaoyan\" target=\"_blank\" rel=\"noopener\">牛客网</a>的考研复试题。事实证明，这两个网站都很有用</li>\n<li>刷完题要总结，可以用思维导图，我觉得挺好</li>\n</ul>\n</li>\n<li>面试<ul>\n<li>你需要复习数学相关，比如：概统、现代、离散</li>\n<li>专业相关，比如：操作系统、数据结构、计网、计组、数据库。如果时间充足，全都复习，时间不够，按我的写的顺序复习</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"第一天机试\"><a href=\"#第一天机试\" class=\"headerlink\" title=\"第一天机试\"></a>第一天机试</h2><p>第一天，算是最难受的了把。因为报道当天早上从学校出发的，所以要早起。但是，前一天晚上睡觉睡不着..不是我一个人，同行的四个人，都睡不着，一方面是无法避免的紧张，另一方面是，和自己生物钟不协调，睡太早</p>\n<p>所以尽量提前几天调好生物钟把，精神会好点</p>\n<p>上午11点左右到南大，路上本来想着再看看算法，但是因为晕车，困，没座位这些原因就没看。报道之后就直接去酒店登记入住了。酒店还是很棒的，毕竟四星级，条件很好。<br>每天的午饭晚饭有餐券。不得不说！南大的伙食真的好，虽然，很贵….我看到一个女生，两个大荤加一个蔬菜，好像还有汤，26元..正常人均15把</p>\n<p>吃完饭就没多少时间了，因为着凉肚子难受，趴桌子趴了一会。复习也只能大概过一遍。所以尽量夏令营之前准备妥当。<br>吃饭的时候听可靠消息说今年的题目比较难，当时心里就慌了，后面等机房开门的时候就一直看算法，心情沉重，</p>\n<h3 id=\"机试\"><a href=\"#机试\" class=\"headerlink\" title=\"机试\"></a>机试</h3><p>要求下午1点半到，两点开始考试。<br>一共两小时，三道题，每道题有10个测试用例，一个测试用例10分。满分也就是300分。</p>\n<p>以前好像看到说可以看到测试用例。但是！并没有，只能看到你第几个通过，第几个没通过，而且今年看不到总排名</p>\n<p><strong>第一题</strong></p>\n<p>大概意思是，给你一个不超过100位的数n，和一个不超过100的数字k，要求从数n中去掉k个数字，然后使得去掉k个数之后，n最小。</p>\n<p><strong>题解参考链接</strong>：<a href=\"https://blog.csdn.net/C20190413/article/details/77368590\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/C20190413/article/details/77368590</a>   </p>\n<p><strong>第二题</strong></p>\n<p>大概意思是，有B个男孩，G个女孩，要求所有男孩女孩排成一队，连续的男孩个数不可以超过K个，问一共有多少种排法</p>\n<p><strong>思路参考：</strong></p>\n<p>分路递归，看当前为止是男孩还是女孩。</p>\n<p>所以第一路递归，当前是男孩，第二路递归，当前是女孩，然后继续递归遍历下一个位置。</p>\n<p>当然会有限制条件，不可以连续超过k个男孩，我在参数中记录当前位置，前面的男孩个数。</p>\n<p>如果女孩个数等于0，那后面全是男孩，要看剩下的男孩个数是否超过k，如果男孩个数为0，剩下全是女孩，返回1。</p>\n<p>如果前面男孩个数已经k个了，这个位置只能是女孩。</p>\n<p>大概这样。但是会超时，10个样例只通过了7个…后面也没想到怎么剪枝优化。</p>\n<p><strong>第三题</strong></p>\n<p>给出一个二叉树的前序遍历序列和后序遍历序列，序列是没有空节点#号的，只有字母，问通过这两个序列可以构造多少中不同的二叉树，因为树的样子不一样，遍历的序列是可能一样的。比如前序序列:abc，后序序列cba，就有4种不同的树</p>\n<p><strong>思路参考链接</strong>：<a href=\"https://blog.csdn.net/C20190413/article/details/77368590\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/C20190413/article/details/77368590</a></p>\n<h2 id=\"第二天面试\"><a href=\"#第二天面试\" class=\"headerlink\" title=\"第二天面试\"></a>第二天面试</h2><h3 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h3><p>虽说，南大夏令营的结果是综合了机试和面试，综合排名。但是！<strong>实际情况是</strong>，机试稳了，面试就走过场了。面试相对来说没那么重要，但是为了不留遗憾，还是需要认真对待的。机试完一晚上加上第二天上午的时间，足够准备了。</p>\n<p>这次的面试分两批，上下午。我是下午那批，所以有一个上午可以睡个好觉，吃个美滋滋的自助早餐，还能准备一会。</p>\n<p><strong>每个人面试大概十分钟，只有一个英文面试题，一定要好好练练口语，以便临场发挥</strong></p>\n<p>我这次面试比较轻松，没有太过刁难。上来先<strong>自我介绍</strong>，没说限制时间，基本上自己说完就好。</p>\n<p>然后因为我说了国家级大创，所以，下一个问题<strong>问了大创项目</strong>，做了啥，怎么样，细节。还有会从你的回答中，<strong>延伸出去</strong>，问一些技术方面的问题。</p>\n<p>大创这里三个老师都问了我问题，由易到难，中间还问了我通信如何实现高并发，如何处理请求，以及通过什么方式实现的通信，比如wifi，蓝牙，我说了是websocket。还问了更深的窄带物联网的通信。这里花的时间是比较多的。</p>\n<p>随后一个老师<strong>英文提问</strong>自己哪门课学的比较好，为什么，紧张状态下真的话都说不清，很乱，这也是我面试唯一一个败笔….不过还好的是说完就冷静下来，继续回答问题。</p>\n<p>自我介绍说想在大数据这方面继续深造，老师就问了<strong>为什么，如何看待大数据</strong>，一些理解把，<strong>延伸出去</strong>的问了如何看待大数据中的隐私问题，答完又问了解过隐私方面的协议，比如说xxx吗，确实没听过，就直说这个不是很了解。</p>\n<p>整个面试还是比较轻松的，我的面试没那么难。</p>\n<p>不过交流下来，差距还是挺大的，似乎只有我比较幸运，问的比较正常。其他的有很多挺难回答的问题，<strong>因老师和自我介绍而异</strong>把。</p>\n<p><strong>面试的原则是实事求是，不会就是不会，还有就是更偏向随机应变，而不是死背稿子。</strong></p>\n<p>在面试的时候一般都会很紧张，所以背的稿子几乎没啥用。甚至我的自我介绍都是临场发挥的，和稿子不大一样。</p>\n<p><strong>建议</strong>是自我介绍好好写，记住大概要说的。然后基于自己的自我介绍，自己想可能会问啥问题，然后自己回答。</p>\n<h2 id=\"联系导师签字\"><a href=\"#联系导师签字\" class=\"headerlink\" title=\"联系导师签字\"></a>联系导师签字</h2><p>面试完基本上就去找意向导师了，也有人第一天来就直接找了意向导师。</p>\n<p>每个老师只能签四个人，所以说，如果去晚了，可能会没名额。</p>\n<p>这个也挺难说，毕竟签了字，你也不一定能进南大，签了字，老师也不一定选你。</p>\n<p><strong>这里的建议是：</strong><br>　　夏令营之前就了解好各个实验室的情况，起码有个大概了解。可以找本校的在南大读研的学长，让他给你说说情况，推荐下啥的。也可以避免踩雷。有了意向导师，在复审通过后就给老师发邮件，记得附上自己简历。</p>\n<p>南大的实验室，除了LAMDA，其他的实力上来说应该差不多，只是有的比价偏理论，有的比较偏项目，有的比较综合，自己看方向和综合情况选把。</p>\n<h2 id=\"第三天\"><a href=\"#第三天\" class=\"headerlink\" title=\"第三天\"></a>第三天</h2><p>机试面试结束，先让我玩一个晚上，享受四星级酒店的待遇再说吧～</p>\n<hr>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjycjtjll0000ussbh3i01ue4","category_id":"cjwuuw3tg0004jub3zfjxylee","_id":"cjycjtjms0003ussbt6q9mlj3"},{"post_id":"cjycjtjn20005ussbdzcrri17","category_id":"cjwuuw3v7003kjub3xk1b4ha3","_id":"cjycjtjn60007ussb1evnvmzp"},{"post_id":"cjycjtjnz000jussb45a7uspz","category_id":"cjwuuw3tg0004jub3zfjxylee","_id":"cjycjtjof000pussb5my6qxk3"},{"post_id":"cjycjtjo1000kussbik1yctju","category_id":"cjwuuw3tg0004jub3zfjxylee","_id":"cjycjtjom000sussbpf2yzcmz"},{"post_id":"cjycjtjo4000mussbuoxx63ve","category_id":"cjwuuw3tt000fjub3ss4d882a","_id":"cjycjtjoy000vussbc0wnlf6f"},{"post_id":"cjycjtjoc000oussb7ntcopkn","category_id":"cjwuuw3tt000fjub3ss4d882a","_id":"cjycjtjp5000yussbveli5gov"},{"post_id":"cjycjtjoj000russbcakf6z5f","category_id":"cjwuuw3tt000fjub3ss4d882a","_id":"cjycjtjpd0011ussb7mciuwxb"},{"post_id":"cjycjtjoo000uussbviws5u2r","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjpf0013ussbl33px5b9"},{"post_id":"cjycjtjoz000xussbomxubunh","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjpg0015ussbmqqzrl8e"},{"post_id":"cjycjtjpa0010ussb7qd2z0p8","category_id":"cjwuuw3v7003kjub3xk1b4ha3","_id":"cjycjtjph0017ussb54tnom4i"},{"post_id":"cjycjtjs7001oussb8hihw1ws","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjsn001uussbex0qfff9"},{"post_id":"cjycjtjs8001pussb17x1i83c","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjsu001xussbbafqrayu"},{"post_id":"cjycjtjse001russbz9n20krz","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjsz0020ussb5vcwfhrx"},{"post_id":"cjycjtjsj001tussb449a6u1d","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjt30023ussb4cr1mk10"},{"post_id":"cjycjtjsr001wussbecbk4bv3","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjtc0026ussbqxo3ynno"},{"post_id":"cjycjtjsx001zussbxw84hw7c","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjth0029ussbp9dmrrg0"},{"post_id":"cjycjtjt20022ussb776b4hk4","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjtl002cussb35jw79e1"},{"post_id":"cjycjtjt40025ussbpmd718ld","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjtq002fussb84cw0rmy"},{"post_id":"cjycjtjtf0028ussba8mxewhe","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjtv002iussbhf1cawba"},{"post_id":"cjycjtjtk002bussb436tnrb3","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtju2002lussbpubmxoht"},{"post_id":"cjycjtjtm002eussbdaa0hq22","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtju7002oussb3ar2coxa"},{"post_id":"cjycjtjts002hussblsu7ajbk","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjuc002russb8u8p9fd3"},{"post_id":"cjycjtjtz002kussbb1vwnsmm","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjuh002uussbck6hz2y7"},{"post_id":"cjycjtju3002nussblg5wz0i8","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjul002xussbabnjh9y6"},{"post_id":"cjycjtju9002qussbyw4dmp4t","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjuy0030ussbplc09h04"},{"post_id":"cjycjtjuf002tussbl5gpekkh","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjv60033ussbbwjmupyw"},{"post_id":"cjycjtjuj002wussb8itzi9mx","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjvc0036ussb64je7muo"},{"post_id":"cjycjtjuv002zussbs4jtmxc3","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjvf0039ussb3ubzrd3n"},{"post_id":"cjycjtjv10032ussbh4uz7qox","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjvl003cussbiakk7c9w"},{"post_id":"cjycjtjva0035ussb0ccyibf7","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjvs003fussbufu9no26"},{"post_id":"cjycjtjve0038ussbaicqj2si","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjvv003iussbhrfnwx3l"},{"post_id":"cjycjtjvg003bussbmvz22fci","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjw6003lussb5bi3686n"},{"post_id":"cjycjtjvn003eussbvz70c1le","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjwc003oussbizz7k20s"},{"post_id":"cjycjtjvu003hussbmvip7s71","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjwg003russb0gn6hsa4"},{"post_id":"cjycjtjvx003kussb240jaicd","category_id":"cjwuuw3u2000vjub3c2hdu6i5","_id":"cjycjtjwl003vussbq9r200q6"},{"post_id":"cjycjtjw8003nussbevh4a25h","category_id":"cjwuuw3v7003kjub3xk1b4ha3","_id":"cjycjtjws003yussbfp3n7n33"},{"post_id":"cjycjtjwe003qussbf1x9c395","category_id":"cjwuuw3uv002sjub3jnnt2qst","_id":"cjycjtjwx0042ussblax0qk4l"},{"post_id":"cjycjtjwi003uussblrqq7p53","category_id":"cjwuuw3ux002zjub3e42jh9tm","_id":"cjycjtjx40045ussbgns0ig9w"},{"post_id":"cjycjtjwp003xussb72fo2lsg","category_id":"cjwuuw3tg0004jub3zfjxylee","_id":"cjycjtjx70047ussbgoy7swk5"},{"post_id":"cjycjtjwt0040ussbpng4fjqh","category_id":"cjwuuw3ux002zjub3e42jh9tm","_id":"cjycjtjx9004aussbhw1hftqz"},{"post_id":"cjycjtjx10044ussbrx38a1h4","category_id":"cjwuuw3uv002sjub3jnnt2qst","_id":"cjycjtjx9004cussb1yonngcs"},{"post_id":"cjycjtjy80071ussbh04fivcd","category_id":"cjwuuw3uv002sjub3jnnt2qst","_id":"cjycjtjyg0075ussbed4tfuia"},{"post_id":"cjycjtjya0072ussbnf50d87p","category_id":"cjwuuw3tg0004jub3zfjxylee","_id":"cjycjtjyi0077ussbqzjgxg6l"},{"post_id":"cjycjtk1c007dussb8ex1jy2s","category_id":"cjwuuw3uv002sjub3jnnt2qst","_id":"cjycjtk26007jussbpeyv3fu1"},{"post_id":"cjycjtk1c007dussb8ex1jy2s","category_id":"cjwuuw3v3003cjub3951j54gh","_id":"cjycjtk2d007mussbdkh74msx"},{"post_id":"cjycjtk1f007eussbn4ne34an","category_id":"cjwuuw3uv002sjub3jnnt2qst","_id":"cjycjtk2h007oussbdil7zmh4"},{"post_id":"cjycjtk1f007eussbn4ne34an","category_id":"cjwuuw3v3003cjub3951j54gh","_id":"cjycjtk2u007qussbyfr4cafw"},{"post_id":"cjycjtk1n007gussbytb9phn9","category_id":"cjwuuw3uv002sjub3jnnt2qst","_id":"cjycjtk2v007sussb4lazmf7f"},{"post_id":"cjycjtk1n007gussbytb9phn9","category_id":"cjwuuw3v3003cjub3951j54gh","_id":"cjycjtk2w007uussb774yh8s3"},{"post_id":"cjycjtk1z007iussbdzzpyku8","category_id":"cjwuuw3uv002sjub3jnnt2qst","_id":"cjycjtk2w007wussb5uf5fth1"},{"post_id":"cjycjtk29007lussbzfml7y3b","category_id":"cjwuuw3uv002sjub3jnnt2qst","_id":"cjycjtk2x007yussbmkcs8rps"},{"post_id":"cjycjtk390083ussbp3yhnt93","category_id":"cjwuuw3tg0004jub3zfjxylee","_id":"cjycjtk3g0085ussb3kgg1kgw"},{"post_id":"cjycjtk3q0089ussbd87t8e2p","category_id":"cjwuuw3v7003kjub3xk1b4ha3","_id":"cjycjtk3w008bussbu80t99x4"}],"PostTag":[{"post_id":"cjycjtjll0000ussbh3i01ue4","tag_id":"cjwuuw42i00a7jub3nyr1agqy","_id":"cjycjtjmq0001ussb02d3gate"},{"post_id":"cjycjtjll0000ussbh3i01ue4","tag_id":"cjwuuw3tx000mjub3lym7trr1","_id":"cjycjtjmr0002ussbiofs7t8y"},{"post_id":"cjycjtjll0000ussbh3i01ue4","tag_id":"cjwuuw3vj005bjub34huzgkh5","_id":"cjycjtjms0004ussbxr3gflam"},{"post_id":"cjycjtjn20005ussbdzcrri17","tag_id":"cjycjtjn50006ussbxjimh7i9","_id":"cjycjtjnf000dussbhai7n1vm"},{"post_id":"cjycjtjn20005ussbdzcrri17","tag_id":"cjycjtjn70008ussbfhe7os5h","_id":"cjycjtjnf000eussba7vh4q8a"},{"post_id":"cjycjtjn20005ussbdzcrri17","tag_id":"cjycjtjn80009ussbdqvoo2yz","_id":"cjycjtjng000fussbj96u02wl"},{"post_id":"cjycjtjn20005ussbdzcrri17","tag_id":"cjycjtjn9000aussbh44vawwe","_id":"cjycjtjng000gussbtil55tua"},{"post_id":"cjycjtjn20005ussbdzcrri17","tag_id":"cjycjtjna000bussbkaab4kdi","_id":"cjycjtjng000hussbrh7yhhp4"},{"post_id":"cjycjtjn20005ussbdzcrri17","tag_id":"cjycjtjnc000cussbp8h710fr","_id":"cjycjtjng000iussb8dx7ilh1"},{"post_id":"cjycjtjnz000jussb45a7uspz","tag_id":"cjwuuw3th0005jub3kt6n18fq","_id":"cjycjtjo4000lussb5s7k6fgq"},{"post_id":"cjycjtjnz000jussb45a7uspz","tag_id":"cjwuuw3tn000cjub3ptcv488z","_id":"cjycjtjoc000nussbsknlkibe"},{"post_id":"cjycjtjnz000jussb45a7uspz","tag_id":"cjwuuw3tu000hjub3v8af3usp","_id":"cjycjtjoj000qussbyz7hb2dl"},{"post_id":"cjycjtjnz000jussb45a7uspz","tag_id":"cjwuuw3tx000mjub3lym7trr1","_id":"cjycjtjoo000tussbi6eazz1y"},{"post_id":"cjycjtjo1000kussbik1yctju","tag_id":"cjwuuw3u0000rjub31e9r774w","_id":"cjycjtjoz000wussbw1krep87"},{"post_id":"cjycjtjo1000kussbik1yctju","tag_id":"cjwuuw3u3000zjub38g5bnfa8","_id":"cjycjtjp9000zussbw8b86foy"},{"post_id":"cjycjtjo1000kussbik1yctju","tag_id":"cjwuuw3u60016jub30kdvr0cx","_id":"cjycjtjpe0012ussbdcbfcs2z"},{"post_id":"cjycjtjo4000mussbuoxx63ve","tag_id":"cjwuuw3uc001kjub3kjmyi8vs","_id":"cjycjtjpg0014ussbglgimdmx"},{"post_id":"cjycjtjo4000mussbuoxx63ve","tag_id":"cjwuuw3tx000mjub3lym7trr1","_id":"cjycjtjph0016ussbl03oy4cl"},{"post_id":"cjycjtjoc000oussb7ntcopkn","tag_id":"cjwuuw3u9001cjub312nhd1uu","_id":"cjycjtjpi0018ussblcmr1ros"},{"post_id":"cjycjtjoc000oussb7ntcopkn","tag_id":"cjwuuw3uc001kjub3kjmyi8vs","_id":"cjycjtjpj0019ussb470s1u7m"},{"post_id":"cjycjtjoj000russbcakf6z5f","tag_id":"cjwuuw3u9001cjub312nhd1uu","_id":"cjycjtjpk001aussbv7njm3a2"},{"post_id":"cjycjtjoj000russbcakf6z5f","tag_id":"cjwuuw3uc001kjub3kjmyi8vs","_id":"cjycjtjpl001bussb6wtlzv6s"},{"post_id":"cjycjtjoo000uussbviws5u2r","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjpm001cussb8k2h8rf5"},{"post_id":"cjycjtjoo000uussbviws5u2r","tag_id":"cjwuuw3v6003jjub3oooa9qvz","_id":"cjycjtjpm001dussbfl2lmfp0"},{"post_id":"cjycjtjoo000uussbviws5u2r","tag_id":"cjwuuw3uz0033jub3ojbbne3l","_id":"cjycjtjpn001eussbkdxt6hx3"},{"post_id":"cjycjtjoo000uussbviws5u2r","tag_id":"cjwuv7uka0005bmb3znfaispy","_id":"cjycjtjpn001fussby4mrwv56"},{"post_id":"cjycjtjoz000xussbomxubunh","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjpn001gussb4v8zlwbt"},{"post_id":"cjycjtjoz000xussbomxubunh","tag_id":"cjwuuw3uu002rjub31c7x5hv2","_id":"cjycjtjpo001hussb5q1u63rd"},{"post_id":"cjycjtjoz000xussbomxubunh","tag_id":"cjwuuw3ux002xjub314tn7vkq","_id":"cjycjtjpw001iussbgrt09a5v"},{"post_id":"cjycjtjoz000xussbomxubunh","tag_id":"cjwuuw3uz0033jub3ojbbne3l","_id":"cjycjtjpw001jussbff89av3w"},{"post_id":"cjycjtjoz000xussbomxubunh","tag_id":"cjwuv7uji0000bmb3ve1nz3s4","_id":"cjycjtjpx001kussbescxeqwk"},{"post_id":"cjycjtjpa0010ussb7qd2z0p8","tag_id":"cjwuuw3tu000hjub3v8af3usp","_id":"cjycjtjpx001lussbzh8y6ra5"},{"post_id":"cjycjtjpa0010ussb7qd2z0p8","tag_id":"cjwuuw3uc001kjub3kjmyi8vs","_id":"cjycjtjpy001mussbl1dck5lf"},{"post_id":"cjycjtjs7001oussb8hihw1ws","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjsd001qussbpxf50z8t"},{"post_id":"cjycjtjs7001oussb8hihw1ws","tag_id":"cjwuuw3vd004gjub3sab8i682","_id":"cjycjtjsj001sussb23jj8llu"},{"post_id":"cjycjtjs7001oussb8hihw1ws","tag_id":"cjwuuw3uz0033jub3ojbbne3l","_id":"cjycjtjsq001vussbsg3gum8b"},{"post_id":"cjycjtjs7001oussb8hihw1ws","tag_id":"cjwuv7uji0000bmb3ve1nz3s4","_id":"cjycjtjsw001yussb1y4dh1tp"},{"post_id":"cjycjtjs8001pussb17x1i83c","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjt10021ussbe5fab3ha"},{"post_id":"cjycjtjs8001pussb17x1i83c","tag_id":"cjwuuw3uz0033jub3ojbbne3l","_id":"cjycjtjt40024ussb6njefhq6"},{"post_id":"cjycjtjs8001pussb17x1i83c","tag_id":"cjwuuw3vb0045jub3rlkbzqdq","_id":"cjycjtjte0027ussbvhwwu03m"},{"post_id":"cjycjtjs8001pussb17x1i83c","tag_id":"cjwuuw3vc0048jub3dm2pvvu2","_id":"cjycjtjtj002aussbv5imsnvs"},{"post_id":"cjycjtjs8001pussb17x1i83c","tag_id":"cjwuuw3w40074jub3bqd2l2zs","_id":"cjycjtjtm002dussbf9kck425"},{"post_id":"cjycjtjse001russbz9n20krz","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjtr002gussb1hp8k1wp"},{"post_id":"cjycjtjse001russbz9n20krz","tag_id":"cjwuv7uji0000bmb3ve1nz3s4","_id":"cjycjtjty002jussb5n4xx3d8"},{"post_id":"cjycjtjse001russbz9n20krz","tag_id":"cjwuuw3uz0033jub3ojbbne3l","_id":"cjycjtju3002mussbbfznnt2p"},{"post_id":"cjycjtjse001russbz9n20krz","tag_id":"cjwuuw3vd004gjub3sab8i682","_id":"cjycjtju8002pussb2sjegnnk"},{"post_id":"cjycjtjse001russbz9n20krz","tag_id":"cjwuuw42n00amjub3ljj04zp2","_id":"cjycjtjue002sussbu1mof51w"},{"post_id":"cjycjtjse001russbz9n20krz","tag_id":"cjwuuw3vj005bjub34huzgkh5","_id":"cjycjtjui002vussbefcw03q7"},{"post_id":"cjycjtjsj001tussb449a6u1d","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjuu002yussbu8svlsv1"},{"post_id":"cjycjtjsj001tussb449a6u1d","tag_id":"cjwuv7uji0000bmb3ve1nz3s4","_id":"cjycjtjv10031ussb8wojazda"},{"post_id":"cjycjtjsj001tussb449a6u1d","tag_id":"cjwuuw3uz0033jub3ojbbne3l","_id":"cjycjtjv90034ussbrh0vf8ou"},{"post_id":"cjycjtjsj001tussb449a6u1d","tag_id":"cjwuuw3vd004gjub3sab8i682","_id":"cjycjtjvd0037ussbnelpy8yz"},{"post_id":"cjycjtjsj001tussb449a6u1d","tag_id":"cjwuuw3vg004yjub3e77epfsm","_id":"cjycjtjvg003aussbbjn6cg0y"},{"post_id":"cjycjtjsr001wussbecbk4bv3","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjvn003dussbstofj6jf"},{"post_id":"cjycjtjsr001wussbecbk4bv3","tag_id":"cjwuv7uka0005bmb3znfaispy","_id":"cjycjtjvu003gussb8xw1nnsx"},{"post_id":"cjycjtjsr001wussbecbk4bv3","tag_id":"cjwuuw3ve004njub3y21d0363","_id":"cjycjtjvx003jussbbjrc1jfu"},{"post_id":"cjycjtjsr001wussbecbk4bv3","tag_id":"cjwuuw3ve004pjub3qhi9b4fb","_id":"cjycjtjw7003mussbmyvb6ctg"},{"post_id":"cjycjtjsr001wussbecbk4bv3","tag_id":"cjwuuw3vd004gjub3sab8i682","_id":"cjycjtjwd003pussb151bniud"},{"post_id":"cjycjtjsx001zussbxw84hw7c","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjwi003tussbdx4rcgii"},{"post_id":"cjycjtjsx001zussbxw84hw7c","tag_id":"cjwuv7uji0000bmb3ve1nz3s4","_id":"cjycjtjwo003wussbch4qf09u"},{"post_id":"cjycjtjt20022ussb776b4hk4","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjwt003zussb2qcdv2b3"},{"post_id":"cjycjtjt20022ussb776b4hk4","tag_id":"cjwuuw3vh0055jub3eftgz7zw","_id":"cjycjtjx00043ussbvb19v8wp"},{"post_id":"cjycjtjt20022ussb776b4hk4","tag_id":"cjwuuw3vd004gjub3sab8i682","_id":"cjycjtjx60046ussbj5rzkr56"},{"post_id":"cjycjtjt20022ussb776b4hk4","tag_id":"cjwuv7uka0005bmb3znfaispy","_id":"cjycjtjx90049ussb5momzfn6"},{"post_id":"cjycjtjt40025ussbpmd718ld","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjx9004bussbu2vwy0f8"},{"post_id":"cjycjtjt40025ussbpmd718ld","tag_id":"cjwuuw3vj005bjub34huzgkh5","_id":"cjycjtjxa004dussbclrz9av9"},{"post_id":"cjycjtjt40025ussbpmd718ld","tag_id":"cjwuuw3vd004gjub3sab8i682","_id":"cjycjtjxa004eussbr1j7tzwg"},{"post_id":"cjycjtjt40025ussbpmd718ld","tag_id":"cjwuuw3vk005ejub3322a2x8h","_id":"cjycjtjxa004fussbneumvvty"},{"post_id":"cjycjtjt40025ussbpmd718ld","tag_id":"cjwuuw3w40074jub3bqd2l2zs","_id":"cjycjtjxa004gussbl89ztz54"},{"post_id":"cjycjtjtf0028ussba8mxewhe","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxa004hussbpkv7dbtu"},{"post_id":"cjycjtjtf0028ussba8mxewhe","tag_id":"cjwuuw3uz0033jub3ojbbne3l","_id":"cjycjtjxa004iussb9qu3gkt6"},{"post_id":"cjycjtjtf0028ussba8mxewhe","tag_id":"cjwuv7uji0000bmb3ve1nz3s4","_id":"cjycjtjxa004jussbs7kh3hv0"},{"post_id":"cjycjtjtf0028ussba8mxewhe","tag_id":"cjwuuw3vx006ljub32b73cig9","_id":"cjycjtjxa004kussbcegsq1hm"},{"post_id":"cjycjtjtk002bussb436tnrb3","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxa004lussb2s2puazn"},{"post_id":"cjycjtjtk002bussb436tnrb3","tag_id":"cjwuuw3vp005qjub3x4dl172v","_id":"cjycjtjxa004mussb7sczlyr8"},{"post_id":"cjycjtjtk002bussb436tnrb3","tag_id":"cjwuuw3vo005mjub36n46frxo","_id":"cjycjtjxa004nussbuusjn7uj"},{"post_id":"cjycjtjtk002bussb436tnrb3","tag_id":"cjwuuw3vd004gjub3sab8i682","_id":"cjycjtjxb004oussbcxdqt0vo"},{"post_id":"cjycjtjtk002bussb436tnrb3","tag_id":"cjwuv7uji0000bmb3ve1nz3s4","_id":"cjycjtjxb004pussbkubezw2k"},{"post_id":"cjycjtjtm002eussbdaa0hq22","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxc004qussbop86n4gr"},{"post_id":"cjycjtjtm002eussbdaa0hq22","tag_id":"cjwuuw3uz0033jub3ojbbne3l","_id":"cjycjtjxc004russbr9nysco5"},{"post_id":"cjycjtjtm002eussbdaa0hq22","tag_id":"cjwuuw3vd004gjub3sab8i682","_id":"cjycjtjxc004sussbkmtlq48t"},{"post_id":"cjycjtjtm002eussbdaa0hq22","tag_id":"cjwuuw3vo005mjub36n46frxo","_id":"cjycjtjxd004tussb7dcghrjz"},{"post_id":"cjycjtjtm002eussbdaa0hq22","tag_id":"cjwuv7uka0005bmb3znfaispy","_id":"cjycjtjxd004uussbw5gitrsn"},{"post_id":"cjycjtjts002hussblsu7ajbk","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxd004vussbfxb2ru66"},{"post_id":"cjycjtjts002hussblsu7ajbk","tag_id":"cjwuuw3vs005yjub3q9yoedcx","_id":"cjycjtjxd004wussb5zg1a8k9"},{"post_id":"cjycjtjts002hussblsu7ajbk","tag_id":"cjwuuw3vd004gjub3sab8i682","_id":"cjycjtjxd004xussbesy4yf9t"},{"post_id":"cjycjtjts002hussblsu7ajbk","tag_id":"cjwuv7uka0005bmb3znfaispy","_id":"cjycjtjxd004yussbr4i47cmq"},{"post_id":"cjycjtjtz002kussbb1vwnsmm","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxd004zussbgf9587yp"},{"post_id":"cjycjtjtz002kussbb1vwnsmm","tag_id":"cjwuv7uji0000bmb3ve1nz3s4","_id":"cjycjtjxe0050ussb8o5hhs2v"},{"post_id":"cjycjtju3002nussblg5wz0i8","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxe0051ussb04hsmzgu"},{"post_id":"cjycjtju3002nussblg5wz0i8","tag_id":"cjwuuw3vv0068jub3w8itznwc","_id":"cjycjtjxe0052ussbiqcqes4p"},{"post_id":"cjycjtju3002nussblg5wz0i8","tag_id":"cjwuuw3vv0069jub3bu2zxgba","_id":"cjycjtjxe0053ussbw71pb71d"},{"post_id":"cjycjtju3002nussblg5wz0i8","tag_id":"cjwuv7uji0000bmb3ve1nz3s4","_id":"cjycjtjxe0054ussbggg74y9m"},{"post_id":"cjycjtju9002qussbyw4dmp4t","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxe0055ussbvbygz9mw"},{"post_id":"cjycjtju9002qussbyw4dmp4t","tag_id":"cjwuuw3vw006djub3q34upjwg","_id":"cjycjtjxe0056ussbuwl8q3o6"},{"post_id":"cjycjtju9002qussbyw4dmp4t","tag_id":"cjwuuw3vp005qjub3x4dl172v","_id":"cjycjtjxf0057ussb5lov39ex"},{"post_id":"cjycjtju9002qussbyw4dmp4t","tag_id":"cjwuv7uji0000bmb3ve1nz3s4","_id":"cjycjtjxf0058ussbq57ycgad"},{"post_id":"cjycjtjuf002tussbl5gpekkh","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxf0059ussbc8q7zini"},{"post_id":"cjycjtjuf002tussbl5gpekkh","tag_id":"cjwuuw3wg008gjub3f14i9de8","_id":"cjycjtjxf005aussbaeinjz5d"},{"post_id":"cjycjtjuf002tussbl5gpekkh","tag_id":"cjwuuw3wh008ijub3uh0okq0d","_id":"cjycjtjxg005bussb8sfg7ddu"},{"post_id":"cjycjtjuf002tussbl5gpekkh","tag_id":"cjwuuw3vd004gjub3sab8i682","_id":"cjycjtjxg005cussbptijqs28"},{"post_id":"cjycjtjuf002tussbl5gpekkh","tag_id":"cjwuv7uka0005bmb3znfaispy","_id":"cjycjtjxg005dussbdfyr4b7a"},{"post_id":"cjycjtjuj002wussb8itzi9mx","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxg005eussbxwzki5ky"},{"post_id":"cjycjtjuj002wussb8itzi9mx","tag_id":"cjwuuw3w1006wjub356zncic0","_id":"cjycjtjxh005fussb9754wunq"},{"post_id":"cjycjtjuj002wussb8itzi9mx","tag_id":"cjwuuw3w1006zjub3i2bkuoqn","_id":"cjycjtjxh005gussbl4pc9opo"},{"post_id":"cjycjtjuj002wussb8itzi9mx","tag_id":"cjwuuw3w20070jub3b2zc2rrw","_id":"cjycjtjxh005hussbvxi1fiw0"},{"post_id":"cjycjtjuj002wussb8itzi9mx","tag_id":"cjwuv7uka0005bmb3znfaispy","_id":"cjycjtjxh005iussbyguwz3mf"},{"post_id":"cjycjtjuv002zussbs4jtmxc3","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxh005jussbobh2crob"},{"post_id":"cjycjtjuv002zussbs4jtmxc3","tag_id":"cjwuuw3w1006zjub3i2bkuoqn","_id":"cjycjtjxi005kussbenpb2f26"},{"post_id":"cjycjtjuv002zussbs4jtmxc3","tag_id":"cjwuuw3w1006wjub356zncic0","_id":"cjycjtjxi005lussbz85412zv"},{"post_id":"cjycjtjuv002zussbs4jtmxc3","tag_id":"cjwuuw3u60016jub30kdvr0cx","_id":"cjycjtjxi005mussb08ajvlvm"},{"post_id":"cjycjtjuv002zussbs4jtmxc3","tag_id":"cjwuuw3w20070jub3b2zc2rrw","_id":"cjycjtjxi005nussbj5vmcsu1"},{"post_id":"cjycjtjuv002zussbs4jtmxc3","tag_id":"cjwuuw3w40074jub3bqd2l2zs","_id":"cjycjtjxq005oussbk7r5572t"},{"post_id":"cjycjtjv10032ussbh4uz7qox","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxq005pussbe3o4j1z5"},{"post_id":"cjycjtjv10032ussbh4uz7qox","tag_id":"cjwuuw3vy006pjub3fdwpdctk","_id":"cjycjtjxq005qussb798ypai3"},{"post_id":"cjycjtjv10032ussbh4uz7qox","tag_id":"cjwuuw3vc0048jub3dm2pvvu2","_id":"cjycjtjxq005russbohxg300p"},{"post_id":"cjycjtjv10032ussbh4uz7qox","tag_id":"cjwuuw3vz006sjub3ebxxu1m2","_id":"cjycjtjxr005sussbp27jlogv"},{"post_id":"cjycjtjv10032ussbh4uz7qox","tag_id":"cjwuv7uka0005bmb3znfaispy","_id":"cjycjtjxr005tussbxedkd07k"},{"post_id":"cjycjtjva0035ussb0ccyibf7","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxr005uussbon5kg1td"},{"post_id":"cjycjtjva0035ussb0ccyibf7","tag_id":"cjwuuw3vc0048jub3dm2pvvu2","_id":"cjycjtjxr005vussb5gydo3hb"},{"post_id":"cjycjtjva0035ussb0ccyibf7","tag_id":"cjwuuw3w20070jub3b2zc2rrw","_id":"cjycjtjxr005wussbozpvztri"},{"post_id":"cjycjtjva0035ussb0ccyibf7","tag_id":"cjwuv7uka0005bmb3znfaispy","_id":"cjycjtjxr005xussb2eqxv4fp"},{"post_id":"cjycjtjve0038ussbaicqj2si","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxr005yussb22xr2oea"},{"post_id":"cjycjtjve0038ussbaicqj2si","tag_id":"cjwuuw3w40074jub3bqd2l2zs","_id":"cjycjtjxr005zussbdijyq3ge"},{"post_id":"cjycjtjve0038ussbaicqj2si","tag_id":"cjwuuw3w40077jub3xbkff22n","_id":"cjycjtjxr0060ussblyxvv7in"},{"post_id":"cjycjtjve0038ussbaicqj2si","tag_id":"cjwuuw3vw006djub3q34upjwg","_id":"cjycjtjxr0061ussbrbm1yis9"},{"post_id":"cjycjtjve0038ussbaicqj2si","tag_id":"cjwuuw3vj005bjub34huzgkh5","_id":"cjycjtjxr0062ussbvibquosq"},{"post_id":"cjycjtjve0038ussbaicqj2si","tag_id":"cjwuuw3w40074jub3bqd2l2zs","_id":"cjycjtjxs0063ussbxpqv83oh"},{"post_id":"cjycjtjvg003bussbmvz22fci","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxs0064ussbegy9ltog"},{"post_id":"cjycjtjvg003bussbmvz22fci","tag_id":"cjwuuw3vh0055jub3eftgz7zw","_id":"cjycjtjxs0065ussbrtkdcwyd"},{"post_id":"cjycjtjvg003bussbmvz22fci","tag_id":"cjwuuw3vd004gjub3sab8i682","_id":"cjycjtjxs0066ussbvkui2d2e"},{"post_id":"cjycjtjvg003bussbmvz22fci","tag_id":"cjwuv7uka0005bmb3znfaispy","_id":"cjycjtjxs0067ussbdyzddnbe"},{"post_id":"cjycjtjvn003eussbvz70c1le","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxs0068ussbq3476t1k"},{"post_id":"cjycjtjvn003eussbvz70c1le","tag_id":"cjwuuw3wc0081jub3hj6mvgm3","_id":"cjycjtjxs0069ussblfrk9wtl"},{"post_id":"cjycjtjvn003eussbvz70c1le","tag_id":"cjwuuw3uz0033jub3ojbbne3l","_id":"cjycjtjxt006aussbd9v9tocy"},{"post_id":"cjycjtjvn003eussbvz70c1le","tag_id":"cjwuuw3wc0085jub3gvl0an26","_id":"cjycjtjxt006bussbm758lzbp"},{"post_id":"cjycjtjvn003eussbvz70c1le","tag_id":"cjwuv7uka0005bmb3znfaispy","_id":"cjycjtjxt006cussbzw2ia1bd"},{"post_id":"cjycjtjvu003hussbmvip7s71","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxt006dussbuyhfxsha"},{"post_id":"cjycjtjvu003hussbmvip7s71","tag_id":"cjwuuw3uz0033jub3ojbbne3l","_id":"cjycjtjxt006eussbargcmkao"},{"post_id":"cjycjtjvu003hussbmvip7s71","tag_id":"cjwuuw3vp005qjub3x4dl172v","_id":"cjycjtjxu006fussb5olktle7"},{"post_id":"cjycjtjvu003hussbmvip7s71","tag_id":"cjwuuw3wb007xjub3uofrsznh","_id":"cjycjtjxu006gussbl7dvw0xe"},{"post_id":"cjycjtjvu003hussbmvip7s71","tag_id":"cjwuv7uka0005bmb3znfaispy","_id":"cjycjtjxu006hussb1ei08h8w"},{"post_id":"cjycjtjvx003kussb240jaicd","tag_id":"cjwuuw3us002kjub3bl15xv4f","_id":"cjycjtjxu006iussbdu95zzq3"},{"post_id":"cjycjtjvx003kussb240jaicd","tag_id":"cjwuuw3wi008njub3cna1ey55","_id":"cjycjtjxv006jussbs3comv8m"},{"post_id":"cjycjtjvx003kussb240jaicd","tag_id":"cjwuuw3wi008qjub3nc0um763","_id":"cjycjtjxv006kussbalkf8e5e"},{"post_id":"cjycjtjvx003kussb240jaicd","tag_id":"cjwuv7uji0000bmb3ve1nz3s4","_id":"cjycjtjxv006lussb699gmxda"},{"post_id":"cjycjtjwe003qussbf1x9c395","tag_id":"cjwuuw3wi008rjub327rx3n8o","_id":"cjycjtjxv006mussbqvefoh2a"},{"post_id":"cjycjtjwe003qussbf1x9c395","tag_id":"cjwuuw3wj008ujub3kh0x1esm","_id":"cjycjtjxw006nussb0z4c8vcm"},{"post_id":"cjycjtjwe003qussbf1x9c395","tag_id":"cjwuuw3wj008wjub3ya1wpwoc","_id":"cjycjtjxx006oussbci380j18"},{"post_id":"cjycjtjwi003uussblrqq7p53","tag_id":"cjwuuw3wj008xjub3kwdw6mtp","_id":"cjycjtjxx006pussbhutepc1l"},{"post_id":"cjycjtjwp003xussb72fo2lsg","tag_id":"cjwuuw3wq0095jub3equja7k1","_id":"cjycjtjxx006qussbhtqp16dy"},{"post_id":"cjycjtjwp003xussb72fo2lsg","tag_id":"cjwuuw3wq0097jub3a21uthj6","_id":"cjycjtjxy006russbohhg4q4s"},{"post_id":"cjycjtjwt0040ussbpng4fjqh","tag_id":"cjwuuw3wj008xjub3kwdw6mtp","_id":"cjycjtjxy006sussbrz9lvhgt"},{"post_id":"cjycjtjwt0040ussbpng4fjqh","tag_id":"cjwuuw3wo0090jub3913bt6l4","_id":"cjycjtjxz006tussb5fr24ac0"},{"post_id":"cjycjtjx10044ussbrx38a1h4","tag_id":"cjwuuw3wj008xjub3kwdw6mtp","_id":"cjycjtjy0006uussbq08l7nro"},{"post_id":"cjycjtjx10044ussbrx38a1h4","tag_id":"cjwuuw3wr009bjub34yw2wf57","_id":"cjycjtjy1006vussbqnqgq43z"},{"post_id":"cjycjtjx10044ussbrx38a1h4","tag_id":"cjwuuw3ws009cjub3xgjobqfe","_id":"cjycjtjy2006wussbi7v1b4f1"},{"post_id":"cjycjtjw8003nussbevh4a25h","tag_id":"cjycjtjwh003sussbll69u93w","_id":"cjycjtjy2006xussbu7a2wt0w"},{"post_id":"cjycjtjw8003nussbevh4a25h","tag_id":"cjycjtjww0041ussbljk6x71l","_id":"cjycjtjy2006yussbnlmh5tll"},{"post_id":"cjycjtjw8003nussbevh4a25h","tag_id":"cjwuuw3tu000hjub3v8af3usp","_id":"cjycjtjy2006zussbg9cdyb52"},{"post_id":"cjycjtjw8003nussbevh4a25h","tag_id":"cjycjtjx80048ussbo6t1w1te","_id":"cjycjtjy20070ussbwg36tew9"},{"post_id":"cjycjtjy80071ussbh04fivcd","tag_id":"cjwuuw3tu000hjub3v8af3usp","_id":"cjycjtjye0073ussbdoaanzhd"},{"post_id":"cjycjtjy80071ussbh04fivcd","tag_id":"cjwuuw3wj008wjub3ya1wpwoc","_id":"cjycjtjyg0074ussbjp299el3"},{"post_id":"cjycjtjy80071ussbh04fivcd","tag_id":"cjwuuw42l00aejub3ind051fm","_id":"cjycjtjyh0076ussb1apvkkja"},{"post_id":"cjycjtjy80071ussbh04fivcd","tag_id":"cjwuuw42m00ajjub3o4s1s5ma","_id":"cjycjtjyj0078ussbu5ouvnw7"},{"post_id":"cjycjtjy80071ussbh04fivcd","tag_id":"cjwuuw42m00aljub3occpl4g9","_id":"cjycjtjyk0079ussb669dewa8"},{"post_id":"cjycjtjy80071ussbh04fivcd","tag_id":"cjwuuw3wj008ujub3kh0x1esm","_id":"cjycjtjyk007aussbeqz7uxc1"},{"post_id":"cjycjtjya0072ussbnf50d87p","tag_id":"cjwuuw3tx000mjub3lym7trr1","_id":"cjycjtjyk007bussb08cpxfgd"},{"post_id":"cjycjtjya0072ussbnf50d87p","tag_id":"cjwuuw3wq0097jub3a21uthj6","_id":"cjycjtjyl007cussb54bk24qz"},{"post_id":"cjycjtk1c007dussb8ex1jy2s","tag_id":"cjwuuw3ws009djub3dnk6e1i0","_id":"cjycjtk1m007fussbilmcnn4g"},{"post_id":"cjycjtk1c007dussb8ex1jy2s","tag_id":"cjwuuw3ws009cjub3xgjobqfe","_id":"cjycjtk1y007hussbn9awzrol"},{"post_id":"cjycjtk1f007eussbn4ne34an","tag_id":"cjwuuw3ws009djub3dnk6e1i0","_id":"cjycjtk28007kussb2whvq7l7"},{"post_id":"cjycjtk1f007eussbn4ne34an","tag_id":"cjwuuw3ws009cjub3xgjobqfe","_id":"cjycjtk2e007nussbqw0n9jrb"},{"post_id":"cjycjtk1f007eussbn4ne34an","tag_id":"cjwuuw3wz009yjub3tz908ii6","_id":"cjycjtk2t007pussbbrw38mxw"},{"post_id":"cjycjtk1n007gussbytb9phn9","tag_id":"cjwuuw3ws009djub3dnk6e1i0","_id":"cjycjtk2u007russbdcrw4kbd"},{"post_id":"cjycjtk1n007gussbytb9phn9","tag_id":"cjwuuw3ws009cjub3xgjobqfe","_id":"cjycjtk2w007tussbuy0obx34"},{"post_id":"cjycjtk1z007iussbdzzpyku8","tag_id":"cjwuuw3ws009cjub3xgjobqfe","_id":"cjycjtk2w007vussbtoh9emjn"},{"post_id":"cjycjtk29007lussbzfml7y3b","tag_id":"cjwuuw3wj008xjub3kwdw6mtp","_id":"cjycjtk2x007xussbpzr3s64o"},{"post_id":"cjycjtk29007lussbzfml7y3b","tag_id":"cjwuuw3ws009cjub3xgjobqfe","_id":"cjycjtk2x007zussb9ghfi5g4"},{"post_id":"cjycjtk29007lussbzfml7y3b","tag_id":"cjwuuw3ww009qjub3owonvui8","_id":"cjycjtk2x0080ussbpz20gurb"},{"post_id":"cjycjtk29007lussbzfml7y3b","tag_id":"cjwuuw3wx009rjub3v8fv740z","_id":"cjycjtk2x0081ussb9kfv0xqx"},{"post_id":"cjycjtk29007lussbzfml7y3b","tag_id":"cjwuuw3tx000mjub3lym7trr1","_id":"cjycjtk2x0082ussb740dylqz"},{"post_id":"cjycjtk390083ussbp3yhnt93","tag_id":"cjwuuw3vj005bjub34huzgkh5","_id":"cjycjtk3i0086ussbgvwezott"},{"post_id":"cjycjtk390083ussbp3yhnt93","tag_id":"cjwuuw3tx000mjub3lym7trr1","_id":"cjycjtk3i0087ussbg9lxinn5"},{"post_id":"cjycjtk390083ussbp3yhnt93","tag_id":"cjycjtk3f0084ussb8k8sq2zp","_id":"cjycjtk3j0088ussbs6l9fyj9"},{"post_id":"cjycjtk3q0089ussbd87t8e2p","tag_id":"cjycjtk3t008aussbtv0t7ric","_id":"cjycjtk3z008dussbnvgxjnd1"},{"post_id":"cjycjtk3q0089ussbd87t8e2p","tag_id":"cjycjtk3w008cussbl939pnvs","_id":"cjycjtk40008eussb9f77nywu"},{"post_id":"cjycjtk3q0089ussbd87t8e2p","tag_id":"cjwuuw3tu000hjub3v8af3usp","_id":"cjycjtk40008fussbc58w0ezz"}],"Tag":[{"name":"Canvas","_id":"cjwuuw3th0005jub3kt6n18fq"},{"name":"Web","_id":"cjwuuw3tn000cjub3ptcv488z"},{"name":"Daily","_id":"cjwuuw3tu000hjub3v8af3usp"},{"name":"Learning","_id":"cjwuuw3tx000mjub3lym7trr1"},{"name":"C++","_id":"cjwuuw3u0000rjub31e9r774w"},{"name":"Queue","_id":"cjwuuw3u3000zjub38g5bnfa8"},{"name":"PriorityQueue","_id":"cjwuuw3u60016jub30kdvr0cx"},{"name":"LNMP","_id":"cjwuuw3u9001cjub312nhd1uu"},{"name":"Linux","_id":"cjwuuw3uc001kjub3kjmyi8vs"},{"name":"LeetCode","_id":"cjwuuw3us002kjub3bl15xv4f"},{"name":"Linked List","_id":"cjwuuw3uu002rjub31c7x5hv2"},{"name":"Large Number","_id":"cjwuuw3ux002xjub314tn7vkq"},{"name":"Math","_id":"cjwuuw3uz0033jub3ojbbne3l"},{"name":"Hash Map","_id":"cjwuuw3v6003jjub3oooa9qvz"},{"name":"Binary Search","_id":"cjwuuw3vb0045jub3rlkbzqdq"},{"name":"Array","_id":"cjwuuw3vc0048jub3dm2pvvu2"},{"name":"String","_id":"cjwuuw3vd004gjub3sab8i682"},{"name":"Reverse","_id":"cjwuuw3ve004njub3y21d0363"},{"name":"Big Number","_id":"cjwuuw3ve004pjub3qhi9b4fb"},{"name":"Split","_id":"cjwuuw3vg004yjub3e77epfsm"},{"name":"Palindrome","_id":"cjwuuw3vh0055jub3eftgz7zw"},{"name":"DP","_id":"cjwuuw3vj005bjub34huzgkh5"},{"name":"Match","_id":"cjwuuw3vk005ejub3322a2x8h"},{"name":"Integer","_id":"cjwuuw3vo005mjub36n46frxo"},{"name":"Map","_id":"cjwuuw3vp005qjub3x4dl172v"},{"name":"Prefix","_id":"cjwuuw3vs005yjub3q9yoedcx"},{"name":"Closest","_id":"cjwuuw3vv0068jub3w8itznwc"},{"name":"3Sum","_id":"cjwuuw3vv0069jub3bu2zxgba"},{"name":"Recursive","_id":"cjwuuw3vw006djub3q34upjwg"},{"name":"Pointer","_id":"cjwuuw3vx006ljub32b73cig9"},{"name":"Duplicates","_id":"cjwuuw3vy006pjub3fdwpdctk"},{"name":"Sort","_id":"cjwuuw3vz006sjub3ebxxu1m2"},{"name":"LinkedList","_id":"cjwuuw3w1006wjub356zncic0"},{"name":"List","_id":"cjwuuw3w1006zjub3i2bkuoqn"},{"name":"Merge","_id":"cjwuuw3w20070jub3b2zc2rrw"},{"name":"Hard","_id":"cjwuuw3w40074jub3bqd2l2zs"},{"name":"BinaryTree","_id":"cjwuuw3w40077jub3xbkff22n"},{"name":"Majority","_id":"cjwuuw3wb007xjub3uofrsznh"},{"name":"Xor","_id":"cjwuuw3wc0081jub3hj6mvgm3"},{"name":"Linear","_id":"cjwuuw3wc0085jub3gvl0an26"},{"name":"Stack","_id":"cjwuuw3wg008gjub3f14i9de8"},{"name":"Pair","_id":"cjwuuw3wh008ijub3uh0okq0d"},{"name":"Matrix","_id":"cjwuuw3wi008njub3cna1ey55"},{"name":"Search","_id":"cjwuuw3wi008qjub3nc0um763"},{"name":"TensorFlow","_id":"cjwuuw3wi008rjub327rx3n8o"},{"name":"ML","_id":"cjwuuw3wj008ujub3kh0x1esm"},{"name":"MNIST","_id":"cjwuuw3wj008wjub3ya1wpwoc"},{"name":"Python","_id":"cjwuuw3wj008xjub3kwdw6mtp"},{"name":"Tornado","_id":"cjwuuw3wo0090jub3913bt6l4"},{"name":"SpaceVim","_id":"cjwuuw3wq0095jub3equja7k1"},{"name":"Markdown","_id":"cjwuuw3wq0097jub3a21uthj6"},{"name":"Numpy","_id":"cjwuuw3wr009bjub34yw2wf57"},{"name":"MachineLearning","_id":"cjwuuw3ws009cjub3xgjobqfe"},{"name":"机器学习基石","_id":"cjwuuw3ws009djub3dnk6e1i0"},{"name":"Clustering","_id":"cjwuuw3ww009qjub3owonvui8"},{"name":"K-Means","_id":"cjwuuw3wx009rjub3v8fv740z"},{"name":"PLA","_id":"cjwuuw3wz009yjub3tz908ii6"},{"name":"ACM-ICPC","_id":"cjwuuw42i00a7jub3nyr1agqy"},{"name":"Tensorflow","_id":"cjwuuw42l00aejub3ind051fm"},{"name":"LeNet-5","_id":"cjwuuw42m00ajjub3o4s1s5ma"},{"name":"Problems","_id":"cjwuuw42m00aljub3occpl4g9"},{"name":"Palindromic","_id":"cjwuuw42n00amjub3ljj04zp2"},{"name":"Medium","_id":"cjwuv7uji0000bmb3ve1nz3s4"},{"name":"Easy","_id":"cjwuv7uka0005bmb3znfaispy"},{"name":"Arch","_id":"cjycjtjn50006ussbxjimh7i9"},{"name":"Gnome","_id":"cjycjtjn70008ussbfhe7os5h"},{"name":"UEFI","_id":"cjycjtjn80009ussbdqvoo2yz"},{"name":"GPT","_id":"cjycjtjn9000aussbh44vawwe"},{"name":"双系统","_id":"cjycjtjna000bussbkaab4kdi"},{"name":"Install","_id":"cjycjtjnc000cussbp8h710fr"},{"name":"Deb","_id":"cjycjtjwh003sussbll69u93w"},{"name":"Debtap","_id":"cjycjtjww0041ussbljk6x71l"},{"name":"ArchLinux","_id":"cjycjtjx80048ussbo6t1w1te"},{"name":"Reprint","_id":"cjycjtk3f0084ussb8k8sq2zp"},{"name":"Nju","_id":"cjycjtk3t008aussbtv0t7ric"},{"name":"SummerCamp","_id":"cjycjtk3w008cussbl939pnvs"}]}}