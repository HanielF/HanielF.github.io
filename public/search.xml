<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ACM-ICPC World Finals 2017 F.Posterize DP</title>
      <link href="/2018/09/27/ACM-ICPC-World-Finals-2017-F-Posterize-DP/"/>
      <url>/2018/09/27/ACM-ICPC-World-Finals-2017-F-Posterize-DP/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="ACM-ICPC-World-Finals-2017-F-Posterize-DP"><a href="#ACM-ICPC-World-Finals-2017-F-Posterize-DP" class="headerlink" title="ACM-ICPC World Finals 2017 F.Posterize DP"></a>ACM-ICPC World Finals 2017 F.Posterize DP</h1><h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题<a id="more"></a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>　　Pixels in a digital picture can be represented with three integers in the range 00 to 255255 that indicate the intensity of the red, green, and blue colors. To compress an image or to create an artistic effect, many photo-editing tools include a “posterize” operation which works as follows. Each color channel is examined separately; this problem focuses only on the red channel. Rather than allow all integers from 00 to 255255 for the red channel, a posterized image allows at most kk integers from this range. Each pixel’s original red intensity is replaced with the nearest of the allowed integers. The photo-editing tool selects a set of kk integers that minimizes the sum of the squared errors introduced across all pixels in the original image. If there are nn pixels that have original red values r1,…,rnr1,…,rn, and kk allowed integers v1,…,vkv1,…,vk, the sum of squared errors is defined as</p><p>　　∑i=1nmin1≤j≤k(ri−vj)2.∑i=1nmin1≤j≤k(ri−vj)2.</p><p>　　Your task is to compute the minimum achievable sum of squared errors, given parameter kk and a description of the red intensities of an image’s pixels.</p><div class="note info"><p>数字图像的像素可以用三个在0到255之间的整数表示,它们分别表示红色、绿色和蓝色的强度。为了压缩图片或是<br>为了生艺术效果,许多图像编辑工具收录了如下所述的”色调分离”操作。每个颜色通道会分别考虑,本题只考虑红<br>色通道的情况。不同于在红色通道使用0到255之间全部的整数,一张色调分离后的图片只会使用这些数字里至多 k<br>种整数。每个像素原来的红色强度会被替换成最相近的可用强度。图像编辑工具会选择k个整数来最小化替换过程<br>引起的平方误差之和。假设原图有n个像素,它们的红色取值是r1,···,rn,而 k 种可用整数为v1,···,vk ,那么平方误差之和被定义为</p><p>　　∑i=1nmin1≤j≤k(ri−vj)2.∑i=1nmin1≤j≤k(ri−vj)2.</p><p>你的任务是计算可以实现的最小平方误差之和,参数k和图片的红色强度会给出。</p></div><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input contains two integers dd (1≤d≤2561≤d≤256), the number of distinct red values that occur in the original image, and kk (1≤k≤d1≤k≤d), the number of distinct red values allowed in the posterized image. The remaining dd lines indicate the number of pixels of the image having various red values. Each such line contains two integers rr (0≤r≤2550≤r≤255) and pp (1≤p≤2261≤p≤226), where rr is a red intensity value and pp is the number of pixels having red intensity rr. Those dd lines are given in increasing order of red value.</p><div class="note info"><p>第一行包含两个整数d(1≤d≤256)和k(1≤k≤d)<br>分别表示原图中不同的红色强度有多少种,色调分离后可以使用的红色强度有多少种。<br>接下来d行描述了每种红色强度在原图中占据的像素点数量。<br>每行包含两个整数r(0≤r≤255)和p(1≤p≤226)<br>这里r是一种红色强度的取值,而p是这种取值对应的像素点数量。这d行信息按照红色强度取值升序给出。</p></div><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Display the sum of the squared errors for an optimally chosen set of kk allowed integer values.</p><div class="note info"><p>输出最优的 k 种可选取值对应的平方误差之和。</p></div><div class="table-container"><table><thead><tr><th>Sample Input 1</th><th>Sample Output 1</th></tr></thead><tbody><tr><td>2 1</td><td></td></tr><tr><td>50 20000</td><td>66670000</td></tr><tr><td>150 10000</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>Sample Input 2</th><th>Sample Output 2</th></tr></thead><tbody><tr><td>2 2</td><td></td></tr><tr><td>50 20000</td><td>0</td></tr><tr><td>150 10000</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>Sample Input 3</th><th>Sample Output 3</th></tr></thead><tbody><tr><td>4 2</td><td></td></tr><tr><td>0 30000</td><td></td></tr><tr><td>25 30000</td><td></td></tr><tr><td>50 30000</td><td>37500000</td></tr><tr><td>255 30000</td></tr></tbody></table></div><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>　　主要是dp,记忆化搜索＋剪枝,看后面的代码注释和题解</p><h2 id="题目转化"><a href="#题目转化" class="headerlink" title="题目转化"></a>题目转化</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>有256个位置，有d个位置上有人（每个位置上可能不止一个人），你可以在k个位置上插旗（每个位置上至多一面旗子），每个人都会走到离自己最近的旗子，求所有人走的距离的平方和的最小值。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>要解决这个问题，我们可以建立一个二维数组<em>f[i][j]</em>，（j&lt;=i），表示前i个位置，放了j个旗子，其中第i个位置一定放了旗子，前i个位置上的所有人走到旗子上的最小距离平方和。如果我们假设第i个位置上的旗子是k个旗子中的最后一个（即第i个位置后面没有旗子），那么第i个位置后面的人只能全部走到第i个位置上，所以把_f[i][j]_加上i位置后面的人走到i位置的距离平方和就可以得到所有人走的距离平方和。因此我们可以枚举最后一个旗子插的位置i，将_f[i][j_]加上i后面的人走到i位置的距离平方和，取最小值，即为答案。<em>f[i][j]</em>数组的建立我们可以用下面的公式来计算：<em>f[i][j]=min{f[m][j-1]+w[m][i]},（j-1&lt;=m&lt; i)</em>，其中<em>w[m][i]</em>表示m~i这一段只有m和i位置放了旗子，这一段上的人走的距离平方和。</p><p>由于第i个位置上固定了一面旗子，我们可以考虑另外j-1面旗子的位置。若j-1面旗子在前m个位置（可以假设第m个位置上一定放旗子），那么<em>f[i][j]</em>可以分解成两段计算，一段是1~m位置，放了j-1个旗子，其中第m个位置一定放了旗子，这就递归成了<em>f[m][j-1]</em>；另一段是m+1~i位置，只有m和i位置放了旗子，这一段上的人只能走到m和i，即<em>w[m][i]</em>。所以我们只要枚举m的值，取<em>f[m][j-1]+w[m][i]</em>的最小值，就可以得出<em>f[i][j]</em>的值。</p><p>下面给出一个f[i][j]的实例：考虑f[8][3]，前8个位置，放了3个旗子，其中第3个位置一定放了旗子。剩余的2面旗子可能在前2/3/4/5/6/7个位置上，由此枚举出所有情况：</p><p>剩余的2面旗子在：</p><blockquote><p>　　前2个位置：f[2][2]+w[2][8]<br>　　前3个位置：f[3][2]+w[3][8]<br>　　前4个位置：f[4][2]+w[4][8]<br>　　前5个位置：f[5][2]+w[5][8]<br>　　前6个位置：f[6][2]+w[6][8]<br>　　前7个位置：f[7][2]+w[7][8]</p></blockquote><p>取出这些值中的最小值，即得到f[8][3]的值。</p><p>至于w[m][i]的建立较为简单，由于只有m和i位置放了旗子，m+1~i位置上的人只能就近走到m或i位置上，我们可以求出m和i的中值，前一半的人走到m，后一半的人走到i，求出距离平方和即可。</p><h3 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 260</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读数据,返回一个整数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否有符号</span></span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按位读取组成整数</span></span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一共n个位置，kk个旗子,a[N]表示每个位置的人数</span></span><br><span class="line"><span class="keyword">int</span> n,kk,a[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//f[i][j]表示前i个位置，放了j个旗子，其中第i个位置一定放了旗子的最小平方误差</span></span><br><span class="line">ll w[N][N],f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">min</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x:y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("a.in","r",stdin);</span></span><br><span class="line">    n=read();</span><br><span class="line">    kk=read(); </span><br><span class="line"></span><br><span class="line">    <span class="comment">//旗子数不可以比位置数多</span></span><br><span class="line">    <span class="keyword">if</span>(kk&gt;=n)&#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取每个位置的人数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=read();a[x+<span class="number">1</span>]=read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立w[i][j],i是第一个旗子位置,j是第二个旗子的位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">256</span>;++i)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//i~j这一段只在i和j位置放旗子的平方误差</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">2</span>;j&lt;=<span class="number">256</span>;++j)&#123;</span><br><span class="line">          <span class="keyword">int</span> mid=i+j&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//计算i到j之间所有的位置平方和</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> q=i+<span class="number">1</span>;q&lt;=j<span class="number">-1</span>;++q)&#123;</span><br><span class="line">                <span class="keyword">if</span>(q&gt;mid) </span><br><span class="line">                  w[i][j]+=(ll)(j-q)*(j-q)*a[q];</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                  w[i][j]+=(ll)(q-i)*(q-i)*a[q];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只放一个旗子的情况,旗子在i处，遍历i之前所有的位置,累加</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">256</span>;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;++j)</span><br><span class="line">            f[i][<span class="number">1</span>]+=(ll)(i-j)*(i-j)*a[j];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立f[i][j],j是旗子的数量，从２开始到kk</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=kk;++j)</span><br><span class="line">        <span class="comment">//i是一共多少个位置，从j到256</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=j;i&lt;=<span class="number">256</span>;++i)&#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//前j-1个旗子放在[1,m]这里，并且m处有旗子,i处也有旗子,转化成求f[m][j-1]+w[m][i]的最小值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=j<span class="number">-1</span>;m&lt;i<span class="number">-1</span>;++m)</span><br><span class="line">                f[i][j]=min(f[i][j],f[m][j<span class="number">-1</span>]+w[m][i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    ll ans=f[<span class="number">256</span>][kk];</span><br><span class="line">    <span class="comment">//统计答案，如果最后一个旗子不在最后一个位置，就还需要加上最后一个旗子后面的位置的平方和，枚举最后一个旗子插的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//i是最后一个旗子的位置,j是最后一个旗子到最后一个位置的每个位置,tmp是最后这部分的平方和</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">255</span>;i&gt;=kk;--i)&#123;</span><br><span class="line">        ll tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">256</span>;j&gt;i;--j)</span><br><span class="line">          tmp+=(ll)(j-i)*(j-i)*a[j];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较不同位置的平方和，取最小值</span></span><br><span class="line">        ans=min(ans,f[i][kk]+tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learning </tag>
            
            <tag> ACM-ICPC </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>numpy.dot()函数</title>
      <link href="/2018/09/11/numpy-dot-%E5%87%BD%E6%95%B0/"/>
      <url>/2018/09/11/numpy-dot-%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><p>　　numpy(Numerical Python extensions)是一个第三方的Python包，用于科学计算。本文主要讲学习Numpy过程中遇到的一个问题，关于numpy.dot()是怎运算的。<a id="more"></a></p><h2 id="Numpy中多维数组的轴"><a href="#Numpy中多维数组的轴" class="headerlink" title="Numpy中多维数组的轴"></a>Numpy中多维数组的轴</h2><p>　　多维数组可以用numpy包生成，关于多维数组的运算以及定义等自行百度,主要讲多维数组的轴,这也是我学习时不懂的地方。</p><div class="note default"><p>　　多维数组的轴(axis)和该数组的size(或者)shape元素对应 。轴数从0开始，如果是二维，０轴是竖行，１轴是横行。具体看代码</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.randint(<span class="number">0</span>,<span class="number">5</span>,[<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">print(x)</span><br><span class="line">Out:</span><br><span class="line">  [[[<span class="number">5</span> <span class="number">2</span>]</span><br><span class="line">    [<span class="number">4</span> <span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">   [[<span class="number">1</span> <span class="number">3</span>]</span><br><span class="line">    [<span class="number">2</span> <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">   [[<span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">    [<span class="number">0</span> <span class="number">1</span>]]]</span><br><span class="line"></span><br><span class="line">x.sum(axis=<span class="number">0</span>)</span><br><span class="line">Out:</span><br><span class="line">  array([[<span class="number">7</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">6</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">x.sum(axis=<span class="number">1</span>)</span><br><span class="line">Out:</span><br><span class="line">  array([[<span class="number">9</span>, <span class="number">4</span>],</span><br><span class="line">         [<span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">         [<span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line">x.sum(axis=<span class="number">2</span>)</span><br><span class="line">Out:</span><br><span class="line">  array([[<span class="number">7</span>, <span class="number">6</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><div class="note info"><p>　　如果将三维数组的每一个二维看做一个平面（plane，X[0, :, :], X[1, :, :], X[2, :, :]），三维数组即是这些二维平面层叠（stacked）出来的结果。则（axis=0）表示全部平面上的对应位置，（axis=1），每一个平面的每一列，（axis=2），每一个平面的每一行。</p></div><h1 id="numpy-dot"><a href="#numpy-dot" class="headerlink" title="numpy.dot()"></a>numpy.dot()</h1><p>　　<em>numpy.dot(a,b,out=None)</em></p><ul><li>如果a和b都是一维数组，则进行内积运算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">np.dot(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">Out:</span><br><span class="line">  <span class="number">12</span></span><br><span class="line"></span><br><span class="line">np.dot([<span class="number">2j</span>, <span class="number">3</span>+<span class="number">3j</span>], [<span class="number">2j</span>, <span class="number">3j</span>])</span><br><span class="line">Out:</span><br><span class="line">  (<span class="number">-13</span>+<span class="number">9j</span>)</span><br></pre></td></tr></table></figure><ul><li>如果都是二维数组，就进行矩阵乘法，推荐<code>a@b</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line">b = [[<span class="number">4</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>]]</span><br><span class="line">np.dot(a, b)</span><br><span class="line">Out:</span><br><span class="line">  array([[<span class="number">4</span>, <span class="number">1</span>],</span><br><span class="line">         [<span class="number">2</span>, <span class="number">2</span>]])</span><br></pre></td></tr></table></figure><ul><li>如果其中一个矩阵０秩，即标量，就进行<code>a*b</code>的运算，相乘</li><li>如果a是N-D矩阵且b是1-D矩阵,就进行a的最后一个轴上的数据和b相乘并求和</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = array([[[ <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>,  <span class="number">4.</span>],</span><br><span class="line">     [ <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>,  <span class="number">8.</span>],</span><br><span class="line">     [ <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>, <span class="number">12.</span>]],</span><br><span class="line"></span><br><span class="line">    [[ <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>,  <span class="number">4.</span>],</span><br><span class="line">     [ <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>,  <span class="number">8.</span>],</span><br><span class="line">     [ <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>, <span class="number">12.</span>]]])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">np.dot(a, b)</span><br><span class="line">Out:</span><br><span class="line">  array([[ <span class="number">30.</span>,  <span class="number">70.</span>, <span class="number">110.</span>],</span><br><span class="line">       [ <span class="number">30.</span>,  <span class="number">70.</span>, <span class="number">110.</span>]])</span><br></pre></td></tr></table></figure><ul><li>如果都是多维矩阵，则_a的最后一个轴和b的倒数第二个轴上的数据乘积累加_,类似第四种情况<br><code>dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">3</span>*<span class="number">4</span>*<span class="number">5</span>*<span class="number">6</span>).reshape((<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">b = np.arange(<span class="number">3</span>*<span class="number">4</span>*<span class="number">5</span>*<span class="number">6</span>)[::<span class="number">-1</span>].reshape((<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>))</span><br><span class="line">np.dot(a, b)[<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">Out:</span><br><span class="line">  <span class="number">499128</span></span><br><span class="line">sum(a[<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,:] * b[<span class="number">1</span>,<span class="number">2</span>,:,<span class="number">2</span>])</span><br><span class="line">Out:</span><br><span class="line">  <span class="number">499128</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;</p>]]></content>
      
      <categories>
          
          <category> MachineLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MachineLearning </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>聚类和K-Means算法</title>
      <link href="/2018/09/10/%E8%81%9A%E7%B1%BB%E5%92%8CK-Means%E7%AE%97%E6%B3%95/"/>
      <url>/2018/09/10/%E8%81%9A%E7%B1%BB%E5%92%8CK-Means%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h1><h2 id="聚类定义"><a href="#聚类定义" class="headerlink" title="聚类定义"></a>聚类定义</h2><p>　　聚类(Clustering)，指的是一种学习方式（操作方式），即把物理或者抽象对象的集合分组为由彼此的对象组成的多个类的分析过程。<a id="more"></a> </p><div class="note info"><p> 聚类属于无监督机器学习，简言之就是把特征形态相同的或者近似的划分在一个概念下，聚集为一组。</p><p>聚类在实际的应用中中亦是非常广泛的，如：市场细分（Market segmentation）、社交圈分析（social network analysis）、集群计算（organize computing clusters）、天体数据分析（astronomical data analysis）等</p></div><h2 id="聚类算法分类"><a href="#聚类算法分类" class="headerlink" title="聚类算法分类"></a>聚类算法分类</h2><p>　　主要的聚类主要的聚类算法可以划分为如下几类：划分方法、层次方法、基于密度的方法、基于网格的方法以及基于模型的方法。</p><p>　　每一类中都存在着得到广泛应用的算法，例如：划分方法中的k-means聚类算法、层次方法中的凝聚型层次聚类算法、基于模型方法中的神经网络聚类算法等</p><p>　　但是上述的都是硬聚类，即每一个数据只能被归为一类，还有一种是模糊聚类。模糊聚类通过隶属函数来确定每个数据隶属于各个簇的程度，而不是将一个数据对象硬性地归类到某一簇中。</p><h1 id="常用距离算法"><a href="#常用距离算法" class="headerlink" title="常用距离算法"></a>常用距离算法</h1><h2 id="欧氏距离"><a href="#欧氏距离" class="headerlink" title="欧氏距离"></a>欧氏距离</h2><p>　　欧氏距离是最直观的距离度量方法，通常就是学过的两点间距离，可以用在多维。</p><ul><li>二维平面上点a(x1,y1)与b(x2,y2)间的欧氏距离:  <script type="math/tex; mode=display">d_{12} = \sqrt{(x_1-x_2)^2+(y_1-y_2)^2}</script></li><li>三维空间点a(x1,y1,z1)与b(x2,y2,z2)间的欧氏距离:<script type="math/tex; mode=display">d{12} = \sqrt{(x_1-x_2)^2+(y_1-y_2)^2+(z_1-z_2)^2}</script></li><li>更高维的计算类似二维三维</li></ul><h2 id="曼哈顿距离"><a href="#曼哈顿距离" class="headerlink" title="曼哈顿距离"></a>曼哈顿距离</h2><p>　　不再是两点间连线的那种，是类似九宫格的走法，只能直线和直角拐弯。又叫做“城市街区距离”。</p><ul><li>二维平面两点a(x1,y1)与b(x2,y2)间的曼哈顿距离：<script type="math/tex; mode=display">d_12 = |x_1-x_2|+|y_1-y_2|</script></li><li>三维和其他维类似</li></ul><div class="note info"><p>　　除了这两种还有余弦距离和切比雪夫距离等，这里不展开说。采用不同的距离度量方法对结果有很大的影响。</p></div><h1 id="k-means算法"><a href="#k-means算法" class="headerlink" title="k-means算法"></a>k-means算法</h1><p>  思想大致是:</p><ul><li>1.　先随机选k个质心</li><li>2.　对每个点计算其到各个质心的距离</li><li>3.　选距离最近的，把这个点归为这个质心的一类，形成k个簇</li><li>4.　然后对于每个簇，计算其中每个点到质心的平均距离</li><li>5.　然后把这个作为这个簇的新的质心,进行第二步</li><li>6.　直到簇不怎么发生变化或者达到了预设的最大迭代次数，停止</li></ul><p>　主要函数如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//k-means聚类</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Cluster&gt; k_means(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;trans,<span class="keyword">int</span> k,<span class="keyword">int</span> counts)&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;Cluster&gt; clusters(k);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> row = trans.size();</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> col = trans[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//随机初始化聚类中心</span></span><br><span class="line">  srand((<span class="keyword">int</span>)time(<span class="number">0</span>));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> center = rand()%trans.size();</span><br><span class="line">    clusters[i].center=trans[center]; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//迭代counts次</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">0</span>;cnt&lt;counts;cnt++)&#123;</span><br><span class="line"><span class="comment">//    for(int i=0;i&lt;k;i++)&#123;</span></span><br><span class="line"><span class="comment">//      cout&lt;&lt;"cluster:"&lt;&lt;clusters[i].center[0]&lt;&lt;"\t"&lt;&lt;clusters[i].center[1]&lt;&lt;endl; </span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空样本空间</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">      clusters[i].samples.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算样本属于的簇</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line">      <span class="comment">//cout&lt;&lt;"计算样本属于的簇"&lt;&lt;endl;</span></span><br><span class="line">      <span class="keyword">int</span> tmp_center = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> minal = cal_distance(trans[i],clusters[tmp_center].center);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;j++)&#123;</span><br><span class="line"><span class="comment">//        cout&lt;&lt;"trans"&lt;&lt;trans[i][0]&lt;&lt;"\t"&lt;&lt;trans[i][1]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//        cout&lt;&lt;"center"&lt;&lt;clusters[j].center[0]&lt;&lt;"\t"&lt;&lt;clusters[j].center[1]&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">int</span> distance = cal_distance(trans[i],clusters[j].center);</span><br><span class="line"><span class="comment">//        cout&lt;&lt;"i: "&lt;&lt;i&lt;&lt;" distance: "&lt;&lt;distance&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(distance&lt;minal)&#123;</span><br><span class="line">          tmp_center = j;</span><br><span class="line">          minal = distance;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//cout&lt;&lt;"tmp_center: "&lt;&lt;tmp_center&lt;&lt;endl;</span></span><br><span class="line">      clusters[tmp_center].samples.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//  for(int i=0;i&lt;clusters.size();i++)&#123;</span></span><br><span class="line"><span class="comment">//    cout&lt;&lt;i&lt;&lt;"\t"&lt;&lt;clusters[i].samples.size()&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新计算簇中心</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;trans[<span class="number">0</span>].size();m++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;clusters[i].samples.size();j++)&#123;</span><br><span class="line">          <span class="comment">//cout&lt;&lt;"sum+=: "&lt;&lt;trans[clusters[i].samples[j]][m];</span></span><br><span class="line">          sum+=trans[clusters[i].samples[j]][m];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        cout&lt;&lt;"samples size: "&lt;&lt;clusters[i].samples.size()&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//        cout&lt;&lt;"sum: "&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">        clusters[i].center[m]=sum/clusters[i].samples.size();</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//  for(int i=0;i&lt;clusters.size();i++)&#123;</span></span><br><span class="line"><span class="comment">//    cout&lt;&lt;i&lt;&lt;"\t"&lt;&lt;clusters[i].center[0]&lt;&lt;"\t"&lt;&lt;clusters[i].center[i]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> clusters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　用了C++作为实现的代码，python的代码可以参考网上的，有很多。计算距离用的是欧式距离。数据可以自己构造尝试。</p><hr>]]></content>
      
      <categories>
          
          <category> MachineLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MachineLearning </tag>
            
            <tag> Clustering </tag>
            
            <tag> K-Means </tag>
            
            <tag> Learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/05/hello-world/"/>
      <url>/2018/09/05/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
