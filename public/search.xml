<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[LeetCode-001-Two Sum]]></title>
    <url>%2F2019%2F04%2F07%2FLeetCode-001-Two-Sum%2F</url>
    <content type="text"><![CDATA[ProblemGiven an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution. Example: Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1]. UPDATE (2016/2/13): The return format had been changed to zero-based indices. Please read the above updated description carefully. Solutions 刚开始第一反应就是暴力遍历，但是时间复杂度是O(n^2) 题解用了hash map，时间复杂度为O(n) 第一种方式是两遍hash，第一遍将元素添加进去，第二遍遍历元素 第二种方式一遍hash，一边添加元素一边判断结果是否在已添加的元素中 C++ Codes12345678910111213141516171819class Solution &#123;public: vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123; vector&lt;int&gt; res; map&lt;int,int&gt; numMap; //创建map map&lt;int ,int&gt;::iterator it; //创建迭代器 for(int i=0;i&lt;nums.size();i++)&#123; it=numMap.find(target-nums[i]); //find函数查找key if(it!=numMap.end())&#123; //如果到了end就说明没找到 res.push_back(i); res.push_back(numMap[target-nums[i]]); return res; &#125; numMap.insert(make_pair(nums[i],i)); //插入pair &#125; return res; &#125;&#125;; C++中vector用法回忆： 创建：vector vec; 访问：int i=vec[0]; 插入：vec.push_back(1);vec.insert(index,val)，在第i个元素后面插入 删除： vec.pop_back(),删除最后一个 vec.erase(index)，删除index位置处元素 vec.erase(1,3)，删除[1,3)区间的元素 大小：vec.size(); 清空：vec.clear(); 翻转：reverse(vec.begin(),vec.end());将元素翻转在vecotr，要#include 排序： sort(vec.begin(),vec.end());默认按照升序排列 sort(vec.begin(),vec.end(),cmp);定义排序比较函数将序排列 bool cmp(const int&amp;a,const int&amp;b){ return a&gt;b;} 迭代器访问 vector::iterator it;for(it=vec.begin();it!=vec.end();it++) cout&lt;&lt;*it&lt;&lt;endl; C++中map的用法 创建：mapmapString; key类型为string，val类型为int 添加： mapString[“hello”]=1; 最常用的最简单的插入方式,会覆盖之前的数据 mapString.insert(make_pair(“hello”,1)); 次常用, insert()不会覆盖之前的数据 mapString.insert(pair(“hello”,1)); mapString.insert(map::value_type(“hello”,1)); 迭代： map::iterator it;for ( it = mapString.begin( ); it != mapString.end( ); it++ ) cout &lt;&lt; “ “ &lt;&lt; it -&gt; second; 查找： 不建议! mapString[“hello”];返回”hello”对应的值，如果不存在，则添加一个元素，key为”hello”,val为类型默认值,并返回这个默认值 mapString.count(“hello”); map::count()方法返回被查找元素的个数,只有0或1 map::find()方法,返回的是被查找元素的位置，没有则返回map.end() map::iterator it;it = mapString.find(“hello”);if(it==test.end()){ cout&lt;&lt;”hello not found”&lt;&lt;endl;} 删除: mapString.erase(“hello”); 用迭代器删除,注意在迭代期间是不能被删除的 map::iterator it;it = mapString.find(“hello”); if(it==mapString.end()) cout&lt;&lt;”hello not found”&lt;&lt;endl;else mapString.erase(it); 排序：map中元素自动按照key升序排序，不可以用sort函数 大小：mapString.size(); 清除：mapString.clear(); Python Codes123456789class Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: map = &#123;&#125; for i, num in enumerate(nums): if target - num in map: return [map[target - num], i] map[num] = i return [] list中遍历的三种方式： for items in list: 根据元素遍历 for index in range(len(list)): 根据索引遍历 enumerate(seq, [start=0]) 创建枚举对象，同时列出数据下标和数据 seq: 一个序列、迭代器或其他支持迭代对象, 如列表、元组或字符串 start: 下标起始位置 返回：一个列表 [(下标，数据)…], 例如[(1, ‘a’), (2, ‘b’), (3, ‘c’)] iterList = iter(list) 创建迭代器遍历 用法：for item in iterList: print(item) 总结虽然第一题很简单，但是深入了看还是能学了不少东西的，在遍历这方面，时间复杂度优化可以用map，C++时间复杂度可以从O(n)降到O(logn)，python和java可以直接降到O(1). 而且打完代码复习了C++中vector的用法，还有pythonlist的enumerate遍历。C++ STL中的map是现学现卖了. 打算每天一题，感觉有点晚了，亡羊补牢把。]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>hash map</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习基石--Types of Learning]]></title>
    <url>%2F2019%2F04%2F07%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%9F%B3-Types-of-Learning%2F</url>
    <content type="text"><![CDATA[《机器学习基石》第三讲Types of Learning的笔记。主要介绍了机器学习的集中分类标准和具体分类。 不同的输出空间二元分类: binary classification很基本的分类问题，输出只有两种. 通俗的理解就是简单的是非题，要么是，要么不是。 多元分类: multiclass classification很简单的例子就是对硬币的分类，课程中使用了美元的分类，1c, 5c, 10c, 25c 这样。 输出可以不只两种，上述硬币的分类输出为四，输出可以是K种。 二元分类是特殊的多元分类，即K=2的情况。 应用场景:主要是视觉或听觉的辨识 数字识别 图片内容分类 邮件的分类 回归问题: Regression$ y=R $ or $y = [lower, upper] \setminus R (bounded regression)$ 特点是输出是一个实数 应用 股票价格 温度预测 结构化学习: Structed Learning理解起来就是多元分类的扩展，有很多很多的类别，但是类别和类别之间有着某种潜在结构，我们要输出的就是这种结构。 比如一个句子，可以是主谓宾、主谓等等，但是不可能是谓语谓语谓语这样。我们如果对一个句子进行语法判断，输出空间就是这些结构，而不是一个个的类别。 应用:输出空间有着某种结构 蛋白质的结构 自然语言处理中语言的parse tree 总的可以看下图： 不同的数据样本监督学习: Supervised Learning给了一堆样本，然后还对每个样本进行了标记是什么，即每个x_n对应一个y_n 非监督学习: Unsupervised Learning给了一对样本，但是不给样本的正确标记，让机器自己去把样本分成几类。 非监督的多分类问题就相当于是聚类，比如把一些文章按照不同的topic分类，按照消费者的资料把消费者分类。 聚类通常比较有用，但是评定聚类的好坏可能比较困难。 不同的训练方式不同的输入空间]]></content>
      <categories>
        <category>MachineLearning</category>
        <category>机器学习基石</category>
      </categories>
      <tags>
        <tag>MachineLearning</tag>
        <tag>机器学习基石</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习基石--PLA算法]]></title>
    <url>%2F2019%2F04%2F07%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%9F%B3-PLA%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[《机器学习基石》第二讲 Learning to Answer Yes/NO 课程笔记。这一讲主要介绍了机器学习基本概念和感知机，以及其训练算法PLA。 基本概念 \mathcal f: 未知的目标函数 \mathcal D: 训练样本，数据集 \mathcal A: 学习算法 \mathcal H: 假设集 \mathcal g: 最终的假设，是\mathcalf的一个近似函数 课件上很清楚的描绘了机器学习的一个过程 感知机感知机是神经网络的基础，与线性回归（Linear Regression），逻辑回归（Logistics Regression）等模型也非常类似，是一种非常典型的线性模型。 原始的感知机算法用于解决二分类问题，其思想如下：假设样本有 d 个特征，但是每个特征的重要性不一样，因此各个特征的权重也不一样，对其进行加权后得到的总和假如大于某个阈值则认为归为其中一类，反之归为另一类。如在信用卡的例子中，通过感知机有如下的结果 然后可以将threshold化为常数项作为w_0,简化为下图：上面的w和x均为一个列向量，即w转置后成为行向量 PLA感知机要通过学习才能对样本进行正确的分类，这个学习的过程就是PLA(Perceptron Learning Algorithm). 过程如下： 随机初始化参数w 利用参数w预测每个样本点的值并与其实际的值比较，对于分类错误的样本点(xn,yn),利用公式w=w+ynxn更新参数w的值 重复上面的过程直到所有的样本点都能够被参数w正确预测。 对于某个被预测错误的样本点，参数w更新过程如下： 注意上面的算法的前提是所有的样本点都必须线性可分，假如样本点线性不可分，那么PLA按照上面的规则会陷入死循环中。如下是线性可分与线性不可分的例子) 收敛性证明上面提到只有当所有的样本均为线性可分时，PLA才能将所有的样本点正确分类后再停下了，但是这仅仅是定性的说明而已，并没有严格的数学正面来支撑其收敛性，下面要讲的便是通过数学证明来说明 PLA 算法的收敛性。 课程中用两次递进的证明来说明收敛性 上面讲的是随着参数w的更新,w^T_fw_t+1的值越来越大，也就是两者越来越相似衡量两个向量相似性的一种方法就是考虑他们的内积，值越大，代表两者约接近，但是这里还没对向量归一化，所以证明并不严格，但是已经说明了两者具有这个趋势，下面是更严格的过程 上面似乎只是说明了经过 T 次的纠错，wt 的值会限制在一个范围内，但是并没有给出最终结论 {w_f \over ||w_f||}{w_T \over ||w_T||} \ge \sqrt{T} * constant的证明过程，因此在这里进行推导过程的描述(注：这里的w_f是不变的，因此w_f与w^T_f是一样的) 假设经过了 T 次纠错，那由第一张PPT可知 w^T_fw_T \ge w_f^Tw_{T-1} + \min_{n}y_nw_f^Tx_n而由第二章张ppt可知 ||w_T||^2 \le ||w_{T-1}||^2 + \max_n||x_n||^2 \le T\max_n||x_n||^2即：||w_T|| \le \sqrt{T}\max_n||x_n|| 综合上面两个式子有 {w_f^T \over ||w_f^T||}{w_T \over ||w_T||} \ge {T\min_ny_n^Tw^T_fx_n \over ||w_f^T||\sqrt{T}\max_n||x_n||} = \sqrt{T}{\min_ny_n{w_f^T \over ||w_f^T||}x_n \over \max_n||x_n||} = \sqrt{T} * constant因此上面的命题得证。至此，已经可知道犯错误的次数 T 是受到某个上限的约束的。下面会给出这个具体的上限是多少。 又因为 1 \ge {w_f^T \over ||w_f^T||}{w_T\over||w_T||} \ge \sqrt{T} * constant{1\over constant^2 } \ge T即犯错的次数上限是${1 \over constant^2}$,假设令 \max_n||x||^2 = R^2, \rho = \min_ny_n{w_f^T \over ||w_f^T||}x_n则有 T \le {R^2 \over \rho^2}这也说明了PLA会在有限步内收敛，这个证明也是后面的练习答案 优缺点和优化PLA 的优点和缺点都非常明显，其中优点是简单，易于实现 缺点是假设了数据是线性可分的，然而事先并无法知道数据是否线性可分的。正如上面提到的一样，假如将PLA 用在线性不可分的数据中时，会导致PLA永远都无法对样本进行正确分类从而陷入到死循环中。 为了避免上面的情况，将 PLA 的条件放宽一点，不再要求所有的样本都能正确地分开，而是要求犯错的的样本尽可能的少，即将问题变为了 arg\min_w\sum_{n=0}^N1\{y_n \neq sign(w^Tx_n)\}这个最优化问题是个 NP-hard 问题，无法求得其最优解，因此只能求尽可能接近其最优解的近似解。讲义中提出的一种求解其近似解的算法Pocket Algorithm。 其思想就是每次保留当前最好的w, 当遇到错误的样本点对w进行修正后，比较修正后的w与原来最好的w在整个样本点上的总体效果再决定保留哪一个，重复迭代足够多的次数后返回当前得到的最好的w。]]></content>
      <categories>
        <category>MachineLearning</category>
        <category>机器学习基石</category>
      </categories>
      <tags>
        <tag>MachineLearning</tag>
        <tag>机器学习基石</tag>
        <tag>PLA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MNIST入门-手写数字识别]]></title>
    <url>%2F2019%2F04%2F02%2FMNIST%E5%85%A5%E9%97%A8-%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%2F</url>
    <content type="text"><![CDATA[Target将训练一个机器学习模型用于预测图片里面的数字. 理解TensorFlow工作流程和机器学习的基本概念 和官网不同的是只记录关键点 关键词 MNISTTensorFlowSoftmax Regression 数据集 数据集被分成两部分：60000行的训练数据集（mnist.train）和10000行的测试数据集（mnist.test） 把这些图片设为“xs”，把这些标签设为“ys” 训练数据集的图片是 mnist.train.images ，训练数据集的标签是 mnist.train.labels mnist.train.images 是一个形状为 [60000, 784] 的张量，第一个维度数字索引图片，第二个维度数字索引每张图片中的像素点 向量值表某个像素的强度值，值介于0和1之间 mnist.train.labels 是一个 [60000, 10] 的数字矩阵 标签数据是”one-hot vectors” 10维，只有一个维度非0 标签0将表示成([1,0,0,0,0,0,0,0,0,0,0]) Softmaxsoftmax模型可以用来给不同的对象分配概率。即使在之后，我们训练更加精细的模型时，最后一步也需要用softmax来分配概率。 第一步]]></content>
  </entry>
  <entry>
    <title><![CDATA[Fedora 26 编译内核]]></title>
    <url>%2F2019%2F04%2F01%2FFedora26%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%2F</url>
    <content type="text"><![CDATA[被迫很不情愿的编译内核…以前服务器上编译过，贼麻烦，现在又要编译，为了不让我的Arch出什么幺蛾子，新弄了个虚拟机练手了。还是Fedora26的，现在都出29了，时间过得真快。 准备工作查看自己内核版本uname -a Linux localhost.localdomain 4.11.8-300.fc26.x86_64 #1 SMP Thu Jun 29 20:09:48 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux 下载内核并解压到/usr/src目录下推荐一下上海交大的网站，速度挺快的。下载好后tar xf linux-5.0.1.tar.gz -C /usr/src解压到/usr/src下 注意事项make编译内核起码预留10个G，编译完之后，不然存储会不够，又要重新弄。boot分区发现200M会不够用，改成500M可以，扩容还是挺麻烦的/ 根目录（具体来说是 /lib，没挂载/lib的话就默认是使用/目录） 要有至少4G的空余空间 编译安装make makemenuconfig这是带有图形化界面的配置命令，在这里面可以定制很多功能。常见的是定制内核版本，或者开启ntfs的功能。 内核版本在general setup里面，找到local version -append to kernel release ntfs在file-systems下面，很下面的位置，找到DOS/FAT/NT Filesystems，进入后用M键启用NTFS，用模块的方式，并在下面的NTFS write support 那里用y键启用 然后 保存退出 如果想用默认配置，可以直接方向键选择save，然后exit。 刚开始使用这个命令可能会一直报错，解决的基本原则是提示缺少什么包 就在这个包的名字后面加上-devel，然后用dnf安装（其他版本也一样，只要换一下包管理器名） 缺少ncurses-devel包dnf install ncurses-devel 缺少flex包dnf install flex 缺少bison包dnf install bison 报错：You are building kernel with non-retpoline compiler.应该升级GCC了，刚开始一直卡在这，网上也没发现non-retpoline是什么鬼，后来才发现是gcc版本太低，可能我刚装的虚拟机，没升级… dnf update gcc 缺少libelf-dev, libelf-devel or elfutils-libelf-devel报错：error: Cannot generate ORC metadata for CONFIG_UNWINDER_ORC=y, please install libelf-dev, libelf-devel or elfutils-libelf-devel 这个直接安装会发现源里面没有，可以选择rpm包安装,也可以： dnf install binutils gcc make patch libgomp glibc-headers glibc-devel kernel-headers kernel-devel dkms 这也是百度到的办法…当时都惊了，源里面居然都没有… 这里在装dkms,kernel-devel,patch的时候，安装了elfutils-libelf-devel和zlib-devel依赖 缺少openssl报错:scripts/sign-file.c:25:10: fatal error: openssl/opensslv.h: No such file or directory include 这里dnf install openssl发现已经安装了，很奇怪，后来发现libssl-devel在redhat系这里叫openssl-devel 所以dnf install openssl-devel 如果是debian系的，应该是安装openss和libssl-devel make mrproper清除编译过程中产生的所有中间文件 假如你之前也编译过内核，而你没有用此命令去清除之前编译产生的.o文件，那么，在make的时候，可能就会产生干扰。 清除之后要重新make menuconfig 生成.config文件 make -j8-j是代表编译时用几个线程，这里开了8个线程来编译，不然太慢了。 make modules_install安装内核模块，这里比较快，一会会就好了，安装完后可以看到/lib/modules目录下就会出现新的内核。 make install安装bzImage为/boot/vmlinuz-VERSION-RELEASE，并生成initramfs文件使用ls /boot就可以查看新生成的文件，注意以安装的版本结尾的文件就好 查看grub.cfg, ls /boot/grub2, 应该就有grub.cfg引导文件了 重启这时候应该就可以在启动项发现新的内核了 删除旧内核 删除/lib/modules/目录下不需要的内核库文件 删除/usr/src/linux/目录下不需要的内核源码 删除/boot目录下启动的内核和内核映像文件 更改grub的配置文件，删除不需要的内核启动列表 这时候内核编译就结束了，还是挺耗时间的，特别是编译的时候。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cannot start gnome-tweaks]]></title>
    <url>%2F2019%2F03%2F20%2Fcannot-start-gnome-tweaks%2F</url>
    <content type="text"><![CDATA[今天在用Gnome-tweaks的时候发现打不开了???很莫名其妙,怀疑是滚动更新滚炸了。bing了一下在stackoverflow上找到了解决办法。 无法打开gnome-tweaks报错信息12345[sudo] password for root: Traceback (most recent call last): File &quot;/usr/bin/gnome-tweaks&quot;, line 13, in &lt;module&gt; import giModuleNotFoundError: No module named &apos;gi&apos; 解决办法参照了stackoverflow 步骤如下 在命令行进入python2、python3测试import gi，看有没有gi这个包 发现只有python3.7下面有这个包 $ sudo vim /usr/bin/gnome-tweaks 编辑第一行，把#!/usr/bin/env python改成#!/usr/bin/python 我这里python-&gt;python3.7,如果不是的话要写成!/usr/bin/python3.7 重新运行gnome-tweaks 注意不要带sudo,我这里sudo出现了如下报错12No protocol specifiedUnable to init server: Could not connect: Connection refused OK，问题解决]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Daily</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpaceVim中自定义Markdown相关快捷键]]></title>
    <url>%2F2019%2F03%2F18%2FSpaceVim%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89Markdown%E7%9B%B8%E5%85%B3%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[SpaceVim对Markdown的注释居然是html版本的，预览的时候还是可以显示，百度了才知道用[[//]]:#()的方法，就想着弄了快捷键，又是挖坑踩坑… Markdown注释方法html标签注意：需要在前面空一行1234&lt;div style=&apos;display: none&apos;&gt;哈哈我是注释，不会在浏览器中显示。我也是注释。&lt;/div&gt; html注释1234567&lt;!--哈哈我是注释，不会在浏览器中显示。--&gt;&lt;!--哈哈我是多段注释，不会在浏览器中显示。--&gt; 利用Markdown原理利用markdown的解析原理来实现注释的。一般有的markdown解析器不支持上面的注释方法，这个时候就可以用此方法。 12345[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)[//]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)[//]: # (哈哈我是注释，不会在浏览器中显示。) 其中，这种方法最稳定，适用性最强：1[//]: # (哈哈我是注释，不会在浏览器中显示。) 还看到这种最可爱，超级无敌萌的：1[^_^]: # (哈哈我是注释，不会在浏览器中显示。) SpaceVim中自定义快捷键下面是SpaceVim官网的说明 启动函数由于 toml 配置的局限性，SpaceVim 提供了两种启动函数 bootstrap_before 和 bootstrap_after，在该函数内可以使用 Vim script。可通过 ~/.SpaceVim.d/init.toml 的 [options] 片段中的这两个选项 bootstrap_before 和 bootstrap_after 来指定函数名称，例如： [options] bootstrap_before = “myspacevim#before” bootstrap_after = “myspacevim#after”启动函数文件应放置在 Vim &amp;runtimepath 的 autoload 文件夹内。例如： 文件名：~/.SpaceVim.d/autoload/myspacevim.vim function! myspacevim#before() abort let g:neomake_enabled_c_makers = [‘clang’] nnoremap jk endfunction function! myspacevim#after() abort iunmap jkendfunction函数 bootstrap_before 将在读取用户配置后执行，而函数 bootstrap_after 将在 VimEnter autocmd 之后执行。 如果你需要添加自定义以 SPC 为前缀的快捷键，你需要使用 bootstrap function，在其中加入： function! myspacevim#before() abort call SpaceVim#custom#SPCGroupName([‘G’], ‘+TestGroup’) call SpaceVim#custom#SPC(‘nore’, [‘G’, ‘t’], ‘echom 1’, ‘echomessage 1’, 1)endfunction vim中定义快捷键相关说明autocmd autocmd是一个十分强大的命令，在.vimrc中配置以后在用vim创建文件的时候就会自动执行一些命令 键盘映射具体参照Vim中的键映射 使用map命令，可以将键盘上的某个按键与Vim的命令绑定起来。例如使用以下命令，可以通过F5键将单词用花括号括起来： :map i{ea} 其中：i{将插入字符{，然后使用Esc退回到命令状态；接着用e移到单词结尾，a}增加字符}，最后退至命令状态。 在执行以上命令之后，光标定位在一个单词上（例如amount），按下F5键，这时字符就会变成{amount}的形式。 不同模式下的键盘映射使用下表中不同形式的map命令，可以针对特定的模式设置键盘映射： Command Normal Visual Operator Pending 插入模式 命令行模式 命令 常规模式 可视化模式 运算符模式 Insert Only Command Line :map y y y :nmap y :vmap y :omap y :map! y y :imap y :cmap y SpaceVim中进行自定义SPC开头的键映射下面是将SPC-v-c定义为Markdown文本中行注释，SPC-v-u对Markdown进行行取消注释，SPC-v-p进行Markdown文件样式预览. ~/.SpaceVim.d/autoload/myspacevim.vim 123456789101112131415function! myspacevim#before() abort set wrap &quot;v开头为自定义快捷键 call SpaceVim#custom#SPCGroupName([&apos;v&apos;], &apos;+Personal Key Bindings&apos;) &quot;使用v-p进行markdown网页预览 autocmd BufRead,BufNewFile *.&#123;md,mdown,mkd,mkdn,markdown,mdwn&#125; call SpaceVim#custom#SPC(&apos;nore&apos;, [&apos;v&apos;, &apos;p&apos;], &apos;:!google-chrome-stable &quot;%:p&quot;&apos;, &apos;Markdown-Previews&apos;,1) &quot;对markdown进行行注释，在行首插入[//]:#(,在行尾插入右括号),命令是&apos;I[//]:#(&lt;Esc&gt;A)&lt;Esc&gt;&apos;,注意这里的&lt;Esc&gt;要用Ctrl-Esc来完成 call SpaceVim#custom#SPC(&apos;nore&apos;, [&apos;v&apos;, &apos;c&apos;], &apos;I[//]:#(&lt;Esc&gt;A)&lt;Esc&gt;&apos;, &apos;Markdown-comment one line&apos;, 0) &quot;对markdown取消行注释,在行首删除[//]:#(,在行尾删除右括号) call SpaceVim#custom#SPC(&apos;nore&apos;, [&apos;v&apos;, &apos;u&apos;], &apos;07x$x&apos;, &apos;Markdown-uncomment one line&apos;, 0)endfunction ———————-其实…我就想弄两个快捷键…]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>SpaceVim</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tornado中的异步]]></title>
    <url>%2F2019%2F03%2F17%2FTornado%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[Tornado中的异步概述因为epoll主要用来解决网络IO的并发问题，所以Tornado中的异步也主要体现在网络的IO异步上，即异步web tornado.httpclient.AsyncHttpClinet 是Tornado提供的异步web请求客户端，用来进行异步web请求 from tornado.httpclient import AsyncHttpClinet fetch(request, callback = None) 此函数用于执行一个Web请求，并异步响应返回一个tornado.httpclient.HttpResponse request可以是一个URL，也可以是一个Tornado.httpclient.HttpResponse对象,如果插入的是url，会自动生成一个request对象 HTTPRequest HTTP请求类，该类的构造函数可以接收参数 参数: url: 字符串类型，要访问的网址，必传 method：字符串类型，http请求方式 headers：字典或者HTTPHeaders，附加的协议头 body: HTTP请求体 HTTPResponse HTTP响应类 属性 code: 状态码 reason： 状态码的描述 body： 相应的数据 error： 是否有异常 @tornado.web.asynchronous装饰器 不关闭通信的通道 实际操作发现无法使用这个装饰器 示例回调函数实现的异步Handler代码1234567891011121314151617181920class StudentsHandler(RequestHandler): def on_response(self, response): if response.error: self.send_error(500) else: data = json.loads(response.body) # 这里本身无法write,要打开通道，用asynchronous装饰器 self.write(data) self.finish() # 不关闭通信的通道 # @tornado.web.asynchronous # 实操发现用不了这个装饰器 def get(self, *args, **kwargs): url = &quot;http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&amp;t=&amp;market=360zhushou&amp;client=android&amp;appname=budejie&amp;device=&amp;jdk=1&amp;ver=8.0.1&amp;udid=&amp;from=android&quot; # 创建客户端 client = AsyncHTTPClient() # on_response是回调函数,如果请求成功，就进行on_response回调函数 client.fetch(url, self.on_response) # self.write(&quot;OK&quot;) 协程实现的异步Handler代码123456789101112class Students2Handler(RequestHandler): @tornado.gen.coroutine def get(self, *args, **kwargs): url = &quot;http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&amp;t=&amp;market=360zhushou&amp;client=android&amp;appname=budejie&amp;device=&amp;jdk=1&amp;ver=8.0.1&amp;udid=&amp;from=android&quot; client = AsyncHTTPClient() # 耗时操作挂起 res = yield client.fetch(url) if res.error: self.send_error(500) else: data = json.loads(res.body) self.write(data) 协程异步并将异步web请求单独出来Handler代码 class Students3Handler(RequestHandler): # 简化get函数 @tornado.gen.coroutine def get(self, *args, **kwargs): res = yield self.getData() self.write(res) # 这里也要加装饰器，这里也是耗时操作 @tornado.gen.coroutine def getData(self): url = &quot;http://s.budejie.com/v2/topic/list/10/0-0/budejie-android-8.0.1/0-25.json?uid=&amp;t=&amp;market=360zhushou&amp;client=android&amp;appname=budejie&amp;device=&amp;jdk=1&amp;ver=8.0.1&amp;udid=&amp;from=android&quot; client = AsyncHTTPClient() # 耗时操作 res = yield client.fetch(url) if res.error: # 表示没有结果 ret = {&quot;ret&quot;: 0} else: ret = json.loads(res.body) # 相当于gen.send()函数 raise tornado.gen.Return(ret)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Tornado</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python中的异步]]></title>
    <url>%2F2019%2F03%2F17%2FPython%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[学Tornado的异步之前学了下Python的同步和异步机制，下面是三种实现Python中同步的方法。主要是用yield和装饰器以及threading模块实现。 python中异步的理解同步 按部就班的依次执行如果在请求中添加一个耗时操作，则必须等耗时操作结束才继续下去一般不会用同步 异步概述对于耗时的操作，一般会交给另一个线程处理，我们继续向下执行，当别人结束耗时操作后再将结果返回给我们 回调函数实现异步123456789101112131415161718192021222324252627282930313233343536373839404142import timeimport threading# Tornado中不用我们写这个函数# handler获取数据（数据库、其他服务器、循环耗时）def longIo(callback): def run(cb): print("开始耗时操作") time.sleep(5) print("结束耗时操作") #耗时操作结束执行回调函数 cb(" 我是返回的数据") #创建一个线程，处理耗时操作threading传参args=() threading.Thread(target=run,args=(callback,)).start()# 函数（回调函数）def finish(data): print("开始处理回调函数") print("接收到longIo的相应数据:",data) print("结束处理回调函数")# 一个客户的请求def reqA(): print("开始处理reqA") longIo(finish) print("结束处理reqA")def reqB(): print("开始处理reqB") longIo(finish) print("结束处理reqB")#Tornado服务def main(): reqA() reqB() while 1: time.sleep(0.1) passif __name__=='__main__': main() 协程实现异步版本1123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import time# 全局变量生成器gen = Nonedef longIo(callback): def run(cb): print("开始耗时操作") time.sleep(5) try: 引进全局变量并且用生成器回发数据 global gen gen.send("我是返回的数据") except StopIteration as e: pass print("结束耗时操作") #创建一个线程，处理耗时操作,不会影响A和B threading.Thread(target=run).start()# 一个客户的请求def reqA(): print("开始处理reqA") # 接受返回结果 # 此处相当于挂起,执行longIo,不影响执行reqB res = yield longIo() print("接收longIo的相应数据:",res) print("结束处理reqA")def reqB(): print("开始处理reqB") time.sleep(2) print("结束处理reqB")#Tornado服务def main(): # 创建一个reqA的生成器 global gen gen = reqA() # 在这里真正执行reqA next(gen) reqB() while 1: time.sleep(0.1) passif __name__=='__main__': main() 版本2问题 版本1中调用reqA的时候不能将其视为一个简单的函数，而是要作为生成器来对待很明显要在主函数中要用三行调用reqA，只要用一行调用reqB。 解决办法 给reqA添加一个装饰器 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import time# 全局变量生成器gendef longIo(callback): def run(cb): print("开始耗时操作") time.sleep(5) try: 引进全局变量并且用生成器回发数据 global gen gen.send("我是返回的数据") except StopIteration as e: pass print("结束耗时操作") #创建一个线程，处理耗时操作,不会影响A和B threading.Thread(target=run).start()# 装饰器def genCoroutine(func): def wrapper(*args, **kwargs): global gen gen = func(*args, **kwargs) next(gen) # 返回内部函数的时候不可以加括号，这里不可以加括号 return wrapper # 一个客户的请求@genCoroutinedef reqA(): print("开始处理reqA") # 接受返回结果 # 此处相当于挂起,执行longIo,不影响执行reqB res = yield longIo() print("接收longIo的相应数据:",res) print("结束处理reqA")def reqB(): print("开始处理reqB") time.sleep(2) print("结束处理reqB")#Tornado服务def main(): reqA() reqB() while 1: time.sleep(0.1) passif __name__=='__main__': main() 版本3问题 版本2中存在一个全局变量gen，需要消除解决办法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import time# 装饰器def genCoroutine(func): def wrapper(*args, **kwargs): #reqA的生成器 gen1 = func() #longIo的生成器 gen2 = next(gen1) def run(g): #gen2,即longIo的返回数据 res = next(g) try: gen1.send(res)#返回给reqA数据 except StopIteration as e: pass threading.Thread(target=run,args=(gen2,)).start() # 返回内部函数的时候不可以加括号，这里不可以加括号 return wrapper #这次在这里不管线程了def longIo(callback): print("开始耗时操作") time.sleep(5) print("结束耗时操作") #要返回数据，挂起 yield "我是返回的数据"# 一个客户的请求@genCoroutinedef reqA(): print("开始处理reqA") # 接受返回结果 # 此处相当于挂起,执行longIo,不影响执行reqB res = yield longIo() print("接收longIo的相应数据:",res) print("结束处理reqA")def reqB(): print("开始处理reqB") time.sleep(2) print("结束处理reqB")#Tornado服务def main(): reqA() reqB() while 1: time.sleep(0.1) passif __name__=='__main__': main()]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习概念整理]]></title>
    <url>%2F2018%2F10%2F13%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E5%BF%B5%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[记录一些学习过程中遇到的基础概念，来源《机器学习导论》，《机器学习》——周志华，《白话大数据和机器学习》，《统计学习方法》——李航等，不是很全，等以后学习的深入待补充。 数据和信息 信息: 香农指出是”信息是用来消除随机不定性的东西”,就是那些把我们不清楚的描述,”信息是被消除的不确定性”。 算法: 简单理解为计算的方法和技巧，也可以是解决问题的办法 信息量: 一种信息数量化度量的规则，I=log_2m(m中情况产生概率均等) 先验概率: 事件按照常理，一般性规律发生的概率 香农公式: C = B * log_2(1+S/N),B=2H,H为信道带宽,S为信号功率,N为噪声功率 信息熵: 信息的杂乱程度的量化描述,H(x)=-sum_1^np(x_i)log_2P(x_i),i=1,2… 熵: 混乱程度的描述，越有序，熵越低，反之越高 回归和聚类 回归: 从大量的函数结果和自变量反推回函数表达式的过程就是回归 过拟合: 一般是拟合过程中模型描述的太复杂，一般参数繁多，计算逻辑多 欠拟合: 一般是操作不当产生的误差e分布太散或者太大的情况 无分类的概念]]></content>
      <categories>
        <category>MachineLearning</category>
      </categories>
      <tags>
        <tag>MachineLearning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACM-2017WF-F-Posterize]]></title>
    <url>%2F2018%2F09%2F27%2FACM-2017WF-F-Posterize%2F</url>
    <content type="text"><![CDATA[算法课居然直接安排了一个ACM-WF的题目…弄了半天弄懂了，记笔记记笔记! ACM-ICPC World Finals 2017 F.Posterize DP原题题意 Pixels in a digital picture can be represented with three integers in the range 00 to 255255 that indicate the intensity of the red, green, and blue colors. To compress an image or to create an artistic effect, many photo-editing tools include a “posterize” operation which works as follows. Each color channel is examined separately; this problem focuses only on the red channel. Rather than allow all integers from 00 to 255255 for the red channel, a posterized image allows at most kk integers from this range. Each pixel’s original red intensity is replaced with the nearest of the allowed integers. The photo-editing tool selects a set of kk integers that minimizes the sum of the squared errors introduced across all pixels in the original image. If there are nn pixels that have original red values r1,…,rnr1,…,rn, and kk allowed integers v1,…,vkv1,…,vk, the sum of squared errors is defined as ∑i=1nmin1≤j≤k(ri−vj)2.∑i=1nmin1≤j≤k(ri−vj)2. Your task is to compute the minimum achievable sum of squared errors, given parameter kk and a description of the red intensities of an image’s pixels. 数字图像的像素可以用三个在0到255之间的整数表示,它们分别表示红色、绿色和蓝色的强度。 为了压缩图片或是为了生艺术效果,许多图像编辑工具收录了如下所述的”色调分离”操作。 每个颜色通道会分别考虑,本题只考虑红色通道的情况。 不同于在红色通道使用0到255之间全部的整数,一张色调分离后的图片只会使用这些数字里至多 k种整数。 每个像素原来的红色强度会被替换成最相近的可用强度。 图像编辑工具会选择k个整数来最小化替换过程引起的平方误差之和。 假设原图有n个像素,它们的红色取值是r1,···,rn,而 k 种可用整数为v1,···,vk ,那么平方误差之和被定义为 ∑i=1nmin1≤j≤k(ri−vj)2.∑i=1nmin1≤j≤k(ri−vj)2. 你的任务是计算可以实现的最小平方误差之和,参数k和图片的红色强度会给出。 InputThe first line of the input contains two integers dd (1≤d≤2561≤d≤256), the number of distinct red values that occur in the original image, and kk (1≤k≤d1≤k≤d), the number of distinct red values allowed in the posterized image. The remaining dd lines indicate the number of pixels of the image having various red values. Each such line contains two integers rr (0≤r≤2550≤r≤255) and pp (1≤p≤2261≤p≤226), where rr is a red intensity value and pp is the number of pixels having red intensity rr. Those dd lines are given in increasing order of red value. 第一行包含两个整数d(1≤d≤256)和k(1≤k≤d)分别表示原图中不同的红色强度有多少种,色调分离后可以使用的红色强度有多少种。接下来d行描述了每种红色强度在原图中占据的像素点数量。每行包含两个整数r(0≤r≤255)和p(1≤p≤226)这里r是一种红色强度的取值而p是这种取值对应的像素点数量。这d行信息按照红色强度取值升序给出。 OutputDisplay the sum of the squared errors for an optimally chosen set of kk allowed integer values. 输出最优的 k 种可选取值对应的平方误差之和。 Sample Input 1 Sample Output 1 2 1 50 20000 150 10000 66670000 Sample Input 2 Sample Output 2 2 2 50 20000 150 10000 0 Sample Input 3 Sample Output 3 4 2 0 30000 25 30000 50 30000 255 30000 37500000 思路 主要是dp,记忆化搜索＋剪枝,看后面的代码注释和题解 题目转化题意有256个位置，有d个位置上有人（每个位置上可能不止一个人），你可以在k个位置上插旗（每个位置上至多一面旗子）， 每个人都会走到离自己最近的旗子，求所有人走的距离的平方和的最小值。 题解要解决这个问题，我们可以建立一个二维数组f[i][j]，（j&lt;=i），表示前i个位置，放了j个旗子，其中第i个位置一定放了旗子，前i个位置上的所有人走到旗子上的最小距离平方和。 如果我们假设第i个位置上的旗子是k个旗子中的最后一个（即第i个位置后面没有旗子），那么第i个位置后面的人只能全部走到第i个位置上，所以把_f[i][j]_加上i位置后面的人走到i位置的距离平方和就可以得到所有人走的距离平方和。 因此我们可以枚举最后一个旗子插的位置i，将_f[i][j_]加上i后面的人走到i位置的距离平方和，取最小值，即为答案。 f[i][j]数组的建立我们可以用下面的公式来计算：f[i][j]=min{f[m][j-1]+w[m][i]},（j-1&lt;=m&lt; i)，其中w[m][i] 表示m~i这一段只有m和i位置放了旗子，这一段上的人走的距离平方和。 由于第i个位置上固定了一面旗子，我们可以考虑另外j-1面旗子的位置。 若j-1面旗子在前m个位置（可以假设第m个位置上一定放旗子），那么f[i][j]可以分解成两段计算， 一段是1~m位置，放了j-1个旗子，其中第m个位置一定放了旗子，这就递归成了f[m][j-1]； 另一段是m+1~i位置，只有m和i位置放了旗子，这一段上的人只能走到m和i，即w[m][i]。 所以我们只要枚举m的值，取f[m][j-1]+w[m][i]的最小值，就可以得出f[i][j]的值。 下面给出一个f[i][j]的实例：考虑f[8][3]，前8个位置，放了3个旗子，其中第3个位置一定放了旗子。 剩余的2面旗子可能在前2/3/4/5/6/7个位置上，由此枚举出所有情况： 剩余的2面旗子在： 前2个位置：f[2][2]+w[2][8] 前3个位置：f[3][2]+w[3][8] 前4个位置：f[4][2]+w[4][8] 前5个位置：f[5][2]+w[5][8] 前6个位置：f[6][2]+w[6][8] 前7个位置：f[7][2]+w[7][8] 取出这些值中的最小值，即得到f[8][3]的值。 至于w[m][i]的建立较为简单，由于只有m和i位置放了旗子，m+1~i位置上的人只能就近走到m或i位置上， 我们可以求出m和i的中值，前一半的人走到m，后一半的人走到i，求出距离平方和即可。 代码参考123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;cstdio&gt;#include &lt;cstring&gt;#define N 260#define ll long long//读数据,返回一个整数inline int read()&#123; int x=0,f=1; char ch=getchar(); //判断是否有符号 while(ch&lt;'0'||ch&gt;'9')&#123;if(ch=='-')f=-1;ch=getchar();&#125; //按位读取组成整数 while(ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-'0',ch=getchar(); return x*f;&#125;//一共n个位置，kk个旗子,a[N]表示每个位置的人数int n,kk,a[N];//f[i][j]表示前i个位置，放了j个旗子，其中第i个位置一定放了旗子的最小平方误差ll w[N][N],f[N][N];inline ll min(ll x,ll y)&#123;return x&lt;y?x:y;&#125;int main()&#123; //freopen("a.in","r",stdin); n=read(); kk=read(); //旗子数不可以比位置数多 if(kk&gt;=n)&#123; puts("0"); return 0; &#125; //读取每个位置的人数 for(int i=1;i&lt;=n;++i)&#123; int x=read();a[x+1]=read(); &#125; //建立w[i][j],i是第一个旗子位置,j是第二个旗子的位置 for(int i=1;i&lt;=256;++i) //i~j这一段只在i和j位置放旗子的平方误差 for(int j=i+2;j&lt;=256;++j)&#123; int mid=i+j&gt;&gt;1; //计算i到j之间所有的位置平方和 for(int q=i+1;q&lt;=j-1;++q)&#123; if(q&gt;mid) w[i][j]+=(ll)(j-q)*(j-q)*a[q]; else w[i][j]+=(ll)(q-i)*(q-i)*a[q]; &#125; &#125; //只放一个旗子的情况,旗子在i处，遍历i之前所有的位置,累加 for(int i=1;i&lt;=256;++i) for(int j=1;j&lt;i;++j) f[i][1]+=(ll)(i-j)*(i-j)*a[j]; //建立f[i][j],j是旗子的数量，从２开始到kk for(int j=2;j&lt;=kk;++j) //i是一共多少个位置，从j到256 for(int i=j;i&lt;=256;++i)&#123; f[i][j]=f[i-1][j-1]; //前j-1个旗子放在[1,m]这里，并且m处有旗子,i处也有旗子,转化成求f[m][j-1]+w[m][i]的最小值 for(int m=j-1;m&lt;i-1;++m) f[i][j]=min(f[i][j],f[m][j-1]+w[m][i]); &#125; ll ans=f[256][kk]; //统计答案，如果最后一个旗子不在最后一个位置，就还需要加上最后一个旗子后面的位置的平方和，枚举最后一个旗子插的位置 //i是最后一个旗子的位置,j是最后一个旗子到最后一个位置的每个位置,tmp是最后这部分的平方和 for(int i=255;i&gt;=kk;--i)&#123; ll tmp=0; for(int j=256;j&gt;i;--j) tmp+=(ll)(j-i)*(j-i)*a[j]; //比较不同位置的平方和，取最小值 ans=min(ans,f[i][kk]+tmp); &#125; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Learning</tag>
        <tag>ACM-ICPC</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy.dot()函数]]></title>
    <url>%2F2018%2F09%2F11%2Fnumpy-dot-%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Numpy numpy(Numerical Python extensions)是一个第三方的Python包，用于科学计算。本文主要讲学习Numpy过程中遇到的一个问题，关于numpy.dot()是怎运算的。 Numpy中多维数组的轴 多维数组可以用numpy包生成，关于多维数组的运算以及定义等自行百度,主要讲多维数组的轴,这也是我学习时不懂的地方。 多维数组的轴(axis)和该数组的size(或者)shape元素对应 。轴数从0开始，如果是二维，０轴是竖行，１轴是横行。具体看代码 12345678910111213141516171819202122232425262728x = np.random.randint(0,5,[3,2,2])print(x)Out: [[[5 2] [4 2]] [[1 3] [2 3]] [[1 1] [0 1]]]x.sum(axis=0)Out: array([[7, 6], [6, 6]])x.sum(axis=1)Out: array([[9, 4], [3, 6], [1, 2]])x.sum(axis=2)Out: array([[7, 6], [4, 5], [2, 1]]) 如果将三维数组的每一个二维看做一个平面（plane，X[0, :, :], X[1, :, :], X[2, :, :]），三维数组即是这些二维平面层叠（stacked）出来的结果。则（axis=0）表示全部平面上的对应位置，（axis=1），每一个平面的每一列，（axis=2），每一个平面的每一行。 numpy.dot() numpy.dot(a,b,out=None) 如果a和b都是一维数组，则进行内积运算 1234567np.dot(3, 4)Out: 12np.dot([2j, 3+3j], [2j, 3j])Out: (-13+9j) 如果都是二维数组，就进行矩阵乘法，推荐a@b 123456a = [[1, 0], [0, 1]]b = [[4, 1], [2, 2]]np.dot(a, b)Out: array([[4, 1], [2, 2]]) 如果其中一个矩阵０秩，即标量，就进行a*b的运算，相乘 如果a是N-D矩阵且b是1-D矩阵,就进行a的最后一个轴上的数据和b相乘并求和 123456789101112a = array([[[ 1., 2., 3., 4.], [ 5., 6., 7., 8.], [ 9., 10., 11., 12.]], [[ 1., 2., 3., 4.], [ 5., 6., 7., 8.], [ 9., 10., 11., 12.]]])b = np.array([1,2,3,4])np.dot(a, b)Out: array([[ 30., 70., 110.], [ 30., 70., 110.]]) 如果都是多维矩阵，则_a的最后一个轴和b的倒数第二个轴上的数据乘积累加_,类似第四种情况dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m]) 12345678a = np.arange(3*4*5*6).reshape((3,4,5,6))b = np.arange(3*4*5*6)[::-1].reshape((5,4,6,3))np.dot(a, b)[2,3,2,1,2,2]Out: 499128sum(a[2,3,2,:] * b[1,2,:,2])Out: 499128 &nbsp;&nbsp;]]></content>
      <categories>
        <category>MachineLearning</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Numpy</tag>
        <tag>MachineLearning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[聚类和K-Means算法]]></title>
    <url>%2F2018%2F09%2F10%2F%E8%81%9A%E7%B1%BB%E5%92%8CK-Means%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[聚类聚类定义 聚类(Clustering)，指的是一种学习方式（操作方式），即把物理或者抽象对象的集合分组为由彼此的对象组成的多个类的分析过程。 聚类属于无监督机器学习，简言之就是把特征形态相同的或者近似的划分在一个概念下，聚集为一组。 聚类在实际的应用中中亦是非常广泛的，如：市场细分（Market segmentation）、社交圈分析（social network analysis）、集群计算（organize computing clusters）、天体数据分析（astronomical data analysis）等 聚类算法分类 主要的聚类主要的聚类算法可以划分为如下几类：划分方法、层次方法、基于密度的方法、基于网格的方法以及基于模型的方法。 每一类中都存在着得到广泛应用的算法，例如：划分方法中的k-means聚类算法、层次方法中的凝聚型层次聚类算法、基于模型方法中的神经网络聚类算法等 但是上述的都是硬聚类，即每一个数据只能被归为一类，还有一种是模糊聚类。 模糊聚类通过隶属函数来确定每个数据隶属于各个簇的程度，而不是将一个数据对象硬性地归类到某一簇中。 常用距离算法欧氏距离 欧氏距离是最直观的距离度量方法，通常就是学过的两点间距离，可以用在多维。 二维平面上点a(x1,y1)与b(x2,y2)间的欧氏距离: d_{12} = \sqrt{(x_1-x_2)^2+(y_1-y_2)^2} 三维空间点a(x1,y1,z1)与b(x2,y2,z2)间的欧氏距离:d{12} = \sqrt{(x_1-x_2)^2+(y_1-y_2)^2+(z_1-z_2)^2} 更高维的计算类似二维三维 曼哈顿距离 不再是两点间连线的那种，是类似九宫格的走法，只能直线和直角拐弯。又叫做“城市街区距离”。 二维平面两点a(x1,y1)与b(x2,y2)间的曼哈顿距离：d_12 = |x_1-x_2|+|y_1-y_2| 三维和其他维类似 除了这两种还有余弦距离和切比雪夫距离等，这里不展开说。采用不同的距离度量方法对结果有很大的影响。 k-means算法 思想大致是: 1. 先随机选k个质心 2. 对每个点计算其到各个质心的距离 3. 选距离最近的，把这个点归为这个质心的一类，形成k个簇 4. 然后对于每个簇，计算其中每个点到质心的平均距离 5. 然后把这个作为这个簇的新的质心,进行第二步 6. 直到簇不怎么发生变化或者达到了预设的最大迭代次数，停止 主要函数如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455//k-means聚类vector&lt;Cluster&gt; k_means(vector&lt;vector&lt;int&gt; &gt;trans,int k,int counts)&#123; vector&lt;Cluster&gt; clusters(k); const int row = trans.size(); const int col = trans[0].size(); //随机初始化聚类中心 srand((int)time(0)); for(int i=0;i&lt;k;i++)&#123; int center = rand()%trans.size(); clusters[i].center=trans[center]; &#125; //迭代counts次 for(int cnt = 0;cnt&lt;counts;cnt++)&#123; //清空样本空间 for(int i=0;i&lt;k;i++) clusters[i].samples.clear(); //计算样本属于的簇 for(int i=0;i&lt;row;i++)&#123; int tmp_center = 0; int minal = cal_distance(trans[i],clusters[tmp_center].center); for(int j=1;j&lt;k;j++)&#123; int distance = cal_distance(trans[i],clusters[j].center); if(distance&lt;minal)&#123; tmp_center = j; minal = distance; &#125; &#125; clusters[tmp_center].samples.push_back(i); &#125; //重新计算簇中心 for(int i=0;i&lt;k;i++)&#123; int sum = 0; for(int m=0;m&lt;trans[0].size();m++)&#123; for(int j=0;j&lt;clusters[i].samples.size();j++)&#123; //cout&lt;&lt;"sum+=: "&lt;&lt;trans[clusters[i].samples[j]][m]; sum+=trans[clusters[i].samples[j]][m]; &#125; clusters[i].center[m]=sum/clusters[i].samples.size(); sum=0; &#125; &#125; &#125; return clusters;&#125; 用了C++作为实现的代码，python的代码可以参考网上的，有很多。计算距离用的是欧式距离。数据可以自己构造尝试。]]></content>
      <categories>
        <category>MachineLearning</category>
      </categories>
      <tags>
        <tag>Learning</tag>
        <tag>Python</tag>
        <tag>MachineLearning</tag>
        <tag>Clustering</tag>
        <tag>K-Means</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fedora搭建LNMP环境]]></title>
    <url>%2F2017%2F08%2F13%2FFedora%E6%90%AD%E5%BB%BALNMP%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[前言woc!因为Algolia文章长度限制…不得不把原本的改成两篇文章…佛了 原本在服务器上一直用的debian系,后来转到本机Fedora搭建环境就蒙了,之前也因为这个花了不少时间,为了把踩过得坑记下来,还是写篇文章。 其实所谓LNMP其实就是指Linux+Nginx+Mysql+PHP,因为Nginx发音问题,有时候也说是LEMP。 下面就是Centos/Fedora 搭建LNMP环境的教程. 操作环境OS: Fedora 25Nginx Version: 1.6.2Mysql Version: MariaDB 10.2PHP Version: PHP7.17 安装Nginx,PHP7.1.7和PHP-FPM切换到root用户sudo -i ## OR ## su - 添加repositories## Remi Dependency on Fedora ## rpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm rpm -Uvh http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm ## The version 25 can be replaced by 26/24 ## rpm -Uvh http://rpms.famillecollet.com/fedora/remi-release-25.rpm 安装Nginx,PHP 7.1.7 and PHP-FPMdnf --enablerepo=remi --enablerepo=remi-php71 install nginx php-fpm php-common 安装模块dnf --enablerepo=remi --enablerepo=remi-php71 install php-opcache php-pecl-apcu php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongodb php-pecl-redis php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml 关于这些模块的介绍可以自己百度,根据自己需要来安装,嫌麻烦的话～直接copy吧～ 关闭httpd(Apache)并打开Nginx,PHP-FPM 关闭Apache systemctl stop httpd.service 打开Nginx systemctl start nginx.service 打开PHP-FPM systemctl start php-fpm.service 设置开机自启Nginx PHP-FPM 关闭httpd(Apache)的开机自启 systemctl disable httpd.service 设置Nginx和PHP-FPM开机自启 systemctl enable nginx.service systemctl enable php-fpm.service 配置Nginx 和PHP-FPM 先做好默认配置的备份 cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf 修改PHP-FPM配置 vim /etc/php-fpm.d/www.conf ## 注释掉新添加一行 ## ;listen = /run/php-fpm/www.sock listen = 127.0.0.1:9000 为你的站点创建相关文件夹 ## 将testsite.local换成你自己的 ## mkdir -p /srv/www/testsite.local/public_html mkdir /srv/www/testsite.local/logs chown -R apache:apache /srv/www/testsite.local mkdir /etc/nginx/sites-available mkdir /etc/nginx/sites-enabled 这里使用apache user group是因为PHP-FPM默认运行apache,并且apache能够进入一些类似httpd这样的目录 在/etc/nginx/nginx.conf文件\”include /etc/nginx/conf.d/*.conf\”这行后面添加一行 include /etc/nginx/sites-enabled/*; 创建testsite.local 文件并配置 ## 这是最基本的配置 ## server { server_name testsite.local; access_log /srv/www/testsite.local/logs/access.log; error_log /srv/www/testsite.local/logs/error.log; root /srv/www/testsite.local/public_html; location / { index index.html index.htm index.php; } location ~ \.php$ { include /etc/nginx/fastcgi_params; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; } } 创建软链接到sites-enabled目录 cd /etc/nginx/sites-enabled/ ln -s /etc/nginx/sites-available/testsite.local systemctl restart nginx.service 将testsite.local添加到/etc/hosts中 127.0.0.1 localhost.localdomain localhost testsite.local 更多的Nginx 和PHP-FPM配置点这里～ 测试是否成功创建/srv/www/testsite.local/public_html/index.php并添加以下内容: 然后访问域名或者服务器ip看是否出现phpinfo的页面。 出现403 forbidden可能是SELinux有问题 chcon -R -t httpd_sys_content_t /srv/www/testsite.local/public_html 远程链接到服务器打开防火墙的80端口 firewall-cmd --get-active-zones firewall-cmd --permanent --zone=public --add-service=http ## OR ## firewall-cmd --permanent --zone=public --add-port=80/tcp systemctl restart firewalld.service 访问域名或者ip试试~ 安装MariaDB这里安装的是MariaDB,而不是Mysql,有如下几个原因 MariaDB本来就是一个Mysql的开源版本 MariaDB和Mysql类似并兼容Mysql Fedora和Centos系列的发行版已经转用MariaDB了 我这里选择安装MariaDB 10.2.7 [stable],具体安装过程如下~ 如果之前安装了Mysql,记得备份你的数据库和配置文件! 如果是从低版本升级的,记得执行mysql_upgrade~ 切换root用户su - ## OR ## sudo -i 添加MariaDB repo现在Fedora 24/25/26 用户都可以直接安装MariaDB 10.1 而不用添加其他的repo来安装~ MariaDB repository configurationtool,这里面有repo,自己选择repo文件安装,上面也有教程~ 更新并安装dnf install mariadb mariadb-server 打开MariaDB并配置自启systemctl start mariadb.service ## use restart after update systemctl enable mariadb.service 进行secure installation/usr/bin/mysql_secure_installation 自己看提示来~第一个没设置密码呢,直接回车,下面的大多数都选Y 如果不想进行secure installation 的话,emmmmm….最好还是做下吧~ 到这里其实已经结束了…233333 连接数据库mysql -u root -p 创建数据库和user## CREATE DATABASE ## MariaDB [(none)]&gt; CREATE DATABASE webdb; ## CREATE USER ## MariaDB [(none)]&gt; CREATE USER &#39;webdb_user&#39;@&#39;10.0.15.25&#39; IDENTIFIED BY &#39;password123&#39;; ## GRANT PERMISSIONS ## MariaDB [(none)]&gt; GRANT ALL ON webdb.* TO &#39;webdb_user&#39;@&#39;10.0.15.25&#39;; ## FLUSH PRIVILEGES, Tell the server to reload the grant tables ## MariaDB [(none)]&gt; FLUSH PRIVILEGES; 确保数据库能远程连接firewall-cmd --get-active-zones ## 应该会输出如下 ## - public - interfaces: wlp1s0 firewall-cmd --permanent --zone=public --add-service=mysql systemctl restart firewalld.service mysql -h 10.0.15.25 -u myusername -p]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS搭建LNMP环境]]></title>
    <url>%2F2017%2F08%2F12%2FCentOS%E6%90%AD%E5%BB%BALNMP%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[前言woc!因为Algolia文章长度限制…不得不把原本的改成两篇文章…佛了 原本在服务器上一直用的debian系,后来转到本机Fedora搭建环境就蒙了,之前也因为这个花了不少时间,为了把踩过得坑记下来,还是写篇文章。 其实所谓LNMP其实就是指Linux+Nginx+Mysql+PHP,因为Nginx发音问题,有时候也说是LEMP。 下面就是Centos/Fedora 搭建LNMP环境的教程. 操作环境OS: Fedora 25Nginx Version: 1.6.2Mysql Version: MariaDB 10.2PHP Version: PHP7.17 安装Nginx,PHP7.1.7和PHP-FPM切换到root用户sudo -i ## OR ## su - 添加repositories## Centos 7 Remi repo ## rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm ## Centos 7 Nginx repo ## vim /etc/yum.repos.d/nginx.repo ## 添加 ## [nginx] name=nginx repo baseurl=http://nginx.org/packages/centos/$releasever/$basearch/ gpgcheck=0 enabled=1 安装Nginx,PHP 7.1.7 and PHP-FPM yum --enablerepo=remi,remi-php71 install nginx php-fpm php-common 安装模块yum --enablerepo=remi,remi-php71 install php-opcache php-pecl-apcu php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongodb php-pecl-redis php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml 关闭httpd(Apache)并打开Nginx,PHP-FPM 关闭Apache /etc/init.d/httpd stop ## OR ## service httpd stop 打开Nginx和PHP-FPM systemctl start nginx.service systemctl start php-fpm.service 设置开机自启Nginx PHP-FPM 关闭httpd(Apache)的开机自启,并设置nginx和php-fpm开机自启 systemctl disable httpd.service systemctl enable nginx.service systemctl enable php-fpm.service 配置Nginx 和PHP-FPM及其他这一段的配置和fedora是一样的,可以不看了~ 先做好默认配置的备份 cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf 修改PHP-FPM配置 vim /etc/php-fpm.d/www.conf ## 注释掉新添加一行 ## ;listen = /run/php-fpm/www.sock listen = 127.0.0.1:9000 为你的站点创建相关文件夹 ## 将testsite.local换成你自己的 ## mkdir -p /srv/www/testsite.local/public_html mkdir /srv/www/testsite.local/logs chown -R apache:apache /srv/www/testsite.local mkdir /etc/nginx/sites-available mkdir /etc/nginx/sites-enabled 在/etc/nginx/nginx.conf文件”include /etc/nginx/conf.d/*.conf”这行后面添加一行 include /etc/nginx/sites-enabled/*; 创建testsite.local 文件并配置 ## 这是最基本的配置 ## server { server_name testsite.local; access_log /srv/www/testsite.local/logs/access.log; error_log /srv/www/testsite.local/logs/error.log; root /srv/www/testsite.local/public_html; location / { index index.html index.htm index.php; } location ~ \.php$ { include /etc/nginx/fastcgi_params; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; } } 创建软链接到sites-enabled目录 cd /etc/nginx/sites-enabled/ ln -s /etc/nginx/sites-available/testsite.local systemctl restart nginx.service 将testsite.local添加到/etc/hosts中 127.0.0.1 localhost.localdomain localhost testsite.local 更多的Nginx 和PHP-FPM配置点这里～ 测试是否成功创建/srv/www/testsite.local/public_html/index.php并添加以下内容: 然后访问域名或者服务器ip看是否出现phpinfo的页面。 出现403 forbidden有可能是SELinux有问题 chcon -R -t httpd_sys_content_t /srv/www/testsite.local/public_html 远程链接到服务器打开防火墙的80端口 firewall-cmd --get-active-zones firewall-cmd --permanent --zone=public --add-service=http ## OR ## firewall-cmd --permanent --zone=public --add-port=80/tcp systemctl restart firewalld.service 安装MariaDB这里安装的是MariaDB,而不是Mysql,有如下几个原因 MariaDB本来就是一个Mysql的开源版本 MariaDB和Mysql类似并兼容Mysql Fedora和Centos系列的发行版已经转用MariaDB了 我这里选择安装MariaDB 10.2.7 [stable],具体安装过程如下~ 如果之前安装了Mysql,记得备份你的数据库和配置文件! 如果是从低版本升级的,记得执行mysql_upgrade~ 切换root用户su - ## OR ## sudo -i 添加MariaDB repo现在Fedora 24/25/26 用户都可以直接安装MariaDB 10.1 而不用添加其他的repo来安装~ MariaDB repository configurationtool,这里面有repo,自己选择repo文件安装,上面也有教程~ yum install MariaDB MariaDB-server 打开MariaDB并配置自启service mysql start ## use restart after update ## OR ## /etc/init.d/mysql start ## use restart after update chkconfig --levels 235 mysql on 进行secure installation/usr/bin/mysql_secure_installation 自己看提示来~第一个没设置密码呢,直接回车,下面的大多数都选Y 如果不想进行secure installation 的话,emmmmm….最好还是做下吧~ 到这里其实已经结束了…233333 连接数据库mysql -u root -p 创建数据库和user## CREATE DATABASE ## MariaDB [(none)]&gt; CREATE DATABASE webdb; ## CREATE USER ## MariaDB [(none)]&gt; CREATE USER &#39;webdb_user&#39;@&#39;10.0.15.25&#39; IDENTIFIED BY &#39;password123&#39;; ## GRANT PERMISSIONS ## MariaDB [(none)]&gt; GRANT ALL ON webdb.* TO &#39;webdb_user&#39;@&#39;10.0.15.25&#39;; ## FLUSH PRIVILEGES, Tell the server to reload the grant tables ## MariaDB [(none)]&gt; FLUSH PRIVILEGES; 确保数据库能远程连接vim /etc/sysconfig/iptables-config ## 添加 ## -A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT ## 重启 ## service iptables restart ## OR ## /etc/init.d/iptables restart]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown学习笔记]]></title>
    <url>%2F2017%2F08%2F02%2FMarkdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言本来博客初建，理应写点文章总结心得，说点自己的想法。但正好这时候又学了Markdown，不如就先写个学习笔记，供自己以后写文参考。 关于博客的搭建和以后的想法,就留着下次吧～ 关于Markdown宗旨和兼容性Markdown目标是实现易读易写，使用其编写的文件可以直接以纯文本发布。Markdown兼容HTML，语法目标是成为一种适用于网络的书写语言。 相比HTML，Markdown是一种书写的格式，而HTML更多是一种发布的格式。在Markdown文件内可以直接用HTML书写，不用额外标注。 Markdown兼容HTML，但是在HTML等区块元素，比如&lt;div&gt;,&lt;table&gt;,&lt;pre&gt;,&lt;p&gt;,等标签，必须在前后加上空行和其他内容隔开，还要求他们的开始和结尾标签，不能用制表符或者空格来缩进。 在HTML区块标签内的Markdown格式语法不会被处理但是在HTML区段标签内，Markdown语法是有效的。比如&lt;span&gt;,&lt;cite&gt;,&lt;del&gt; 特殊字符转换在HTML中，&lt; 和 &amp; 想要显示字符原型需要用实体的形式，&amp;lt 和&amp;amp而在Markdown中，则可以自由书写字符。 注 :在code范围内，&lt; 和 &amp; 都会一定被转换成HTML实体，因此可以更方便的写出HTML code 区块元素段落和换行段落由连续文本行组成，且允许段落内用换行符强迫换行。 如果想插入&lt;br /&gt;，需要在插入处按入两个以上空格然后回车。段落的前后要有一个以上空行，且普通段落不可以用空格或者制表符缩进。 标题支持两种标题的语法，类Setext和atx形式 类Setext类Setext用底线的形式，利用任意数量=（最高阶）和－（第二阶） 栗子 : This is an H1 ============ This is an H2 ------------- AtxAtx形式则是在行首插入一到六个#,对应标题一到六阶12345# H1## H2##### H5 可以选择闭合#，且结尾的#和开头不用一样12345# H1 ### H2 ##### H3 ### 区块引用在每行前面加上&gt;,(可以偷个懒在整个段落的第一行加上&gt;),并且区块引用可以嵌套，只要根据层次加上不同数量的&gt; 栗子 :12345&gt; This is the fiest level of quoting &gt;&gt;&gt; This is nested blokquote&gt;&gt; back to first level 显示为: This is the fiest level of quoting This is nested blokquote back to first level 在引用区块内也可以使用其他Markdown语法， 栗如标题、列表、代码区块 &gt; ## 这是一个标题。 &gt; &gt; 1. 这是第一行列表项。 &gt; 2. 这是第二行列表项。 &gt; &gt; 给出一些例子代码： &gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 显示为: 这是一个标题。 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(&quot;echo $input | $markdown_script&quot;); 列表支持有序列表和无序列表两种 无序列表无序列表使用 + - 作为列表标记，个人偏向－，因为不用按shift 有序列表有序列表则使用数字接着一个英文句点: 1. First one 2. Second one 显示为: First one Second one 使用不同的数字不会有问题，但是看着不舒服，不推荐，还是顺序下来。或者也可以只用一个数字。 栗如 1. First one 1. Second one 1. THird one 列表通常在最左边，但是也可以缩进，最多三个空格，标记后面一定要接上至少一个空格或者制表符如果列表间由空行，Markdown会用\标签将内容裹起来 栗子 ： * Bird * Magic 会被转换成： &gt; &lt;ul&gt; &gt; &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt; &gt; &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt; &gt; &lt;/ul&gt; 显示为: Bird Magic 列表可以包含多个段落，但是记得每个段落都要缩进哦 如果放引用，&gt;也要缩进如果放代码区块，这个区块就要缩进两次如果要在行首输入2017. 这种数字+句点+空白，可以在句点前面加反斜杠，即2017. 代码区块终于到这啦，代码区块最简单了，只要简单的缩进4个空格或者一个tab,或者,```这个标识, 栗子 ： ____printf(“hello world”) printf(“hello world”) ```printf(“hello world”)``` 显示为: printf(&quot;hello world&quot;) markdown 会自动在代码区块外面加上\，而且代码区块里面&amp; &lt; &gt;会自动转成HTML实体，所以可以想怎么写code就怎么写 表格表格对齐方式 1. 居左: :---- 2. 居中: :----: 或者 ----- 3. 居右: ----: 分割线可以在一行中用三个以上的，-，_ 来建立一个分割线。行内不可以用其他东西，可以在 -中间插入空格。 * * * **** --- ___ 显示为: 区段元素链接支持行内式和参考式两种，但都是用[]标记链接文字 行内式在方括号后面接一个()在里面写上网址就行，如果要加title,在后面用单引号、双引号或是括弧把title文字包起来就行 栗子 ： This is [an example](http://example.com/ &quot;Title&quot;) inline link. [This link](http://example.net/) has no title attribute. 如果想要链接到同主机资源，用相对路径 See my [About](/about/) page for details. 参考式参考式是在后面加上另一个[],在里面写上标记 This is [an example][id] reference-style link. 可以在方括号中间加空格。。。最后在文件的任意处，可以是段尾，可以是文件尾，把标记的链接定义出来 [id]: http://example.com/ &quot;Optional Title Here&quot; 要注意的是[]后面有一个:,还有一个以上的空格，id这个标记是不区分大小写的！链接网址可以用&lt;&gt;包起来。 隐式链接隐式链接标记功能可以让你省略号指定的链接标记，这种情况标记会被视为等同于链接文字。隐式链接只要在链接文字后面加上一个空的[] 栗子 ： [Google][] [Google]: http://google.com/ 参考式链接的优点是比较好读，可以将一些标记的元数据移到段落之外，可以是段尾文件尾，这样就可以不让文章的阅读感被打断 强调如果你的 和_ 两边都有空白，就只会被当成普通的 _ 代码如果要标记一小段行内代码，可以用反引号｀把它包起来 Use the `printf()` function. 显示为: Use the printf() function. 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段： ``There is a literal backtick (`) here.`` 显示为: There is a literal backtick (`) here. 代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，酱紫就可以在区段开始就加入一个反引号 A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` 显示为: A single backtick in a code span: ` A backtick-delimited string in a code span: `foo` 图片使用行内式和参考式 行内式![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 参考式![Alt text][id] [id]: url/to/image &quot;Optional title attribute&quot; 这部分和链接是差不多的,但如果想要指定图片的宽高，可以使用普通的&lt;img&gt;标签. 其他自动链接用&lt;&gt;包起来的，都会被自动转成链接 &lt;http://example.com/&gt; 会被转成 &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt; 反斜杠可以用\插入一些在语法中有含义的符号 \ 反斜线 ` 反引号 `* 星号 _ 底线` {} 花括号 [] 方括号 () 括弧 # 井字号 \+ 加号 \- 减号 . 英文句点 ! 惊叹号 上面就是我学[Markdown][]的一些笔记，可能会有缺少的，有看到的可以指正～。]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Learning</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
